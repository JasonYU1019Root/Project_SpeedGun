
SpeedGun_MarkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e934  0800e934  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800e934  0800e934  0001e934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e93c  0800e93c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e93c  0800e93c  0001e93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e940  0800e940  0001e940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800e944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ec4  20000098  0800e9dc  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f5c  0800e9dc  00022f5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000350e9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000625f  00000000  00000000  000551b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024f8  00000000  00000000  0005b410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002208  00000000  00000000  0005d908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003290b  00000000  00000000  0005fb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025471  00000000  00000000  0009241b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011f8c9  00000000  00000000  000b788c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d7155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a390  00000000  00000000  001d71d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e828 	.word	0x0800e828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800e828 	.word	0x0800e828

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
	ADC_MultiModeTypeDef multimode = { 0 };
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <MX_ADC1_Init+0xe4>)
 8000d82:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000dde:	4817      	ldr	r0, [pc, #92]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000de0:	f001 fdcc 	bl	800297c <HAL_ADC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0x92>
		Error_Handler();
 8000dea:	f000 fd0a 	bl	8001802 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dfa:	f003 f8f5 	bl	8003fe8 <HAL_ADCEx_MultiModeConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000e04:	f000 fcfd 	bl	8001802 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_ADC1_Init+0xe8>)
 8000e0a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e14:	237f      	movs	r3, #127	; 0x7f
 8000e16:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000e26:	f002 faa5 	bl	8003374 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000e30:	f000 fce7 	bl	8001802 <Error_Handler>
	}

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200004d4 	.word	0x200004d4
 8000e40:	50040000 	.word	0x50040000
 8000e44:	1d500080 	.word	0x1d500080

08000e48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_ADC_MspInit+0xb4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d144      	bne.n	8000ef4 <HAL_ADC_MspInit+0xac>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC_CLK_ENABLE();
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
		/**ADC1 GPIO Configuration
		 PC0     ------> ADC1_IN1
		 PA2     ------> ADC1_IN7
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <HAL_ADC_MspInit+0xbc>)
 8000ec6:	f003 fc73 	bl	80047b0 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f003 fc66 	bl	80047b0 <HAL_GPIO_Init>

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f003 fbea 	bl	80046c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f003 fc03 	bl	80046fa <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	50040000 	.word	0x50040000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000800 	.word	0x48000800

08000f08 <HAL_ADC_ConvCpltCallback>:
		/* USER CODE END ADC1_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 8000f10:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f12:	f001 ffb9 	bl	8002e88 <HAL_ADC_Stop_IT>
	int AD_Value = HAL_ADC_GetValue(&hadc1);
 8000f16:	4824      	ldr	r0, [pc, #144]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f18:	f001 fff1 	bl	8002efe <HAL_ADC_GetValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60fb      	str	r3, [r7, #12]
	Value_1 = (int) (AD_Value * 3.3 * 1000 / 4096);
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff faf7 	bl	8000514 <__aeabi_i2d>
 8000f26:	a31e      	add	r3, pc, #120	; (adr r3, 8000fa0 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb5c 	bl	80005e8 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4618      	mov	r0, r3
 8000f36:	4621      	mov	r1, r4
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f3e:	f7ff fb53 	bl	80005e8 <__aeabi_dmul>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f50:	f7ff fc74 	bl	800083c <__aeabi_ddiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	f7ff fd56 	bl	8000a0c <__aeabi_d2iz>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f64:	601a      	str	r2, [r3, #0]
	Value_2[counter_adc++] = Value_1;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	4912      	ldr	r1, [pc, #72]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f6e:	600a      	str	r2, [r1, #0]
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4911      	ldr	r1, [pc, #68]	; (8000fbc <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (counter_adc >= 1024) {
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f82:	db05      	blt.n	8000f90 <HAL_ADC_ConvCpltCallback+0x88>
		counter_adc = 0;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
		flag_adc = 0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f90:	2104      	movs	r1, #4
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f94:	f003 fdcc 	bl	8004b30 <HAL_GPIO_TogglePin>
	return;
 8000f98:	bf00      	nop
}
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	200004d4 	.word	0x200004d4
 8000fac:	408f4000 	.word	0x408f4000
 8000fb0:	40b00000 	.word	0x40b00000
 8000fb4:	200025ec 	.word	0x200025ec
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200005ec 	.word	0x200005ec
 8000fc0:	200000b4 	.word	0x200000b4
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fd0:	1d39      	adds	r1, r7, #4
 8000fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <__io_putchar+0x20>)
 8000fda:	f008 fd97 	bl	8009b0c <HAL_UART_Transmit>
    return ch;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20002838 	.word	0x20002838

08000fec <MX_COMP2_Init>:

COMP_HandleTypeDef hcomp2;

/* COMP2 init function */
void MX_COMP2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  hcomp2.Instance = COMP2;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_COMP2_Init+0x50>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <MX_COMP2_Init+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_COMP2_Init+0x50>)
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_COMP2_Init+0x58>)
 8000ffa:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_COMP2_Init+0x50>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_COMP2_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_COMP2_Init+0x50>)
 800100a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100e:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_COMP2_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_COMP2_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_COMP2_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_COMP2_Init+0x50>)
 8001024:	2211      	movs	r2, #17
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_COMP2_Init+0x50>)
 800102a:	f003 f947 	bl	80042bc <HAL_COMP_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_COMP2_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 fbe5 	bl	8001802 <Error_Handler>
  }

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000538 	.word	0x20000538
 8001040:	40010204 	.word	0x40010204
 8001044:	00800030 	.word	0x00800030

08001048 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_COMP_MspInit+0x6c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d11f      	bne.n	80010aa <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_COMP_MspInit+0x70>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_COMP_MspInit+0x70>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <HAL_COMP_MspInit+0x70>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB6     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001086:	2303      	movs	r3, #3
 8001088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4619      	mov	r1, r3
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <HAL_COMP_MspInit+0x74>)
 8001096:	f003 fb8b 	bl	80047b0 <HAL_GPIO_Init>

    /* COMP2 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2040      	movs	r0, #64	; 0x40
 80010a0:	f003 fb0f 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 80010a4:	2040      	movs	r0, #64	; 0x40
 80010a6:	f003 fb28 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40010204 	.word	0x40010204
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400

080010c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	4b9c      	ldr	r3, [pc, #624]	; (8001348 <MX_GPIO_Init+0x288>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a9b      	ldr	r2, [pc, #620]	; (8001348 <MX_GPIO_Init+0x288>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b99      	ldr	r3, [pc, #612]	; (8001348 <MX_GPIO_Init+0x288>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b96      	ldr	r3, [pc, #600]	; (8001348 <MX_GPIO_Init+0x288>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a95      	ldr	r2, [pc, #596]	; (8001348 <MX_GPIO_Init+0x288>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b93      	ldr	r3, [pc, #588]	; (8001348 <MX_GPIO_Init+0x288>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b90      	ldr	r3, [pc, #576]	; (8001348 <MX_GPIO_Init+0x288>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a8f      	ldr	r2, [pc, #572]	; (8001348 <MX_GPIO_Init+0x288>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b8d      	ldr	r3, [pc, #564]	; (8001348 <MX_GPIO_Init+0x288>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <MX_GPIO_Init+0x288>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a89      	ldr	r2, [pc, #548]	; (8001348 <MX_GPIO_Init+0x288>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b87      	ldr	r3, [pc, #540]	; (8001348 <MX_GPIO_Init+0x288>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b84      	ldr	r3, [pc, #528]	; (8001348 <MX_GPIO_Init+0x288>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a83      	ldr	r2, [pc, #524]	; (8001348 <MX_GPIO_Init+0x288>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b81      	ldr	r3, [pc, #516]	; (8001348 <MX_GPIO_Init+0x288>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	4b7e      	ldr	r3, [pc, #504]	; (8001348 <MX_GPIO_Init+0x288>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a7d      	ldr	r2, [pc, #500]	; (8001348 <MX_GPIO_Init+0x288>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <MX_GPIO_Init+0x288>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f240 1109 	movw	r1, #265	; 0x109
 800116c:	4877      	ldr	r0, [pc, #476]	; (800134c <MX_GPIO_Init+0x28c>)
 800116e:	f003 fcc7 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	210c      	movs	r1, #12
 8001176:	4876      	ldr	r0, [pc, #472]	; (8001350 <MX_GPIO_Init+0x290>)
 8001178:	f003 fcc2 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	4874      	ldr	r0, [pc, #464]	; (8001354 <MX_GPIO_Init+0x294>)
 8001184:	f003 fcbc 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800118e:	4871      	ldr	r0, [pc, #452]	; (8001354 <MX_GPIO_Init+0x294>)
 8001190:	f003 fcb6 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	486f      	ldr	r0, [pc, #444]	; (8001358 <MX_GPIO_Init+0x298>)
 800119a:	f003 fcb1 	bl	8004b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800119e:	2308      	movs	r3, #8
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4865      	ldr	r0, [pc, #404]	; (800134c <MX_GPIO_Init+0x28c>)
 80011b6:	f003 fafb 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80011ba:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011c0:	4b66      	ldr	r3, [pc, #408]	; (800135c <MX_GPIO_Init+0x29c>)
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4861      	ldr	r0, [pc, #388]	; (8001354 <MX_GPIO_Init+0x294>)
 80011d0:	f003 faee 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_DRDY_Pin;
 80011d4:	2306      	movs	r3, #6
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	485b      	ldr	r0, [pc, #364]	; (8001354 <MX_GPIO_Init+0x294>)
 80011e8:	f003 fae2 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_CENTRE_Pin;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f0:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <MX_GPIO_Init+0x2a0>)
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTRE_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f003 fad5 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8001206:	232a      	movs	r3, #42	; 0x2a
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120e:	2302      	movs	r3, #2
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f003 fac8 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8001220:	2310      	movs	r3, #16
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <MX_GPIO_Init+0x29c>)
 8001226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001236:	f003 fabb 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800123a:	2304      	movs	r3, #4
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	483f      	ldr	r0, [pc, #252]	; (8001350 <MX_GPIO_Init+0x290>)
 8001252:	f003 faad 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4837      	ldr	r0, [pc, #220]	; (800134c <MX_GPIO_Init+0x28c>)
 8001270:	f003 fa9e 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001274:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4831      	ldr	r0, [pc, #196]	; (8001354 <MX_GPIO_Init+0x294>)
 800128e:	f003 fa8f 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 8001292:	2304      	movs	r3, #4
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001296:	4b31      	ldr	r3, [pc, #196]	; (800135c <MX_GPIO_Init+0x29c>)
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	482c      	ldr	r0, [pc, #176]	; (8001358 <MX_GPIO_Init+0x298>)
 80012a6:	f003 fa83 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4825      	ldr	r0, [pc, #148]	; (8001358 <MX_GPIO_Init+0x298>)
 80012c2:	f003 fa75 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80012c6:	2308      	movs	r3, #8
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	481c      	ldr	r0, [pc, #112]	; (8001350 <MX_GPIO_Init+0x290>)
 80012de:	f003 fa67 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_GPIO_Init+0x29c>)
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4816      	ldr	r0, [pc, #88]	; (8001350 <MX_GPIO_Init+0x290>)
 80012f8:	f003 fa5a 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <MX_GPIO_Init+0x28c>)
 8001314:	f003 fa4c 	bl	80047b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_GPIO_Init+0x29c>)
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_GPIO_Init+0x28c>)
 800132c:	f003 fa40 	bl	80047b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2006      	movs	r0, #6
 8001336:	f003 f9c4 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133a:	2006      	movs	r0, #6
 800133c:	f003 f9dd 	bl	80046fa <HAL_NVIC_EnableIRQ>

}
 8001340:	bf00      	nop
 8001342:	3730      	adds	r7, #48	; 0x30
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	48001000 	.word	0x48001000
 8001350:	48000400 	.word	0x48000400
 8001354:	48000800 	.word	0x48000800
 8001358:	48000c00 	.word	0x48000c00
 800135c:	10120000 	.word	0x10120000
 8001360:	10110000 	.word	0x10110000

08001364 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C2_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_I2C2_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <MX_I2C2_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_I2C2_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013a0:	f005 f8a1 	bl	80064e6 <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 fa2a 	bl	8001802 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013b2:	f005 f927 	bl	8006604 <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 fa21 	bl	8001802 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_I2C2_Init+0x74>)
 80013c4:	f005 f969 	bl	800669a <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fa18 	bl	8001802 <Error_Handler>
  }

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000564 	.word	0x20000564
 80013dc:	40005800 	.word	0x40005800
 80013e0:	10909cec 	.word	0x10909cec

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_I2C_MspInit+0x7c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d128      	bne.n	8001458 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_I2C_MspInit+0x80>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_I2C_MspInit+0x80>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_I2C_MspInit+0x80>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800141e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001430:	2304      	movs	r3, #4
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <HAL_I2C_MspInit+0x84>)
 800143c:	f003 f9b8 	bl	80047b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <HAL_I2C_MspInit+0x80>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_I2C_MspInit+0x80>)
 8001446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144a:	6593      	str	r3, [r2, #88]	; 0x58
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_I2C_MspInit+0x80>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40005800 	.word	0x40005800
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400

0800146c <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_LCD_Init+0x68>)
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <MX_LCD_Init+0x6c>)
 8001474:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_LCD_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_LCD_Init+0x68>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_LCD_Init+0x68>)
 8001484:	220c      	movs	r2, #12
 8001486:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_LCD_Init+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_LCD_Init+0x68>)
 8001490:	2200      	movs	r2, #0
 8001492:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_LCD_Init+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_LCD_Init+0x68>)
 800149c:	2200      	movs	r2, #0
 800149e:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_LCD_Init+0x68>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_LCD_Init+0x68>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_LCD_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_LCD_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_LCD_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_LCD_Init+0x68>)
 80014c0:	f005 f938 	bl	8006734 <HAL_LCD_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80014ca:	f000 f99a 	bl	8001802 <Error_Handler>
  }

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200005b0 	.word	0x200005b0
 80014d8:	40002400 	.word	0x40002400

080014dc <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a44      	ldr	r2, [pc, #272]	; (800160c <HAL_LCD_MspInit+0x130>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f040 8081 	bne.w	8001602 <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8001500:	4b43      	ldr	r3, [pc, #268]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b3d      	ldr	r3, [pc, #244]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a3c      	ldr	r2, [pc, #240]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	4a36      	ldr	r2, [pc, #216]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153c:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	4a30      	ldr	r2, [pc, #192]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001554:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_LCD_MspInit+0x134>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_LCD_MspInit+0x134>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8001578:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800157c:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800158a:	230b      	movs	r3, #11
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	481f      	ldr	r0, [pc, #124]	; (8001614 <HAL_LCD_MspInit+0x138>)
 8001596:	f003 f90b 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 800159a:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800159e:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015ac:	230b      	movs	r3, #11
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f003 f8f9 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80015be:	f24f 2333 	movw	r3, #62003	; 0xf233
 80015c2:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015d0:	230b      	movs	r3, #11
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	480f      	ldr	r0, [pc, #60]	; (8001618 <HAL_LCD_MspInit+0x13c>)
 80015dc:	f003 f8e8 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80015e0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80015e4:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015f2:	230b      	movs	r3, #11
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <HAL_LCD_MspInit+0x140>)
 80015fe:	f003 f8d7 	bl	80047b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40002400 	.word	0x40002400
 8001610:	40021000 	.word	0x40021000
 8001614:	48000800 	.word	0x48000800
 8001618:	48000400 	.word	0x48000400
 800161c:	48000c00 	.word	0x48000c00

08001620 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001626:	f000 fece 	bl	80023c6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800162a:	f000 f845 	bl	80016b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800162e:	f7ff fd47 	bl	80010c0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001632:	f7ff fe97 	bl	8001364 <MX_I2C2_Init>
	MX_LCD_Init();
 8001636:	f7ff ff19 	bl	800146c <MX_LCD_Init>
	MX_QUADSPI_Init();
 800163a:	f000 f8e9 	bl	8001810 <MX_QUADSPI_Init>
	MX_SAI1_Init();
 800163e:	f000 f951 	bl	80018e4 <MX_SAI1_Init>
	MX_SPI2_Init();
 8001642:	f000 fa6f 	bl	8001b24 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 8001646:	f000 fe11 	bl	800226c <MX_USART2_UART_Init>
	MX_USB_HOST_Init();
 800164a:	f00b febb 	bl	800d3c4 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 800164e:	f000 fd85 	bl	800215c <MX_TIM3_Init>
	MX_ADC1_Init();
 8001652:	f7ff fb83 	bl	8000d5c <MX_ADC1_Init>
	MX_COMP2_Init();
 8001656:	f7ff fcc9 	bl	8000fec <MX_COMP2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //adc calibration
 800165a:	217f      	movs	r1, #127	; 0x7f
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <main+0x84>)
 800165e:	f002 fc30 	bl	8003ec2 <HAL_ADCEx_Calibration_Start>
	BSP_LCD_GLASS_Init();
 8001662:	f000 fae1 	bl	8001c28 <BSP_LCD_GLASS_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <main+0x88>)
 8001668:	f007 fdb8 	bl	80091dc <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 800166c:	f00b fed0 	bl	800d410 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		if (!flag_adc) {
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <main+0x8c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f9      	bne.n	800166c <main+0x4c>
			for (int i = 0; i < 1024; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	e00a      	b.n	8001694 <main+0x74>
				printf("%d\n", Value_2[i]);
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <main+0x90>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001686:	4619      	mov	r1, r3
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <main+0x94>)
 800168a:	f00c fa91 	bl	800dbb0 <iprintf>
			for (int i = 0; i < 1024; i++)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169a:	dbf0      	blt.n	800167e <main+0x5e>
			flag_adc = 1;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <main+0x8c>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]
		MX_USB_HOST_Process();
 80016a2:	e7e3      	b.n	800166c <main+0x4c>
 80016a4:	200004d4 	.word	0x200004d4
 80016a8:	200027ec 	.word	0x200027ec
 80016ac:	200000b4 	.word	0x200000b4
 80016b0:	200005ec 	.word	0x200005ec
 80016b4:	0800e840 	.word	0x0800e840

080016b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0b8      	sub	sp, #224	; 0xe0
 80016bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c2:	2244      	movs	r2, #68	; 0x44
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00c f9c2 	bl	800da50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80016dc:	463b      	mov	r3, r7
 80016de:	2288      	movs	r2, #136	; 0x88
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00c f9b4 	bl	800da50 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80016e8:	2318      	movs	r3, #24
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001700:	2360      	movs	r3, #96	; 0x60
 8001702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001706:	2302      	movs	r3, #2
 8001708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001718:	2328      	movs	r3, #40	; 0x28
 800171a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800171e:	2307      	movs	r3, #7
 8001720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fa9d 	bl	8006c74 <HAL_RCC_OscConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x8c>
		Error_Handler();
 8001740:	f000 f85f 	bl	8001802 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001744:	230f      	movs	r3, #15
 8001746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174a:	2303      	movs	r3, #3
 800174c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001762:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001766:	2104      	movs	r1, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fe69 	bl	8007440 <HAL_RCC_ClockConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xc0>
		Error_Handler();
 8001774:	f000 f845 	bl	8001802 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <SystemClock_Config+0x12c>)
 800177a:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_I2C2
			| RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001784:	2300      	movs	r3, #0
 8001786:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001788:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800178c:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800178e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001796:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800179a:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800179c:	2301      	movs	r3, #1
 800179e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80017a4:	2318      	movs	r3, #24
 80017a6:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017a8:	2307      	movs	r3, #7
 80017aa:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80017b0:	2308      	movs	r3, #8
 80017b2:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <SystemClock_Config+0x130>)
 80017b6:	61fb      	str	r3, [r7, #28]
			| RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80017b8:	463b      	mov	r3, r7
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 f844 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SystemClock_Config+0x112>
		Error_Handler();
 80017c6:	f000 f81c 	bl	8001802 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017ce:	f005 f92f 	bl	8006a30 <HAL_PWREx_ControlVoltageScaling>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <SystemClock_Config+0x124>
			!= HAL_OK) {
		Error_Handler();
 80017d8:	f000 f813 	bl	8001802 <Error_Handler>
	}
}
 80017dc:	bf00      	nop
 80017de:	37e0      	adds	r7, #224	; 0xe0
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	00026882 	.word	0x00026882
 80017e8:	01110000 	.word	0x01110000

080017ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
	if (JOY_CENTRE_Pin == GPIO_Pin) {
		//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);

	}
	return;
 80017f6:	bf00      	nop
}
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_QUADSPI_Init+0x44>)
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <MX_QUADSPI_Init+0x48>)
 8001818:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_QUADSPI_Init+0x44>)
 800181c:	22ff      	movs	r2, #255	; 0xff
 800181e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_QUADSPI_Init+0x44>)
 8001822:	2201      	movs	r2, #1
 8001824:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_QUADSPI_Init+0x44>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_QUADSPI_Init+0x44>)
 800182e:	2201      	movs	r2, #1
 8001830:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_QUADSPI_Init+0x44>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_QUADSPI_Init+0x44>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_QUADSPI_Init+0x44>)
 8001840:	f005 f95c 	bl	8006afc <HAL_QSPI_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800184a:	f7ff ffda 	bl	8001802 <Error_Handler>
  }

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200025f0 	.word	0x200025f0
 8001858:	a0001000 	.word	0xa0001000

0800185c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_QSPI_MspInit+0x7c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d128      	bne.n	80018d0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 8001880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001882:	4a16      	ldr	r2, [pc, #88]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 8001884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001888:	6513      	str	r3, [r2, #80]	; 0x50
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 800188c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_QSPI_MspInit+0x80>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 80018ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80018b2:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018c0:	230a      	movs	r3, #10
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <HAL_QSPI_MspInit+0x84>)
 80018cc:	f002 ff70 	bl	80047b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	a0001000 	.word	0xa0001000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48001000 	.word	0x48001000

080018e4 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 80018e8:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <MX_SAI1_Init+0x13c>)
 80018ea:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <MX_SAI1_Init+0x140>)
 80018ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80018ee:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <MX_SAI1_Init+0x13c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <MX_SAI1_Init+0x13c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <MX_SAI1_Init+0x13c>)
 80018fc:	2240      	movs	r2, #64	; 0x40
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001902:	2200      	movs	r2, #0
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001906:	4b46      	ldr	r3, [pc, #280]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800190c:	4b44      	ldr	r3, [pc, #272]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800191e:	4b40      	ldr	r3, [pc, #256]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001924:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001926:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <MX_SAI1_Init+0x144>)
 8001928:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001944:	2208      	movs	r2, #8
 8001946:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800194a:	2201      	movs	r2, #1
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001950:	2200      	movs	r2, #0
 8001952:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001956:	2200      	movs	r2, #0
 8001958:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800195c:	2200      	movs	r2, #0
 800195e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001968:	2200      	movs	r2, #0
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800196e:	2201      	movs	r2, #1
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <MX_SAI1_Init+0x13c>)
 8001974:	2200      	movs	r2, #0
 8001976:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001978:	4829      	ldr	r0, [pc, #164]	; (8001a20 <MX_SAI1_Init+0x13c>)
 800197a:	f007 f98b 	bl	8008c94 <HAL_SAI_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001984:	f7ff ff3d 	bl	8001802 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_SAI1_Init+0x148>)
 800198a:	4a29      	ldr	r2, [pc, #164]	; (8001a30 <MX_SAI1_Init+0x14c>)
 800198c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <MX_SAI1_Init+0x148>)
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_SAI1_Init+0x148>)
 8001996:	2203      	movs	r2, #3
 8001998:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800199a:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_SAI1_Init+0x148>)
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019d8:	2208      	movs	r2, #8
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019de:	2201      	movs	r2, #1
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SAI1_Init+0x148>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_SAI1_Init+0x148>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SAI1_Init+0x148>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_SAI1_Init+0x148>)
 8001a0e:	f007 f941 	bl	8008c94 <HAL_SAI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001a18:	f7ff fef3 	bl	8001802 <Error_Handler>
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200026b8 	.word	0x200026b8
 8001a24:	40015404 	.word	0x40015404
 8001a28:	0002ee00 	.word	0x0002ee00
 8001a2c:	20002634 	.word	0x20002634
 8001a30:	40015424 	.word	0x40015424

08001a34 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <HAL_SAI_MspInit+0xdc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d135      	bne.n	8001ab2 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001a46:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10b      	bne.n	8001a66 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a52:	4a31      	ldr	r2, [pc, #196]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001a66:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001a6e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001a70:	2374      	movs	r3, #116	; 0x74
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a80:	230d      	movs	r3, #13
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4824      	ldr	r0, [pc, #144]	; (8001b1c <HAL_SAI_MspInit+0xe8>)
 8001a8c:	f002 fe90 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001aa2:	230d      	movs	r3, #13
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <HAL_SAI_MspInit+0xe8>)
 8001aae:	f002 fe7f 	bl	80047b0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_SAI_MspInit+0xec>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d124      	bne.n	8001b06 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001abc:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ace:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_SAI_MspInit+0xe4>)
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_SAI_MspInit+0xe0>)
 8001ae4:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001af6:	230d      	movs	r3, #13
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <HAL_SAI_MspInit+0xe8>)
 8001b02:	f002 fe55 	bl	80047b0 <HAL_GPIO_Init>

    }
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40015404 	.word	0x40015404
 8001b14:	200000b8 	.word	0x200000b8
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48001000 	.word	0x48001000
 8001b20:	40015424 	.word	0x40015424

08001b24 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <MX_SPI2_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b42:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b7e:	2208      	movs	r2, #8
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_SPI2_Init+0x74>)
 8001b84:	f007 fa30 	bl	8008fe8 <HAL_SPI_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b8e:	f7ff fe38 	bl	8001802 <Error_Handler>
  }

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	2000273c 	.word	0x2000273c
 8001b9c:	40003800 	.word	0x40003800

08001ba0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08a      	sub	sp, #40	; 0x28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_SPI_MspInit+0x7c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d127      	bne.n	8001c12 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_SPI_MspInit+0x80>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001bf2:	231a      	movs	r3, #26
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c02:	2305      	movs	r3, #5
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_SPI_MspInit+0x84>)
 8001c0e:	f002 fdcf 	bl	80047b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40003800 	.word	0x40003800
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48000c00 	.word	0x48000c00

08001c28 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <BSP_LCD_GLASS_Init+0x70>)
 8001c30:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c3a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c3e:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c42:	220c      	movs	r2, #12
 8001c44:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c48:	2240      	movs	r2, #64	; 0x40
 8001c4a:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c54:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001c58:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c82:	f000 f815 	bl	8001cb0 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8001c86:	4803      	ldr	r0, [pc, #12]	; (8001c94 <BSP_LCD_GLASS_Init+0x6c>)
 8001c88:	f004 fd54 	bl	8006734 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8001c8c:	f000 f806 	bl	8001c9c <BSP_LCD_GLASS_Clear>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	200027b0 	.word	0x200027b0
 8001c98:	40002400 	.word	0x40002400

08001c9c <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <BSP_LCD_GLASS_Clear+0x10>)
 8001ca2:	f004 fe07 	bl	80068b4 <HAL_LCD_Clear>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200027b0 	.word	0x200027b0

08001cb0 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0c0      	sub	sp, #256	; 0x100
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001cb8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001cc8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ccc:	2244      	movs	r2, #68	; 0x44
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00b febd 	bl	800da50 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8001cd6:	f107 0320 	add.w	r3, r7, #32
 8001cda:	2288      	movs	r2, #136	; 0x88
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00b feb6 	bl	800da50 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce4:	4b51      	ldr	r3, [pc, #324]	; (8001e2c <LCD_MspInit+0x17c>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <LCD_MspInit+0x17c>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <LCD_MspInit+0x17c>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001d0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 ffae 	bl	8006c74 <HAL_RCC_OscConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d000      	beq.n	8001d20 <LCD_MspInit+0x70>
  {
    while (1);
 8001d1e:	e7fe      	b.n	8001d1e <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d24:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 fd88 	bl	8007848 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d38:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d56:	f043 0302 	orr.w	r3, r3, #2
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6c:	4a2f      	ldr	r2, [pc, #188]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <LCD_MspInit+0x17c>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8001d98:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001d9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001db2:	230b      	movs	r3, #11
 8001db4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001db8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dc2:	f002 fcf5 	bl	80047b0 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001dc6:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001dca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001dce:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4816      	ldr	r0, [pc, #88]	; (8001e30 <LCD_MspInit+0x180>)
 8001dd6:	f002 fceb 	bl	80047b0 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001dda:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001dde:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001de2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001de6:	4619      	mov	r1, r3
 8001de8:	4812      	ldr	r0, [pc, #72]	; (8001e34 <LCD_MspInit+0x184>)
 8001dea:	f002 fce1 	bl	80047b0 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8001dee:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001df2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001df6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <LCD_MspInit+0x188>)
 8001dfe:	f002 fcd7 	bl	80047b0 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8001e02:	2002      	movs	r0, #2
 8001e04:	f000 fb54 	bl	80024b0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <LCD_MspInit+0x17c>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <LCD_MspInit+0x17c>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <LCD_MspInit+0x17c>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
}
 8001e20:	bf00      	nop
 8001e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400
 8001e34:	48000800 	.word	0x48000800
 8001e38:	48000c00 	.word	0x48000c00

08001e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x44>)
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_MspInit+0x44>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_MspInit+0x44>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_MspInit+0x44>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_MspInit+0x44>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	; 0x58
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_MspInit+0x44>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001e72:	2005      	movs	r0, #5
 8001e74:	f002 fc1a 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 faca 	bl	8002470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f002 fe3d 	bl	8004b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <ADC1_2_IRQHandler+0x10>)
 8001ef6:	f001 f80f 	bl	8002f18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200004d4 	.word	0x200004d4

08001f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <TIM3_IRQHandler+0x10>)
 8001f0a:	f007 f9d7 	bl	80092bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200027ec 	.word	0x200027ec

08001f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	static unsigned char uRx_Data[1024] = { 0 };
	static unsigned char *pRx_Data = uRx_Data;
	static unsigned char uLength = 0;

	//rx
	HAL_UART_Receive(&huart2, pRx_Data, 1, 1000);
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <USART2_IRQHandler+0x54>)
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f24:	2201      	movs	r2, #1
 8001f26:	4812      	ldr	r0, [pc, #72]	; (8001f70 <USART2_IRQHandler+0x58>)
 8001f28:	f007 fe83 	bl	8009c32 <HAL_UART_Receive>
	if (*pRx_Data == '\n') {
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <USART2_IRQHandler+0x54>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d10a      	bne.n	8001f4c <USART2_IRQHandler+0x34>
		printf("Msg Rx: %s", uRx_Data);
 8001f36:	490f      	ldr	r1, [pc, #60]	; (8001f74 <USART2_IRQHandler+0x5c>)
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <USART2_IRQHandler+0x60>)
 8001f3a:	f00b fe39 	bl	800dbb0 <iprintf>
		pRx_Data = uRx_Data;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <USART2_IRQHandler+0x54>)
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <USART2_IRQHandler+0x5c>)
 8001f42:	601a      	str	r2, [r3, #0]
		uLength = 0;
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <USART2_IRQHandler+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e00a      	b.n	8001f62 <USART2_IRQHandler+0x4a>
	} else {
		pRx_Data++;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <USART2_IRQHandler+0x54>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <USART2_IRQHandler+0x54>)
 8001f54:	6013      	str	r3, [r2, #0]
		uLength++;
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <USART2_IRQHandler+0x64>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <USART2_IRQHandler+0x64>)
 8001f60:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f62:	4803      	ldr	r0, [pc, #12]	; (8001f70 <USART2_IRQHandler+0x58>)
 8001f64:	f007 ff32 	bl	8009dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	20002838 	.word	0x20002838
 8001f74:	200000bc 	.word	0x200000bc
 8001f78:	0800e844 	.word	0x0800e844
 8001f7c:	200004bc 	.word	0x200004bc

08001f80 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 21 and 22.
  */
void COMP_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp2);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <COMP_IRQHandler+0x10>)
 8001f86:	f002 fa89 	bl	800449c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000538 	.word	0x20000538

08001f94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <OTG_FS_IRQHandler+0x10>)
 8001f9a:	f003 f887 	bl	80050ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20002c94 	.word	0x20002c94

08001fa8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	e00a      	b.n	8001fd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fba:	f3af 8000 	nop.w
 8001fbe:	4601      	mov	r1, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	b2ca      	uxtb	r2, r1
 8001fc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbf0      	blt.n	8001fba <_read+0x12>
	}

return len;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e009      	b.n	8002008 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe ffe3 	bl	8000fc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf1      	blt.n	8001ff4 <_write+0x12>
	}
	return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_close>:

int _close(int file)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	return -1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002042:	605a      	str	r2, [r3, #4]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_isatty>:

int _isatty(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return 1;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
	return 0;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800208c:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <_sbrk+0x5c>)
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <_sbrk+0x60>)
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <_sbrk+0x64>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <_sbrk+0x68>)
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d207      	bcs.n	80020c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b4:	f00b fc92 	bl	800d9dc <__errno>
 80020b8:	4602      	mov	r2, r0
 80020ba:	230c      	movs	r3, #12
 80020bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	e009      	b.n	80020d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <_sbrk+0x64>)
 80020d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020d6:	68fb      	ldr	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20018000 	.word	0x20018000
 80020e4:	00000400 	.word	0x00000400
 80020e8:	200004c0 	.word	0x200004c0
 80020ec:	20002f60 	.word	0x20002f60

080020f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <SystemInit+0x64>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <SystemInit+0x64>)
 80020fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <SystemInit+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <SystemInit+0x68>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <SystemInit+0x68>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <SystemInit+0x68>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <SystemInit+0x68>)
 800211c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002120:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002124:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <SystemInit+0x68>)
 8002128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800212c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SystemInit+0x68>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <SystemInit+0x68>)
 8002134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <SystemInit+0x68>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SystemInit+0x64>)
 8002142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002146:	609a      	str	r2, [r3, #8]
#endif
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	40021000 	.word	0x40021000

0800215c <MX_TIM3_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002162:	f107 0310 	add.w	r3, r7, #16
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]

	htim3.Instance = TIM3;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_TIM3_Init+0x94>)
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <MX_TIM3_Init+0x98>)
 800217e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 39;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_TIM3_Init+0x94>)
 8002182:	2227      	movs	r2, #39	; 0x27
 8002184:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_TIM3_Init+0x94>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_TIM3_Init+0x94>)
 800218e:	2263      	movs	r2, #99	; 0x63
 8002190:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_TIM3_Init+0x94>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_TIM3_Init+0x94>)
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <MX_TIM3_Init+0x94>)
 80021a0:	f006 ffc5 	bl	800912e <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM3_Init+0x52>
		Error_Handler();
 80021aa:	f7ff fb2a 	bl	8001802 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80021b4:	f107 0310 	add.w	r3, r7, #16
 80021b8:	4619      	mov	r1, r3
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <MX_TIM3_Init+0x94>)
 80021bc:	f007 f99d 	bl	80094fa <HAL_TIM_ConfigClockSource>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM3_Init+0x6e>
		Error_Handler();
 80021c6:	f7ff fb1c 	bl	8001802 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021ca:	2320      	movs	r3, #32
 80021cc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <MX_TIM3_Init+0x94>)
 80021d8:	f007 fba4 	bl	8009924 <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 80021e2:	f7ff fb0e 	bl	8001802 <Error_Handler>
	}

}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200027ec 	.word	0x200027ec
 80021f4:	40000400 	.word	0x40000400

080021f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <HAL_TIM_Base_MspInit+0x44>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d113      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6593      	str	r3, [r2, #88]	; 0x58
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 1, 3);
 8002222:	2203      	movs	r2, #3
 8002224:	2101      	movs	r1, #1
 8002226:	201d      	movs	r0, #29
 8002228:	f002 fa4b 	bl	80046c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800222c:	201d      	movs	r0, #29
 800222e:	f002 fa64 	bl	80046fa <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40000400 	.word	0x40000400
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE END TIM3_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	//adc
	if (flag_adc)
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_ADC_Start_IT(&hadc1);
 8002254:	4804      	ldr	r0, [pc, #16]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002256:	f000 fce5 	bl	8002c24 <HAL_ADC_Start_IT>
	return;
 800225a:	bf00      	nop
 800225c:	bf00      	nop
}
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200000b4 	.word	0x200000b4
 8002268:	200004d4 	.word	0x200004d4

0800226c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <MX_USART2_UART_Init+0x58>)
 8002274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 8002278:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <MX_USART2_UART_Init+0x5c>)
 800227a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 8002284:	2200      	movs	r2, #0
 8002286:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 8002290:	220c      	movs	r2, #12
 8002292:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 8002296:	2200      	movs	r2, #0
 8002298:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	; (80022c0 <MX_USART2_UART_Init+0x54>)
 80022ae:	f007 fbdf 	bl	8009a70 <HAL_UART_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80022b8:	f7ff faa3 	bl	8001802 <Error_Handler>
  }

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20002838 	.word	0x20002838
 80022c4:	40004400 	.word	0x40004400
 80022c8:	001e8480 	.word	0x001e8480

080022cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	; 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <HAL_UART_MspInit+0x9c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d137      	bne.n	800235e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_UART_MspInit+0xa0>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_UART_MspInit+0xa0>)
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	6593      	str	r3, [r2, #88]	; 0x58
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_UART_MspInit+0xa0>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_UART_MspInit+0xa0>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_UART_MspInit+0xa0>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_UART_MspInit+0xa0>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800231e:	2360      	movs	r3, #96	; 0x60
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800232e:	2307      	movs	r3, #7
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <HAL_UART_MspInit+0xa4>)
 800233a:	f002 fa39 	bl	80047b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2102      	movs	r1, #2
 8002342:	2026      	movs	r0, #38	; 0x26
 8002344:	f002 f9bd 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002348:	2026      	movs	r0, #38	; 0x26
 800234a:	f002 f9d6 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_MspInit 1 */
  }
}
 800235e:	bf00      	nop
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40004400 	.word	0x40004400
 800236c:	40021000 	.word	0x40021000
 8002370:	48000c00 	.word	0x48000c00

08002374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002378:	f7ff feba 	bl	80020f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800237c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800237e:	e003      	b.n	8002388 <LoopCopyDataInit>

08002380 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002382:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002384:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002386:	3104      	adds	r1, #4

08002388 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002388:	480a      	ldr	r0, [pc, #40]	; (80023b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800238c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800238e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002390:	d3f6      	bcc.n	8002380 <CopyDataInit>
	ldr	r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002394:	e002      	b.n	800239c <LoopFillZerobss>

08002396 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002396:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002398:	f842 3b04 	str.w	r3, [r2], #4

0800239c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <LoopForever+0x16>)
	cmp	r2, r3
 800239e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023a0:	d3f9      	bcc.n	8002396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a2:	f00b fb21 	bl	800d9e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023a6:	f7ff f93b 	bl	8001620 <main>

080023aa <LoopForever>:

LoopForever:
    b LoopForever
 80023aa:	e7fe      	b.n	80023aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80023b0:	0800e944 	.word	0x0800e944
	ldr	r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023b8:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 80023bc:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 80023c0:	20002f5c 	.word	0x20002f5c

080023c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC3_IRQHandler>

080023c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f002 f96b 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f80e 	bl	80023f8 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	e001      	b.n	80023ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023e8:	f7ff fd28 	bl	8001e3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023ec:	79fb      	ldrb	r3, [r7, #7]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_InitTick+0x6c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_InitTick+0x70>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_InitTick+0x6c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241a:	fbb3 f3f1 	udiv	r3, r3, r1
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f002 f977 	bl	8004716 <HAL_SYSTICK_Config>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10f      	bne.n	800244e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d809      	bhi.n	8002448 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f002 f941 	bl	80046c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <HAL_InitTick+0x74>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e007      	b.n	8002458 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e004      	b.n	8002458 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e001      	b.n	8002458 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002458:	7bfb      	ldrb	r3, [r7, #15]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000010 	.word	0x20000010
 8002468:	20000008 	.word	0x20000008
 800246c:	2000000c 	.word	0x2000000c

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000010 	.word	0x20000010
 8002494:	200028b8 	.word	0x200028b8

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	200028b8 	.word	0x200028b8

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff ffee 	bl	8002498 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_Delay+0x40>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffde 	bl	8002498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000010 	.word	0x20000010

080024f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3360      	adds	r3, #96	; 0x60
 800256e:	461a      	mov	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <LL_ADC_SetOffset+0x44>)
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	4313      	orrs	r3, r2
 800258c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002594:	bf00      	nop
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	03fff000 	.word	0x03fff000

080025a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3360      	adds	r3, #96	; 0x60
 80025b2:	461a      	mov	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3330      	adds	r3, #48	; 0x30
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	211f      	movs	r1, #31
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 011f 	and.w	r1, r3, #31
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	431a      	orrs	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b087      	sub	sp, #28
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3314      	adds	r3, #20
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	0e5b      	lsrs	r3, r3, #25
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	0d1b      	lsrs	r3, r3, #20
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2107      	movs	r1, #7
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	0d1b      	lsrs	r3, r3, #20
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	431a      	orrs	r2, r3
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026f4:	bf00      	nop
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0318 	and.w	r3, r3, #24
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002724:	40d9      	lsrs	r1, r3
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	400b      	ands	r3, r1
 800272a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272e:	431a      	orrs	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	0007ffff 	.word	0x0007ffff

08002748 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 031f 	and.w	r3, r3, #31
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002808:	d101      	bne.n	800280e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800282c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002858:	f043 0202 	orr.w	r2, r3, #2
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <LL_ADC_IsEnabled+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_ADC_IsEnabled+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d101      	bne.n	80028aa <LL_ADC_IsDisableOngoing+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_IsDisableOngoing+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f4:	f043 0210 	orr.w	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d101      	bne.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b08      	cmp	r3, #8
 8002968:	d101      	bne.n	800296e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e134      	b.n	8002c00 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fe fa4f 	bl	8000e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fef1 	bl	80027a4 <LL_ADC_IsDeepPowerDownEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fed7 	bl	8002780 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff0c 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d113      	bne.n	8002a0a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fef0 	bl	80027cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029ec:	4b86      	ldr	r3, [pc, #536]	; (8002c08 <HAL_ADC_Init+0x28c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	4a86      	ldr	r2, [pc, #536]	; (8002c0c <HAL_ADC_Init+0x290>)
 80029f4:	fba2 2303 	umull	r2, r3, r2, r3
 80029f8:	099b      	lsrs	r3, r3, #6
 80029fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fef0 	bl	80027f4 <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff64 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80cf 	bne.w	8002bee <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80cb 	bne.w	8002bee <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a60:	f043 0202 	orr.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fefd 	bl	800286c <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d115      	bne.n	8002aa4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a78:	4865      	ldr	r0, [pc, #404]	; (8002c10 <HAL_ADC_Init+0x294>)
 8002a7a:	f7ff fef7 	bl	800286c <LL_ADC_IsEnabled>
 8002a7e:	4604      	mov	r4, r0
 8002a80:	4864      	ldr	r0, [pc, #400]	; (8002c14 <HAL_ADC_Init+0x298>)
 8002a82:	f7ff fef3 	bl	800286c <LL_ADC_IsEnabled>
 8002a86:	4603      	mov	r3, r0
 8002a88:	431c      	orrs	r4, r3
 8002a8a:	4863      	ldr	r0, [pc, #396]	; (8002c18 <HAL_ADC_Init+0x29c>)
 8002a8c:	f7ff feee 	bl	800286c <LL_ADC_IsEnabled>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4323      	orrs	r3, r4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	485f      	ldr	r0, [pc, #380]	; (8002c1c <HAL_ADC_Init+0x2a0>)
 8002aa0:	f7ff fd28 	bl	80024f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7e5b      	ldrb	r3, [r3, #25]
 8002aa8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ab4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002aba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	045b      	lsls	r3, r3, #17
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_ADC_Init+0x2a4>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	69b9      	ldr	r1, [r7, #24]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fef7 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff18 	bl	8002956 <LL_ADC_INJ_IsConversionOngoing>
 8002b26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13d      	bne.n	8002baa <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d13a      	bne.n	8002baa <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b38:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b40:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b50:	f023 0302 	bic.w	r3, r3, #2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	69b9      	ldr	r1, [r7, #24]
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d118      	bne.n	8002b9a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b84:	4311      	orrs	r1, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	611a      	str	r2, [r3, #16]
 8002b98:	e007      	b.n	8002baa <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10c      	bne.n	8002bcc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	f023 010f 	bic.w	r1, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bca:	e007      	b.n	8002bdc <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 020f 	bic.w	r2, r2, #15
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	f023 0303 	bic.w	r3, r3, #3
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	655a      	str	r2, [r3, #84]	; 0x54
 8002bec:	e007      	b.n	8002bfe <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3724      	adds	r7, #36	; 0x24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd90      	pop	{r4, r7, pc}
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	053e2d63 	.word	0x053e2d63
 8002c10:	50040000 	.word	0x50040000
 8002c14:	50040100 	.word	0x50040100
 8002c18:	50040200 	.word	0x50040200
 8002c1c:	50040300 	.word	0x50040300
 8002c20:	fff0c007 	.word	0xfff0c007

08002c24 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c2c:	4893      	ldr	r0, [pc, #588]	; (8002e7c <HAL_ADC_Start_IT+0x258>)
 8002c2e:	f7ff fd8b 	bl	8002748 <LL_ADC_GetMultimode>
 8002c32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe65 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 8112 	bne.w	8002e6a <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_Start_IT+0x30>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e10f      	b.n	8002e74 <HAL_ADC_Start_IT+0x250>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f001 f82b 	bl	8003cb8 <ADC_Enable>
 8002c62:	4603      	mov	r3, r0
 8002c64:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 80f9 	bne.w	8002e60 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a7e      	ldr	r2, [pc, #504]	; (8002e80 <HAL_ADC_Start_IT+0x25c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d002      	beq.n	8002c92 <HAL_ADC_Start_IT+0x6e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	e000      	b.n	8002c94 <HAL_ADC_Start_IT+0x70>
 8002c92:	4b7c      	ldr	r3, [pc, #496]	; (8002e84 <HAL_ADC_Start_IT+0x260>)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d002      	beq.n	8002ca2 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f023 0206 	bic.w	r2, r3, #6
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	221c      	movs	r2, #28
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 021c 	bic.w	r2, r2, #28
 8002cec:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d108      	bne.n	8002d08 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0208 	orr.w	r2, r2, #8
 8002d04:	605a      	str	r2, [r3, #4]
          break;
 8002d06:	e008      	b.n	8002d1a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0204 	orr.w	r2, r2, #4
 8002d16:	605a      	str	r2, [r3, #4]
          break;
 8002d18:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d107      	bne.n	8002d32 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0210 	orr.w	r2, r2, #16
 8002d30:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_ADC_Start_IT+0x25c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d002      	beq.n	8002d42 <HAL_ADC_Start_IT+0x11e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	e000      	b.n	8002d44 <HAL_ADC_Start_IT+0x120>
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_ADC_Start_IT+0x260>)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d008      	beq.n	8002d5e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d002      	beq.n	8002d5e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	d13b      	bne.n	8002dd6 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02d      	beq.n	8002dc8 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d110      	bne.n	8002da6 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da2:	605a      	str	r2, [r3, #4]
              break;
 8002da4:	e011      	b.n	8002dca <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0220 	orr.w	r2, r2, #32
 8002dc4:	605a      	str	r2, [r3, #4]
              break;
 8002dc6:	e000      	b.n	8002dca <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002dc8:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd72 	bl	80028b8 <LL_ADC_REG_StartConversion>
 8002dd4:	e04d      	b.n	8002e72 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <HAL_ADC_Start_IT+0x25c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d002      	beq.n	8002df2 <HAL_ADC_Start_IT+0x1ce>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_Start_IT+0x1d0>
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_ADC_Start_IT+0x260>)
 8002df4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d036      	beq.n	8002e70 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d110      	bne.n	8002e3c <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0220 	bic.w	r2, r2, #32
 8002e28:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e38:	605a      	str	r2, [r3, #4]
              break;
 8002e3a:	e01a      	b.n	8002e72 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e4a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0220 	orr.w	r2, r2, #32
 8002e5a:	605a      	str	r2, [r3, #4]
              break;
 8002e5c:	bf00      	nop
 8002e5e:	e008      	b.n	8002e72 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002e68:	e003      	b.n	8002e72 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	75fb      	strb	r3, [r7, #23]
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_Start_IT+0x24e>
        }
 8002e70:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	50040300 	.word	0x50040300
 8002e80:	50040100 	.word	0x50040100
 8002e84:	50040000 	.word	0x50040000

08002e88 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Stop_IT+0x16>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e02b      	b.n	8002ef6 <HAL_ADC_Stop_IT+0x6e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ea6:	2103      	movs	r1, #3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fe51 	bl	8003b50 <ADC_ConversionStop>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d119      	bne.n	8002eec <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 021c 	bic.w	r2, r2, #28
 8002ec6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 ff4f 	bl	8003d6c <ADC_Disable>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f043 0201 	orr.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f34:	4882      	ldr	r0, [pc, #520]	; (8003140 <HAL_ADC_IRQHandler+0x228>)
 8002f36:	f7ff fc07 	bl	8002748 <LL_ADC_GetMultimode>
 8002f3a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d017      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x5e>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d012      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f001 f832 	bl	8003fd2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2202      	movs	r2, #2
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_ADC_IRQHandler+0x72>
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8083 	beq.w	800309c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07d      	beq.n	800309c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fb22 	bl	8002606 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d062      	beq.n	800308e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_ADC_IRQHandler+0x22c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d002      	beq.n	8002fd8 <HAL_ADC_IRQHandler+0xc0>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_IRQHandler+0xc2>
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_ADC_IRQHandler+0x230>)
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d008      	beq.n	8002ff4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d002      	beq.n	8002ff4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b09      	cmp	r3, #9
 8002ff2:	d104      	bne.n	8002ffe <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	623b      	str	r3, [r7, #32]
 8002ffc:	e00c      	b.n	8003018 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a50      	ldr	r2, [pc, #320]	; (8003144 <HAL_ADC_IRQHandler+0x22c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d002      	beq.n	800300e <HAL_ADC_IRQHandler+0xf6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e000      	b.n	8003010 <HAL_ADC_IRQHandler+0xf8>
 800300e:	4b4e      	ldr	r3, [pc, #312]	; (8003148 <HAL_ADC_IRQHandler+0x230>)
 8003010:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d135      	bne.n	800308e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d12e      	bne.n	800308e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fc67 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11a      	bne.n	8003076 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020c 	bic.w	r2, r2, #12
 800304e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d112      	bne.n	800308e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
 8003074:	e00b      	b.n	800308e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fd ff3a 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	220c      	movs	r2, #12
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_ADC_IRQHandler+0x198>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 809f 	beq.w	80031fa <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8099 	beq.w	80031fa <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff facd 	bl	8002684 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80030ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fa88 	bl	8002606 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030f6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <HAL_ADC_IRQHandler+0x22c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d002      	beq.n	8003108 <HAL_ADC_IRQHandler+0x1f0>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e000      	b.n	800310a <HAL_ADC_IRQHandler+0x1f2>
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <HAL_ADC_IRQHandler+0x230>)
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4293      	cmp	r3, r2
 8003110:	d008      	beq.n	8003124 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d002      	beq.n	8003124 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b07      	cmp	r3, #7
 8003122:	d104      	bne.n	800312e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	e013      	b.n	8003156 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_ADC_IRQHandler+0x22c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d009      	beq.n	800314c <HAL_ADC_IRQHandler+0x234>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	e007      	b.n	800314e <HAL_ADC_IRQHandler+0x236>
 800313e:	bf00      	nop
 8003140:	50040300 	.word	0x50040300
 8003144:	50040100 	.word	0x50040100
 8003148:	50040000 	.word	0x50040000
 800314c:	4b7d      	ldr	r3, [pc, #500]	; (8003344 <HAL_ADC_IRQHandler+0x42c>)
 800314e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10c      	bne.n	8003176 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003162:	2b00      	cmp	r3, #0
 8003164:	d142      	bne.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03f      	beq.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003172:	2b00      	cmp	r3, #0
 8003174:	d13a      	bne.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d133      	bne.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12e      	bne.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fbdf 	bl	8002956 <LL_ADC_INJ_IsConversionOngoing>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d11a      	bne.n	80031d4 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d112      	bne.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
 80031d2:	e00b      	b.n	80031ec <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d8:	f043 0210 	orr.w	r2, r3, #16
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	f043 0201 	orr.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fec8 	bl	8003f82 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2260      	movs	r2, #96	; 0x60
 80031f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d011      	beq.n	8003228 <HAL_ADC_IRQHandler+0x310>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f896 	bl	800334c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d012      	beq.n	8003258 <HAL_ADC_IRQHandler+0x340>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 feae 	bl	8003faa <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d012      	beq.n	8003288 <HAL_ADC_IRQHandler+0x370>
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fea0 	bl	8003fbe <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d036      	beq.n	8003300 <HAL_ADC_IRQHandler+0x3e8>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d031      	beq.n	8003300 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e014      	b.n	80032d4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80032b0:	4825      	ldr	r0, [pc, #148]	; (8003348 <HAL_ADC_IRQHandler+0x430>)
 80032b2:	f7ff fa57 	bl	8002764 <LL_ADC_GetMultiDMATransfer>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	e008      	b.n	80032d4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d10e      	bne.n	80032f8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	f043 0202 	orr.w	r2, r3, #2
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f834 	bl	8003360 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2210      	movs	r2, #16
 80032fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d018      	beq.n	800333c <HAL_ADC_IRQHandler+0x424>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f043 0208 	orr.w	r2, r3, #8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003334:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fe2d 	bl	8003f96 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800333c:	bf00      	nop
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	50040000 	.word	0x50040000
 8003348:	50040300 	.word	0x50040300

0800334c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0b6      	sub	sp, #216	; 0xd8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x22>
 8003392:	2302      	movs	r3, #2
 8003394:	e3c6      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x7b0>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff fab0 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f040 83a7 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d824      	bhi.n	8003402 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	3b02      	subs	r3, #2
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d81b      	bhi.n	80033fa <HAL_ADC_ConfigChannel+0x86>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <HAL_ADC_ConfigChannel+0x54>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033e1 	.word	0x080033e1
 80033d0:	080033e9 	.word	0x080033e9
 80033d4:	080033f1 	.word	0x080033f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	220c      	movs	r2, #12
 80033dc:	605a      	str	r2, [r3, #4]
          break;
 80033de:	e011      	b.n	8003404 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2212      	movs	r2, #18
 80033e4:	605a      	str	r2, [r3, #4]
          break;
 80033e6:	e00d      	b.n	8003404 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2218      	movs	r2, #24
 80033ec:	605a      	str	r2, [r3, #4]
          break;
 80033ee:	e009      	b.n	8003404 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f6:	605a      	str	r2, [r3, #4]
          break;
 80033f8:	e004      	b.n	8003404 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2206      	movs	r2, #6
 80033fe:	605a      	str	r2, [r3, #4]
          break;
 8003400:	e000      	b.n	8003404 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003402:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	f7ff f90b 	bl	800262c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fa74 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8003420:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fa94 	bl	8002956 <LL_ADC_INJ_IsConversionOngoing>
 800342e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003432:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003436:	2b00      	cmp	r3, #0
 8003438:	f040 81a6 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800343c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003440:	2b00      	cmp	r3, #0
 8003442:	f040 81a1 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	461a      	mov	r2, r3
 8003454:	f7ff f929 	bl	80026aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695a      	ldr	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d00a      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6919      	ldr	r1, [r3, #16]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800348a:	f7ff f867 	bl	800255c <LL_ADC_SetOffset>
 800348e:	e17b      	b.n	8003788 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff f884 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10a      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x148>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff f879 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 80034b2:	4603      	mov	r3, r0
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	f003 021f 	and.w	r2, r3, #31
 80034ba:	e01e      	b.n	80034fa <HAL_ADC_ConfigChannel+0x186>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f86e 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80034ea:	2320      	movs	r3, #32
 80034ec:	e004      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80034ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x19e>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	0e9b      	lsrs	r3, r3, #26
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	e018      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800352a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800352e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003536:	2320      	movs	r3, #32
 8003538:	e004      	b.n	8003544 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800353a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003544:	429a      	cmp	r2, r3
 8003546:	d106      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2200      	movs	r2, #0
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f83d 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f821 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x20e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f816 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003578:	4603      	mov	r3, r0
 800357a:	0e9b      	lsrs	r3, r3, #26
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	e01e      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x24c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f80b 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 800358e:	4603      	mov	r3, r0
 8003590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80035a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80035a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e004      	b.n	80035be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80035b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x264>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	e018      	b.n	800360a <HAL_ADC_ConfigChannel+0x296>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80035ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80035f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80035f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80035fc:	2320      	movs	r3, #32
 80035fe:	e004      	b.n	800360a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003600:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800360a:	429a      	cmp	r2, r3
 800360c:	d106      	bne.n	800361c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe ffda 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2102      	movs	r1, #2
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe ffbe 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003628:	4603      	mov	r3, r0
 800362a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x2d4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe ffb3 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 800363e:	4603      	mov	r3, r0
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	f003 021f 	and.w	r2, r3, #31
 8003646:	e01e      	b.n	8003686 <HAL_ADC_ConfigChannel+0x312>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe ffa8 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003654:	4603      	mov	r3, r0
 8003656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800366a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800366e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e004      	b.n	8003684 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800367a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <HAL_ADC_ConfigChannel+0x32a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	e016      	b.n	80036cc <HAL_ADC_ConfigChannel+0x358>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80036b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80036b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80036be:	2320      	movs	r3, #32
 80036c0:	e004      	b.n	80036cc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80036c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d106      	bne.n	80036de <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ff79 	bl	80025d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2103      	movs	r1, #3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe ff5d 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_ADC_ConfigChannel+0x396>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2103      	movs	r1, #3
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe ff52 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	e017      	b.n	800373a <HAL_ADC_ConfigChannel+0x3c6>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2103      	movs	r1, #3
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe ff47 	bl	80025a4 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371c:	fa93 f3a3 	rbit	r3, r3
 8003720:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003724:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800372c:	2320      	movs	r3, #32
 800372e:	e003      	b.n	8003738 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x3de>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	e011      	b.n	8003776 <HAL_ADC_ConfigChannel+0x402>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003762:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003776:	429a      	cmp	r2, r3
 8003778:	d106      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	2103      	movs	r1, #3
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe ff24 	bl	80025d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff f86d 	bl	800286c <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 813f 	bne.w	8003a18 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fe ffaa 	bl	8002700 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a8e      	ldr	r2, [pc, #568]	; (80039ec <HAL_ADC_ConfigChannel+0x678>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f040 8130 	bne.w	8003a18 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x46c>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	0e9b      	lsrs	r3, r3, #26
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e019      	b.n	8003814 <HAL_ADC_ConfigChannel+0x4a0>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e8:	fa93 f3a3 	rbit	r3, r3
 80037ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80037ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80037f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80037f8:	2320      	movs	r3, #32
 80037fa:	e003      	b.n	8003804 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80037fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2b09      	cmp	r3, #9
 800380c:	bf94      	ite	ls
 800380e:	2301      	movls	r3, #1
 8003810:	2300      	movhi	r3, #0
 8003812:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003814:	2b00      	cmp	r3, #0
 8003816:	d079      	beq.n	800390c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003820:	2b00      	cmp	r3, #0
 8003822:	d107      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x4c0>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0e9b      	lsrs	r3, r3, #26
 800382a:	3301      	adds	r3, #1
 800382c:	069b      	lsls	r3, r3, #26
 800382e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003832:	e015      	b.n	8003860 <HAL_ADC_ConfigChannel+0x4ec>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003844:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800384c:	2320      	movs	r3, #32
 800384e:	e003      	b.n	8003858 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3301      	adds	r3, #1
 800385a:	069b      	lsls	r3, r3, #26
 800385c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x50c>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	0e9b      	lsrs	r3, r3, #26
 8003872:	3301      	adds	r3, #1
 8003874:	f003 031f 	and.w	r3, r3, #31
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	e017      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x53c>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800388e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003890:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003898:	2320      	movs	r3, #32
 800389a:	e003      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800389c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	2101      	movs	r1, #1
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	ea42 0103 	orr.w	r1, r2, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x562>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	3301      	adds	r3, #1
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	4613      	mov	r3, r2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	4413      	add	r3, r2
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	e018      	b.n	8003908 <HAL_ADC_ConfigChannel+0x594>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80038ee:	2320      	movs	r3, #32
 80038f0:	e003      	b.n	80038fa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003908:	430b      	orrs	r3, r1
 800390a:	e080      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x5b4>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	0e9b      	lsrs	r3, r3, #26
 800391e:	3301      	adds	r3, #1
 8003920:	069b      	lsls	r3, r3, #26
 8003922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003926:	e015      	b.n	8003954 <HAL_ADC_ConfigChannel+0x5e0>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e003      	b.n	800394c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3301      	adds	r3, #1
 800394e:	069b      	lsls	r3, r3, #26
 8003950:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395c:	2b00      	cmp	r3, #0
 800395e:	d109      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x600>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	0e9b      	lsrs	r3, r3, #26
 8003966:	3301      	adds	r3, #1
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	e017      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x630>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	fa93 f3a3 	rbit	r3, r3
 8003980:	61fb      	str	r3, [r7, #28]
  return result;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800398c:	2320      	movs	r3, #32
 800398e:	e003      	b.n	8003998 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	fab3 f383 	clz	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	3301      	adds	r3, #1
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	2101      	movs	r1, #1
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	ea42 0103 	orr.w	r1, r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10d      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x65c>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	0e9b      	lsrs	r3, r3, #26
 80039ba:	3301      	adds	r3, #1
 80039bc:	f003 021f 	and.w	r2, r3, #31
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	3b1e      	subs	r3, #30
 80039c8:	051b      	lsls	r3, r3, #20
 80039ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039ce:	e01d      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x698>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	613b      	str	r3, [r7, #16]
  return result;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e005      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x684>
 80039ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f003 021f 	and.w	r2, r3, #31
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	3b1e      	subs	r3, #30
 8003a06:	051b      	lsls	r3, r3, #20
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6892      	ldr	r2, [r2, #8]
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fe fe49 	bl	80026aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <HAL_ADC_ConfigChannel+0x7b8>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d079      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a24:	4842      	ldr	r0, [pc, #264]	; (8003b30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a26:	f7fe fd8b 	bl	8002540 <LL_ADC_GetCommonPathInternalCh>
 8003a2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a40      	ldr	r2, [pc, #256]	; (8003b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d12b      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d125      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3b      	ldr	r2, [pc, #236]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x6e4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3a      	ldr	r2, [pc, #232]	; (8003b3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d15c      	bne.n	8003b12 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a60:	4619      	mov	r1, r3
 8003a62:	4833      	ldr	r0, [pc, #204]	; (8003b30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a64:	f7fe fd59 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a68:	4b35      	ldr	r3, [pc, #212]	; (8003b40 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	4a35      	ldr	r2, [pc, #212]	; (8003b44 <HAL_ADC_ConfigChannel+0x7d0>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099a      	lsrs	r2, r3, #6
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f9      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a8e:	e040      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2c      	ldr	r2, [pc, #176]	; (8003b48 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d118      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x758>
 8003a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a23      	ldr	r2, [pc, #140]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x746>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <HAL_ADC_ConfigChannel+0x7c8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12d      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	481a      	ldr	r0, [pc, #104]	; (8003b30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ac6:	f7fe fd28 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aca:	e024      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d120      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11a      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d115      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003af0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003af4:	4619      	mov	r1, r3
 8003af6:	480e      	ldr	r0, [pc, #56]	; (8003b30 <HAL_ADC_ConfigChannel+0x7bc>)
 8003af8:	f7fe fd0f 	bl	800251a <LL_ADC_SetCommonPathInternalCh>
 8003afc:	e00c      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b10:	e002      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b20:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	37d8      	adds	r7, #216	; 0xd8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	80080000 	.word	0x80080000
 8003b30:	50040300 	.word	0x50040300
 8003b34:	c7520000 	.word	0xc7520000
 8003b38:	50040000 	.word	0x50040000
 8003b3c:	50040200 	.word	0x50040200
 8003b40:	20000008 	.word	0x20000008
 8003b44:	053e2d63 	.word	0x053e2d63
 8003b48:	cb840000 	.word	0xcb840000
 8003b4c:	80000001 	.word	0x80000001

08003b50 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fece 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8003b6c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fe feef 	bl	8002956 <LL_ADC_INJ_IsConversionOngoing>
 8003b78:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8090 	beq.w	8003ca8 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d02a      	beq.n	8003bec <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7e5b      	ldrb	r3, [r3, #25]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d126      	bne.n	8003bec <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7e1b      	ldrb	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d122      	bne.n	8003bec <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003baa:	e014      	b.n	8003bd6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	4a41      	ldr	r2, [pc, #260]	; (8003cb4 <ADC_ConversionStop+0x164>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d90d      	bls.n	8003bd0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e06c      	b.n	8003caa <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d1e3      	bne.n	8003bac <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2240      	movs	r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d014      	beq.n	8003c1c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fe86 	bl	8002908 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe fe43 	bl	8002892 <LL_ADC_IsDisableOngoing>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fe62 	bl	80028e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d014      	beq.n	8003c4c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe fe95 	bl	8002956 <LL_ADC_INJ_IsConversionOngoing>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00c      	beq.n	8003c4c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fe2b 	bl	8002892 <LL_ADC_IsDisableOngoing>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fe71 	bl	800292e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d004      	beq.n	8003c5c <ADC_ConversionStop+0x10c>
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d105      	bne.n	8003c62 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c56:	230c      	movs	r3, #12
 8003c58:	617b      	str	r3, [r7, #20]
        break;
 8003c5a:	e005      	b.n	8003c68 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	617b      	str	r3, [r7, #20]
        break;
 8003c60:	e002      	b.n	8003c68 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c62:	2304      	movs	r3, #4
 8003c64:	617b      	str	r3, [r7, #20]
        break;
 8003c66:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c68:	f7fe fc16 	bl	8002498 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c6e:	e014      	b.n	8003c9a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c70:	f7fe fc12 	bl	8002498 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d90d      	bls.n	8003c9a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e3      	bne.n	8003c70 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	a33fffff 	.word	0xa33fffff

08003cb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fdd1 	bl	800286c <LL_ADC_IsEnabled>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d146      	bne.n	8003d5e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <ADC_Enable+0xb0>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f043 0210 	orr.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e032      	b.n	8003d60 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fd8c 	bl	800281c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d04:	f7fe fbc8 	bl	8002498 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0a:	e021      	b.n	8003d50 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fdab 	bl	800286c <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fd7b 	bl	800281c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7fe fbb7 	bl	8002498 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d90d      	bls.n	8003d50 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	f043 0210 	orr.w	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e007      	b.n	8003d60 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d1d6      	bne.n	8003d0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	8000003f 	.word	0x8000003f

08003d6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fd8a 	bl	8002892 <LL_ADC_IsDisableOngoing>
 8003d7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fd71 	bl	800286c <LL_ADC_IsEnabled>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d040      	beq.n	8003e12 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13d      	bne.n	8003e12 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030d 	and.w	r3, r3, #13
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10c      	bne.n	8003dbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fd4b 	bl	8002844 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2203      	movs	r2, #3
 8003db4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003db6:	f7fe fb6f 	bl	8002498 <HAL_GetTick>
 8003dba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dbc:	e022      	b.n	8003e04 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	f043 0210 	orr.w	r2, r3, #16
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f043 0201 	orr.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e01c      	b.n	8003e14 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dda:	f7fe fb5d 	bl	8002498 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d90d      	bls.n	8003e04 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0210 	orr.w	r2, r3, #16
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <LL_ADC_IsEnabled>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <LL_ADC_IsEnabled+0x18>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <LL_ADC_IsEnabled+0x1a>
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LL_ADC_StartCalibration>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_IsCalibrationOnGoing>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e88:	d101      	bne.n	8003e8e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_REG_IsConversionOngoing>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_ADCEx_Calibration_Start+0x1c>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e04d      	b.n	8003f7a <HAL_ADCEx_Calibration_Start+0xb8>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ff40 	bl	8003d6c <ADC_Disable>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d136      	bne.n	8003f64 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003efe:	f023 0302 	bic.w	r3, r3, #2
 8003f02:	f043 0202 	orr.w	r2, r3, #2
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6839      	ldr	r1, [r7, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff96 	bl	8003e42 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f16:	e014      	b.n	8003f42 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003f24:	d30d      	bcc.n	8003f42 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f023 0312 	bic.w	r3, r3, #18
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e01b      	b.n	8003f7a <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff94 	bl	8003e74 <LL_ADC_IsCalibrationOnGoing>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e2      	bne.n	8003f18 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
 8003f62:	e005      	b.n	8003f70 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0210 	orr.w	r2, r3, #16
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b09f      	sub	sp, #124	; 0x7c
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004002:	2302      	movs	r3, #2
 8004004:	e08f      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a47      	ldr	r2, [pc, #284]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d102      	bne.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004018:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	e001      	b.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e072      	b.n	8004126 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff2a 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 8004048:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff24 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d154      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800405a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405c:	2b00      	cmp	r3, #0
 800405e:	d151      	bne.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004062:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02c      	beq.n	80040c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800407e:	035b      	lsls	r3, r3, #13
 8004080:	430b      	orrs	r3, r1
 8004082:	431a      	orrs	r2, r3
 8004084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004086:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004088:	4829      	ldr	r0, [pc, #164]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800408a:	f7ff fec7 	bl	8003e1c <LL_ADC_IsEnabled>
 800408e:	4604      	mov	r4, r0
 8004090:	4828      	ldr	r0, [pc, #160]	; (8004134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004092:	f7ff fec3 	bl	8003e1c <LL_ADC_IsEnabled>
 8004096:	4603      	mov	r3, r0
 8004098:	431c      	orrs	r4, r3
 800409a:	4828      	ldr	r0, [pc, #160]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800409c:	f7ff febe 	bl	8003e1c <LL_ADC_IsEnabled>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4323      	orrs	r3, r4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d137      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	6811      	ldr	r1, [r2, #0]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	6892      	ldr	r2, [r2, #8]
 80040bc:	430a      	orrs	r2, r1
 80040be:	431a      	orrs	r2, r3
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040c4:	e028      	b.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d2:	4817      	ldr	r0, [pc, #92]	; (8004130 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80040d4:	f7ff fea2 	bl	8003e1c <LL_ADC_IsEnabled>
 80040d8:	4604      	mov	r4, r0
 80040da:	4816      	ldr	r0, [pc, #88]	; (8004134 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80040dc:	f7ff fe9e 	bl	8003e1c <LL_ADC_IsEnabled>
 80040e0:	4603      	mov	r3, r0
 80040e2:	431c      	orrs	r4, r3
 80040e4:	4815      	ldr	r0, [pc, #84]	; (800413c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80040e6:	f7ff fe99 	bl	8003e1c <LL_ADC_IsEnabled>
 80040ea:	4603      	mov	r3, r0
 80040ec:	4323      	orrs	r3, r4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d112      	bne.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040fa:	f023 030f 	bic.w	r3, r3, #15
 80040fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004100:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004102:	e009      	b.n	8004118 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004116:	e000      	b.n	800411a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004118:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004122:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004126:	4618      	mov	r0, r3
 8004128:	377c      	adds	r7, #124	; 0x7c
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}
 800412e:	bf00      	nop
 8004130:	50040000 	.word	0x50040000
 8004134:	50040100 	.word	0x50040100
 8004138:	50040300 	.word	0x50040300
 800413c:	50040200 	.word	0x50040200

08004140 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <LL_EXTI_EnableIT_0_31+0x20>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4904      	ldr	r1, [pc, #16]	; (8004160 <LL_EXTI_EnableIT_0_31+0x20>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4313      	orrs	r3, r2
 8004152:	600b      	str	r3, [r1, #0]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40010400 	.word	0x40010400

08004164 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <LL_EXTI_DisableIT_0_31+0x24>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	43db      	mvns	r3, r3
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <LL_EXTI_DisableIT_0_31+0x24>)
 8004176:	4013      	ands	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40010400 	.word	0x40010400

0800418c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	4904      	ldr	r1, [pc, #16]	; (80041ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]

}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40010400 	.word	0x40010400

080041b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	43db      	mvns	r3, r3
 80041c0:	4904      	ldr	r1, [pc, #16]	; (80041d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40010400 	.word	0x40010400

080041d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	4904      	ldr	r1, [pc, #16]	; (80041f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]

}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40010400 	.word	0x40010400

080041fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	43db      	mvns	r3, r3
 800420c:	4904      	ldr	r1, [pc, #16]	; (8004220 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800420e:	4013      	ands	r3, r2
 8004210:	608b      	str	r3, [r1, #8]

}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40010400 	.word	0x40010400

08004224 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4904      	ldr	r1, [pc, #16]	; (8004244 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4313      	orrs	r3, r2
 8004236:	60cb      	str	r3, [r1, #12]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40010400 	.word	0x40010400

08004248 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	43db      	mvns	r3, r3
 8004258:	4904      	ldr	r1, [pc, #16]	; (800426c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800425a:	4013      	ands	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010400 	.word	0x40010400

08004270 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800427a:	695a      	ldr	r2, [r3, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4013      	ands	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d101      	bne.n	800428a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	40010400 	.word	0x40010400

0800429c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6153      	str	r3, [r2, #20]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40010400 	.word	0x40010400

080042bc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e0d0      	b.n	800447a <HAL_COMP_Init+0x1be>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e6:	d102      	bne.n	80042ee <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e0c5      	b.n	800447a <HAL_COMP_Init+0x1be>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d115      	bne.n	8004326 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004308:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <HAL_COMP_Init+0x1c8>)
 800430a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430c:	4a5d      	ldr	r2, [pc, #372]	; (8004484 <HAL_COMP_Init+0x1c8>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6613      	str	r3, [r2, #96]	; 0x60
 8004314:	4b5b      	ldr	r3, [pc, #364]	; (8004484 <HAL_COMP_Init+0x1c8>)
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7fc fe91 	bl	8001048 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004330:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	4b4a      	ldr	r3, [pc, #296]	; (8004488 <HAL_COMP_Init+0x1cc>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	430b      	orrs	r3, r1
 8004368:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d106      	bne.n	8004382 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_COMP_Init+0x1d0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a44      	ldr	r2, [pc, #272]	; (800448c <HAL_COMP_Init+0x1d0>)
 800437a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e005      	b.n	800438e <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8004382:	4b42      	ldr	r3, [pc, #264]	; (800448c <HAL_COMP_Init+0x1d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a41      	ldr	r2, [pc, #260]	; (800448c <HAL_COMP_Init+0x1d0>)
 8004388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438c:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d015      	beq.n	80043c8 <HAL_COMP_Init+0x10c>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d112      	bne.n	80043c8 <HAL_COMP_Init+0x10c>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_COMP_Init+0x1d4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_COMP_Init+0x1d8>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	099a      	lsrs	r2, r3, #6
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80043ba:	e002      	b.n	80043c2 <HAL_COMP_Init+0x106>
      {
        wait_loop_index--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f9      	bne.n	80043bc <HAL_COMP_Init+0x100>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a32      	ldr	r2, [pc, #200]	; (8004498 <HAL_COMP_Init+0x1dc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d102      	bne.n	80043d8 <HAL_COMP_Init+0x11c>
 80043d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043d6:	e001      	b.n	80043dc <HAL_COMP_Init+0x120>
 80043d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043dc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d037      	beq.n	800445a <HAL_COMP_Init+0x19e>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_COMP_Init+0x142>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80043f6:	6938      	ldr	r0, [r7, #16]
 80043f8:	f7ff feee 	bl	80041d8 <LL_EXTI_EnableRisingTrig_0_31>
 80043fc:	e002      	b.n	8004404 <HAL_COMP_Init+0x148>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80043fe:	6938      	ldr	r0, [r7, #16]
 8004400:	f7ff fefc 	bl	80041fc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_COMP_Init+0x15c>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004410:	6938      	ldr	r0, [r7, #16]
 8004412:	f7ff ff07 	bl	8004224 <LL_EXTI_EnableFallingTrig_0_31>
 8004416:	e002      	b.n	800441e <HAL_COMP_Init+0x162>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8004418:	6938      	ldr	r0, [r7, #16]
 800441a:	f7ff ff15 	bl	8004248 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800441e:	6938      	ldr	r0, [r7, #16]
 8004420:	f7ff ff3c 	bl	800429c <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_COMP_Init+0x17c>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8004430:	6938      	ldr	r0, [r7, #16]
 8004432:	f7ff feab 	bl	800418c <LL_EXTI_EnableEvent_0_31>
 8004436:	e002      	b.n	800443e <HAL_COMP_Init+0x182>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004438:	6938      	ldr	r0, [r7, #16]
 800443a:	f7ff feb9 	bl	80041b0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_COMP_Init+0x196>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800444a:	6938      	ldr	r0, [r7, #16]
 800444c:	f7ff fe78 	bl	8004140 <LL_EXTI_EnableIT_0_31>
 8004450:	e009      	b.n	8004466 <HAL_COMP_Init+0x1aa>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004452:	6938      	ldr	r0, [r7, #16]
 8004454:	f7ff fe86 	bl	8004164 <LL_EXTI_DisableIT_0_31>
 8004458:	e005      	b.n	8004466 <HAL_COMP_Init+0x1aa>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 800445a:	6938      	ldr	r0, [r7, #16]
 800445c:	f7ff fea8 	bl	80041b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8004460:	6938      	ldr	r0, [r7, #16]
 8004462:	f7ff fe7f 	bl	8004164 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_COMP_Init+0x1be>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800447a:	7ffb      	ldrb	r3, [r7, #31]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	ff207d03 	.word	0xff207d03
 800448c:	40010204 	.word	0x40010204
 8004490:	20000008 	.word	0x20000008
 8004494:	053e2d63 	.word	0x053e2d63
 8004498:	40010200 	.word	0x40010200

0800449c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <HAL_COMP_IRQHandler+0x54>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d102      	bne.n	80044b4 <HAL_COMP_IRQHandler+0x18>
 80044ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044b2:	e001      	b.n	80044b8 <HAL_COMP_IRQHandler+0x1c>
 80044b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff fed8 	bl	8004270 <LL_EXTI_IsActiveFlag_0_31>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d010      	beq.n	80044e8 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_COMP_IRQHandler+0x58>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 80044d2:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 80044d6:	f7ff fee1 	bl	800429c <LL_EXTI_ClearFlag_0_31>
 80044da:	e002      	b.n	80044e2 <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fedd 	bl	800429c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f808 	bl	80044f8 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40010200 	.word	0x40010200
 80044f4:	40010204 	.word	0x40010204

080044f8 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004528:	4013      	ands	r3, r2
 800452a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800453e:	4a04      	ldr	r2, [pc, #16]	; (8004550 <__NVIC_SetPriorityGrouping+0x44>)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	60d3      	str	r3, [r2, #12]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <__NVIC_GetPriorityGrouping+0x18>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0a1b      	lsrs	r3, r3, #8
 800455e:	f003 0307 	and.w	r3, r3, #7
}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db0b      	blt.n	800459a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	4907      	ldr	r1, [pc, #28]	; (80045a8 <__NVIC_EnableIRQ+0x38>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	e000e100 	.word	0xe000e100

080045ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db0a      	blt.n	80045d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	490c      	ldr	r1, [pc, #48]	; (80045f8 <__NVIC_SetPriority+0x4c>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	440b      	add	r3, r1
 80045d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d4:	e00a      	b.n	80045ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <__NVIC_SetPriority+0x50>)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3b04      	subs	r3, #4
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	440b      	add	r3, r1
 80045ea:	761a      	strb	r2, [r3, #24]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004600:	b480      	push	{r7}
 8004602:	b089      	sub	sp, #36	; 0x24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f1c3 0307 	rsb	r3, r3, #7
 800461a:	2b04      	cmp	r3, #4
 800461c:	bf28      	it	cs
 800461e:	2304      	movcs	r3, #4
 8004620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	3304      	adds	r3, #4
 8004626:	2b06      	cmp	r3, #6
 8004628:	d902      	bls.n	8004630 <NVIC_EncodePriority+0x30>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3b03      	subs	r3, #3
 800462e:	e000      	b.n	8004632 <NVIC_EncodePriority+0x32>
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004634:	f04f 32ff 	mov.w	r2, #4294967295
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	401a      	ands	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004648:	f04f 31ff 	mov.w	r1, #4294967295
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	43d9      	mvns	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	4313      	orrs	r3, r2
         );
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	; 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff8e 	bl	80045ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff29 	bl	800450c <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff3e 	bl	8004554 <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff8e 	bl	8004600 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff5d 	bl	80045ac <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff31 	bl	8004570 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ffa2 	bl	8004668 <SysTick_Config>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d005      	beq.n	8004752 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e029      	b.n	80047a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 020e 	bic.w	r2, r2, #14
 8004760:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f003 021c 	and.w	r2, r3, #28
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2101      	movs	r1, #1
 8004780:	fa01 f202 	lsl.w	r2, r1, r2
 8004784:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
    }
  }
  return status;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047be:	e17f      	b.n	8004ac0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2101      	movs	r1, #1
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 8171 	beq.w	8004aba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d00b      	beq.n	80047f8 <HAL_GPIO_Init+0x48>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d007      	beq.n	80047f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ec:	2b11      	cmp	r3, #17
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b12      	cmp	r3, #18
 80047f6:	d130      	bne.n	800485a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	2203      	movs	r2, #3
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800482e:	2201      	movs	r2, #1
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	091b      	lsrs	r3, r3, #4
 8004844:	f003 0201 	and.w	r2, r3, #1
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b03      	cmp	r3, #3
 8004864:	d118      	bne.n	8004898 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800486c:	2201      	movs	r2, #1
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	08db      	lsrs	r3, r3, #3
 8004882:	f003 0201 	and.w	r2, r3, #1
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4013      	ands	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x128>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b12      	cmp	r3, #18
 80048d6:	d123      	bne.n	8004920 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	220f      	movs	r2, #15
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4013      	ands	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	08da      	lsrs	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3208      	adds	r2, #8
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	2203      	movs	r2, #3
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0203 	and.w	r2, r3, #3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80ac 	beq.w	8004aba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004962:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <HAL_GPIO_Init+0x32c>)
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <HAL_GPIO_Init+0x32c>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6613      	str	r3, [r2, #96]	; 0x60
 800496e:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <HAL_GPIO_Init+0x32c>)
 8004970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800497a:	4a59      	ldr	r2, [pc, #356]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	4013      	ands	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049a4:	d025      	beq.n	80049f2 <HAL_GPIO_Init+0x242>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <HAL_GPIO_Init+0x334>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01f      	beq.n	80049ee <HAL_GPIO_Init+0x23e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4d      	ldr	r2, [pc, #308]	; (8004ae8 <HAL_GPIO_Init+0x338>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d019      	beq.n	80049ea <HAL_GPIO_Init+0x23a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4c      	ldr	r2, [pc, #304]	; (8004aec <HAL_GPIO_Init+0x33c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_GPIO_Init+0x236>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4b      	ldr	r2, [pc, #300]	; (8004af0 <HAL_GPIO_Init+0x340>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00d      	beq.n	80049e2 <HAL_GPIO_Init+0x232>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a4a      	ldr	r2, [pc, #296]	; (8004af4 <HAL_GPIO_Init+0x344>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <HAL_GPIO_Init+0x22e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a49      	ldr	r2, [pc, #292]	; (8004af8 <HAL_GPIO_Init+0x348>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d101      	bne.n	80049da <HAL_GPIO_Init+0x22a>
 80049d6:	2306      	movs	r3, #6
 80049d8:	e00c      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049da:	2307      	movs	r3, #7
 80049dc:	e00a      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049de:	2305      	movs	r3, #5
 80049e0:	e008      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e006      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049e6:	2303      	movs	r3, #3
 80049e8:	e004      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e002      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <HAL_GPIO_Init+0x244>
 80049f2:	2300      	movs	r3, #0
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	f002 0203 	and.w	r2, r2, #3
 80049fa:	0092      	lsls	r2, r2, #2
 80049fc:	4093      	lsls	r3, r2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a04:	4936      	ldr	r1, [pc, #216]	; (8004ae0 <HAL_GPIO_Init+0x330>)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a12:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a36:	4a31      	ldr	r2, [pc, #196]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4013      	ands	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a90:	4b1a      	ldr	r3, [pc, #104]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_GPIO_Init+0x34c>)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	3301      	adds	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f47f ae78 	bne.w	80047c0 <HAL_GPIO_Init+0x10>
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	48000400 	.word	0x48000400
 8004ae8:	48000800 	.word	0x48000800
 8004aec:	48000c00 	.word	0x48000c00
 8004af0:	48001000 	.word	0x48001000
 8004af4:	48001400 	.word	0x48001400
 8004af8:	48001800 	.word	0x48001800
 8004afc:	40010400 	.word	0x40010400

08004b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b10:	787b      	ldrb	r3, [r7, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b1c:	e002      	b.n	8004b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b1e:	887a      	ldrh	r2, [r7, #2]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4013      	ands	r3, r2
 8004b48:	041a      	lsls	r2, r3, #16
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	43d9      	mvns	r1, r3
 8004b4e:	887b      	ldrh	r3, [r7, #2]
 8004b50:	400b      	ands	r3, r1
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b6e:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d006      	beq.n	8004b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b7a:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fe32 	bl	80017ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40010400 	.word	0x40010400

08004b94 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b08f      	sub	sp, #60	; 0x3c
 8004b98:	af0a      	add	r7, sp, #40	; 0x28
 8004b9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e054      	b.n	8004c50 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f008 fc5d 	bl	800d480 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f005 fef5 	bl	800a9d4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	687e      	ldr	r6, [r7, #4]
 8004bf2:	466d      	mov	r5, sp
 8004bf4:	f106 0410 	add.w	r4, r6, #16
 8004bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c04:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c08:	1d33      	adds	r3, r6, #4
 8004c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c0c:	6838      	ldr	r0, [r7, #0]
 8004c0e:	f005 fe7e 	bl	800a90e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2101      	movs	r1, #1
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f005 feec 	bl	800a9f6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	687e      	ldr	r6, [r7, #4]
 8004c26:	466d      	mov	r5, sp
 8004c28:	f106 0410 	add.w	r4, r6, #16
 8004c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c3c:	1d33      	adds	r3, r6, #4
 8004c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f005 fffb 	bl	800ac3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c58 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af04      	add	r7, sp, #16
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	70fb      	strb	r3, [r7, #3]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	70bb      	strb	r3, [r7, #2]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_HCD_HC_Init+0x28>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e07f      	b.n	8004d80 <HAL_HCD_HC_Init+0x128>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	333d      	adds	r3, #61	; 0x3d
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	3338      	adds	r3, #56	; 0x38
 8004cac:	787a      	ldrb	r2, [r7, #1]
 8004cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	3340      	adds	r3, #64	; 0x40
 8004cc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004cc2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3339      	adds	r3, #57	; 0x39
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	333f      	adds	r3, #63	; 0x3f
 8004ce8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004cec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	78bb      	ldrb	r3, [r7, #2]
 8004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf6:	b2d8      	uxtb	r0, r3
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	440b      	add	r3, r1
 8004d04:	333a      	adds	r3, #58	; 0x3a
 8004d06:	4602      	mov	r2, r0
 8004d08:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004d0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da0a      	bge.n	8004d28 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	440b      	add	r3, r1
 8004d20:	333b      	adds	r3, #59	; 0x3b
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e009      	b.n	8004d3c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	440b      	add	r3, r1
 8004d36:	333b      	adds	r3, #59	; 0x3b
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	440b      	add	r3, r1
 8004d4a:	333c      	adds	r3, #60	; 0x3c
 8004d4c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d50:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	787c      	ldrb	r4, [r7, #1]
 8004d58:	78ba      	ldrb	r2, [r7, #2]
 8004d5a:	78f9      	ldrb	r1, [r7, #3]
 8004d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d5e:	9302      	str	r3, [sp, #8]
 8004d60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4623      	mov	r3, r4
 8004d6e:	f006 f8a9 	bl	800aec4 <USB_HC_Init>
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd90      	pop	{r4, r7, pc}

08004d88 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_HCD_HC_Halt+0x1e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e00f      	b.n	8004dc6 <HAL_HCD_HC_Halt+0x3e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f006 fa87 	bl	800b2ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	70fb      	strb	r3, [r7, #3]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70bb      	strb	r3, [r7, #2]
 8004de6:	4613      	mov	r3, r2
 8004de8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	333b      	adds	r3, #59	; 0x3b
 8004dfa:	78ba      	ldrb	r2, [r7, #2]
 8004dfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	440b      	add	r3, r1
 8004e0c:	333f      	adds	r3, #63	; 0x3f
 8004e0e:	787a      	ldrb	r2, [r7, #1]
 8004e10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004e12:	7c3b      	ldrb	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d114      	bne.n	8004e42 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3342      	adds	r3, #66	; 0x42
 8004e28:	2203      	movs	r2, #3
 8004e2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	440b      	add	r3, r1
 8004e3a:	333d      	adds	r3, #61	; 0x3d
 8004e3c:	7f3a      	ldrb	r2, [r7, #28]
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e009      	b.n	8004e56 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	440b      	add	r3, r1
 8004e50:	3342      	adds	r3, #66	; 0x42
 8004e52:	2202      	movs	r2, #2
 8004e54:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004e56:	787b      	ldrb	r3, [r7, #1]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	f200 80d6 	bhi.w	800500a <HAL_HCD_HC_SubmitRequest+0x23a>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004ff5 	.word	0x08004ff5
 8004e6c:	08004ee1 	.word	0x08004ee1
 8004e70:	08004f6b 	.word	0x08004f6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004e74:	7c3b      	ldrb	r3, [r7, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	f040 80c9 	bne.w	800500e <HAL_HCD_HC_SubmitRequest+0x23e>
 8004e7c:	78bb      	ldrb	r3, [r7, #2]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 80c5 	bne.w	800500e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004e84:	8b3b      	ldrh	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d109      	bne.n	8004e9e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	3351      	adds	r3, #81	; 0x51
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	3351      	adds	r3, #81	; 0x51
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d10a      	bne.n	8004eca <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3342      	adds	r3, #66	; 0x42
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004ec8:	e0a1      	b.n	800500e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3342      	adds	r3, #66	; 0x42
 8004eda:	2202      	movs	r2, #2
 8004edc:	701a      	strb	r2, [r3, #0]
      break;
 8004ede:	e096      	b.n	800500e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004ee0:	78bb      	ldrb	r3, [r7, #2]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d120      	bne.n	8004f28 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3351      	adds	r3, #81	; 0x51
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10a      	bne.n	8004f12 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	440b      	add	r3, r1
 8004f0a:	3342      	adds	r3, #66	; 0x42
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f10:	e07e      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3342      	adds	r3, #66	; 0x42
 8004f22:	2202      	movs	r2, #2
 8004f24:	701a      	strb	r2, [r3, #0]
      break;
 8004f26:	e073      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	440b      	add	r3, r1
 8004f36:	3350      	adds	r3, #80	; 0x50
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3342      	adds	r3, #66	; 0x42
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e05d      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3342      	adds	r3, #66	; 0x42
 8004f64:	2202      	movs	r2, #2
 8004f66:	701a      	strb	r2, [r3, #0]
      break;
 8004f68:	e052      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004f6a:	78bb      	ldrb	r3, [r7, #2]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d120      	bne.n	8004fb2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3351      	adds	r3, #81	; 0x51
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	3342      	adds	r3, #66	; 0x42
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f9a:	e039      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	440b      	add	r3, r1
 8004faa:	3342      	adds	r3, #66	; 0x42
 8004fac:	2202      	movs	r2, #2
 8004fae:	701a      	strb	r2, [r3, #0]
      break;
 8004fb0:	e02e      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3350      	adds	r3, #80	; 0x50
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10a      	bne.n	8004fde <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3342      	adds	r3, #66	; 0x42
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
      break;
 8004fdc:	e018      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	440b      	add	r3, r1
 8004fec:	3342      	adds	r3, #66	; 0x42
 8004fee:	2202      	movs	r2, #2
 8004ff0:	701a      	strb	r2, [r3, #0]
      break;
 8004ff2:	e00d      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	3342      	adds	r3, #66	; 0x42
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
      break;
 8005008:	e002      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800500e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	3344      	adds	r3, #68	; 0x44
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	8b39      	ldrh	r1, [r7, #24]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4403      	add	r3, r0
 8005034:	3348      	adds	r3, #72	; 0x48
 8005036:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	440b      	add	r3, r1
 8005046:	335c      	adds	r3, #92	; 0x5c
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	440b      	add	r3, r1
 800505a:	334c      	adds	r3, #76	; 0x4c
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	440b      	add	r3, r1
 800506e:	3339      	adds	r3, #57	; 0x39
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	335d      	adds	r3, #93	; 0x5d
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	3338      	adds	r3, #56	; 0x38
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	4413      	add	r3, r2
 800509c:	4619      	mov	r1, r3
 800509e:	f006 f803 	bl	800b0a8 <USB_HC_StartXfer>
 80050a2:	4603      	mov	r3, r0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f005 fd77 	bl	800abb6 <USB_GetMode>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	f040 80ef 	bne.w	80052ae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 fd5b 	bl	800ab90 <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80e5 	beq.w	80052ac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 fd52 	bl	800ab90 <USB_ReadInterrupts>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050f6:	d104      	bne.n	8005102 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005100:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f005 fd42 	bl	800ab90 <USB_ReadInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005116:	d104      	bne.n	8005122 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005120:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f005 fd32 	bl	800ab90 <USB_ReadInterrupts>
 800512c:	4603      	mov	r3, r0
 800512e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005132:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005136:	d104      	bne.n	8005142 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005140:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f005 fd22 	bl	800ab90 <USB_ReadInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d103      	bne.n	800515e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2202      	movs	r2, #2
 800515c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f005 fd14 	bl	800ab90 <USB_ReadInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005172:	d115      	bne.n	80051a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800517c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d108      	bne.n	80051a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f008 f9f8 	bl	800d584 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2101      	movs	r1, #1
 800519a:	4618      	mov	r0, r3
 800519c:	f005 fdcc 	bl	800ad38 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f005 fcf3 	bl	800ab90 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b4:	d102      	bne.n	80051bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f001 f922 	bl	8006400 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f005 fce5 	bl	800ab90 <USB_ReadInterrupts>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d106      	bne.n	80051de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f008 f9bb 	bl	800d54c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2208      	movs	r2, #8
 80051dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f005 fcd4 	bl	800ab90 <USB_ReadInterrupts>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051f2:	d138      	bne.n	8005266 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f006 f855 	bl	800b2a8 <USB_HC_ReadInterrupt>
 80051fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e025      	b.n	8005252 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d018      	beq.n	800524c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005230:	d106      	bne.n	8005240 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8cf 	bl	80053dc <HCD_HC_IN_IRQHandler>
 800523e:	e005      	b.n	800524c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fcd9 	bl	8005bfe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3301      	adds	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	429a      	cmp	r2, r3
 800525a:	d3d4      	bcc.n	8005206 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f005 fc90 	bl	800ab90 <USB_ReadInterrupts>
 8005270:	4603      	mov	r3, r0
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b10      	cmp	r3, #16
 8005278:	d101      	bne.n	800527e <HAL_HCD_IRQHandler+0x1d2>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_HCD_IRQHandler+0x1d4>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d014      	beq.n	80052ae <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0210 	bic.w	r2, r2, #16
 8005292:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f807 	bl	80062a8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0210 	orr.w	r2, r2, #16
 80052a8:	619a      	str	r2, [r3, #24]
 80052aa:	e000      	b.n	80052ae <HAL_HCD_IRQHandler+0x202>
      return;
 80052ac:	bf00      	nop
    }
  }
}
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_HCD_Start+0x16>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e013      	b.n	80052f2 <HAL_HCD_Start+0x3e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f005 fb6b 	bl	800a9b2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2101      	movs	r1, #1
 80052e2:	4618      	mov	r0, r3
 80052e4:	f005 fd8c 	bl	800ae00 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_HCD_Stop+0x16>
 800530c:	2302      	movs	r3, #2
 800530e:	e00d      	b.n	800532c <HAL_HCD_Stop+0x32>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f006 f8d3 	bl	800b4c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f005 fd33 	bl	800adac <USB_ResetPort>
 8005346:	4603      	mov	r3, r0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	335c      	adds	r3, #92	; 0x5c
 800536c:	781b      	ldrb	r3, [r3, #0]
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005386:	78fa      	ldrb	r2, [r7, #3]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	334c      	adds	r3, #76	; 0x4c
 8005396:	681b      	ldr	r3, [r3, #0]
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f005 fd75 	bl	800aea0 <USB_GetCurrentFrame>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f005 fd50 	bl	800ae72 <USB_GetHostSpeed>
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d119      	bne.n	8005440 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	461a      	mov	r2, r3
 800541a:	2304      	movs	r3, #4
 800541c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	440a      	add	r2, r1
 8005434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005438:	f043 0302 	orr.w	r3, r3, #2
 800543c:	60d3      	str	r3, [r2, #12]
 800543e:	e0ce      	b.n	80055de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005456:	d12c      	bne.n	80054b2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005464:	461a      	mov	r2, r3
 8005466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	440b      	add	r3, r1
 800547a:	335d      	adds	r3, #93	; 0x5d
 800547c:	2207      	movs	r2, #7
 800547e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	440a      	add	r2, r1
 8005496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f005 ff0d 	bl	800b2ca <USB_HC_Halt>
 80054b0:	e095      	b.n	80055de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d109      	bne.n	80054dc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	461a      	mov	r2, r3
 80054d6:	2320      	movs	r3, #32
 80054d8:	6093      	str	r3, [r2, #8]
 80054da:	e080      	b.n	80055de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d134      	bne.n	800555c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	0151      	lsls	r1, r2, #5
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	440a      	add	r2, r1
 8005508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	440b      	add	r3, r1
 8005520:	335d      	adds	r3, #93	; 0x5d
 8005522:	2205      	movs	r2, #5
 8005524:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	461a      	mov	r2, r3
 8005534:	2310      	movs	r3, #16
 8005536:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	2308      	movs	r3, #8
 8005548:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f005 feb8 	bl	800b2ca <USB_HC_Halt>
 800555a:	e040      	b.n	80055de <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005572:	d134      	bne.n	80055de <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4413      	add	r3, r2
 800557c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	440a      	add	r2, r1
 800558a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558e:	f043 0302 	orr.w	r3, r3, #2
 8005592:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f005 fe93 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2310      	movs	r3, #16
 80055b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	440b      	add	r3, r1
 80055c4:	335d      	adds	r3, #93	; 0x5d
 80055c6:	2208      	movs	r2, #8
 80055c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055dc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d122      	bne.n	800563c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	440a      	add	r2, r1
 800560c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f005 fe52 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005638:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800563a:	e2dc      	b.n	8005bf6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	f040 80dd 	bne.w	800580e <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	440b      	add	r3, r1
 8005662:	335d      	adds	r3, #93	; 0x5d
 8005664:	2201      	movs	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	3358      	adds	r3, #88	; 0x58
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005688:	461a      	mov	r2, r3
 800568a:	2301      	movs	r3, #1
 800568c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	440b      	add	r3, r1
 800569c:	333f      	adds	r3, #63	; 0x3f
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	440b      	add	r3, r1
 80056b2:	333f      	adds	r3, #63	; 0x3f
 80056b4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d121      	bne.n	80056fe <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f005 fdf0 	bl	800b2ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	461a      	mov	r2, r3
 80056f8:	2310      	movs	r3, #16
 80056fa:	6093      	str	r3, [r2, #8]
 80056fc:	e070      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	440b      	add	r3, r1
 800570c:	333f      	adds	r3, #63	; 0x3f
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d12a      	bne.n	800576a <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	440a      	add	r2, r1
 800572a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005732:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	440b      	add	r3, r1
 8005742:	335c      	adds	r3, #92	; 0x5c
 8005744:	2201      	movs	r2, #1
 8005746:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	b2d8      	uxtb	r0, r3
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	335c      	adds	r3, #92	; 0x5c
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	4601      	mov	r1, r0
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f007 ff1c 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005768:	e03a      	b.n	80057e0 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	440b      	add	r3, r1
 8005778:	333f      	adds	r3, #63	; 0x3f
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d12f      	bne.n	80057e0 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	335c      	adds	r3, #92	; 0x5c
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3350      	adds	r3, #80	; 0x50
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f083 0301 	eor.w	r3, r3, #1
 80057aa:	b2d8      	uxtb	r0, r3
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	440b      	add	r3, r1
 80057ba:	3350      	adds	r3, #80	; 0x50
 80057bc:	4602      	mov	r2, r0
 80057be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b2d8      	uxtb	r0, r3
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	335c      	adds	r3, #92	; 0x5c
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	4601      	mov	r1, r0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f007 fee0 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	3350      	adds	r3, #80	; 0x50
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	f083 0301 	eor.w	r3, r3, #1
 80057f6:	b2d8      	uxtb	r0, r3
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	3350      	adds	r3, #80	; 0x50
 8005808:	4602      	mov	r2, r0
 800580a:	701a      	strb	r2, [r3, #0]
}
 800580c:	e1f3      	b.n	8005bf6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b02      	cmp	r3, #2
 8005822:	f040 811a 	bne.w	8005a5a <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	0151      	lsls	r1, r2, #5
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	440a      	add	r2, r1
 800583c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005840:	f023 0302 	bic.w	r3, r3, #2
 8005844:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	335d      	adds	r3, #93	; 0x5d
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10a      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	335c      	adds	r3, #92	; 0x5c
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e0d9      	b.n	8005a26 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	335d      	adds	r3, #93	; 0x5d
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d10a      	bne.n	800589e <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	335c      	adds	r3, #92	; 0x5c
 8005898:	2205      	movs	r2, #5
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e0c3      	b.n	8005a26 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	335d      	adds	r3, #93	; 0x5d
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b06      	cmp	r3, #6
 80058b2:	d00a      	beq.n	80058ca <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	335d      	adds	r3, #93	; 0x5d
 80058c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d156      	bne.n	8005978 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	3358      	adds	r3, #88	; 0x58
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4403      	add	r3, r0
 80058ec:	3358      	adds	r3, #88	; 0x58
 80058ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	440b      	add	r3, r1
 80058fe:	3358      	adds	r3, #88	; 0x58
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d914      	bls.n	8005930 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	440b      	add	r3, r1
 8005914:	3358      	adds	r3, #88	; 0x58
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	335c      	adds	r3, #92	; 0x5c
 800592a:	2204      	movs	r2, #4
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	e009      	b.n	8005944 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	335c      	adds	r3, #92	; 0x5c
 8005940:	2202      	movs	r2, #2
 8005942:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800595a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005962:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	e056      	b.n	8005a26 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4613      	mov	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	440b      	add	r3, r1
 8005986:	335d      	adds	r3, #93	; 0x5d
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d123      	bne.n	80059d6 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	440b      	add	r3, r1
 800599c:	335c      	adds	r3, #92	; 0x5c
 800599e:	2202      	movs	r2, #2
 80059a0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059b8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	461a      	mov	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e027      	b.n	8005a26 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	440b      	add	r3, r1
 80059e4:	335d      	adds	r3, #93	; 0x5d
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b07      	cmp	r3, #7
 80059ea:	d11c      	bne.n	8005a26 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	3358      	adds	r3, #88	; 0x58
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	1c59      	adds	r1, r3, #1
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	4403      	add	r3, r0
 8005a0e:	3358      	adds	r3, #88	; 0x58
 8005a10:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	440b      	add	r3, r1
 8005a20:	335c      	adds	r3, #92	; 0x5c
 8005a22:	2204      	movs	r2, #4
 8005a24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	461a      	mov	r2, r3
 8005a34:	2302      	movs	r3, #2
 8005a36:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	b2d8      	uxtb	r0, r3
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	335c      	adds	r3, #92	; 0x5c
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4601      	mov	r1, r0
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f007 fda4 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a58:	e0cd      	b.n	8005bf6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d13e      	bne.n	8005aee <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8a:	f043 0302 	orr.w	r3, r3, #2
 8005a8e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3358      	adds	r3, #88	; 0x58
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	1c59      	adds	r1, r3, #1
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4403      	add	r3, r0
 8005ab2:	3358      	adds	r3, #88	; 0x58
 8005ab4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	440b      	add	r3, r1
 8005ac4:	335d      	adds	r3, #93	; 0x5d
 8005ac6:	2206      	movs	r2, #6
 8005ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f005 fbf8 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	6093      	str	r3, [r2, #8]
}
 8005aec:	e083      	b.n	8005bf6 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d178      	bne.n	8005bf6 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b04:	6879      	ldr	r1, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	440b      	add	r3, r1
 8005b12:	333f      	adds	r3, #63	; 0x3f
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d122      	bne.n	8005b60 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	440b      	add	r3, r1
 8005b28:	3358      	adds	r3, #88	; 0x58
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f005 fbb6 	bl	800b2ca <USB_HC_Halt>
 8005b5e:	e041      	b.n	8005be4 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	333f      	adds	r3, #63	; 0x3f
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	440b      	add	r3, r1
 8005b84:	333f      	adds	r3, #63	; 0x3f
 8005b86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d12b      	bne.n	8005be4 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	440b      	add	r3, r1
 8005b9a:	3358      	adds	r3, #88	; 0x58
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	335d      	adds	r3, #93	; 0x5d
 8005bb0:	2203      	movs	r2, #3
 8005bb2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	4611      	mov	r1, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f005 fb73 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2310      	movs	r3, #16
 8005bf4:	6093      	str	r3, [r2, #8]
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b086      	sub	sp, #24
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d119      	bne.n	8005c62 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5a:	f043 0302 	orr.w	r3, r3, #2
 8005c5e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005c60:	e31e      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d141      	bne.n	8005cfc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c84:	461a      	mov	r2, r3
 8005c86:	2320      	movs	r3, #32
 8005c88:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005c8a:	6879      	ldr	r1, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	440b      	add	r3, r1
 8005c98:	333d      	adds	r3, #61	; 0x3d
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f040 82ff 	bne.w	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	333d      	adds	r3, #61	; 0x3d
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	440b      	add	r3, r1
 8005cc4:	335c      	adds	r3, #92	; 0x5c
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	b2d2      	uxtb	r2, r2
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f005 fae8 	bl	800b2ca <USB_HC_Halt>
}
 8005cfa:	e2d1      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d13f      	bne.n	8005d92 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	440b      	add	r3, r1
 8005d20:	335d      	adds	r3, #93	; 0x5d
 8005d22:	2204      	movs	r2, #4
 8005d24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	440b      	add	r3, r1
 8005d34:	333d      	adds	r3, #61	; 0x3d
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	3358      	adds	r3, #88	; 0x58
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d68:	f043 0302 	orr.w	r3, r3, #2
 8005d6c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f005 faa6 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	6093      	str	r3, [r2, #8]
}
 8005d90:	e286      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d122      	bne.n	8005df0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f005 fa78 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	461a      	mov	r2, r3
 8005de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dec:	6093      	str	r3, [r2, #8]
}
 8005dee:	e257      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d135      	bne.n	8005e72 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	440b      	add	r3, r1
 8005e14:	3358      	adds	r3, #88	; 0x58
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f043 0302 	orr.w	r3, r3, #2
 8005e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f005 fa40 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	2301      	movs	r3, #1
 8005e5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4613      	mov	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4413      	add	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	440b      	add	r3, r1
 8005e6a:	335d      	adds	r3, #93	; 0x5d
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
}
 8005e70:	e216      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d12b      	bne.n	8005ee0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	2308      	movs	r3, #8
 8005e98:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	0151      	lsls	r1, r2, #5
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	440a      	add	r2, r1
 8005eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb4:	f043 0302 	orr.w	r3, r3, #2
 8005eb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f005 fa00 	bl	800b2ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	335d      	adds	r3, #93	; 0x5d
 8005eda:	2205      	movs	r2, #5
 8005edc:	701a      	strb	r2, [r3, #0]
}
 8005ede:	e1df      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d135      	bne.n	8005f62 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	440b      	add	r3, r1
 8005f04:	3358      	adds	r3, #88	; 0x58
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	440b      	add	r3, r1
 8005f18:	335d      	adds	r3, #93	; 0x5d
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f005 f9be 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	6093      	str	r3, [r2, #8]
}
 8005f60:	e19e      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d12b      	bne.n	8005fd0 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f92:	f043 0302 	orr.w	r3, r3, #2
 8005f96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f005 f991 	bl	800b2ca <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	335d      	adds	r3, #93	; 0x5d
 8005fb8:	2206      	movs	r2, #6
 8005fba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	6093      	str	r3, [r2, #8]
}
 8005fce:	e167      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe6:	d135      	bne.n	8006054 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006002:	f043 0302 	orr.w	r3, r3, #2
 8006006:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f005 f959 	bl	800b2ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006024:	461a      	mov	r2, r3
 8006026:	2310      	movs	r3, #16
 8006028:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	461a      	mov	r2, r3
 8006038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800603c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	335d      	adds	r3, #93	; 0x5d
 800604e:	2208      	movs	r2, #8
 8006050:	701a      	strb	r2, [r3, #0]
}
 8006052:	e125      	b.n	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b02      	cmp	r3, #2
 8006068:	f040 811a 	bne.w	80062a0 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	0151      	lsls	r1, r2, #5
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	440a      	add	r2, r1
 8006082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006086:	f023 0302 	bic.w	r3, r3, #2
 800608a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	440b      	add	r3, r1
 800609a:	335d      	adds	r3, #93	; 0x5d
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d137      	bne.n	8006112 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	440b      	add	r3, r1
 80060b0:	335c      	adds	r3, #92	; 0x5c
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	440b      	add	r3, r1
 80060c4:	333f      	adds	r3, #63	; 0x3f
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d00b      	beq.n	80060e4 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	440b      	add	r3, r1
 80060da:	333f      	adds	r3, #63	; 0x3f
 80060dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80060de:	2b03      	cmp	r3, #3
 80060e0:	f040 80c5 	bne.w	800626e <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	440b      	add	r3, r1
 80060f2:	3351      	adds	r3, #81	; 0x51
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	f083 0301 	eor.w	r3, r3, #1
 80060fa:	b2d8      	uxtb	r0, r3
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	440b      	add	r3, r1
 800610a:	3351      	adds	r3, #81	; 0x51
 800610c:	4602      	mov	r2, r0
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	e0ad      	b.n	800626e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	440b      	add	r3, r1
 8006120:	335d      	adds	r3, #93	; 0x5d
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d10a      	bne.n	800613e <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006128:	6879      	ldr	r1, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	440b      	add	r3, r1
 8006136:	335c      	adds	r3, #92	; 0x5c
 8006138:	2202      	movs	r2, #2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e097      	b.n	800626e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	440b      	add	r3, r1
 800614c:	335d      	adds	r3, #93	; 0x5d
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2b04      	cmp	r3, #4
 8006152:	d10a      	bne.n	800616a <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	440b      	add	r3, r1
 8006162:	335c      	adds	r3, #92	; 0x5c
 8006164:	2202      	movs	r2, #2
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e081      	b.n	800626e <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	335d      	adds	r3, #93	; 0x5d
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b05      	cmp	r3, #5
 800617e:	d10a      	bne.n	8006196 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	335c      	adds	r3, #92	; 0x5c
 8006190:	2205      	movs	r2, #5
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	e06b      	b.n	800626e <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	440b      	add	r3, r1
 80061a4:	335d      	adds	r3, #93	; 0x5d
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b06      	cmp	r3, #6
 80061aa:	d00a      	beq.n	80061c2 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	440b      	add	r3, r1
 80061ba:	335d      	adds	r3, #93	; 0x5d
 80061bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d155      	bne.n	800626e <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	440b      	add	r3, r1
 80061d0:	3358      	adds	r3, #88	; 0x58
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	1c59      	adds	r1, r3, #1
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4403      	add	r3, r0
 80061e4:	3358      	adds	r3, #88	; 0x58
 80061e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	440b      	add	r3, r1
 80061f6:	3358      	adds	r3, #88	; 0x58
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d914      	bls.n	8006228 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	3358      	adds	r3, #88	; 0x58
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	440b      	add	r3, r1
 8006220:	335c      	adds	r3, #92	; 0x5c
 8006222:	2204      	movs	r2, #4
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e009      	b.n	800623c <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	440b      	add	r3, r1
 8006236:	335c      	adds	r3, #92	; 0x5c
 8006238:	2202      	movs	r2, #2
 800623a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006252:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800625a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	461a      	mov	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	461a      	mov	r2, r3
 800627c:	2302      	movs	r3, #2
 800627e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	b2d8      	uxtb	r0, r3
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	440b      	add	r3, r1
 8006292:	335c      	adds	r3, #92	; 0x5c
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	4601      	mov	r1, r0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f007 f980 	bl	800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80062a0:	bf00      	nop
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	0c5b      	lsrs	r3, r3, #17
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062dc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d003      	beq.n	80062ec <HCD_RXQLVL_IRQHandler+0x44>
 80062e4:	2b05      	cmp	r3, #5
 80062e6:	f000 8082 	beq.w	80063ee <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062ea:	e083      	b.n	80063f4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d07f      	beq.n	80063f2 <HCD_RXQLVL_IRQHandler+0x14a>
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	440b      	add	r3, r1
 8006300:	3344      	adds	r3, #68	; 0x44
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d074      	beq.n	80063f2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	440b      	add	r3, r1
 800631a:	3344      	adds	r3, #68	; 0x44
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	b292      	uxth	r2, r2
 8006322:	4619      	mov	r1, r3
 8006324:	f004 fc0b 	bl	800ab3e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	440b      	add	r3, r1
 8006336:	3344      	adds	r3, #68	; 0x44
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	18d1      	adds	r1, r2, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4403      	add	r3, r0
 800634c:	3344      	adds	r3, #68	; 0x44
 800634e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	334c      	adds	r3, #76	; 0x4c
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	18d1      	adds	r1, r2, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4403      	add	r3, r0
 8006374:	334c      	adds	r3, #76	; 0x4c
 8006376:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	4b1d      	ldr	r3, [pc, #116]	; (80063fc <HCD_RXQLVL_IRQHandler+0x154>)
 8006388:	4013      	ands	r3, r2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d031      	beq.n	80063f2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	461a      	mov	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	440b      	add	r3, r1
 80063ce:	3350      	adds	r3, #80	; 0x50
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	f083 0301 	eor.w	r3, r3, #1
 80063d6:	b2d8      	uxtb	r0, r3
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	440b      	add	r3, r1
 80063e6:	3350      	adds	r3, #80	; 0x50
 80063e8:	4602      	mov	r2, r0
 80063ea:	701a      	strb	r2, [r3, #0]
      break;
 80063ec:	e001      	b.n	80063f2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80063f2:	bf00      	nop
  }
}
 80063f4:	bf00      	nop
 80063f6:	3728      	adds	r7, #40	; 0x28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	1ff80000 	.word	0x1ff80000

08006400 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800642c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b02      	cmp	r3, #2
 8006436:	d10b      	bne.n	8006450 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	d102      	bne.n	8006448 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f007 f890 	bl	800d568 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f043 0302 	orr.w	r3, r3, #2
 800644e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0308 	and.w	r3, r3, #8
 8006456:	2b08      	cmp	r3, #8
 8006458:	d132      	bne.n	80064c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f043 0308 	orr.w	r3, r3, #8
 8006460:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d126      	bne.n	80064ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	2b02      	cmp	r3, #2
 8006472:	d113      	bne.n	800649c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800647a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800647e:	d106      	bne.n	800648e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2102      	movs	r1, #2
 8006486:	4618      	mov	r0, r3
 8006488:	f004 fc56 	bl	800ad38 <USB_InitFSLSPClkSel>
 800648c:	e011      	b.n	80064b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f004 fc4f 	bl	800ad38 <USB_InitFSLSPClkSel>
 800649a:	e00a      	b.n	80064b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d106      	bne.n	80064b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064aa:	461a      	mov	r2, r3
 80064ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80064b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f007 f882 	bl	800d5bc <HAL_HCD_PortEnabled_Callback>
 80064b8:	e002      	b.n	80064c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f007 f88c 	bl	800d5d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d103      	bne.n	80064d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f043 0320 	orr.w	r3, r3, #32
 80064d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064d8:	461a      	mov	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6013      	str	r3, [r2, #0]
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e081      	b.n	80065fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fa ff69 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2224      	movs	r2, #36	; 0x24
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006536:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006546:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655c:	609a      	str	r2, [r3, #8]
 800655e:	e006      	b.n	800656e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800656c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	2b02      	cmp	r3, #2
 8006574:	d104      	bne.n	8006580 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800657e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	ea42 0103 	orr.w	r1, r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	021a      	lsls	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69d9      	ldr	r1, [r3, #28]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0201 	orr.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b20      	cmp	r3, #32
 8006618:	d138      	bne.n	800668c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006624:	2302      	movs	r3, #2
 8006626:	e032      	b.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	; 0x24
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0201 	orr.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e000      	b.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800668c:	2302      	movs	r3, #2
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d139      	bne.n	8006724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e033      	b.n	8006726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2224      	movs	r2, #36	; 0x24
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0201 	bic.w	r2, r2, #1
 80066dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e0af      	b.n	80068a6 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fa febe 	bl	80014dc <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e00a      	b.n	8006794 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	3304      	adds	r3, #4
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	2200      	movs	r2, #0
 800678c:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3301      	adds	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d9f1      	bls.n	800677e <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0204 	orr.w	r2, r2, #4
 80067a8:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	4b3f      	ldr	r3, [pc, #252]	; (80068b0 <HAL_LCD_Init+0x17c>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6851      	ldr	r1, [r2, #4]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6892      	ldr	r2, [r2, #8]
 80067bc:	4311      	orrs	r1, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80067c2:	4311      	orrs	r1, r2
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80067c8:	4311      	orrs	r1, r2
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	69d2      	ldr	r2, [r2, #28]
 80067ce:	4311      	orrs	r1, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6a12      	ldr	r2, [r2, #32]
 80067d4:	4311      	orrs	r1, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6992      	ldr	r2, [r2, #24]
 80067da:	4311      	orrs	r1, r2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067e0:	4311      	orrs	r1, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	430b      	orrs	r3, r1
 80067e8:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8f1 	bl	80069d2 <LCD_WaitForSynchro>
 80067f0:	4603      	mov	r3, r0
 80067f2:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_LCD_Init+0xca>
  {
    return status;
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	e053      	b.n	80068a6 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006836:	f7fb fe2f 	bl	8002498 <HAL_GetTick>
 800683a:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800683c:	e00c      	b.n	8006858 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800683e:	f7fb fe2b 	bl	8002498 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800684c:	d904      	bls.n	8006858 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2208      	movs	r2, #8
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e026      	b.n	80068a6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d1eb      	bne.n	800683e <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006866:	f7fb fe17 	bl	8002498 <HAL_GetTick>
 800686a:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 800686c:	e00c      	b.n	8006888 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800686e:	f7fb fe13 	bl	8002498 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800687c:	d904      	bls.n	8006888 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2210      	movs	r2, #16
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e00e      	b.n	80068a6 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b10      	cmp	r3, #16
 8006894:	d1eb      	bne.n	800686e <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80068a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	fc00000e 	.word	0xfc00000e

080068b4 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b086      	sub	sp, #24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c6:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 80068c8:	7cbb      	ldrb	r3, [r7, #18]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d002      	beq.n	80068d4 <HAL_LCD_Clear+0x20>
 80068ce:	7cbb      	ldrb	r3, [r7, #18]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d140      	bne.n	8006956 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_LCD_Clear+0x2e>
 80068de:	2302      	movs	r3, #2
 80068e0:	e03a      	b.n	8006958 <HAL_LCD_Clear+0xa4>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 80068f2:	f7fb fdd1 	bl	8002498 <HAL_GetTick>
 80068f6:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 80068f8:	e010      	b.n	800691c <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80068fa:	f7fb fdcd 	bl	8002498 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006908:	d908      	bls.n	800691c <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e01d      	b.n	8006958 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b04      	cmp	r3, #4
 8006928:	d0e7      	beq.n	80068fa <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e00a      	b.n	8006946 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	3304      	adds	r3, #4
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	2200      	movs	r2, #0
 800693e:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3301      	adds	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b0f      	cmp	r3, #15
 800694a:	d9f1      	bls.n	8006930 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f807 	bl	8006960 <HAL_LCD_UpdateDisplayRequest>
 8006952:	4603      	mov	r3, r0
 8006954:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 8006956:	7cfb      	ldrb	r3, [r7, #19]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0204 	orr.w	r2, r2, #4
 800697e:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006980:	f7fb fd8a 	bl	8002498 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8006986:	e010      	b.n	80069aa <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006988:	f7fb fd86 	bl	8002498 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006996:	d908      	bls.n	80069aa <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2204      	movs	r2, #4
 800699c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e00f      	b.n	80069ca <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d1e7      	bne.n	8006988 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80069da:	f7fb fd5d 	bl	8002498 <HAL_GetTick>
 80069de:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80069e0:	e00c      	b.n	80069fc <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80069e2:	f7fb fd59 	bl	8002498 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f0:	d904      	bls.n	80069fc <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e007      	b.n	8006a0c <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d1eb      	bne.n	80069e2 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <HAL_PWREx_GetVoltageRange+0x18>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40007000 	.word	0x40007000

08006a30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3e:	d130      	bne.n	8006aa2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a40:	4b23      	ldr	r3, [pc, #140]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d038      	beq.n	8006ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a4e:	4b20      	ldr	r3, [pc, #128]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a56:	4a1e      	ldr	r2, [pc, #120]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ad4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2232      	movs	r2, #50	; 0x32
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	4a1b      	ldr	r2, [pc, #108]	; (8006ad8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6e:	0c9b      	lsrs	r3, r3, #18
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a74:	e002      	b.n	8006a7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a88:	d102      	bne.n	8006a90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f2      	bne.n	8006a76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9c:	d110      	bne.n	8006ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e00f      	b.n	8006ac2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aae:	d007      	beq.n	8006ac0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006ab0:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ab8:	4a05      	ldr	r2, [pc, #20]	; (8006ad0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006abe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	20000008 	.word	0x20000008
 8006ad8:	431bde83 	.word	0x431bde83

08006adc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a04      	ldr	r2, [pc, #16]	; (8006af8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aea:	6053      	str	r3, [r2, #4]
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40007000 	.word	0x40007000

08006afc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b04:	f7fb fcc8 	bl	8002498 <HAL_GetTick>
 8006b08:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e063      	b.n	8006bdc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10b      	bne.n	8006b38 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fa fe97 	bl	800185c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006b2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f858 	bl	8006be8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	021a      	lsls	r2, r3, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2120      	movs	r1, #32
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f850 	bl	8006c04 <QSPI_WaitFlagStateUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d131      	bne.n	8006bd2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b78:	f023 0310 	bic.w	r3, r3, #16
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6852      	ldr	r2, [r2, #4]
 8006b80:	0611      	lsls	r1, r2, #24
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68d2      	ldr	r2, [r2, #12]
 8006b86:	4311      	orrs	r1, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <HAL_QSPI_Init+0xe8>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6912      	ldr	r2, [r2, #16]
 8006b9e:	0411      	lsls	r1, r2, #16
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6952      	ldr	r2, [r2, #20]
 8006ba4:	4311      	orrs	r1, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6992      	ldr	r2, [r2, #24]
 8006baa:	4311      	orrs	r1, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	6812      	ldr	r2, [r2, #0]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	ffe0f8fe 	.word	0xffe0f8fe

08006be8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c14:	e01a      	b.n	8006c4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d016      	beq.n	8006c4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1e:	f7fb fc3b 	bl	8002498 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10b      	bne.n	8006c4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2204      	movs	r2, #4
 8006c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	f043 0201 	orr.w	r2, r3, #1
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e00e      	b.n	8006c6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf14      	ite	ne
 8006c5a:	2301      	movne	r3, #1
 8006c5c:	2300      	moveq	r3, #0
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d1d6      	bne.n	8006c16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e3d4      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c86:	4ba1      	ldr	r3, [pc, #644]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 030c 	and.w	r3, r3, #12
 8006c8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c90:	4b9e      	ldr	r3, [pc, #632]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0303 	and.w	r3, r3, #3
 8006c98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 80e4 	beq.w	8006e70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_RCC_OscConfig+0x4a>
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	f040 808b 	bne.w	8006dcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	f040 8087 	bne.w	8006dcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cbe:	4b93      	ldr	r3, [pc, #588]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x62>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e3ac      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1a      	ldr	r2, [r3, #32]
 8006cda:	4b8c      	ldr	r3, [pc, #560]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x7c>
 8006ce6:	4b89      	ldr	r3, [pc, #548]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cee:	e005      	b.n	8006cfc <HAL_RCC_OscConfig+0x88>
 8006cf0:	4b86      	ldr	r3, [pc, #536]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d223      	bcs.n	8006d48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fd3f 	bl	8007788 <RCC_SetFlashLatencyFromMSIRange>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e38d      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d14:	4b7d      	ldr	r3, [pc, #500]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a7c      	ldr	r2, [pc, #496]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d1a:	f043 0308 	orr.w	r3, r3, #8
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	4b7a      	ldr	r3, [pc, #488]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	4977      	ldr	r1, [pc, #476]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d32:	4b76      	ldr	r3, [pc, #472]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	4972      	ldr	r1, [pc, #456]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	604b      	str	r3, [r1, #4]
 8006d46:	e025      	b.n	8006d94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d48:	4b70      	ldr	r3, [pc, #448]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a6f      	ldr	r2, [pc, #444]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d4e:	f043 0308 	orr.w	r3, r3, #8
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b6d      	ldr	r3, [pc, #436]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	496a      	ldr	r1, [pc, #424]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d66:	4b69      	ldr	r3, [pc, #420]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	4965      	ldr	r1, [pc, #404]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fcff 	bl	8007788 <RCC_SetFlashLatencyFromMSIRange>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e34d      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d94:	f000 fc36 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4b5c      	ldr	r3, [pc, #368]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	4a5a      	ldr	r2, [pc, #360]	; (8006f10 <HAL_RCC_OscConfig+0x29c>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	fa21 f303 	lsr.w	r3, r1, r3
 8006db0:	4a58      	ldr	r2, [pc, #352]	; (8006f14 <HAL_RCC_OscConfig+0x2a0>)
 8006db2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006db4:	4b58      	ldr	r3, [pc, #352]	; (8006f18 <HAL_RCC_OscConfig+0x2a4>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fb fb1d 	bl	80023f8 <HAL_InitTick>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d052      	beq.n	8006e6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	e331      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d032      	beq.n	8006e3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006dd4:	4b4d      	ldr	r3, [pc, #308]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a4c      	ldr	r2, [pc, #304]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006de0:	f7fb fb5a 	bl	8002498 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006de8:	f7fb fb56 	bl	8002498 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e31a      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006dfa:	4b44      	ldr	r3, [pc, #272]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e06:	4b41      	ldr	r3, [pc, #260]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a40      	ldr	r2, [pc, #256]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e0c:	f043 0308 	orr.w	r3, r3, #8
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b3e      	ldr	r3, [pc, #248]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	493b      	ldr	r1, [pc, #236]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e24:	4b39      	ldr	r3, [pc, #228]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	4936      	ldr	r1, [pc, #216]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	604b      	str	r3, [r1, #4]
 8006e38:	e01a      	b.n	8006e70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e3a:	4b34      	ldr	r3, [pc, #208]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a33      	ldr	r2, [pc, #204]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e46:	f7fb fb27 	bl	8002498 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e4e:	f7fb fb23 	bl	8002498 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e2e7      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e60:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f0      	bne.n	8006e4e <HAL_RCC_OscConfig+0x1da>
 8006e6c:	e000      	b.n	8006e70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d074      	beq.n	8006f66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b08      	cmp	r3, #8
 8006e80:	d005      	beq.n	8006e8e <HAL_RCC_OscConfig+0x21a>
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2b0c      	cmp	r3, #12
 8006e86:	d10e      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d064      	beq.n	8006f64 <HAL_RCC_OscConfig+0x2f0>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d160      	bne.n	8006f64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e2c4      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eae:	d106      	bne.n	8006ebe <HAL_RCC_OscConfig+0x24a>
 8006eb0:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e01d      	b.n	8006efa <HAL_RCC_OscConfig+0x286>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec6:	d10c      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x26e>
 8006ec8:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0f      	ldr	r2, [pc, #60]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	e00b      	b.n	8006efa <HAL_RCC_OscConfig+0x286>
 8006ee2:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a06      	ldr	r2, [pc, #24]	; (8006f0c <HAL_RCC_OscConfig+0x298>)
 8006ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ef8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01c      	beq.n	8006f3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f02:	f7fb fac9 	bl	8002498 <HAL_GetTick>
 8006f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f08:	e011      	b.n	8006f2e <HAL_RCC_OscConfig+0x2ba>
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	0800e854 	.word	0x0800e854
 8006f14:	20000008 	.word	0x20000008
 8006f18:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f1c:	f7fb fabc 	bl	8002498 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b64      	cmp	r3, #100	; 0x64
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e280      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f2e:	4baf      	ldr	r3, [pc, #700]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x2a8>
 8006f3a:	e014      	b.n	8006f66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3c:	f7fb faac 	bl	8002498 <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f42:	e008      	b.n	8006f56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f44:	f7fb faa8 	bl	8002498 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b64      	cmp	r3, #100	; 0x64
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e26c      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f56:	4ba5      	ldr	r3, [pc, #660]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f0      	bne.n	8006f44 <HAL_RCC_OscConfig+0x2d0>
 8006f62:	e000      	b.n	8006f66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d060      	beq.n	8007034 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d005      	beq.n	8006f84 <HAL_RCC_OscConfig+0x310>
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	2b0c      	cmp	r3, #12
 8006f7c:	d119      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d116      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f84:	4b99      	ldr	r3, [pc, #612]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_RCC_OscConfig+0x328>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e249      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f9c:	4b93      	ldr	r3, [pc, #588]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	4990      	ldr	r1, [pc, #576]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb0:	e040      	b.n	8007034 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d023      	beq.n	8007002 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fba:	4b8c      	ldr	r3, [pc, #560]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a8b      	ldr	r2, [pc, #556]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc6:	f7fb fa67 	bl	8002498 <HAL_GetTick>
 8006fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fce:	f7fb fa63 	bl	8002498 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e227      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fe0:	4b82      	ldr	r3, [pc, #520]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0f0      	beq.n	8006fce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fec:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	497c      	ldr	r1, [pc, #496]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]
 8007000:	e018      	b.n	8007034 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007002:	4b7a      	ldr	r3, [pc, #488]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a79      	ldr	r2, [pc, #484]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800700c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700e:	f7fb fa43 	bl	8002498 <HAL_GetTick>
 8007012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007014:	e008      	b.n	8007028 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007016:	f7fb fa3f 	bl	8002498 <HAL_GetTick>
 800701a:	4602      	mov	r2, r0
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d901      	bls.n	8007028 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e203      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007028:	4b70      	ldr	r3, [pc, #448]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f0      	bne.n	8007016 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b00      	cmp	r3, #0
 800703e:	d03c      	beq.n	80070ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01c      	beq.n	8007082 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007048:	4b68      	ldr	r3, [pc, #416]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800704a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800704e:	4a67      	ldr	r2, [pc, #412]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007058:	f7fb fa1e 	bl	8002498 <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800705e:	e008      	b.n	8007072 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7fb fa1a 	bl	8002498 <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e1de      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007072:	4b5e      	ldr	r3, [pc, #376]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0ef      	beq.n	8007060 <HAL_RCC_OscConfig+0x3ec>
 8007080:	e01b      	b.n	80070ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007082:	4b5a      	ldr	r3, [pc, #360]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007088:	4a58      	ldr	r2, [pc, #352]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007092:	f7fb fa01 	bl	8002498 <HAL_GetTick>
 8007096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709a:	f7fb f9fd 	bl	8002498 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e1c1      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070ac:	4b4f      	ldr	r3, [pc, #316]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80070ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1ef      	bne.n	800709a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80a6 	beq.w	8007214 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c8:	2300      	movs	r3, #0
 80070ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80070cc:	4b47      	ldr	r3, [pc, #284]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80070ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10d      	bne.n	80070f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070d8:	4b44      	ldr	r3, [pc, #272]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80070da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070dc:	4a43      	ldr	r2, [pc, #268]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80070de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e2:	6593      	str	r3, [r2, #88]	; 0x58
 80070e4:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80070e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f0:	2301      	movs	r3, #1
 80070f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070f4:	4b3e      	ldr	r3, [pc, #248]	; (80071f0 <HAL_RCC_OscConfig+0x57c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d118      	bne.n	8007132 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007100:	4b3b      	ldr	r3, [pc, #236]	; (80071f0 <HAL_RCC_OscConfig+0x57c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a3a      	ldr	r2, [pc, #232]	; (80071f0 <HAL_RCC_OscConfig+0x57c>)
 8007106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800710a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800710c:	f7fb f9c4 	bl	8002498 <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007114:	f7fb f9c0 	bl	8002498 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e184      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007126:	4b32      	ldr	r3, [pc, #200]	; (80071f0 <HAL_RCC_OscConfig+0x57c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d108      	bne.n	800714c <HAL_RCC_OscConfig+0x4d8>
 800713a:	4b2c      	ldr	r3, [pc, #176]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800714a:	e024      	b.n	8007196 <HAL_RCC_OscConfig+0x522>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b05      	cmp	r3, #5
 8007152:	d110      	bne.n	8007176 <HAL_RCC_OscConfig+0x502>
 8007154:	4b25      	ldr	r3, [pc, #148]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715a:	4a24      	ldr	r2, [pc, #144]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800715c:	f043 0304 	orr.w	r3, r3, #4
 8007160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007164:	4b21      	ldr	r3, [pc, #132]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	4a20      	ldr	r2, [pc, #128]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007174:	e00f      	b.n	8007196 <HAL_RCC_OscConfig+0x522>
 8007176:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007186:	4b19      	ldr	r3, [pc, #100]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 800718e:	f023 0304 	bic.w	r3, r3, #4
 8007192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d016      	beq.n	80071cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800719e:	f7fb f97b 	bl	8002498 <HAL_GetTick>
 80071a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a4:	e00a      	b.n	80071bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a6:	f7fb f977 	bl	8002498 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e139      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071bc:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <HAL_RCC_OscConfig+0x578>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ed      	beq.n	80071a6 <HAL_RCC_OscConfig+0x532>
 80071ca:	e01a      	b.n	8007202 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071cc:	f7fb f964 	bl	8002498 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071d2:	e00f      	b.n	80071f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d4:	f7fb f960 	bl	8002498 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d906      	bls.n	80071f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e122      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071f4:	4b90      	ldr	r3, [pc, #576]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e8      	bne.n	80071d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007202:	7ffb      	ldrb	r3, [r7, #31]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d105      	bne.n	8007214 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007208:	4b8b      	ldr	r3, [pc, #556]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800720a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720c:	4a8a      	ldr	r2, [pc, #552]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800720e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007212:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8108 	beq.w	800742e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	2b02      	cmp	r3, #2
 8007224:	f040 80d0 	bne.w	80073c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007228:	4b83      	ldr	r3, [pc, #524]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f003 0203 	and.w	r2, r3, #3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	429a      	cmp	r2, r3
 800723a:	d130      	bne.n	800729e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	3b01      	subs	r3, #1
 8007248:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	429a      	cmp	r2, r3
 800724c:	d127      	bne.n	800729e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d11f      	bne.n	800729e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007268:	2a07      	cmp	r2, #7
 800726a:	bf14      	ite	ne
 800726c:	2201      	movne	r2, #1
 800726e:	2200      	moveq	r2, #0
 8007270:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007272:	4293      	cmp	r3, r2
 8007274:	d113      	bne.n	800729e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	3b01      	subs	r3, #1
 8007284:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007286:	429a      	cmp	r2, r3
 8007288:	d109      	bne.n	800729e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	085b      	lsrs	r3, r3, #1
 8007296:	3b01      	subs	r3, #1
 8007298:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d06e      	beq.n	800737c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b0c      	cmp	r3, #12
 80072a2:	d069      	beq.n	8007378 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80072a4:	4b64      	ldr	r3, [pc, #400]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80072b0:	4b61      	ldr	r3, [pc, #388]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0b7      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80072c0:	4b5d      	ldr	r3, [pc, #372]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a5c      	ldr	r2, [pc, #368]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80072cc:	f7fb f8e4 	bl	8002498 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fb f8e0 	bl	8002498 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e0a4      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072e6:	4b54      	ldr	r3, [pc, #336]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f0      	bne.n	80072d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f2:	4b51      	ldr	r3, [pc, #324]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	4b51      	ldr	r3, [pc, #324]	; (800743c <HAL_RCC_OscConfig+0x7c8>)
 80072f8:	4013      	ands	r3, r2
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007302:	3a01      	subs	r2, #1
 8007304:	0112      	lsls	r2, r2, #4
 8007306:	4311      	orrs	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800730c:	0212      	lsls	r2, r2, #8
 800730e:	4311      	orrs	r1, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007314:	0852      	lsrs	r2, r2, #1
 8007316:	3a01      	subs	r2, #1
 8007318:	0552      	lsls	r2, r2, #21
 800731a:	4311      	orrs	r1, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007320:	0852      	lsrs	r2, r2, #1
 8007322:	3a01      	subs	r2, #1
 8007324:	0652      	lsls	r2, r2, #25
 8007326:	4311      	orrs	r1, r2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800732c:	0912      	lsrs	r2, r2, #4
 800732e:	0452      	lsls	r2, r2, #17
 8007330:	430a      	orrs	r2, r1
 8007332:	4941      	ldr	r1, [pc, #260]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 8007334:	4313      	orrs	r3, r2
 8007336:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007338:	4b3f      	ldr	r3, [pc, #252]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a3e      	ldr	r2, [pc, #248]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800733e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007342:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007344:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a3b      	ldr	r2, [pc, #236]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800734a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800734e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007350:	f7fb f8a2 	bl	8002498 <HAL_GetTick>
 8007354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007356:	e008      	b.n	800736a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007358:	f7fb f89e 	bl	8002498 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e062      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736a:	4b33      	ldr	r3, [pc, #204]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0f0      	beq.n	8007358 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007376:	e05a      	b.n	800742e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e059      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800737c:	4b2e      	ldr	r3, [pc, #184]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d152      	bne.n	800742e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007388:	4b2b      	ldr	r3, [pc, #172]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800738e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007392:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007394:	4b28      	ldr	r3, [pc, #160]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	4a27      	ldr	r2, [pc, #156]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800739a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800739e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073a0:	f7fb f87a 	bl	8002498 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fb f876 	bl	8002498 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e03a      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ba:	4b1f      	ldr	r3, [pc, #124]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x734>
 80073c6:	e032      	b.n	800742e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b0c      	cmp	r3, #12
 80073cc:	d02d      	beq.n	800742a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ce:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a19      	ldr	r2, [pc, #100]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80073da:	4b17      	ldr	r3, [pc, #92]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80073e6:	4b14      	ldr	r3, [pc, #80]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	4a13      	ldr	r2, [pc, #76]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073ec:	f023 0303 	bic.w	r3, r3, #3
 80073f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80073f2:	4b11      	ldr	r3, [pc, #68]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4a10      	ldr	r2, [pc, #64]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 80073f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80073fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007400:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fb f849 	bl	8002498 <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800740a:	f7fb f845 	bl	8002498 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e009      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <HAL_RCC_OscConfig+0x7c4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <HAL_RCC_OscConfig+0x796>
 8007428:	e001      	b.n	800742e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40021000 	.word	0x40021000
 800743c:	f99d808c 	.word	0xf99d808c

08007440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0c8      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007454:	4b66      	ldr	r3, [pc, #408]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d910      	bls.n	8007484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007462:	4b63      	ldr	r3, [pc, #396]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f023 0207 	bic.w	r2, r3, #7
 800746a:	4961      	ldr	r1, [pc, #388]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007472:	4b5f      	ldr	r3, [pc, #380]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d001      	beq.n	8007484 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0b0      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d04c      	beq.n	800752a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d107      	bne.n	80074a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007498:	4b56      	ldr	r3, [pc, #344]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d121      	bne.n	80074e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e09e      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d107      	bne.n	80074c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074b0:	4b50      	ldr	r3, [pc, #320]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d115      	bne.n	80074e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e092      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d107      	bne.n	80074d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80074c8:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e086      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074d8:	4b46      	ldr	r3, [pc, #280]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e07e      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074e8:	4b42      	ldr	r3, [pc, #264]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f023 0203 	bic.w	r2, r3, #3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	493f      	ldr	r1, [pc, #252]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074fa:	f7fa ffcd 	bl	8002498 <HAL_GetTick>
 80074fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007500:	e00a      	b.n	8007518 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007502:	f7fa ffc9 	bl	8002498 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e066      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 020c 	and.w	r2, r3, #12
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	429a      	cmp	r2, r3
 8007528:	d1eb      	bne.n	8007502 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d008      	beq.n	8007548 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007536:	4b2f      	ldr	r3, [pc, #188]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	492c      	ldr	r1, [pc, #176]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 8007544:	4313      	orrs	r3, r2
 8007546:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007548:	4b29      	ldr	r3, [pc, #164]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d210      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007556:	4b26      	ldr	r3, [pc, #152]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 0207 	bic.w	r2, r3, #7
 800755e:	4924      	ldr	r1, [pc, #144]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007566:	4b22      	ldr	r3, [pc, #136]	; (80075f0 <HAL_RCC_ClockConfig+0x1b0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d001      	beq.n	8007578 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e036      	b.n	80075e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007584:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4918      	ldr	r1, [pc, #96]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4910      	ldr	r1, [pc, #64]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075b6:	f000 f825 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80075ba:	4601      	mov	r1, r0
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <HAL_RCC_ClockConfig+0x1b4>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <HAL_RCC_ClockConfig+0x1b8>)
 80075c8:	5cd3      	ldrb	r3, [r2, r3]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa21 f303 	lsr.w	r3, r1, r3
 80075d2:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80075d6:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <HAL_RCC_ClockConfig+0x1c0>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fa ff0c 	bl	80023f8 <HAL_InitTick>
 80075e0:	4603      	mov	r3, r0
 80075e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40022000 	.word	0x40022000
 80075f4:	40021000 	.word	0x40021000
 80075f8:	0800e854 	.word	0x0800e854
 80075fc:	20000008 	.word	0x20000008
 8007600:	2000000c 	.word	0x2000000c

08007604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007604:	b480      	push	{r7}
 8007606:	b089      	sub	sp, #36	; 0x24
 8007608:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007612:	4b3d      	ldr	r3, [pc, #244]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 030c 	and.w	r3, r3, #12
 800761a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800761c:	4b3a      	ldr	r3, [pc, #232]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_RCC_GetSysClockFreq+0x34>
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b0c      	cmp	r3, #12
 8007630:	d121      	bne.n	8007676 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d11e      	bne.n	8007676 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007638:	4b33      	ldr	r3, [pc, #204]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b00      	cmp	r3, #0
 8007642:	d107      	bne.n	8007654 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007644:	4b30      	ldr	r3, [pc, #192]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 8007646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	61fb      	str	r3, [r7, #28]
 8007652:	e005      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007654:	4b2c      	ldr	r3, [pc, #176]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007660:	4a2a      	ldr	r2, [pc, #168]	; (800770c <HAL_RCC_GetSysClockFreq+0x108>)
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007668:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10d      	bne.n	800768c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007674:	e00a      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d102      	bne.n	8007682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800767c:	4b24      	ldr	r3, [pc, #144]	; (8007710 <HAL_RCC_GetSysClockFreq+0x10c>)
 800767e:	61bb      	str	r3, [r7, #24]
 8007680:	e004      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d101      	bne.n	800768c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007688:	4b22      	ldr	r3, [pc, #136]	; (8007714 <HAL_RCC_GetSysClockFreq+0x110>)
 800768a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	2b0c      	cmp	r3, #12
 8007690:	d133      	bne.n	80076fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007692:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d002      	beq.n	80076a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d003      	beq.n	80076ae <HAL_RCC_GetSysClockFreq+0xaa>
 80076a6:	e005      	b.n	80076b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80076a8:	4b19      	ldr	r3, [pc, #100]	; (8007710 <HAL_RCC_GetSysClockFreq+0x10c>)
 80076aa:	617b      	str	r3, [r7, #20]
      break;
 80076ac:	e005      	b.n	80076ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80076ae:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_RCC_GetSysClockFreq+0x110>)
 80076b0:	617b      	str	r3, [r7, #20]
      break;
 80076b2:	e002      	b.n	80076ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	617b      	str	r3, [r7, #20]
      break;
 80076b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076ba:	4b13      	ldr	r3, [pc, #76]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	091b      	lsrs	r3, r3, #4
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	3301      	adds	r3, #1
 80076c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80076c8:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	fb02 f203 	mul.w	r2, r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_RCC_GetSysClockFreq+0x104>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	0e5b      	lsrs	r3, r3, #25
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	3301      	adds	r3, #1
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80076fa:	69bb      	ldr	r3, [r7, #24]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3724      	adds	r7, #36	; 0x24
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	40021000 	.word	0x40021000
 800770c:	0800e86c 	.word	0x0800e86c
 8007710:	00f42400 	.word	0x00f42400
 8007714:	007a1200 	.word	0x007a1200

08007718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800771c:	4b03      	ldr	r3, [pc, #12]	; (800772c <HAL_RCC_GetHCLKFreq+0x14>)
 800771e:	681b      	ldr	r3, [r3, #0]
}
 8007720:	4618      	mov	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000008 	.word	0x20000008

08007730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007734:	f7ff fff0 	bl	8007718 <HAL_RCC_GetHCLKFreq>
 8007738:	4601      	mov	r1, r0
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	f003 0307 	and.w	r3, r3, #7
 8007744:	4a04      	ldr	r2, [pc, #16]	; (8007758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007746:	5cd3      	ldrb	r3, [r2, r3]
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007750:	4618      	mov	r0, r3
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40021000 	.word	0x40021000
 8007758:	0800e864 	.word	0x0800e864

0800775c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007760:	f7ff ffda 	bl	8007718 <HAL_RCC_GetHCLKFreq>
 8007764:	4601      	mov	r1, r0
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	0adb      	lsrs	r3, r3, #11
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	4a04      	ldr	r2, [pc, #16]	; (8007784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007772:	5cd3      	ldrb	r3, [r2, r3]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40021000 	.word	0x40021000
 8007784:	0800e864 	.word	0x0800e864

08007788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007794:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80077a0:	f7ff f938 	bl	8006a14 <HAL_PWREx_GetVoltageRange>
 80077a4:	6178      	str	r0, [r7, #20]
 80077a6:	e014      	b.n	80077d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80077a8:	4b25      	ldr	r3, [pc, #148]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ac:	4a24      	ldr	r2, [pc, #144]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b2:	6593      	str	r3, [r2, #88]	; 0x58
 80077b4:	4b22      	ldr	r3, [pc, #136]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80077c0:	f7ff f928 	bl	8006a14 <HAL_PWREx_GetVoltageRange>
 80077c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ca:	4a1d      	ldr	r2, [pc, #116]	; (8007840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80077cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077d8:	d10b      	bne.n	80077f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d919      	bls.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2ba0      	cmp	r3, #160	; 0xa0
 80077e4:	d902      	bls.n	80077ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077e6:	2302      	movs	r3, #2
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e013      	b.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077ec:	2301      	movs	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	e010      	b.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d902      	bls.n	80077fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80077f8:	2303      	movs	r3, #3
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	e00a      	b.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b80      	cmp	r3, #128	; 0x80
 8007802:	d102      	bne.n	800780a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007804:	2302      	movs	r3, #2
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	e004      	b.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b70      	cmp	r3, #112	; 0x70
 800780e:	d101      	bne.n	8007814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007810:	2301      	movs	r3, #1
 8007812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007814:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f023 0207 	bic.w	r2, r3, #7
 800781c:	4909      	ldr	r1, [pc, #36]	; (8007844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007824:	4b07      	ldr	r3, [pc, #28]	; (8007844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	429a      	cmp	r2, r3
 8007830:	d001      	beq.n	8007836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40021000 	.word	0x40021000
 8007844:	40022000 	.word	0x40022000

08007848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007850:	2300      	movs	r3, #0
 8007852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007854:	2300      	movs	r3, #0
 8007856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007860:	2b00      	cmp	r3, #0
 8007862:	d03f      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800786c:	d01c      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800786e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007872:	d802      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007878:	e01f      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x72>
 800787a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800787e:	d003      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007880:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007884:	d01c      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007886:	e018      	b.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007888:	4b85      	ldr	r3, [pc, #532]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4a84      	ldr	r2, [pc, #528]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800788e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007892:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007894:	e015      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3304      	adds	r3, #4
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f000 ff3f 	bl	8008720 <RCCEx_PLLSAI1_Config>
 80078a2:	4603      	mov	r3, r0
 80078a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078a6:	e00c      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3320      	adds	r3, #32
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 f826 	bl	8008900 <RCCEx_PLLSAI2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80078b8:	e003      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	74fb      	strb	r3, [r7, #19]
      break;
 80078be:	e000      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80078c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10b      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078c8:	4b75      	ldr	r3, [pc, #468]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d6:	4972      	ldr	r1, [pc, #456]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80078de:	e001      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e0:	7cfb      	ldrb	r3, [r7, #19]
 80078e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d03f      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078f8:	d01c      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80078fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078fe:	d802      	bhi.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00e      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007904:	e01f      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800790a:	d003      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800790c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007910:	d01c      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007912:	e018      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007914:	4b62      	ldr	r3, [pc, #392]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	4a61      	ldr	r2, [pc, #388]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800791a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007920:	e015      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3304      	adds	r3, #4
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fef9 	bl	8008720 <RCCEx_PLLSAI1_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007932:	e00c      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3320      	adds	r3, #32
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f000 ffe0 	bl	8008900 <RCCEx_PLLSAI2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007944:	e003      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	74fb      	strb	r3, [r7, #19]
      break;
 800794a:	e000      	b.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800794c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800794e:	7cfb      	ldrb	r3, [r7, #19]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007954:	4b52      	ldr	r3, [pc, #328]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007962:	494f      	ldr	r1, [pc, #316]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800796a:	e001      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	7cfb      	ldrb	r3, [r7, #19]
 800796e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 80a0 	beq.w	8007abe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800797e:	2300      	movs	r3, #0
 8007980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007982:	4b47      	ldr	r3, [pc, #284]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800798e:	2301      	movs	r3, #1
 8007990:	e000      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8007992:	2300      	movs	r3, #0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007998:	4b41      	ldr	r3, [pc, #260]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800799a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799c:	4a40      	ldr	r2, [pc, #256]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800799e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a2:	6593      	str	r3, [r2, #88]	; 0x58
 80079a4:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079b0:	2301      	movs	r3, #1
 80079b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b4:	4b3b      	ldr	r3, [pc, #236]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a3a      	ldr	r2, [pc, #232]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80079ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079c0:	f7fa fd6a 	bl	8002498 <HAL_GetTick>
 80079c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079c6:	e009      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079c8:	f7fa fd66 	bl	8002498 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d902      	bls.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	74fb      	strb	r3, [r7, #19]
        break;
 80079da:	e005      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80079dc:	4b31      	ldr	r3, [pc, #196]	; (8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0ef      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80079e8:	7cfb      	ldrb	r3, [r7, #19]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d15c      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80079ee:	4b2c      	ldr	r3, [pc, #176]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01f      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d019      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a0c:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a18:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1e:	4a20      	ldr	r2, [pc, #128]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2e:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007a38:	4a19      	ldr	r2, [pc, #100]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d016      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4a:	f7fa fd25 	bl	8002498 <HAL_GetTick>
 8007a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a50:	e00b      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a52:	f7fa fd21 	bl	8002498 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d902      	bls.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	74fb      	strb	r3, [r7, #19]
            break;
 8007a68:	e006      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0ec      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8007a78:	7cfb      	ldrb	r3, [r7, #19]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10c      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a8e:	4904      	ldr	r1, [pc, #16]	; (8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007a96:	e009      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a98:	7cfb      	ldrb	r3, [r7, #19]
 8007a9a:	74bb      	strb	r3, [r7, #18]
 8007a9c:	e006      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x264>
 8007a9e:	bf00      	nop
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aac:	7c7b      	ldrb	r3, [r7, #17]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d105      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab2:	4b9e      	ldr	r3, [pc, #632]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab6:	4a9d      	ldr	r2, [pc, #628]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007aca:	4b98      	ldr	r3, [pc, #608]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad0:	f023 0203 	bic.w	r2, r3, #3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	4994      	ldr	r1, [pc, #592]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007aec:	4b8f      	ldr	r3, [pc, #572]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007af2:	f023 020c 	bic.w	r2, r3, #12
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	498c      	ldr	r1, [pc, #560]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b0e:	4b87      	ldr	r3, [pc, #540]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1c:	4983      	ldr	r1, [pc, #524]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0308 	and.w	r3, r3, #8
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b30:	4b7e      	ldr	r3, [pc, #504]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3e:	497b      	ldr	r1, [pc, #492]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b52:	4b76      	ldr	r3, [pc, #472]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b60:	4972      	ldr	r1, [pc, #456]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b74:	4b6d      	ldr	r3, [pc, #436]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	496a      	ldr	r1, [pc, #424]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b96:	4b65      	ldr	r3, [pc, #404]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba4:	4961      	ldr	r1, [pc, #388]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bb8:	4b5c      	ldr	r3, [pc, #368]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc6:	4959      	ldr	r1, [pc, #356]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bda:	4b54      	ldr	r3, [pc, #336]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be8:	4950      	ldr	r1, [pc, #320]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bfc:	4b4b      	ldr	r3, [pc, #300]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	4948      	ldr	r1, [pc, #288]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c1e:	4b43      	ldr	r3, [pc, #268]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2c:	493f      	ldr	r1, [pc, #252]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d028      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c40:	4b3a      	ldr	r3, [pc, #232]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4e:	4937      	ldr	r1, [pc, #220]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5e:	d106      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c60:	4b32      	ldr	r3, [pc, #200]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6a:	60d3      	str	r3, [r2, #12]
 8007c6c:	e011      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c76:	d10c      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fd4e 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007c84:	4603      	mov	r3, r0
 8007c86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c88:	7cfb      	ldrb	r3, [r7, #19]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007c8e:	7cfb      	ldrb	r3, [r7, #19]
 8007c90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d028      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c9e:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	491f      	ldr	r1, [pc, #124]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cbe:	4b1b      	ldr	r3, [pc, #108]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	4a1a      	ldr	r2, [pc, #104]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc8:	60d3      	str	r3, [r2, #12]
 8007cca:	e011      	b.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fd1f 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007ce6:	7cfb      	ldrb	r3, [r7, #19]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007cec:	7cfb      	ldrb	r3, [r7, #19]
 8007cee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02b      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cfc:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0a:	4908      	ldr	r1, [pc, #32]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d1a:	d109      	bne.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d1c:	4b03      	ldr	r3, [pc, #12]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	4a02      	ldr	r2, [pc, #8]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d26:	60d3      	str	r3, [r2, #12]
 8007d28:	e014      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d38:	d10c      	bne.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 fced 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007d46:	4603      	mov	r3, r0
 8007d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d4a:	7cfb      	ldrb	r3, [r7, #19]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007d50:	7cfb      	ldrb	r3, [r7, #19]
 8007d52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d02f      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d60:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d6e:	4928      	ldr	r1, [pc, #160]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d7e:	d10d      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3304      	adds	r3, #4
 8007d84:	2102      	movs	r1, #2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fcca 	bl	8008720 <RCCEx_PLLSAI1_Config>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d90:	7cfb      	ldrb	r3, [r7, #19]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d014      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007d96:	7cfb      	ldrb	r3, [r7, #19]
 8007d98:	74bb      	strb	r3, [r7, #18]
 8007d9a:	e011      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da4:	d10c      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3320      	adds	r3, #32
 8007daa:	2102      	movs	r1, #2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fda7 	bl	8008900 <RCCEx_PLLSAI2_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007db6:	7cfb      	ldrb	r3, [r7, #19]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007dbc:	7cfb      	ldrb	r3, [r7, #19]
 8007dbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00a      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	490d      	ldr	r1, [pc, #52]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dee:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dfe:	4904      	ldr	r1, [pc, #16]	; (8007e10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e00:	4313      	orrs	r3, r2
 8007e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007e06:	7cbb      	ldrb	r3, [r7, #18]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40021000 	.word	0x40021000

08007e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e26:	d137      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007e28:	4bb8      	ldr	r3, [pc, #736]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e32:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3a:	d014      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e40:	d01e      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	d001      	beq.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007e48:	f000 bc60 	b.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e4c:	4baf      	ldr	r3, [pc, #700]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	f003 0302 	and.w	r3, r3, #2
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	f040 8453 	bne.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8007e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e60:	61fb      	str	r3, [r7, #28]
      break;
 8007e62:	f000 bc4e 	b.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e66:	4ba9      	ldr	r3, [pc, #676]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	f040 8448 	bne.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8007e76:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e7a:	61fb      	str	r3, [r7, #28]
      break;
 8007e7c:	f000 bc43 	b.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e80:	4ba2      	ldr	r3, [pc, #648]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8c:	f040 843d 	bne.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8007e90:	4b9f      	ldr	r3, [pc, #636]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007e92:	61fb      	str	r3, [r7, #28]
      break;
 8007e94:	f000 bc39 	b.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e98:	4b9c      	ldr	r3, [pc, #624]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0303 	and.w	r3, r3, #3
 8007ea0:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d023      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d02e      	beq.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d139      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007eb0:	4b96      	ldr	r3, [pc, #600]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d116      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007ebc:	4b93      	ldr	r3, [pc, #588]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0308 	and.w	r3, r3, #8
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d005      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8007ec8:	4b90      	ldr	r3, [pc, #576]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	091b      	lsrs	r3, r3, #4
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	e005      	b.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007ed4:	4b8d      	ldr	r3, [pc, #564]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	4a8c      	ldr	r2, [pc, #560]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007ee8:	e01f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
      break;
 8007eee:	e01c      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ef0:	4b86      	ldr	r3, [pc, #536]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efc:	d102      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8007efe:	4b86      	ldr	r3, [pc, #536]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8007f00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007f02:	e012      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61bb      	str	r3, [r7, #24]
      break;
 8007f08:	e00f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f0a:	4b80      	ldr	r3, [pc, #512]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f16:	d102      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8007f18:	4b80      	ldr	r3, [pc, #512]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8007f1a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007f1c:	e005      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
      break;
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	61bb      	str	r3, [r7, #24]
      break;
 8007f28:	bf00      	nop
    }

    switch(PeriphClk)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	f000 8345 	beq.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8007f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f38:	d825      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	f000 81df 	beq.w	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d80f      	bhi.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	f000 8128 	beq.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d803      	bhi.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	f000 80ec 	beq.w	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007f54:	e3da      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	f000 8169 	beq.w	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	f000 819a 	beq.w	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8007f62:	e3d3      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007f64:	2b40      	cmp	r3, #64	; 0x40
 8007f66:	f000 82c1 	beq.w	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d803      	bhi.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	f000 81fd 	beq.w	800836e <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8007f74:	e3ca      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007f76:	2b80      	cmp	r3, #128	; 0x80
 8007f78:	f000 82db 	beq.w	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8007f7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f80:	f000 82fa 	beq.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8007f84:	e3c2      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f8a:	f000 822d 	beq.w	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f92:	d811      	bhi.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f98:	d021      	beq.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9e:	d804      	bhi.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa4:	f000 834c 	beq.w	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8007fa8:	e3b0      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fae:	d01d      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb4:	d021      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007fb6:	e3a9      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbc:	f000 8285 	beq.w	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc4:	d804      	bhi.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fca:	f000 837e 	beq.w	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 8007fce:	e39d      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007fd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fd4:	d011      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007fd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fda:	d00e      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007fdc:	e396      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007fde:	69b9      	ldr	r1, [r7, #24]
 8007fe0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007fe4:	f000 fd66 	bl	8008ab4 <RCCEx_GetSAIxPeriphCLKFreq>
 8007fe8:	61f8      	str	r0, [r7, #28]
      break;
 8007fea:	e38f      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007fec:	69b9      	ldr	r1, [r7, #24]
 8007fee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ff2:	f000 fd5f 	bl	8008ab4 <RCCEx_GetSAIxPeriphCLKFreq>
 8007ff6:	61f8      	str	r0, [r7, #28]
      break;
 8007ff8:	e388      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007ffa:	4b44      	ldr	r3, [pc, #272]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008000:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008004:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800800c:	d023      	beq.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 800800e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008012:	d003      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008018:	d04a      	beq.n	80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 800801a:	e086      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800801c:	4b3b      	ldr	r3, [pc, #236]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b02      	cmp	r3, #2
 8008026:	d17b      	bne.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8008028:	4b38      	ldr	r3, [pc, #224]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008034:	4b35      	ldr	r3, [pc, #212]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	e005      	b.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8008040:	4b32      	ldr	r3, [pc, #200]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	4a31      	ldr	r2, [pc, #196]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800804e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008052:	61fb      	str	r3, [r7, #28]
          break;
 8008054:	e064      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8008056:	4b2d      	ldr	r3, [pc, #180]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800805e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008062:	d15f      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8008064:	4b29      	ldr	r3, [pc, #164]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800806c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008070:	d158      	bne.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	0a1b      	lsrs	r3, r3, #8
 8008078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	fb02 f203 	mul.w	r2, r2, r3
 8008086:	4b21      	ldr	r3, [pc, #132]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	091b      	lsrs	r3, r3, #4
 800808c:	f003 0307 	and.w	r3, r3, #7
 8008090:	3301      	adds	r3, #1
 8008092:	fbb2 f3f3 	udiv	r3, r2, r3
 8008096:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8008098:	4b1c      	ldr	r3, [pc, #112]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	0d5b      	lsrs	r3, r3, #21
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	3301      	adds	r3, #1
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ac:	61fb      	str	r3, [r7, #28]
          break;
 80080ae:	e039      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080bc:	d134      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ca:	d12d      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80080cc:	4b0f      	ldr	r3, [pc, #60]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	0a1b      	lsrs	r3, r3, #8
 80080d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d6:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	fb02 f203 	mul.w	r2, r2, r3
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	3301      	adds	r3, #1
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80080f2:	4b06      	ldr	r3, [pc, #24]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	0d5b      	lsrs	r3, r3, #21
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	3301      	adds	r3, #1
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	fbb2 f3f3 	udiv	r3, r2, r3
 8008106:	61fb      	str	r3, [r7, #28]
          break;
 8008108:	e00e      	b.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800810a:	bf00      	nop
 800810c:	40021000 	.word	0x40021000
 8008110:	0003d090 	.word	0x0003d090
 8008114:	0800e86c 	.word	0x0800e86c
 8008118:	00f42400 	.word	0x00f42400
 800811c:	007a1200 	.word	0x007a1200
          break;
 8008120:	bf00      	nop
 8008122:	e2f3      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008124:	bf00      	nop
 8008126:	e2f1      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008128:	bf00      	nop
        break;
 800812a:	e2ef      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800812c:	4bac      	ldr	r3, [pc, #688]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800812e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b03      	cmp	r3, #3
 800813c:	d827      	bhi.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	08008155 	.word	0x08008155
 8008148:	0800815d 	.word	0x0800815d
 800814c:	08008165 	.word	0x08008165
 8008150:	08008179 	.word	0x08008179
          frequency = HAL_RCC_GetPCLK2Freq();
 8008154:	f7ff fb02 	bl	800775c <HAL_RCC_GetPCLK2Freq>
 8008158:	61f8      	str	r0, [r7, #28]
          break;
 800815a:	e01d      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 800815c:	f7ff fa52 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8008160:	61f8      	str	r0, [r7, #28]
          break;
 8008162:	e019      	b.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008164:	4b9e      	ldr	r3, [pc, #632]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800816c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008170:	d10f      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8008172:	4b9c      	ldr	r3, [pc, #624]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008174:	61fb      	str	r3, [r7, #28]
          break;
 8008176:	e00c      	b.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008178:	4b99      	ldr	r3, [pc, #612]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f003 0302 	and.w	r3, r3, #2
 8008182:	2b02      	cmp	r3, #2
 8008184:	d107      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8008186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818a:	61fb      	str	r3, [r7, #28]
          break;
 800818c:	e003      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 800818e:	bf00      	nop
 8008190:	e2bc      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008192:	bf00      	nop
 8008194:	e2ba      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008196:	bf00      	nop
        break;
 8008198:	e2b8      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800819a:	4b91      	ldr	r3, [pc, #580]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f003 030c 	and.w	r3, r3, #12
 80081a4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	d83a      	bhi.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80081ac:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	08008223 	.word	0x08008223
 80081bc:	08008223 	.word	0x08008223
 80081c0:	08008223 	.word	0x08008223
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	08008223 	.word	0x08008223
 80081cc:	08008223 	.word	0x08008223
 80081d0:	08008223 	.word	0x08008223
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	08008223 	.word	0x08008223
 80081dc:	08008223 	.word	0x08008223
 80081e0:	08008223 	.word	0x08008223
 80081e4:	0800820d 	.word	0x0800820d
          frequency = HAL_RCC_GetPCLK1Freq();
 80081e8:	f7ff faa2 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80081ec:	61f8      	str	r0, [r7, #28]
          break;
 80081ee:	e01d      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 80081f0:	f7ff fa08 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80081f4:	61f8      	str	r0, [r7, #28]
          break;
 80081f6:	e019      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f8:	4b79      	ldr	r3, [pc, #484]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d10f      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8008206:	4b77      	ldr	r3, [pc, #476]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008208:	61fb      	str	r3, [r7, #28]
          break;
 800820a:	e00c      	b.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800820c:	4b74      	ldr	r3, [pc, #464]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800820e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b02      	cmp	r3, #2
 8008218:	d107      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 800821a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800821e:	61fb      	str	r3, [r7, #28]
          break;
 8008220:	e003      	b.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8008222:	bf00      	nop
 8008224:	e272      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008226:	bf00      	nop
 8008228:	e270      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800822a:	bf00      	nop
        break;
 800822c:	e26e      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800822e:	4b6c      	ldr	r3, [pc, #432]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008234:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008238:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b10      	cmp	r3, #16
 800823e:	d00d      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8008240:	2b10      	cmp	r3, #16
 8008242:	d802      	bhi.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d005      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8008248:	e024      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800824a:	2b20      	cmp	r3, #32
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 800824e:	2b30      	cmp	r3, #48	; 0x30
 8008250:	d012      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8008252:	e01f      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008254:	f7ff fa6c 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 8008258:	61f8      	str	r0, [r7, #28]
          break;
 800825a:	e01b      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 800825c:	f7ff f9d2 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8008260:	61f8      	str	r0, [r7, #28]
          break;
 8008262:	e017      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008264:	4b5e      	ldr	r3, [pc, #376]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008270:	d10d      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8008272:	4b5c      	ldr	r3, [pc, #368]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008274:	61fb      	str	r3, [r7, #28]
          break;
 8008276:	e00a      	b.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008278:	4b59      	ldr	r3, [pc, #356]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d105      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8008286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828a:	61fb      	str	r3, [r7, #28]
          break;
 800828c:	e001      	b.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800828e:	bf00      	nop
 8008290:	e23c      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008292:	bf00      	nop
        break;
 8008294:	e23a      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008296:	4b52      	ldr	r3, [pc, #328]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b40      	cmp	r3, #64	; 0x40
 80082a6:	d00d      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d802      	bhi.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80082b0:	e024      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80082b2:	2b80      	cmp	r3, #128	; 0x80
 80082b4:	d00a      	beq.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80082b6:	2bc0      	cmp	r3, #192	; 0xc0
 80082b8:	d012      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80082ba:	e01f      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80082bc:	f7ff fa38 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80082c0:	61f8      	str	r0, [r7, #28]
          break;
 80082c2:	e01b      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80082c4:	f7ff f99e 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80082c8:	61f8      	str	r0, [r7, #28]
          break;
 80082ca:	e017      	b.n	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082cc:	4b44      	ldr	r3, [pc, #272]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d8:	d10d      	bne.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80082da:	4b42      	ldr	r3, [pc, #264]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80082dc:	61fb      	str	r3, [r7, #28]
          break;
 80082de:	e00a      	b.n	80082f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d105      	bne.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 80082ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082f2:	61fb      	str	r3, [r7, #28]
          break;
 80082f4:	e001      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 80082f6:	bf00      	nop
 80082f8:	e208      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80082fa:	bf00      	nop
        break;
 80082fc:	e206      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80082fe:	4b38      	ldr	r3, [pc, #224]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008308:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008310:	d010      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8008312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008316:	d802      	bhi.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 800831c:	e026      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 800831e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008322:	d00b      	beq.n	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008328:	d012      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800832a:	e01f      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 800832c:	f7ff fa00 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 8008330:	61f8      	str	r0, [r7, #28]
          break;
 8008332:	e01b      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8008334:	f7ff f966 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8008338:	61f8      	str	r0, [r7, #28]
          break;
 800833a:	e017      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800833c:	4b28      	ldr	r3, [pc, #160]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008348:	d10d      	bne.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800834a:	4b26      	ldr	r3, [pc, #152]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800834c:	61fb      	str	r3, [r7, #28]
          break;
 800834e:	e00a      	b.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008350:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d105      	bne.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	61fb      	str	r3, [r7, #28]
          break;
 8008364:	e001      	b.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8008366:	bf00      	nop
 8008368:	e1d0      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800836a:	bf00      	nop
        break;
 800836c:	e1ce      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800836e:	4b1c      	ldr	r3, [pc, #112]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008378:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008380:	d010      	beq.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008386:	d802      	bhi.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d007      	beq.n	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 800838c:	e026      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 800838e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008392:	d00b      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8008394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008398:	d012      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 800839a:	e01f      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800839c:	f7ff f9c8 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80083a0:	61f8      	str	r0, [r7, #28]
          break;
 80083a2:	e01b      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 80083a4:	f7ff f92e 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80083a8:	61f8      	str	r0, [r7, #28]
          break;
 80083aa:	e017      	b.n	80083dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083b8:	d10d      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80083ba:	4b0a      	ldr	r3, [pc, #40]	; (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80083bc:	61fb      	str	r3, [r7, #28]
          break;
 80083be:	e00a      	b.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d105      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80083ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d2:	61fb      	str	r3, [r7, #28]
          break;
 80083d4:	e001      	b.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80083d6:	bf00      	nop
 80083d8:	e198      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80083da:	bf00      	nop
        break;
 80083dc:	e196      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80083de:	bf00      	nop
 80083e0:	40021000 	.word	0x40021000
 80083e4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80083e8:	4bad      	ldr	r3, [pc, #692]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80083ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083f2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fa:	d036      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 80083fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008400:	d003      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008406:	d004      	beq.n	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8008408:	e05e      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 800840a:	f7ff f8fb 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800840e:	61f8      	str	r0, [r7, #28]
          break;
 8008410:	e05a      	b.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008412:	4ba3      	ldr	r3, [pc, #652]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800841a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800841e:	d150      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008420:	4b9f      	ldr	r3, [pc, #636]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d04a      	beq.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800842c:	4b9c      	ldr	r3, [pc, #624]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	0a1b      	lsrs	r3, r3, #8
 8008432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008436:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	fb02 f203 	mul.w	r2, r2, r3
 8008440:	4b97      	ldr	r3, [pc, #604]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	3301      	adds	r3, #1
 800844c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008450:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008452:	4b93      	ldr	r3, [pc, #588]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	0e5b      	lsrs	r3, r3, #25
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	3301      	adds	r3, #1
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	61fb      	str	r3, [r7, #28]
          break;
 8008468:	e02b      	b.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800846a:	4b8d      	ldr	r3, [pc, #564]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008476:	d126      	bne.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8008478:	4b89      	ldr	r3, [pc, #548]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d020      	beq.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008484:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	0a1b      	lsrs	r3, r3, #8
 800848a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	fb02 f203 	mul.w	r2, r2, r3
 8008498:	4b81      	ldr	r3, [pc, #516]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	091b      	lsrs	r3, r3, #4
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	3301      	adds	r3, #1
 80084a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80084aa:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	0e5b      	lsrs	r3, r3, #25
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	3301      	adds	r3, #1
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	61fb      	str	r3, [r7, #28]
          break;
 80084c0:	e001      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 80084c2:	bf00      	nop
 80084c4:	e122      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80084c6:	bf00      	nop
        break;
 80084c8:	e120      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80084ca:	4b75      	ldr	r3, [pc, #468]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80084cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d4:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d103      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 80084dc:	f7ff f93e 	bl	800775c <HAL_RCC_GetPCLK2Freq>
 80084e0:	61f8      	str	r0, [r7, #28]
        break;
 80084e2:	e113      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 80084e4:	f7ff f88e 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80084e8:	61f8      	str	r0, [r7, #28]
        break;
 80084ea:	e10f      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084ec:	4b6c      	ldr	r3, [pc, #432]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084f6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084fe:	d009      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008504:	d00a      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8008506:	2b00      	cmp	r3, #0
 8008508:	d000      	beq.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 800850a:	e011      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800850c:	f7ff f910 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 8008510:	61f8      	str	r0, [r7, #28]
          break;
 8008512:	e00d      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008514:	f7ff f876 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8008518:	61f8      	str	r0, [r7, #28]
          break;
 800851a:	e009      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800851c:	4b60      	ldr	r3, [pc, #384]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008528:	d101      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 800852a:	4b5e      	ldr	r3, [pc, #376]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800852c:	61fb      	str	r3, [r7, #28]
          break;
 800852e:	bf00      	nop
        break;
 8008530:	e0ec      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008532:	4b5b      	ldr	r3, [pc, #364]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800853c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008544:	d009      	beq.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d000      	beq.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8008550:	e011      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008552:	f7ff f8ed 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 8008556:	61f8      	str	r0, [r7, #28]
          break;
 8008558:	e00d      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 800855a:	f7ff f853 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800855e:	61f8      	str	r0, [r7, #28]
          break;
 8008560:	e009      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800856a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856e:	d101      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 8008570:	4b4c      	ldr	r3, [pc, #304]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8008572:	61fb      	str	r3, [r7, #28]
          break;
 8008574:	bf00      	nop
        break;
 8008576:	e0c9      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008578:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008582:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858a:	d009      	beq.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 800858c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008590:	d00a      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d000      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 8008596:	e011      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008598:	f7ff f8ca 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 800859c:	61f8      	str	r0, [r7, #28]
          break;
 800859e:	e00d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 80085a0:	f7ff f830 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80085a4:	61f8      	str	r0, [r7, #28]
          break;
 80085a6:	e009      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085a8:	4b3d      	ldr	r3, [pc, #244]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b4:	d101      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 80085b6:	4b3b      	ldr	r3, [pc, #236]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80085b8:	61fb      	str	r3, [r7, #28]
          break;
 80085ba:	bf00      	nop
        break;
 80085bc:	e0a6      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80085be:	4b38      	ldr	r3, [pc, #224]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80085c8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085d0:	d010      	beq.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 80085d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085d6:	d802      	bhi.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 80085dc:	e02f      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 80085de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085e2:	d012      	beq.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 80085e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80085e8:	d019      	beq.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 80085ea:	e028      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80085ec:	f7ff f8a0 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80085f0:	61f8      	str	r0, [r7, #28]
          break;
 80085f2:	e024      	b.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80085f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d118      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 8008602:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008606:	61fb      	str	r3, [r7, #28]
          break;
 8008608:	e014      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800860a:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008616:	d10f      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8008618:	4b22      	ldr	r3, [pc, #136]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800861a:	61fb      	str	r3, [r7, #28]
          break;
 800861c:	e00c      	b.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b02      	cmp	r3, #2
 800862a:	d107      	bne.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 800862c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008630:	61fb      	str	r3, [r7, #28]
          break;
 8008632:	e003      	b.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8008634:	bf00      	nop
 8008636:	e069      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008638:	bf00      	nop
 800863a:	e067      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800863c:	bf00      	nop
        break;
 800863e:	e065      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008640:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008646:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800864a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008652:	d010      	beq.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8008654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008658:	d802      	bhi.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 800865e:	e033      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 8008660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008664:	d012      	beq.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8008666:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800866a:	d01d      	beq.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 800866c:	e02c      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800866e:	f7ff f85f 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 8008672:	61f8      	str	r0, [r7, #28]
          break;
 8008674:	e028      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b02      	cmp	r3, #2
 8008682:	d11c      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 8008684:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008688:	61fb      	str	r3, [r7, #28]
          break;
 800868a:	e018      	b.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008698:	d113      	bne.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 800869a:	4b02      	ldr	r3, [pc, #8]	; (80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800869c:	61fb      	str	r3, [r7, #28]
          break;
 800869e:	e010      	b.n	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80086a0:	40021000 	.word	0x40021000
 80086a4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086a8:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80086aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d107      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 80086b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ba:	61fb      	str	r3, [r7, #28]
          break;
 80086bc:	e003      	b.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 80086be:	bf00      	nop
 80086c0:	e024      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80086c2:	bf00      	nop
 80086c4:	e022      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80086c6:	bf00      	nop
        break;
 80086c8:	e020      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80086cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80086dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e0:	d004      	beq.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 80086e2:	e00d      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80086e4:	f7ff f824 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 80086e8:	61f8      	str	r0, [r7, #28]
          break;
 80086ea:	e009      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f8:	d101      	bne.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 80086fc:	61fb      	str	r3, [r7, #28]
          break;
 80086fe:	bf00      	nop
        break;
 8008700:	e004      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800870a:	bf00      	nop
    }
  }

  return(frequency);
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40021000 	.word	0x40021000
 800871c:	00f42400 	.word	0x00f42400

08008720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800872e:	4b73      	ldr	r3, [pc, #460]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0303 	and.w	r3, r3, #3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d018      	beq.n	800876c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800873a:	4b70      	ldr	r3, [pc, #448]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f003 0203 	and.w	r2, r3, #3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	429a      	cmp	r2, r3
 8008748:	d10d      	bne.n	8008766 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
       ||
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008752:	4b6a      	ldr	r3, [pc, #424]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
       ||
 8008762:	429a      	cmp	r2, r3
 8008764:	d044      	beq.n	80087f0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
 800876a:	e041      	b.n	80087f0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d00c      	beq.n	800878e <RCCEx_PLLSAI1_Config+0x6e>
 8008774:	2b03      	cmp	r3, #3
 8008776:	d013      	beq.n	80087a0 <RCCEx_PLLSAI1_Config+0x80>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d120      	bne.n	80087be <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800877c:	4b5f      	ldr	r3, [pc, #380]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d11d      	bne.n	80087c4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800878c:	e01a      	b.n	80087c4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800878e:	4b5b      	ldr	r3, [pc, #364]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008796:	2b00      	cmp	r3, #0
 8008798:	d116      	bne.n	80087c8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800879e:	e013      	b.n	80087c8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087a0:	4b56      	ldr	r3, [pc, #344]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10f      	bne.n	80087cc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087ac:	4b53      	ldr	r3, [pc, #332]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d109      	bne.n	80087cc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087bc:	e006      	b.n	80087cc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]
      break;
 80087c2:	e004      	b.n	80087ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087c4:	bf00      	nop
 80087c6:	e002      	b.n	80087ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087c8:	bf00      	nop
 80087ca:	e000      	b.n	80087ce <RCCEx_PLLSAI1_Config+0xae>
      break;
 80087cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10d      	bne.n	80087f0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087d4:	4b49      	ldr	r3, [pc, #292]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	430b      	orrs	r3, r1
 80087ea:	4944      	ldr	r1, [pc, #272]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d17d      	bne.n	80088f2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80087f6:	4b41      	ldr	r3, [pc, #260]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a40      	ldr	r2, [pc, #256]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80087fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008802:	f7f9 fe49 	bl	8002498 <HAL_GetTick>
 8008806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008808:	e009      	b.n	800881e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800880a:	f7f9 fe45 	bl	8002498 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d902      	bls.n	800881e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	73fb      	strb	r3, [r7, #15]
        break;
 800881c:	e005      	b.n	800882a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800881e:	4b37      	ldr	r3, [pc, #220]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1ef      	bne.n	800880a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d160      	bne.n	80088f2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d111      	bne.n	800885a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008836:	4b31      	ldr	r3, [pc, #196]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800883e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	6892      	ldr	r2, [r2, #8]
 8008846:	0211      	lsls	r1, r2, #8
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	68d2      	ldr	r2, [r2, #12]
 800884c:	0912      	lsrs	r2, r2, #4
 800884e:	0452      	lsls	r2, r2, #17
 8008850:	430a      	orrs	r2, r1
 8008852:	492a      	ldr	r1, [pc, #168]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008854:	4313      	orrs	r3, r2
 8008856:	610b      	str	r3, [r1, #16]
 8008858:	e027      	b.n	80088aa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d112      	bne.n	8008886 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008860:	4b26      	ldr	r3, [pc, #152]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6892      	ldr	r2, [r2, #8]
 8008870:	0211      	lsls	r1, r2, #8
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6912      	ldr	r2, [r2, #16]
 8008876:	0852      	lsrs	r2, r2, #1
 8008878:	3a01      	subs	r2, #1
 800887a:	0552      	lsls	r2, r2, #21
 800887c:	430a      	orrs	r2, r1
 800887e:	491f      	ldr	r1, [pc, #124]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008880:	4313      	orrs	r3, r2
 8008882:	610b      	str	r3, [r1, #16]
 8008884:	e011      	b.n	80088aa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800888e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6892      	ldr	r2, [r2, #8]
 8008896:	0211      	lsls	r1, r2, #8
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6952      	ldr	r2, [r2, #20]
 800889c:	0852      	lsrs	r2, r2, #1
 800889e:	3a01      	subs	r2, #1
 80088a0:	0652      	lsls	r2, r2, #25
 80088a2:	430a      	orrs	r2, r1
 80088a4:	4915      	ldr	r1, [pc, #84]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a13      	ldr	r2, [pc, #76]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7f9 fdef 	bl	8002498 <HAL_GetTick>
 80088ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088bc:	e009      	b.n	80088d2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088be:	f7f9 fdeb 	bl	8002498 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d902      	bls.n	80088d2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	73fb      	strb	r3, [r7, #15]
          break;
 80088d0:	e005      	b.n	80088de <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80088d2:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0ef      	beq.n	80088be <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	4903      	ldr	r1, [pc, #12]	; (80088fc <RCCEx_PLLSAI1_Config+0x1dc>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40021000 	.word	0x40021000

08008900 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800890e:	4b68      	ldr	r3, [pc, #416]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0303 	and.w	r3, r3, #3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d018      	beq.n	800894c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800891a:	4b65      	ldr	r3, [pc, #404]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0203 	and.w	r2, r3, #3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d10d      	bne.n	8008946 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
       ||
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008932:	4b5f      	ldr	r3, [pc, #380]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
       ||
 8008942:	429a      	cmp	r2, r3
 8008944:	d044      	beq.n	80089d0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e041      	b.n	80089d0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d00c      	beq.n	800896e <RCCEx_PLLSAI2_Config+0x6e>
 8008954:	2b03      	cmp	r3, #3
 8008956:	d013      	beq.n	8008980 <RCCEx_PLLSAI2_Config+0x80>
 8008958:	2b01      	cmp	r3, #1
 800895a:	d120      	bne.n	800899e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800895c:	4b54      	ldr	r3, [pc, #336]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d11d      	bne.n	80089a4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800896c:	e01a      	b.n	80089a4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800896e:	4b50      	ldr	r3, [pc, #320]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008976:	2b00      	cmp	r3, #0
 8008978:	d116      	bne.n	80089a8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800897e:	e013      	b.n	80089a8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008980:	4b4b      	ldr	r3, [pc, #300]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10f      	bne.n	80089ac <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800898c:	4b48      	ldr	r3, [pc, #288]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800899c:	e006      	b.n	80089ac <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
      break;
 80089a2:	e004      	b.n	80089ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80089a4:	bf00      	nop
 80089a6:	e002      	b.n	80089ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80089a8:	bf00      	nop
 80089aa:	e000      	b.n	80089ae <RCCEx_PLLSAI2_Config+0xae>
      break;
 80089ac:	bf00      	nop
    }

    if(status == HAL_OK)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80089b4:	4b3e      	ldr	r3, [pc, #248]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	011b      	lsls	r3, r3, #4
 80089c8:	430b      	orrs	r3, r1
 80089ca:	4939      	ldr	r1, [pc, #228]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d167      	bne.n	8008aa6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089d6:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a35      	ldr	r2, [pc, #212]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80089dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e2:	f7f9 fd59 	bl	8002498 <HAL_GetTick>
 80089e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089e8:	e009      	b.n	80089fe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089ea:	f7f9 fd55 	bl	8002498 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d902      	bls.n	80089fe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	73fb      	strb	r3, [r7, #15]
        break;
 80089fc:	e005      	b.n	8008a0a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089fe:	4b2c      	ldr	r3, [pc, #176]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1ef      	bne.n	80089ea <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d14a      	bne.n	8008aa6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d111      	bne.n	8008a3a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a16:	4b26      	ldr	r3, [pc, #152]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6892      	ldr	r2, [r2, #8]
 8008a26:	0211      	lsls	r1, r2, #8
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	68d2      	ldr	r2, [r2, #12]
 8008a2c:	0912      	lsrs	r2, r2, #4
 8008a2e:	0452      	lsls	r2, r2, #17
 8008a30:	430a      	orrs	r2, r1
 8008a32:	491f      	ldr	r1, [pc, #124]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	614b      	str	r3, [r1, #20]
 8008a38:	e011      	b.n	8008a5e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a3a:	4b1d      	ldr	r3, [pc, #116]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008a42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6892      	ldr	r2, [r2, #8]
 8008a4a:	0211      	lsls	r1, r2, #8
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6912      	ldr	r2, [r2, #16]
 8008a50:	0852      	lsrs	r2, r2, #1
 8008a52:	3a01      	subs	r2, #1
 8008a54:	0652      	lsls	r2, r2, #25
 8008a56:	430a      	orrs	r2, r1
 8008a58:	4915      	ldr	r1, [pc, #84]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a5e:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a13      	ldr	r2, [pc, #76]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6a:	f7f9 fd15 	bl	8002498 <HAL_GetTick>
 8008a6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a70:	e009      	b.n	8008a86 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a72:	f7f9 fd11 	bl	8002498 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d902      	bls.n	8008a86 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	73fb      	strb	r3, [r7, #15]
          break;
 8008a84:	e005      	b.n	8008a92 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0ef      	beq.n	8008a72 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d106      	bne.n	8008aa6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008a9a:	695a      	ldr	r2, [r3, #20]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	4903      	ldr	r1, [pc, #12]	; (8008ab0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40021000 	.word	0x40021000

08008ab4 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b089      	sub	sp, #36	; 0x24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad0:	d10c      	bne.n	8008aec <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008ad2:	4b6e      	ldr	r3, [pc, #440]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008adc:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ae4:	d112      	bne.n	8008b0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008ae6:	4b6a      	ldr	r3, [pc, #424]	; (8008c90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008ae8:	61fb      	str	r3, [r7, #28]
 8008aea:	e00f      	b.n	8008b0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af2:	d10b      	bne.n	8008b0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008af4:	4b65      	ldr	r3, [pc, #404]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008afe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b06:	d101      	bne.n	8008b0c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008b08:	4b61      	ldr	r3, [pc, #388]	; (8008c90 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008b0a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f040 80b4 	bne.w	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b1e:	d003      	beq.n	8008b28 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b26:	d135      	bne.n	8008b94 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b28:	4b58      	ldr	r3, [pc, #352]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b34:	f040 80a1 	bne.w	8008c7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008b38:	4b54      	ldr	r3, [pc, #336]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 809a 	beq.w	8008c7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008b46:	4b51      	ldr	r3, [pc, #324]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	3301      	adds	r3, #1
 8008b52:	693a      	ldr	r2, [r7, #16]
 8008b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b58:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008b5a:	4b4c      	ldr	r3, [pc, #304]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	0a1b      	lsrs	r3, r3, #8
 8008b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b64:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008b6c:	4b47      	ldr	r3, [pc, #284]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d002      	beq.n	8008b7e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8008b78:	2311      	movs	r3, #17
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	e001      	b.n	8008b82 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8008b7e:	2307      	movs	r3, #7
 8008b80:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	fb02 f203 	mul.w	r2, r2, r3
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b90:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008b92:	e072      	b.n	8008c7a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d133      	bne.n	8008c02 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8008b9a:	4b3c      	ldr	r3, [pc, #240]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba6:	d169      	bne.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008ba8:	4b38      	ldr	r3, [pc, #224]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d063      	beq.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bb4:	4b35      	ldr	r3, [pc, #212]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	091b      	lsrs	r3, r3, #4
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008bc8:	4b30      	ldr	r3, [pc, #192]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	0a1b      	lsrs	r3, r3, #8
 8008bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bd2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008bda:	4b2c      	ldr	r3, [pc, #176]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8008be6:	2311      	movs	r3, #17
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e001      	b.n	8008bf0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008bec:	2307      	movs	r3, #7
 8008bee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	fb02 f203 	mul.w	r2, r2, r3
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e03c      	b.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c08:	d003      	beq.n	8008c12 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c10:	d134      	bne.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1e:	d12d      	bne.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008c20:	4b1a      	ldr	r3, [pc, #104]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d027      	beq.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c2c:	4b17      	ldr	r3, [pc, #92]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	091b      	lsrs	r3, r3, #4
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	3301      	adds	r3, #1
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008c40:	4b12      	ldr	r3, [pc, #72]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	0a1b      	lsrs	r3, r3, #8
 8008c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008c52:	4b0e      	ldr	r3, [pc, #56]	; (8008c8c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d002      	beq.n	8008c64 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008c5e:	2311      	movs	r3, #17
 8008c60:	617b      	str	r3, [r7, #20]
 8008c62:	e001      	b.n	8008c68 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8008c64:	2307      	movs	r3, #7
 8008c66:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	fb02 f203 	mul.w	r2, r2, r3
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e000      	b.n	8008c7c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008c7a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3724      	adds	r7, #36	; 0x24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40021000 	.word	0x40021000
 8008c90:	001fff68 	.word	0x001fff68

08008c94 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e153      	b.n	8008f4e <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7f8 feba 	bl	8001a34 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f957 	bl	8008f74 <SAI_Disable>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e13e      	b.n	8008f4e <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d007      	beq.n	8008cf0 <HAL_SAI_Init+0x5c>
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d302      	bcc.n	8008cea <HAL_SAI_Init+0x56>
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d006      	beq.n	8008cf6 <HAL_SAI_Init+0x62>
 8008ce8:	e008      	b.n	8008cfc <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
      break;
 8008cee:	e008      	b.n	8008d02 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008cf0:	2310      	movs	r3, #16
 8008cf2:	61fb      	str	r3, [r7, #28]
      break;
 8008cf4:	e005      	b.n	8008d02 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008cf6:	2320      	movs	r3, #32
 8008cf8:	61fb      	str	r3, [r7, #28]
      break;
 8008cfa:	e002      	b.n	8008d02 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61fb      	str	r3, [r7, #28]
      break;
 8008d00:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d81d      	bhi.n	8008d46 <HAL_SAI_Init+0xb2>
 8008d0a:	a201      	add	r2, pc, #4	; (adr r2, 8008d10 <HAL_SAI_Init+0x7c>)
 8008d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d10:	08008d21 	.word	0x08008d21
 8008d14:	08008d27 	.word	0x08008d27
 8008d18:	08008d2f 	.word	0x08008d2f
 8008d1c:	08008d37 	.word	0x08008d37
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	617b      	str	r3, [r7, #20]
      break;
 8008d24:	e012      	b.n	8008d4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2a:	617b      	str	r3, [r7, #20]
      break;
 8008d2c:	e00e      	b.n	8008d4c <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d32:	617b      	str	r3, [r7, #20]
      break;
 8008d34:	e00a      	b.n	8008d4c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d3a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f043 0301 	orr.w	r3, r3, #1
 8008d42:	61fb      	str	r3, [r7, #28]
      break;
 8008d44:	e002      	b.n	8008d4c <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]
      break;
 8008d4a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a81      	ldr	r2, [pc, #516]	; (8008f58 <HAL_SAI_Init+0x2c4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_SAI_Init+0xcc>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a80      	ldr	r2, [pc, #512]	; (8008f5c <HAL_SAI_Init+0x2c8>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d103      	bne.n	8008d68 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008d60:	4a7f      	ldr	r2, [pc, #508]	; (8008f60 <HAL_SAI_Init+0x2cc>)
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	6013      	str	r3, [r2, #0]
 8008d66:	e002      	b.n	8008d6e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008d68:	4a7e      	ldr	r2, [pc, #504]	; (8008f64 <HAL_SAI_Init+0x2d0>)
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d041      	beq.n	8008dfa <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a77      	ldr	r2, [pc, #476]	; (8008f58 <HAL_SAI_Init+0x2c4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d004      	beq.n	8008d8a <HAL_SAI_Init+0xf6>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a75      	ldr	r2, [pc, #468]	; (8008f5c <HAL_SAI_Init+0x2c8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d105      	bne.n	8008d96 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008d8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008d8e:	f7ff f841 	bl	8007e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d92:	6138      	str	r0, [r7, #16]
 8008d94:	e004      	b.n	8008da0 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008d96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008d9a:	f7ff f83b 	bl	8007e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d9e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	025b      	lsls	r3, r3, #9
 8008db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4a6b      	ldr	r2, [pc, #428]	; (8008f68 <HAL_SAI_Init+0x2d4>)
 8008dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc0:	08da      	lsrs	r2, r3, #3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	4b67      	ldr	r3, [pc, #412]	; (8008f68 <HAL_SAI_Init+0x2d4>)
 8008dca:	fba3 2301 	umull	r2, r3, r3, r1
 8008dce:	08da      	lsrs	r2, r3, #3
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	1aca      	subs	r2, r1, r3
 8008dda:	2a08      	cmp	r2, #8
 8008ddc:	d904      	bls.n	8008de8 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d104      	bne.n	8008dfa <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	085a      	lsrs	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_SAI_Init+0x176>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d109      	bne.n	8008e1e <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_SAI_Init+0x182>
 8008e12:	2300      	movs	r3, #0
 8008e14:	e001      	b.n	8008e1a <HAL_SAI_Init+0x186>
 8008e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e1a:	61bb      	str	r3, [r7, #24]
 8008e1c:	e008      	b.n	8008e30 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d102      	bne.n	8008e2c <HAL_SAI_Init+0x198>
 8008e26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e2a:	e000      	b.n	8008e2e <HAL_SAI_Init+0x19a>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6819      	ldr	r1, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b4c      	ldr	r3, [pc, #304]	; (8008f6c <HAL_SAI_Init+0x2d8>)
 8008e3c:	400b      	ands	r3, r1
 8008e3e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6819      	ldr	r1, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e54:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	431a      	orrs	r2, r3
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8008e68:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008e74:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	051b      	lsls	r3, r3, #20
 8008e7c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008e94:	f023 030f 	bic.w	r3, r3, #15
 8008e98:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6859      	ldr	r1, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6899      	ldr	r1, [r3, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b2b      	ldr	r3, [pc, #172]	; (8008f70 <HAL_SAI_Init+0x2dc>)
 8008ec4:	400b      	ands	r3, r1
 8008ec6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6899      	ldr	r1, [r3, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ed8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008ede:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008ee4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	3b01      	subs	r3, #1
 8008eec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008eee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68d9      	ldr	r1, [r3, #12]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008f06:	400b      	ands	r3, r1
 8008f08:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68d9      	ldr	r1, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f18:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008f20:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f26:	3b01      	subs	r3, #1
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	40015404 	.word	0x40015404
 8008f5c:	40015424 	.word	0x40015424
 8008f60:	40015400 	.word	0x40015400
 8008f64:	40015800 	.word	0x40015800
 8008f68:	cccccccd 	.word	0xcccccccd
 8008f6c:	ff05c010 	.word	0xff05c010
 8008f70:	fff88000 	.word	0xfff88000

08008f74 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f7c:	4b18      	ldr	r3, [pc, #96]	; (8008fe0 <SAI_Disable+0x6c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a18      	ldr	r2, [pc, #96]	; (8008fe4 <SAI_Disable+0x70>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	0b1b      	lsrs	r3, r3, #12
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008f9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fba:	e009      	b.n	8008fd0 <SAI_Disable+0x5c>
    }
    count--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1e7      	bne.n	8008fa0 <SAI_Disable+0x2c>

  return status;
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20000008 	.word	0x20000008
 8008fe4:	95cbec1b 	.word	0x95cbec1b

08008fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e095      	b.n	8009126 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900a:	d009      	beq.n	8009020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	61da      	str	r2, [r3, #28]
 8009012:	e005      	b.n	8009020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7f8 fdb0 	bl	8001ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009056:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009060:	d902      	bls.n	8009068 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
 8009066:	e002      	b.n	800906e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009076:	d007      	beq.n	8009088 <HAL_SPI_Init+0xa0>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009080:	d002      	beq.n	8009088 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	431a      	orrs	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	ea42 0103 	orr.w	r1, r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	f003 0204 	and.w	r2, r3, #4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009104:	ea42 0103 	orr.w	r1, r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e049      	b.n	80091d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7f9 f84f 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2202      	movs	r2, #2
 800915e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	4619      	mov	r1, r3
 800916c:	4610      	mov	r0, r2
 800916e:	f000 faa5 	bl	80096bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d001      	beq.n	80091f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e04f      	b.n	8009294 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a23      	ldr	r2, [pc, #140]	; (80092a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d01d      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921e:	d018      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a1f      	ldr	r2, [pc, #124]	; (80092a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d013      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00e      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <HAL_TIM_Base_Start_IT+0xd0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d009      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a1b      	ldr	r2, [pc, #108]	; (80092b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d004      	beq.n	8009252 <HAL_TIM_Base_Start_IT+0x76>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d115      	bne.n	800927e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	4b17      	ldr	r3, [pc, #92]	; (80092b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800925a:	4013      	ands	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b06      	cmp	r3, #6
 8009262:	d015      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0xb4>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926a:	d011      	beq.n	8009290 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927c:	e008      	b.n	8009290 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f042 0201 	orr.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e000      	b.n	8009292 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009290:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40012c00 	.word	0x40012c00
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40000800 	.word	0x40000800
 80092ac:	40000c00 	.word	0x40000c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	00010007 	.word	0x00010007

080092bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d122      	bne.n	8009318 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d11b      	bne.n	8009318 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f06f 0202 	mvn.w	r2, #2
 80092e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 0303 	and.w	r3, r3, #3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f9be 	bl	8009680 <HAL_TIM_IC_CaptureCallback>
 8009304:	e005      	b.n	8009312 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f9b0 	bl	800966c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9c1 	bl	8009694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0304 	and.w	r3, r3, #4
 8009322:	2b04      	cmp	r3, #4
 8009324:	d122      	bne.n	800936c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b04      	cmp	r3, #4
 8009332:	d11b      	bne.n	800936c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0204 	mvn.w	r2, #4
 800933c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f994 	bl	8009680 <HAL_TIM_IC_CaptureCallback>
 8009358:	e005      	b.n	8009366 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f986 	bl	800966c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f997 	bl	8009694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f003 0308 	and.w	r3, r3, #8
 8009376:	2b08      	cmp	r3, #8
 8009378:	d122      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	f003 0308 	and.w	r3, r3, #8
 8009384:	2b08      	cmp	r3, #8
 8009386:	d11b      	bne.n	80093c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0208 	mvn.w	r2, #8
 8009390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2204      	movs	r2, #4
 8009396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f96a 	bl	8009680 <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f95c 	bl	800966c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f96d 	bl	8009694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b10      	cmp	r3, #16
 80093cc:	d122      	bne.n	8009414 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f003 0310 	and.w	r3, r3, #16
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d11b      	bne.n	8009414 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f06f 0210 	mvn.w	r2, #16
 80093e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2208      	movs	r2, #8
 80093ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d003      	beq.n	8009402 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f940 	bl	8009680 <HAL_TIM_IC_CaptureCallback>
 8009400:	e005      	b.n	800940e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f932 	bl	800966c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f943 	bl	8009694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b01      	cmp	r3, #1
 8009420:	d10e      	bne.n	8009440 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0201 	mvn.w	r2, #1
 8009438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7f8 ff02 	bl	8002244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944a:	2b80      	cmp	r3, #128	; 0x80
 800944c:	d10e      	bne.n	800946c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009458:	2b80      	cmp	r3, #128	; 0x80
 800945a:	d107      	bne.n	800946c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 faee 	bl	8009a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947a:	d10e      	bne.n	800949a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009486:	2b80      	cmp	r3, #128	; 0x80
 8009488:	d107      	bne.n	800949a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fae1 	bl	8009a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b40      	cmp	r3, #64	; 0x40
 80094a6:	d10e      	bne.n	80094c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b40      	cmp	r3, #64	; 0x40
 80094b4:	d107      	bne.n	80094c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f8f1 	bl	80096a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b20      	cmp	r3, #32
 80094d2:	d10e      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f003 0320 	and.w	r3, r3, #32
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d107      	bne.n	80094f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f06f 0220 	mvn.w	r2, #32
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 faa1 	bl	8009a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800950a:	2b01      	cmp	r3, #1
 800950c:	d101      	bne.n	8009512 <HAL_TIM_ConfigClockSource+0x18>
 800950e:	2302      	movs	r3, #2
 8009510:	e0a8      	b.n	8009664 <HAL_TIM_ConfigClockSource+0x16a>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2202      	movs	r2, #2
 800951e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009530:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009534:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800953c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	d067      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x124>
 800954e:	2b40      	cmp	r3, #64	; 0x40
 8009550:	d80b      	bhi.n	800956a <HAL_TIM_ConfigClockSource+0x70>
 8009552:	2b10      	cmp	r3, #16
 8009554:	d073      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x144>
 8009556:	2b10      	cmp	r3, #16
 8009558:	d802      	bhi.n	8009560 <HAL_TIM_ConfigClockSource+0x66>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d06f      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800955e:	e078      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8009560:	2b20      	cmp	r3, #32
 8009562:	d06c      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x144>
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d06a      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8009568:	e073      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800956a:	2b70      	cmp	r3, #112	; 0x70
 800956c:	d00d      	beq.n	800958a <HAL_TIM_ConfigClockSource+0x90>
 800956e:	2b70      	cmp	r3, #112	; 0x70
 8009570:	d804      	bhi.n	800957c <HAL_TIM_ConfigClockSource+0x82>
 8009572:	2b50      	cmp	r3, #80	; 0x50
 8009574:	d033      	beq.n	80095de <HAL_TIM_ConfigClockSource+0xe4>
 8009576:	2b60      	cmp	r3, #96	; 0x60
 8009578:	d041      	beq.n	80095fe <HAL_TIM_ConfigClockSource+0x104>
      break;
 800957a:	e06a      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800957c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009580:	d066      	beq.n	8009650 <HAL_TIM_ConfigClockSource+0x156>
 8009582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009586:	d017      	beq.n	80095b8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8009588:	e063      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	6899      	ldr	r1, [r3, #8]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f000 f9a3 	bl	80098e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	609a      	str	r2, [r3, #8]
      break;
 80095b6:	e04c      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	6899      	ldr	r1, [r3, #8]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f000 f98c 	bl	80098e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095da:	609a      	str	r2, [r3, #8]
      break;
 80095dc:	e039      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6859      	ldr	r1, [r3, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	461a      	mov	r2, r3
 80095ec:	f000 f900 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2150      	movs	r1, #80	; 0x50
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 f959 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 80095fc:	e029      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	461a      	mov	r2, r3
 800960c:	f000 f91f 	bl	800984e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2160      	movs	r1, #96	; 0x60
 8009616:	4618      	mov	r0, r3
 8009618:	f000 f949 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 800961c:	e019      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6859      	ldr	r1, [r3, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	461a      	mov	r2, r3
 800962c:	f000 f8e0 	bl	80097f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2140      	movs	r1, #64	; 0x40
 8009636:	4618      	mov	r0, r3
 8009638:	f000 f939 	bl	80098ae <TIM_ITRx_SetConfig>
      break;
 800963c:	e009      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f000 f930 	bl	80098ae <TIM_ITRx_SetConfig>
        break;
 800964e:	e000      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8009650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a40      	ldr	r2, [pc, #256]	; (80097d0 <TIM_Base_SetConfig+0x114>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d013      	beq.n	80096fc <TIM_Base_SetConfig+0x40>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096da:	d00f      	beq.n	80096fc <TIM_Base_SetConfig+0x40>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a3d      	ldr	r2, [pc, #244]	; (80097d4 <TIM_Base_SetConfig+0x118>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d00b      	beq.n	80096fc <TIM_Base_SetConfig+0x40>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a3c      	ldr	r2, [pc, #240]	; (80097d8 <TIM_Base_SetConfig+0x11c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d007      	beq.n	80096fc <TIM_Base_SetConfig+0x40>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a3b      	ldr	r2, [pc, #236]	; (80097dc <TIM_Base_SetConfig+0x120>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d003      	beq.n	80096fc <TIM_Base_SetConfig+0x40>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a3a      	ldr	r2, [pc, #232]	; (80097e0 <TIM_Base_SetConfig+0x124>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d108      	bne.n	800970e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2f      	ldr	r2, [pc, #188]	; (80097d0 <TIM_Base_SetConfig+0x114>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d01f      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800971c:	d01b      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a2c      	ldr	r2, [pc, #176]	; (80097d4 <TIM_Base_SetConfig+0x118>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d017      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a2b      	ldr	r2, [pc, #172]	; (80097d8 <TIM_Base_SetConfig+0x11c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d013      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a2a      	ldr	r2, [pc, #168]	; (80097dc <TIM_Base_SetConfig+0x120>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00f      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a29      	ldr	r2, [pc, #164]	; (80097e0 <TIM_Base_SetConfig+0x124>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00b      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a28      	ldr	r2, [pc, #160]	; (80097e4 <TIM_Base_SetConfig+0x128>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d007      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <TIM_Base_SetConfig+0x12c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a26      	ldr	r2, [pc, #152]	; (80097ec <TIM_Base_SetConfig+0x130>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d108      	bne.n	8009768 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800975c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	4313      	orrs	r3, r2
 8009766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a10      	ldr	r2, [pc, #64]	; (80097d0 <TIM_Base_SetConfig+0x114>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00f      	beq.n	80097b4 <TIM_Base_SetConfig+0xf8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a12      	ldr	r2, [pc, #72]	; (80097e0 <TIM_Base_SetConfig+0x124>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00b      	beq.n	80097b4 <TIM_Base_SetConfig+0xf8>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a11      	ldr	r2, [pc, #68]	; (80097e4 <TIM_Base_SetConfig+0x128>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d007      	beq.n	80097b4 <TIM_Base_SetConfig+0xf8>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a10      	ldr	r2, [pc, #64]	; (80097e8 <TIM_Base_SetConfig+0x12c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d003      	beq.n	80097b4 <TIM_Base_SetConfig+0xf8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a0f      	ldr	r2, [pc, #60]	; (80097ec <TIM_Base_SetConfig+0x130>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d103      	bne.n	80097bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	691a      	ldr	r2, [r3, #16]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	615a      	str	r2, [r3, #20]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	40012c00 	.word	0x40012c00
 80097d4:	40000400 	.word	0x40000400
 80097d8:	40000800 	.word	0x40000800
 80097dc:	40000c00 	.word	0x40000c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	40014000 	.word	0x40014000
 80097e8:	40014400 	.word	0x40014400
 80097ec:	40014800 	.word	0x40014800

080097f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f023 0201 	bic.w	r2, r3, #1
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	699b      	ldr	r3, [r3, #24]
 8009812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800981a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f023 030a 	bic.w	r3, r3, #10
 800982c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4313      	orrs	r3, r2
 8009834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	621a      	str	r2, [r3, #32]
}
 8009842:	bf00      	nop
 8009844:	371c      	adds	r7, #28
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800984e:	b480      	push	{r7}
 8009850:	b087      	sub	sp, #28
 8009852:	af00      	add	r7, sp, #0
 8009854:	60f8      	str	r0, [r7, #12]
 8009856:	60b9      	str	r1, [r7, #8]
 8009858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0210 	bic.w	r2, r3, #16
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	031b      	lsls	r3, r3, #12
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800988a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	011b      	lsls	r3, r3, #4
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4313      	orrs	r3, r2
 8009894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	f043 0307 	orr.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	609a      	str	r2, [r3, #8]
}
 80098d8:	bf00      	nop
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b087      	sub	sp, #28
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	60b9      	str	r1, [r7, #8]
 80098ee:	607a      	str	r2, [r7, #4]
 80098f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	431a      	orrs	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4313      	orrs	r3, r2
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	609a      	str	r2, [r3, #8]
}
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009938:	2302      	movs	r3, #2
 800993a:	e068      	b.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2e      	ldr	r2, [pc, #184]	; (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d004      	beq.n	8009970 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2d      	ldr	r2, [pc, #180]	; (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d108      	bne.n	8009982 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009976:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a1e      	ldr	r2, [pc, #120]	; (8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d01d      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ae:	d018      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a1b      	ldr	r2, [pc, #108]	; (8009a24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d013      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a1a      	ldr	r2, [pc, #104]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d00e      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a18      	ldr	r2, [pc, #96]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d009      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a13      	ldr	r2, [pc, #76]	; (8009a20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d004      	beq.n	80099e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a14      	ldr	r2, [pc, #80]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d10c      	bne.n	80099fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	40012c00 	.word	0x40012c00
 8009a20:	40013400 	.word	0x40013400
 8009a24:	40000400 	.word	0x40000400
 8009a28:	40000800 	.word	0x40000800
 8009a2c:	40000c00 	.word	0x40000c00
 8009a30:	40014000 	.word	0x40014000

08009a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e040      	b.n	8009b04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7f8 fc1a 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2224      	movs	r2, #36	; 0x24
 8009a9c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f022 0201 	bic.w	r2, r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fae8 	bl	800a084 <UART_SetConfig>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d101      	bne.n	8009abe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e022      	b.n	8009b04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fd66 	bl	800a598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	689a      	ldr	r2, [r3, #8]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fded 	bl	800a6dc <UART_CheckIdleState>
 8009b02:	4603      	mov	r3, r0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08a      	sub	sp, #40	; 0x28
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	603b      	str	r3, [r7, #0]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	f040 8081 	bne.w	8009c28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <HAL_UART_Transmit+0x26>
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b32:	2301      	movs	r3, #1
 8009b34:	e079      	b.n	8009c2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_UART_Transmit+0x38>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e072      	b.n	8009c2a <HAL_UART_Transmit+0x11e>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2221      	movs	r2, #33	; 0x21
 8009b56:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009b58:	f7f8 fc9e 	bl	8002498 <HAL_GetTick>
 8009b5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	88fa      	ldrh	r2, [r7, #6]
 8009b62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	88fa      	ldrh	r2, [r7, #6]
 8009b6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b76:	d108      	bne.n	8009b8a <HAL_UART_Transmit+0x7e>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d104      	bne.n	8009b8a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	61bb      	str	r3, [r7, #24]
 8009b88:	e003      	b.n	8009b92 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009b9a:	e02d      	b.n	8009bf8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2180      	movs	r1, #128	; 0x80
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 fddd 	bl	800a766 <UART_WaitOnFlagUntilTimeout>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e039      	b.n	8009c2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	881a      	ldrh	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc8:	b292      	uxth	r2, r2
 8009bca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	3302      	adds	r3, #2
 8009bd0:	61bb      	str	r3, [r7, #24]
 8009bd2:	e008      	b.n	8009be6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	781a      	ldrb	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	b292      	uxth	r2, r2
 8009bde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	3301      	adds	r3, #1
 8009be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1cb      	bne.n	8009b9c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2140      	movs	r1, #64	; 0x40
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fda9 	bl	800a766 <UART_WaitOnFlagUntilTimeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e005      	b.n	8009c2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2220      	movs	r2, #32
 8009c22:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e000      	b.n	8009c2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009c28:	2302      	movs	r3, #2
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3720      	adds	r7, #32
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b08a      	sub	sp, #40	; 0x28
 8009c36:	af02      	add	r7, sp, #8
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	603b      	str	r3, [r7, #0]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	f040 80bb 	bne.w	8009dc2 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Receive+0x26>
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0b3      	b.n	8009dc4 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Receive+0x38>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e0ac      	b.n	8009dc4 <HAL_UART_Receive+0x192>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2222      	movs	r2, #34	; 0x22
 8009c7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009c7e:	f7f8 fc0b 	bl	8002498 <HAL_GetTick>
 8009c82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	88fa      	ldrh	r2, [r7, #6]
 8009c88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	88fa      	ldrh	r2, [r7, #6]
 8009c90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9c:	d10e      	bne.n	8009cbc <HAL_UART_Receive+0x8a>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <HAL_UART_Receive+0x80>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cb0:	e02d      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	22ff      	movs	r2, #255	; 0xff
 8009cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cba:	e028      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10d      	bne.n	8009ce0 <HAL_UART_Receive+0xae>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <HAL_UART_Receive+0xa4>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	22ff      	movs	r2, #255	; 0xff
 8009cd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cd4:	e01b      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	227f      	movs	r2, #127	; 0x7f
 8009cda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cde:	e016      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ce8:	d10d      	bne.n	8009d06 <HAL_UART_Receive+0xd4>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d104      	bne.n	8009cfc <HAL_UART_Receive+0xca>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	227f      	movs	r2, #127	; 0x7f
 8009cf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cfa:	e008      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	223f      	movs	r2, #63	; 0x3f
 8009d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009d04:	e003      	b.n	8009d0e <HAL_UART_Receive+0xdc>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d14:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d1e:	d108      	bne.n	8009d32 <HAL_UART_Receive+0x100>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d104      	bne.n	8009d32 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	61bb      	str	r3, [r7, #24]
 8009d30:	e003      	b.n	8009d3a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009d42:	e033      	b.n	8009dac <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2120      	movs	r1, #32
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 fd09 	bl	800a766 <UART_WaitOnFlagUntilTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e032      	b.n	8009dc4 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10c      	bne.n	8009d7e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	8a7b      	ldrh	r3, [r7, #18]
 8009d6e:	4013      	ands	r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	3302      	adds	r3, #2
 8009d7a:	61bb      	str	r3, [r7, #24]
 8009d7c:	e00d      	b.n	8009d9a <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	8a7b      	ldrh	r3, [r7, #18]
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	3301      	adds	r3, #1
 8009d98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1c5      	bne.n	8009d44 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e000      	b.n	8009dc4 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009dec:	69fa      	ldr	r2, [r7, #28]
 8009dee:	f640 030f 	movw	r3, #2063	; 0x80f
 8009df2:	4013      	ands	r3, r2
 8009df4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d113      	bne.n	8009e24 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	f003 0320 	and.w	r3, r3, #32
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00e      	beq.n	8009e24 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	f003 0320 	and.w	r3, r3, #32
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 8114 	beq.w	800a042 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	4798      	blx	r3
      }
      return;
 8009e22:	e10e      	b.n	800a042 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80d6 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d105      	bne.n	8009e42 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	4b86      	ldr	r3, [pc, #536]	; (800a054 <HAL_UART_IRQHandler+0x288>)
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 80cb 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00e      	beq.n	8009e6a <HAL_UART_IRQHandler+0x9e>
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d009      	beq.n	8009e6a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e62:	f043 0201 	orr.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00e      	beq.n	8009e92 <HAL_UART_IRQHandler+0xc6>
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2202      	movs	r2, #2
 8009e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e8a:	f043 0204 	orr.w	r2, r3, #4
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00e      	beq.n	8009eba <HAL_UART_IRQHandler+0xee>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d009      	beq.n	8009eba <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb2:	f043 0202 	orr.w	r2, r3, #2
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	f003 0308 	and.w	r3, r3, #8
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d013      	beq.n	8009eec <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ec4:	69bb      	ldr	r3, [r7, #24]
 8009ec6:	f003 0320 	and.w	r3, r3, #32
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d104      	bne.n	8009ed8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d009      	beq.n	8009eec <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2208      	movs	r2, #8
 8009ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee4:	f043 0208 	orr.w	r2, r3, #8
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00f      	beq.n	8009f16 <HAL_UART_IRQHandler+0x14a>
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f0e:	f043 0220 	orr.w	r2, r3, #32
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8093 	beq.w	800a046 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0320 	and.w	r3, r3, #32
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00c      	beq.n	8009f44 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f2a:	69bb      	ldr	r3, [r7, #24]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d007      	beq.n	8009f44 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f48:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f54:	2b40      	cmp	r3, #64	; 0x40
 8009f56:	d004      	beq.n	8009f62 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d031      	beq.n	8009fc6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fc7a 	bl	800a85c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f72:	2b40      	cmp	r3, #64	; 0x40
 8009f74:	d123      	bne.n	8009fbe <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689a      	ldr	r2, [r3, #8]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f84:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d013      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f92:	4a31      	ldr	r2, [pc, #196]	; (800a058 <HAL_UART_IRQHandler+0x28c>)
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fa fbc7 	bl	800472e <HAL_DMA_Abort_IT>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d016      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb4:	e00e      	b.n	8009fd4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f85a 	bl	800a070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fbc:	e00a      	b.n	8009fd4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f856 	bl	800a070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc4:	e006      	b.n	8009fd4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f852 	bl	800a070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009fd2:	e038      	b.n	800a046 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd4:	bf00      	nop
    return;
 8009fd6:	e036      	b.n	800a046 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00d      	beq.n	8009ffe <HAL_UART_IRQHandler+0x232>
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d008      	beq.n	8009ffe <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc7f 	bl	800a8fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ffc:	e026      	b.n	800a04c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00d      	beq.n	800a024 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d008      	beq.n	800a024 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a016:	2b00      	cmp	r3, #0
 800a018:	d017      	beq.n	800a04a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	4798      	blx	r3
    }
    return;
 800a022:	e012      	b.n	800a04a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <HAL_UART_IRQHandler+0x280>
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fc45 	bl	800a8c8 <UART_EndTransmit_IT>
    return;
 800a03e:	bf00      	nop
 800a040:	e004      	b.n	800a04c <HAL_UART_IRQHandler+0x280>
      return;
 800a042:	bf00      	nop
 800a044:	e002      	b.n	800a04c <HAL_UART_IRQHandler+0x280>
    return;
 800a046:	bf00      	nop
 800a048:	e000      	b.n	800a04c <HAL_UART_IRQHandler+0x280>
    return;
 800a04a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a04c:	3720      	adds	r7, #32
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	04000120 	.word	0x04000120
 800a058:	0800a89d 	.word	0x0800a89d

0800a05c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a064:	bf00      	nop
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a084:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a088:	b088      	sub	sp, #32
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	431a      	orrs	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	69db      	ldr	r3, [r3, #28]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	4bac      	ldr	r3, [pc, #688]	; (800a364 <UART_SetConfig+0x2e0>)
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	69f9      	ldr	r1, [r7, #28]
 800a0ba:	430b      	orrs	r3, r1
 800a0bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	68da      	ldr	r2, [r3, #12]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4aa2      	ldr	r2, [pc, #648]	; (800a368 <UART_SetConfig+0x2e4>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d004      	beq.n	800a0ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	69fa      	ldr	r2, [r7, #28]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69fa      	ldr	r2, [r7, #28]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a99      	ldr	r2, [pc, #612]	; (800a36c <UART_SetConfig+0x2e8>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d121      	bne.n	800a150 <UART_SetConfig+0xcc>
 800a10c:	4b98      	ldr	r3, [pc, #608]	; (800a370 <UART_SetConfig+0x2ec>)
 800a10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a112:	f003 0303 	and.w	r3, r3, #3
 800a116:	2b03      	cmp	r3, #3
 800a118:	d816      	bhi.n	800a148 <UART_SetConfig+0xc4>
 800a11a:	a201      	add	r2, pc, #4	; (adr r2, 800a120 <UART_SetConfig+0x9c>)
 800a11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a120:	0800a131 	.word	0x0800a131
 800a124:	0800a13d 	.word	0x0800a13d
 800a128:	0800a137 	.word	0x0800a137
 800a12c:	0800a143 	.word	0x0800a143
 800a130:	2301      	movs	r3, #1
 800a132:	76fb      	strb	r3, [r7, #27]
 800a134:	e0e8      	b.n	800a308 <UART_SetConfig+0x284>
 800a136:	2302      	movs	r3, #2
 800a138:	76fb      	strb	r3, [r7, #27]
 800a13a:	e0e5      	b.n	800a308 <UART_SetConfig+0x284>
 800a13c:	2304      	movs	r3, #4
 800a13e:	76fb      	strb	r3, [r7, #27]
 800a140:	e0e2      	b.n	800a308 <UART_SetConfig+0x284>
 800a142:	2308      	movs	r3, #8
 800a144:	76fb      	strb	r3, [r7, #27]
 800a146:	e0df      	b.n	800a308 <UART_SetConfig+0x284>
 800a148:	2310      	movs	r3, #16
 800a14a:	76fb      	strb	r3, [r7, #27]
 800a14c:	bf00      	nop
 800a14e:	e0db      	b.n	800a308 <UART_SetConfig+0x284>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a87      	ldr	r2, [pc, #540]	; (800a374 <UART_SetConfig+0x2f0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d134      	bne.n	800a1c4 <UART_SetConfig+0x140>
 800a15a:	4b85      	ldr	r3, [pc, #532]	; (800a370 <UART_SetConfig+0x2ec>)
 800a15c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a160:	f003 030c 	and.w	r3, r3, #12
 800a164:	2b0c      	cmp	r3, #12
 800a166:	d829      	bhi.n	800a1bc <UART_SetConfig+0x138>
 800a168:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <UART_SetConfig+0xec>)
 800a16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16e:	bf00      	nop
 800a170:	0800a1a5 	.word	0x0800a1a5
 800a174:	0800a1bd 	.word	0x0800a1bd
 800a178:	0800a1bd 	.word	0x0800a1bd
 800a17c:	0800a1bd 	.word	0x0800a1bd
 800a180:	0800a1b1 	.word	0x0800a1b1
 800a184:	0800a1bd 	.word	0x0800a1bd
 800a188:	0800a1bd 	.word	0x0800a1bd
 800a18c:	0800a1bd 	.word	0x0800a1bd
 800a190:	0800a1ab 	.word	0x0800a1ab
 800a194:	0800a1bd 	.word	0x0800a1bd
 800a198:	0800a1bd 	.word	0x0800a1bd
 800a19c:	0800a1bd 	.word	0x0800a1bd
 800a1a0:	0800a1b7 	.word	0x0800a1b7
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	76fb      	strb	r3, [r7, #27]
 800a1a8:	e0ae      	b.n	800a308 <UART_SetConfig+0x284>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	76fb      	strb	r3, [r7, #27]
 800a1ae:	e0ab      	b.n	800a308 <UART_SetConfig+0x284>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	76fb      	strb	r3, [r7, #27]
 800a1b4:	e0a8      	b.n	800a308 <UART_SetConfig+0x284>
 800a1b6:	2308      	movs	r3, #8
 800a1b8:	76fb      	strb	r3, [r7, #27]
 800a1ba:	e0a5      	b.n	800a308 <UART_SetConfig+0x284>
 800a1bc:	2310      	movs	r3, #16
 800a1be:	76fb      	strb	r3, [r7, #27]
 800a1c0:	bf00      	nop
 800a1c2:	e0a1      	b.n	800a308 <UART_SetConfig+0x284>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a6b      	ldr	r2, [pc, #428]	; (800a378 <UART_SetConfig+0x2f4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d120      	bne.n	800a210 <UART_SetConfig+0x18c>
 800a1ce:	4b68      	ldr	r3, [pc, #416]	; (800a370 <UART_SetConfig+0x2ec>)
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	d00f      	beq.n	800a1fc <UART_SetConfig+0x178>
 800a1dc:	2b10      	cmp	r3, #16
 800a1de:	d802      	bhi.n	800a1e6 <UART_SetConfig+0x162>
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d005      	beq.n	800a1f0 <UART_SetConfig+0x16c>
 800a1e4:	e010      	b.n	800a208 <UART_SetConfig+0x184>
 800a1e6:	2b20      	cmp	r3, #32
 800a1e8:	d005      	beq.n	800a1f6 <UART_SetConfig+0x172>
 800a1ea:	2b30      	cmp	r3, #48	; 0x30
 800a1ec:	d009      	beq.n	800a202 <UART_SetConfig+0x17e>
 800a1ee:	e00b      	b.n	800a208 <UART_SetConfig+0x184>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	76fb      	strb	r3, [r7, #27]
 800a1f4:	e088      	b.n	800a308 <UART_SetConfig+0x284>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	76fb      	strb	r3, [r7, #27]
 800a1fa:	e085      	b.n	800a308 <UART_SetConfig+0x284>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	76fb      	strb	r3, [r7, #27]
 800a200:	e082      	b.n	800a308 <UART_SetConfig+0x284>
 800a202:	2308      	movs	r3, #8
 800a204:	76fb      	strb	r3, [r7, #27]
 800a206:	e07f      	b.n	800a308 <UART_SetConfig+0x284>
 800a208:	2310      	movs	r3, #16
 800a20a:	76fb      	strb	r3, [r7, #27]
 800a20c:	bf00      	nop
 800a20e:	e07b      	b.n	800a308 <UART_SetConfig+0x284>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a59      	ldr	r2, [pc, #356]	; (800a37c <UART_SetConfig+0x2f8>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d120      	bne.n	800a25c <UART_SetConfig+0x1d8>
 800a21a:	4b55      	ldr	r3, [pc, #340]	; (800a370 <UART_SetConfig+0x2ec>)
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a220:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a224:	2b40      	cmp	r3, #64	; 0x40
 800a226:	d00f      	beq.n	800a248 <UART_SetConfig+0x1c4>
 800a228:	2b40      	cmp	r3, #64	; 0x40
 800a22a:	d802      	bhi.n	800a232 <UART_SetConfig+0x1ae>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d005      	beq.n	800a23c <UART_SetConfig+0x1b8>
 800a230:	e010      	b.n	800a254 <UART_SetConfig+0x1d0>
 800a232:	2b80      	cmp	r3, #128	; 0x80
 800a234:	d005      	beq.n	800a242 <UART_SetConfig+0x1be>
 800a236:	2bc0      	cmp	r3, #192	; 0xc0
 800a238:	d009      	beq.n	800a24e <UART_SetConfig+0x1ca>
 800a23a:	e00b      	b.n	800a254 <UART_SetConfig+0x1d0>
 800a23c:	2300      	movs	r3, #0
 800a23e:	76fb      	strb	r3, [r7, #27]
 800a240:	e062      	b.n	800a308 <UART_SetConfig+0x284>
 800a242:	2302      	movs	r3, #2
 800a244:	76fb      	strb	r3, [r7, #27]
 800a246:	e05f      	b.n	800a308 <UART_SetConfig+0x284>
 800a248:	2304      	movs	r3, #4
 800a24a:	76fb      	strb	r3, [r7, #27]
 800a24c:	e05c      	b.n	800a308 <UART_SetConfig+0x284>
 800a24e:	2308      	movs	r3, #8
 800a250:	76fb      	strb	r3, [r7, #27]
 800a252:	e059      	b.n	800a308 <UART_SetConfig+0x284>
 800a254:	2310      	movs	r3, #16
 800a256:	76fb      	strb	r3, [r7, #27]
 800a258:	bf00      	nop
 800a25a:	e055      	b.n	800a308 <UART_SetConfig+0x284>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a47      	ldr	r2, [pc, #284]	; (800a380 <UART_SetConfig+0x2fc>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d124      	bne.n	800a2b0 <UART_SetConfig+0x22c>
 800a266:	4b42      	ldr	r3, [pc, #264]	; (800a370 <UART_SetConfig+0x2ec>)
 800a268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a26c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a274:	d012      	beq.n	800a29c <UART_SetConfig+0x218>
 800a276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27a:	d802      	bhi.n	800a282 <UART_SetConfig+0x1fe>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <UART_SetConfig+0x20c>
 800a280:	e012      	b.n	800a2a8 <UART_SetConfig+0x224>
 800a282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a286:	d006      	beq.n	800a296 <UART_SetConfig+0x212>
 800a288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a28c:	d009      	beq.n	800a2a2 <UART_SetConfig+0x21e>
 800a28e:	e00b      	b.n	800a2a8 <UART_SetConfig+0x224>
 800a290:	2300      	movs	r3, #0
 800a292:	76fb      	strb	r3, [r7, #27]
 800a294:	e038      	b.n	800a308 <UART_SetConfig+0x284>
 800a296:	2302      	movs	r3, #2
 800a298:	76fb      	strb	r3, [r7, #27]
 800a29a:	e035      	b.n	800a308 <UART_SetConfig+0x284>
 800a29c:	2304      	movs	r3, #4
 800a29e:	76fb      	strb	r3, [r7, #27]
 800a2a0:	e032      	b.n	800a308 <UART_SetConfig+0x284>
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	76fb      	strb	r3, [r7, #27]
 800a2a6:	e02f      	b.n	800a308 <UART_SetConfig+0x284>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	76fb      	strb	r3, [r7, #27]
 800a2ac:	bf00      	nop
 800a2ae:	e02b      	b.n	800a308 <UART_SetConfig+0x284>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a2c      	ldr	r2, [pc, #176]	; (800a368 <UART_SetConfig+0x2e4>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d124      	bne.n	800a304 <UART_SetConfig+0x280>
 800a2ba:	4b2d      	ldr	r3, [pc, #180]	; (800a370 <UART_SetConfig+0x2ec>)
 800a2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2c8:	d012      	beq.n	800a2f0 <UART_SetConfig+0x26c>
 800a2ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2ce:	d802      	bhi.n	800a2d6 <UART_SetConfig+0x252>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d007      	beq.n	800a2e4 <UART_SetConfig+0x260>
 800a2d4:	e012      	b.n	800a2fc <UART_SetConfig+0x278>
 800a2d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2da:	d006      	beq.n	800a2ea <UART_SetConfig+0x266>
 800a2dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2e0:	d009      	beq.n	800a2f6 <UART_SetConfig+0x272>
 800a2e2:	e00b      	b.n	800a2fc <UART_SetConfig+0x278>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	76fb      	strb	r3, [r7, #27]
 800a2e8:	e00e      	b.n	800a308 <UART_SetConfig+0x284>
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	76fb      	strb	r3, [r7, #27]
 800a2ee:	e00b      	b.n	800a308 <UART_SetConfig+0x284>
 800a2f0:	2304      	movs	r3, #4
 800a2f2:	76fb      	strb	r3, [r7, #27]
 800a2f4:	e008      	b.n	800a308 <UART_SetConfig+0x284>
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	76fb      	strb	r3, [r7, #27]
 800a2fa:	e005      	b.n	800a308 <UART_SetConfig+0x284>
 800a2fc:	2310      	movs	r3, #16
 800a2fe:	76fb      	strb	r3, [r7, #27]
 800a300:	bf00      	nop
 800a302:	e001      	b.n	800a308 <UART_SetConfig+0x284>
 800a304:	2310      	movs	r3, #16
 800a306:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a16      	ldr	r2, [pc, #88]	; (800a368 <UART_SetConfig+0x2e4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	f040 8087 	bne.w	800a422 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a314:	7efb      	ldrb	r3, [r7, #27]
 800a316:	2b08      	cmp	r3, #8
 800a318:	d836      	bhi.n	800a388 <UART_SetConfig+0x304>
 800a31a:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <UART_SetConfig+0x29c>)
 800a31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a320:	0800a345 	.word	0x0800a345
 800a324:	0800a389 	.word	0x0800a389
 800a328:	0800a34d 	.word	0x0800a34d
 800a32c:	0800a389 	.word	0x0800a389
 800a330:	0800a353 	.word	0x0800a353
 800a334:	0800a389 	.word	0x0800a389
 800a338:	0800a389 	.word	0x0800a389
 800a33c:	0800a389 	.word	0x0800a389
 800a340:	0800a35b 	.word	0x0800a35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a344:	f7fd f9f4 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 800a348:	6178      	str	r0, [r7, #20]
        break;
 800a34a:	e022      	b.n	800a392 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a34c:	4b0d      	ldr	r3, [pc, #52]	; (800a384 <UART_SetConfig+0x300>)
 800a34e:	617b      	str	r3, [r7, #20]
        break;
 800a350:	e01f      	b.n	800a392 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a352:	f7fd f957 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800a356:	6178      	str	r0, [r7, #20]
        break;
 800a358:	e01b      	b.n	800a392 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a35e:	617b      	str	r3, [r7, #20]
        break;
 800a360:	e017      	b.n	800a392 <UART_SetConfig+0x30e>
 800a362:	bf00      	nop
 800a364:	efff69f3 	.word	0xefff69f3
 800a368:	40008000 	.word	0x40008000
 800a36c:	40013800 	.word	0x40013800
 800a370:	40021000 	.word	0x40021000
 800a374:	40004400 	.word	0x40004400
 800a378:	40004800 	.word	0x40004800
 800a37c:	40004c00 	.word	0x40004c00
 800a380:	40005000 	.word	0x40005000
 800a384:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a388:	2300      	movs	r3, #0
 800a38a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	76bb      	strb	r3, [r7, #26]
        break;
 800a390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 80f1 	beq.w	800a57c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	4413      	add	r3, r2
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d305      	bcc.n	800a3b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d902      	bls.n	800a3bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	76bb      	strb	r3, [r7, #26]
 800a3ba:	e0df      	b.n	800a57c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f04f 0200 	mov.w	r2, #0
 800a3c4:	f04f 0300 	mov.w	r3, #0
 800a3c8:	f04f 0400 	mov.w	r4, #0
 800a3cc:	0214      	lsls	r4, r2, #8
 800a3ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a3d2:	020b      	lsls	r3, r1, #8
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6852      	ldr	r2, [r2, #4]
 800a3d8:	0852      	lsrs	r2, r2, #1
 800a3da:	4611      	mov	r1, r2
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	eb13 0b01 	adds.w	fp, r3, r1
 800a3e4:	eb44 0c02 	adc.w	ip, r4, r2
 800a3e8:	4658      	mov	r0, fp
 800a3ea:	4661      	mov	r1, ip
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f04f 0400 	mov.w	r4, #0
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	f7f6 fb30 	bl	8000a5c <__aeabi_uldivmod>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	460c      	mov	r4, r1
 800a400:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a408:	d308      	bcc.n	800a41c <UART_SetConfig+0x398>
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a410:	d204      	bcs.n	800a41c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	693a      	ldr	r2, [r7, #16]
 800a418:	60da      	str	r2, [r3, #12]
 800a41a:	e0af      	b.n	800a57c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	76bb      	strb	r3, [r7, #26]
 800a420:	e0ac      	b.n	800a57c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42a:	d15b      	bne.n	800a4e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a42c:	7efb      	ldrb	r3, [r7, #27]
 800a42e:	2b08      	cmp	r3, #8
 800a430:	d827      	bhi.n	800a482 <UART_SetConfig+0x3fe>
 800a432:	a201      	add	r2, pc, #4	; (adr r2, 800a438 <UART_SetConfig+0x3b4>)
 800a434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a438:	0800a45d 	.word	0x0800a45d
 800a43c:	0800a465 	.word	0x0800a465
 800a440:	0800a46d 	.word	0x0800a46d
 800a444:	0800a483 	.word	0x0800a483
 800a448:	0800a473 	.word	0x0800a473
 800a44c:	0800a483 	.word	0x0800a483
 800a450:	0800a483 	.word	0x0800a483
 800a454:	0800a483 	.word	0x0800a483
 800a458:	0800a47b 	.word	0x0800a47b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a45c:	f7fd f968 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 800a460:	6178      	str	r0, [r7, #20]
        break;
 800a462:	e013      	b.n	800a48c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a464:	f7fd f97a 	bl	800775c <HAL_RCC_GetPCLK2Freq>
 800a468:	6178      	str	r0, [r7, #20]
        break;
 800a46a:	e00f      	b.n	800a48c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a46c:	4b49      	ldr	r3, [pc, #292]	; (800a594 <UART_SetConfig+0x510>)
 800a46e:	617b      	str	r3, [r7, #20]
        break;
 800a470:	e00c      	b.n	800a48c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a472:	f7fd f8c7 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800a476:	6178      	str	r0, [r7, #20]
        break;
 800a478:	e008      	b.n	800a48c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a47a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47e:	617b      	str	r3, [r7, #20]
        break;
 800a480:	e004      	b.n	800a48c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	76bb      	strb	r3, [r7, #26]
        break;
 800a48a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d074      	beq.n	800a57c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	005a      	lsls	r2, r3, #1
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	441a      	add	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2b0f      	cmp	r3, #15
 800a4ae:	d916      	bls.n	800a4de <UART_SetConfig+0x45a>
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b6:	d212      	bcs.n	800a4de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	f023 030f 	bic.w	r3, r3, #15
 800a4c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	f003 0307 	and.w	r3, r3, #7
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	89fb      	ldrh	r3, [r7, #14]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	89fa      	ldrh	r2, [r7, #14]
 800a4da:	60da      	str	r2, [r3, #12]
 800a4dc:	e04e      	b.n	800a57c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	76bb      	strb	r3, [r7, #26]
 800a4e2:	e04b      	b.n	800a57c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4e4:	7efb      	ldrb	r3, [r7, #27]
 800a4e6:	2b08      	cmp	r3, #8
 800a4e8:	d827      	bhi.n	800a53a <UART_SetConfig+0x4b6>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <UART_SetConfig+0x46c>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a51d 	.word	0x0800a51d
 800a4f8:	0800a525 	.word	0x0800a525
 800a4fc:	0800a53b 	.word	0x0800a53b
 800a500:	0800a52b 	.word	0x0800a52b
 800a504:	0800a53b 	.word	0x0800a53b
 800a508:	0800a53b 	.word	0x0800a53b
 800a50c:	0800a53b 	.word	0x0800a53b
 800a510:	0800a533 	.word	0x0800a533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a514:	f7fd f90c 	bl	8007730 <HAL_RCC_GetPCLK1Freq>
 800a518:	6178      	str	r0, [r7, #20]
        break;
 800a51a:	e013      	b.n	800a544 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a51c:	f7fd f91e 	bl	800775c <HAL_RCC_GetPCLK2Freq>
 800a520:	6178      	str	r0, [r7, #20]
        break;
 800a522:	e00f      	b.n	800a544 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a524:	4b1b      	ldr	r3, [pc, #108]	; (800a594 <UART_SetConfig+0x510>)
 800a526:	617b      	str	r3, [r7, #20]
        break;
 800a528:	e00c      	b.n	800a544 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a52a:	f7fd f86b 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800a52e:	6178      	str	r0, [r7, #20]
        break;
 800a530:	e008      	b.n	800a544 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a536:	617b      	str	r3, [r7, #20]
        break;
 800a538:	e004      	b.n	800a544 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	76bb      	strb	r3, [r7, #26]
        break;
 800a542:	bf00      	nop
    }

    if (pclk != 0U)
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d018      	beq.n	800a57c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	085a      	lsrs	r2, r3, #1
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	441a      	add	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d908      	bls.n	800a578 <UART_SetConfig+0x4f4>
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d204      	bcs.n	800a578 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e001      	b.n	800a57c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a588:	7ebb      	ldrb	r3, [r7, #26]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3720      	adds	r7, #32
 800a58e:	46bd      	mov	sp, r7
 800a590:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a594:	00f42400 	.word	0x00f42400

0800a598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00a      	beq.n	800a606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60a:	f003 0308 	and.w	r3, r3, #8
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00a      	beq.n	800a628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	f003 0310 	and.w	r3, r3, #16
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01a      	beq.n	800a6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a696:	d10a      	bne.n	800a6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a6ea:	f7f7 fed5 	bl	8002498 <HAL_GetTick>
 800a6ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d10e      	bne.n	800a71c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f82a 	bl	800a766 <UART_WaitOnFlagUntilTimeout>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e020      	b.n	800a75e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0304 	and.w	r3, r3, #4
 800a726:	2b04      	cmp	r3, #4
 800a728:	d10e      	bne.n	800a748 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a72a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f814 	bl	800a766 <UART_WaitOnFlagUntilTimeout>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e00a      	b.n	800a75e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2220      	movs	r2, #32
 800a74c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2220      	movs	r2, #32
 800a752:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	60f8      	str	r0, [r7, #12]
 800a76e:	60b9      	str	r1, [r7, #8]
 800a770:	603b      	str	r3, [r7, #0]
 800a772:	4613      	mov	r3, r2
 800a774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a776:	e05d      	b.n	800a834 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77e:	d059      	beq.n	800a834 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a780:	f7f7 fe8a 	bl	8002498 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	69ba      	ldr	r2, [r7, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <UART_WaitOnFlagUntilTimeout+0x30>
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11b      	bne.n	800a7ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 0201 	bic.w	r2, r2, #1
 800a7b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2220      	movs	r2, #32
 800a7c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e042      	b.n	800a854 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d02b      	beq.n	800a834 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ea:	d123      	bne.n	800a834 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a804:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f022 0201 	bic.w	r2, r2, #1
 800a814:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2220      	movs	r2, #32
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2220      	movs	r2, #32
 800a820:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e00f      	b.n	800a854 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	69da      	ldr	r2, [r3, #28]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	4013      	ands	r3, r2
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	429a      	cmp	r2, r3
 800a842:	bf0c      	ite	eq
 800a844:	2301      	moveq	r3, #1
 800a846:	2300      	movne	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	461a      	mov	r2, r3
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d092      	beq.n	800a778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a872:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689a      	ldr	r2, [r3, #8]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f022 0201 	bic.w	r2, r2, #1
 800a882:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2220      	movs	r2, #32
 800a888:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a890:	bf00      	nop
 800a892:	370c      	adds	r7, #12
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff fbd8 	bl	800a070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2220      	movs	r2, #32
 800a8e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff fbb5 	bl	800a05c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a90e:	b084      	sub	sp, #16
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	f107 001c 	add.w	r0, r7, #28
 800a91c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	2b01      	cmp	r3, #1
 800a924:	d122      	bne.n	800a96c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a93a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a950:	2b01      	cmp	r3, #1
 800a952:	d105      	bne.n	800a960 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f937 	bl	800abd4 <USB_CoreReset>
 800a966:	4603      	mov	r3, r0
 800a968:	73fb      	strb	r3, [r7, #15]
 800a96a:	e01a      	b.n	800a9a2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f92b 	bl	800abd4 <USB_CoreReset>
 800a97e:	4603      	mov	r3, r0
 800a980:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a984:	2b00      	cmp	r3, #0
 800a986:	d106      	bne.n	800a996 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	639a      	str	r2, [r3, #56]	; 0x38
 800a994:	e005      	b.n	800a9a2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a99a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9ae:	b004      	add	sp, #16
 800a9b0:	4770      	bx	lr

0800a9b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f043 0201 	orr.w	r2, r3, #1
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f023 0201 	bic.w	r2, r3, #1
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d106      	bne.n	800aa22 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60da      	str	r2, [r3, #12]
 800aa20:	e00b      	b.n	800aa3a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa22:	78fb      	ldrb	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d106      	bne.n	800aa36 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60da      	str	r2, [r3, #12]
 800aa34:	e001      	b.n	800aa3a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e003      	b.n	800aa42 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800aa3a:	2032      	movs	r0, #50	; 0x32
 800aa3c:	f7f7 fd38 	bl	80024b0 <HAL_Delay>

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	019b      	lsls	r3, r3, #6
 800aa5e:	f043 0220 	orr.w	r2, r3, #32
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <USB_FlushTxFifo+0x48>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d901      	bls.n	800aa78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e006      	b.n	800aa86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	f003 0320 	and.w	r3, r3, #32
 800aa80:	2b20      	cmp	r3, #32
 800aa82:	d0f0      	beq.n	800aa66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	00030d40 	.word	0x00030d40

0800aa98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a09      	ldr	r2, [pc, #36]	; (800aad8 <USB_FlushRxFifo+0x40>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d901      	bls.n	800aabc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e006      	b.n	800aaca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	2b10      	cmp	r3, #16
 800aac6:	d0f0      	beq.n	800aaaa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	00030d40 	.word	0x00030d40

0800aadc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800aadc:	b480      	push	{r7}
 800aade:	b089      	sub	sp, #36	; 0x24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	4611      	mov	r1, r2
 800aae8:	461a      	mov	r2, r3
 800aaea:	460b      	mov	r3, r1
 800aaec:	71fb      	strb	r3, [r7, #7]
 800aaee:	4613      	mov	r3, r2
 800aaf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800aafa:	88bb      	ldrh	r3, [r7, #4]
 800aafc:	3303      	adds	r3, #3
 800aafe:	089b      	lsrs	r3, r3, #2
 800ab00:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800ab02:	2300      	movs	r3, #0
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	e00f      	b.n	800ab28 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	031a      	lsls	r2, r3, #12
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab14:	461a      	mov	r2, r3
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	3301      	adds	r3, #1
 800ab26:	61bb      	str	r3, [r7, #24]
 800ab28:	69ba      	ldr	r2, [r7, #24]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d3eb      	bcc.n	800ab08 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3724      	adds	r7, #36	; 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b089      	sub	sp, #36	; 0x24
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	3303      	adds	r3, #3
 800ab58:	089b      	lsrs	r3, r3, #2
 800ab5a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	61bb      	str	r3, [r7, #24]
 800ab60:	e00b      	b.n	800ab7a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	3304      	adds	r3, #4
 800ab72:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	3301      	adds	r3, #1
 800ab78:	61bb      	str	r3, [r7, #24]
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d3ef      	bcc.n	800ab62 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ab82:	69fb      	ldr	r3, [r7, #28]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3724      	adds	r7, #36	; 0x24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	4013      	ands	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aba8:	68fb      	ldr	r3, [r7, #12]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b083      	sub	sp, #12
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	695b      	ldr	r3, [r3, #20]
 800abc2:	f003 0301 	and.w	r3, r3, #1
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr
	...

0800abd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4a13      	ldr	r2, [pc, #76]	; (800ac38 <USB_CoreReset+0x64>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d901      	bls.n	800abf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e01b      	b.n	800ac2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	daf2      	bge.n	800abe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f043 0201 	orr.w	r2, r3, #1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4a09      	ldr	r2, [pc, #36]	; (800ac38 <USB_CoreReset+0x64>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d901      	bls.n	800ac1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e006      	b.n	800ac2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d0f0      	beq.n	800ac0a <USB_CoreReset+0x36>

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	00030d40 	.word	0x00030d40

0800ac3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	f107 001c 	add.w	r0, r7, #28
 800ac4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac58:	461a      	mov	r2, r3
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac84:	f023 0304 	bic.w	r3, r3, #4
 800ac88:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ac8a:	2110      	movs	r1, #16
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f7ff fedd 	bl	800aa4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7ff ff00 	bl	800aa98 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	e015      	b.n	800acca <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acaa:	461a      	mov	r2, r3
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acbe:	461a      	mov	r2, r3
 800acc0:	2300      	movs	r3, #0
 800acc2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d3e5      	bcc.n	800ac9e <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800acd2:	2101      	movs	r1, #1
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f893 	bl	800ae00 <USB_DriveVbus>

  HAL_Delay(200U);
 800acda:	20c8      	movs	r0, #200	; 0xc8
 800acdc:	f7f7 fbe8 	bl	80024b0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f04f 32ff 	mov.w	r2, #4294967295
 800acec:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2280      	movs	r2, #128	; 0x80
 800acf2:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a0d      	ldr	r2, [pc, #52]	; (800ad2c <USB_HostInit+0xf0>)
 800acf8:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <USB_HostInit+0xf4>)
 800acfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	f043 0210 	orr.w	r2, r3, #16
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	699a      	ldr	r2, [r3, #24]
 800ad12:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <USB_HostInit+0xf8>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad26:	b004      	add	sp, #16
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	00600080 	.word	0x00600080
 800ad30:	004000e0 	.word	0x004000e0
 800ad34:	a3200008 	.word	0xa3200008

0800ad38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	f003 0303 	and.w	r3, r3, #3
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad70:	4313      	orrs	r3, r2
 800ad72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ad74:	78fb      	ldrb	r3, [r7, #3]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d107      	bne.n	800ad8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad80:	461a      	mov	r2, r3
 800ad82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ad86:	6053      	str	r3, [r2, #4]
 800ad88:	e009      	b.n	800ad9e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d106      	bne.n	800ad9e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad96:	461a      	mov	r2, r3
 800ad98:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad9c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3714      	adds	r7, #20
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800adcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800add6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adda:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800addc:	2064      	movs	r0, #100	; 0x64
 800adde:	f7f7 fb67 	bl	80024b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800adea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800adf0:	200a      	movs	r0, #10
 800adf2:	f7f7 fb5d 	bl	80024b0 <HAL_Delay>

  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ae24:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <USB_DriveVbus+0x44>
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d106      	bne.n	800ae44 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ae3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae42:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae4e:	d109      	bne.n	800ae64 <USB_DriveVbus+0x64>
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ae5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae62:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	0c5b      	lsrs	r3, r3, #17
 800ae90:	f003 0303 	and.w	r3, r3, #3
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3714      	adds	r7, #20
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	b29b      	uxth	r3, r3
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
	...

0800aec4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	461a      	mov	r2, r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	70fb      	strb	r3, [r7, #3]
 800aed6:	460b      	mov	r3, r1
 800aed8:	70bb      	strb	r3, [r7, #2]
 800aeda:	4613      	mov	r3, r2
 800aedc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800aee6:	78fb      	ldrb	r3, [r7, #3]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef2:	461a      	mov	r2, r3
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295
 800aef8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aefa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d867      	bhi.n	800afd2 <USB_HC_Init+0x10e>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <USB_HC_Init+0x44>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af19 	.word	0x0800af19
 800af0c:	0800af95 	.word	0x0800af95
 800af10:	0800af19 	.word	0x0800af19
 800af14:	0800af57 	.word	0x0800af57
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af24:	461a      	mov	r2, r3
 800af26:	f240 439d 	movw	r3, #1181	; 0x49d
 800af2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800af2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af30:	2b00      	cmp	r3, #0
 800af32:	da51      	bge.n	800afd8 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	78fa      	ldrb	r2, [r7, #3]
 800af44:	0151      	lsls	r1, r2, #5
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	440a      	add	r2, r1
 800af4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af52:	60d3      	str	r3, [r2, #12]
      }
      break;
 800af54:	e040      	b.n	800afd8 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af56:	78fb      	ldrb	r3, [r7, #3]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af62:	461a      	mov	r2, r3
 800af64:	f240 639d 	movw	r3, #1693	; 0x69d
 800af68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	da34      	bge.n	800afdc <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af72:	78fb      	ldrb	r3, [r7, #3]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	78fa      	ldrb	r2, [r7, #3]
 800af82:	0151      	lsls	r1, r2, #5
 800af84:	68ba      	ldr	r2, [r7, #8]
 800af86:	440a      	add	r2, r1
 800af88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af90:	60d3      	str	r3, [r2, #12]
      }

      break;
 800af92:	e023      	b.n	800afdc <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af94:	78fb      	ldrb	r3, [r7, #3]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa0:	461a      	mov	r2, r3
 800afa2:	f240 2325 	movw	r3, #549	; 0x225
 800afa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800afa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800afac:	2b00      	cmp	r3, #0
 800afae:	da17      	bge.n	800afe0 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	0151      	lsls	r1, r2, #5
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	440a      	add	r2, r1
 800afc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afca:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800afce:	60d3      	str	r3, [r2, #12]
      }
      break;
 800afd0:	e006      	b.n	800afe0 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	75fb      	strb	r3, [r7, #23]
      break;
 800afd6:	e004      	b.n	800afe2 <USB_HC_Init+0x11e>
      break;
 800afd8:	bf00      	nop
 800afda:	e002      	b.n	800afe2 <USB_HC_Init+0x11e>
      break;
 800afdc:	bf00      	nop
 800afde:	e000      	b.n	800afe2 <USB_HC_Init+0x11e>
      break;
 800afe0:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe8:	699a      	ldr	r2, [r3, #24]
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	f003 030f 	and.w	r3, r3, #15
 800aff0:	2101      	movs	r1, #1
 800aff2:	fa01 f303 	lsl.w	r3, r1, r3
 800aff6:	68b9      	ldr	r1, [r7, #8]
 800aff8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800affc:	4313      	orrs	r3, r2
 800affe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b00c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b010:	2b00      	cmp	r3, #0
 800b012:	da03      	bge.n	800b01c <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b018:	613b      	str	r3, [r7, #16]
 800b01a:	e001      	b.n	800b020 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b020:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b024:	2b02      	cmp	r3, #2
 800b026:	d103      	bne.n	800b030 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	e001      	b.n	800b034 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b034:	787b      	ldrb	r3, [r7, #1]
 800b036:	059b      	lsls	r3, r3, #22
 800b038:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b03c:	78bb      	ldrb	r3, [r7, #2]
 800b03e:	02db      	lsls	r3, r3, #11
 800b040:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b044:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b04a:	049b      	lsls	r3, r3, #18
 800b04c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b050:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b052:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b054:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b058:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	0159      	lsls	r1, r3, #5
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	440b      	add	r3, r1
 800b066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b06a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b070:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b072:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b076:	2b03      	cmp	r3, #3
 800b078:	d10f      	bne.n	800b09a <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b07a:	78fb      	ldrb	r3, [r7, #3]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	4413      	add	r3, r2
 800b082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	0151      	lsls	r1, r2, #5
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	440a      	add	r2, r1
 800b090:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b094:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b098:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b088      	sub	sp, #32
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b0bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d018      	beq.n	800b0fc <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	8912      	ldrh	r2, [r2, #8]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	683a      	ldr	r2, [r7, #0]
 800b0d8:	8912      	ldrh	r2, [r2, #8]
 800b0da:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0de:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800b0e0:	8bfa      	ldrh	r2, [r7, #30]
 800b0e2:	8a7b      	ldrh	r3, [r7, #18]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d90b      	bls.n	800b100 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800b0e8:	8a7b      	ldrh	r3, [r7, #18]
 800b0ea:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b0ec:	8bfb      	ldrh	r3, [r7, #30]
 800b0ee:	683a      	ldr	r2, [r7, #0]
 800b0f0:	8912      	ldrh	r2, [r2, #8]
 800b0f2:	fb02 f203 	mul.w	r2, r2, r3
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	611a      	str	r2, [r3, #16]
 800b0fa:	e001      	b.n	800b100 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	78db      	ldrb	r3, [r3, #3]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d006      	beq.n	800b116 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b108:	8bfb      	ldrh	r3, [r7, #30]
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	8912      	ldrh	r2, [r2, #8]
 800b10e:	fb02 f203 	mul.w	r2, r2, r3
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b11e:	8bfb      	ldrh	r3, [r7, #30]
 800b120:	04d9      	lsls	r1, r3, #19
 800b122:	4b5f      	ldr	r3, [pc, #380]	; (800b2a0 <USB_HC_StartXfer+0x1f8>)
 800b124:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b126:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	7a9b      	ldrb	r3, [r3, #10]
 800b12c:	075b      	lsls	r3, r3, #29
 800b12e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b132:	6979      	ldr	r1, [r7, #20]
 800b134:	0148      	lsls	r0, r1, #5
 800b136:	69b9      	ldr	r1, [r7, #24]
 800b138:	4401      	add	r1, r0
 800b13a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b13e:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b140:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	bf0c      	ite	eq
 800b152:	2301      	moveq	r3, #1
 800b154:	2300      	movne	r3, #0
 800b156:	b2db      	uxtb	r3, r3
 800b158:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	4413      	add	r3, r2
 800b162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b174:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b178:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	4413      	add	r3, r2
 800b182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	7c7b      	ldrb	r3, [r7, #17]
 800b18a:	075b      	lsls	r3, r3, #29
 800b18c:	6979      	ldr	r1, [r7, #20]
 800b18e:	0148      	lsls	r0, r1, #5
 800b190:	69b9      	ldr	r1, [r7, #24]
 800b192:	4401      	add	r1, r0
 800b194:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b198:	4313      	orrs	r3, r2
 800b19a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a3e      	ldr	r2, [pc, #248]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b1ae:	4b3d      	ldr	r3, [pc, #244]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1b6:	4a3b      	ldr	r2, [pc, #236]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	78db      	ldrb	r3, [r3, #3]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d006      	beq.n	800b1d0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b1c2:	4b38      	ldr	r3, [pc, #224]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ca:	4a36      	ldr	r2, [pc, #216]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	e005      	b.n	800b1dc <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b1d0:	4b34      	ldr	r3, [pc, #208]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1d8:	4a32      	ldr	r2, [pc, #200]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1dc:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1e4:	4a2f      	ldr	r2, [pc, #188]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	015a      	lsls	r2, r3, #5
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	4b2b      	ldr	r3, [pc, #172]	; (800b2a4 <USB_HC_StartXfer+0x1fc>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	78db      	ldrb	r3, [r3, #3]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d148      	bne.n	800b296 <USB_HC_StartXfer+0x1ee>
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d044      	beq.n	800b296 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	79db      	ldrb	r3, [r3, #7]
 800b210:	2b03      	cmp	r3, #3
 800b212:	d831      	bhi.n	800b278 <USB_HC_StartXfer+0x1d0>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <USB_HC_StartXfer+0x174>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b22d 	.word	0x0800b22d
 800b220:	0800b251 	.word	0x0800b251
 800b224:	0800b22d 	.word	0x0800b22d
 800b228:	0800b251 	.word	0x0800b251
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	3303      	adds	r3, #3
 800b232:	089b      	lsrs	r3, r3, #2
 800b234:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b236:	89fa      	ldrh	r2, [r7, #14]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	429a      	cmp	r2, r3
 800b240:	d91c      	bls.n	800b27c <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	699b      	ldr	r3, [r3, #24]
 800b246:	f043 0220 	orr.w	r2, r3, #32
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	619a      	str	r2, [r3, #24]
          }
          break;
 800b24e:	e015      	b.n	800b27c <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	3303      	adds	r3, #3
 800b256:	089b      	lsrs	r3, r3, #2
 800b258:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b25a:	89fa      	ldrh	r2, [r7, #14]
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	b29b      	uxth	r3, r3
 800b266:	429a      	cmp	r2, r3
 800b268:	d90a      	bls.n	800b280 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	619a      	str	r2, [r3, #24]
          }
          break;
 800b276:	e003      	b.n	800b280 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800b278:	bf00      	nop
 800b27a:	e002      	b.n	800b282 <USB_HC_StartXfer+0x1da>
          break;
 800b27c:	bf00      	nop
 800b27e:	e000      	b.n	800b282 <USB_HC_StartXfer+0x1da>
          break;
 800b280:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68d9      	ldr	r1, [r3, #12]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	785a      	ldrb	r2, [r3, #1]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fc23 	bl	800aadc <USB_WritePacket>
    }

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3720      	adds	r7, #32
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	1ff80000 	.word	0x1ff80000
 800b2a4:	200004c4 	.word	0x200004c4

0800b2a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	b29b      	uxth	r3, r3
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b087      	sub	sp, #28
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b2da:	78fb      	ldrb	r3, [r7, #3]
 800b2dc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	0c9b      	lsrs	r3, r3, #18
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d002      	beq.n	800b304 <USB_HC_Halt+0x3a>
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d16c      	bne.n	800b3de <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	0151      	lsls	r1, r2, #5
 800b316:	693a      	ldr	r2, [r7, #16]
 800b318:	440a      	add	r2, r1
 800b31a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b31e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b322:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d143      	bne.n	800b3b8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	4413      	add	r3, r2
 800b338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	0151      	lsls	r1, r2, #5
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	440a      	add	r2, r1
 800b346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b34a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b34e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	4413      	add	r3, r2
 800b358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	0151      	lsls	r1, r2, #5
 800b362:	693a      	ldr	r2, [r7, #16]
 800b364:	440a      	add	r2, r1
 800b366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b36a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b36e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	4413      	add	r3, r2
 800b378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	0151      	lsls	r1, r2, #5
 800b382:	693a      	ldr	r2, [r7, #16]
 800b384:	440a      	add	r2, r1
 800b386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b38a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b38e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	3301      	adds	r3, #1
 800b394:	617b      	str	r3, [r7, #20]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b39c:	d81d      	bhi.n	800b3da <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3b4:	d0ec      	beq.n	800b390 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3b6:	e080      	b.n	800b4ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3d6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3d8:	e06f      	b.n	800b4ba <USB_HC_Halt+0x1f0>
          break;
 800b3da:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3dc:	e06d      	b.n	800b4ba <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	015a      	lsls	r2, r3, #5
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	0151      	lsls	r1, r2, #5
 800b3f0:	693a      	ldr	r2, [r7, #16]
 800b3f2:	440a      	add	r2, r1
 800b3f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d143      	bne.n	800b496 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	4413      	add	r3, r2
 800b416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	0151      	lsls	r1, r2, #5
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	440a      	add	r2, r1
 800b424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b42c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	4413      	add	r3, r2
 800b436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	0151      	lsls	r1, r2, #5
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	440a      	add	r2, r1
 800b444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b448:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b44c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	4413      	add	r3, r2
 800b456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	0151      	lsls	r1, r2, #5
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	440a      	add	r2, r1
 800b464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b468:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b46c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	3301      	adds	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b47a:	d81d      	bhi.n	800b4b8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	4413      	add	r3, r2
 800b484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b48e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b492:	d0ec      	beq.n	800b46e <USB_HC_Halt+0x1a4>
 800b494:	e011      	b.n	800b4ba <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e000      	b.n	800b4ba <USB_HC_Halt+0x1f0>
          break;
 800b4b8:	bf00      	nop
    }
  }

  return HAL_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	371c      	adds	r7, #28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7ff fa7b 	bl	800a9d4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b4de:	2110      	movs	r1, #16
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff fab3 	bl	800aa4c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f7ff fad6 	bl	800aa98 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	613b      	str	r3, [r7, #16]
 800b4f0:	e01f      	b.n	800b532 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b518:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	4413      	add	r3, r2
 800b522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b526:	461a      	mov	r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	3301      	adds	r3, #1
 800b530:	613b      	str	r3, [r7, #16]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	2b0f      	cmp	r3, #15
 800b536:	d9dc      	bls.n	800b4f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b538:	2300      	movs	r3, #0
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	e034      	b.n	800b5a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b554:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b55c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b564:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b572:	461a      	mov	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3301      	adds	r3, #1
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b584:	d80c      	bhi.n	800b5a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	015a      	lsls	r2, r3, #5
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b59c:	d0ec      	beq.n	800b578 <USB_StopHost+0xb0>
 800b59e:	e000      	b.n	800b5a2 <USB_StopHost+0xda>
        break;
 800b5a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	613b      	str	r3, [r7, #16]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	2b0f      	cmp	r3, #15
 800b5ac:	d9c7      	bls.n	800b53e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff f9f4 	bl	800a9b2 <USB_EnableGlobalInt>

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b5d4:	b590      	push	{r4, r7, lr}
 800b5d6:	b089      	sub	sp, #36	; 0x24
 800b5d8:	af04      	add	r7, sp, #16
 800b5da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b5dc:	2301      	movs	r3, #1
 800b5de:	2202      	movs	r2, #2
 800b5e0:	2102      	movs	r1, #2
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fc68 	bl	800beb8 <USBH_FindInterface>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2bff      	cmp	r3, #255	; 0xff
 800b5f0:	d002      	beq.n	800b5f8 <USBH_CDC_InterfaceInit+0x24>
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d901      	bls.n	800b5fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e13d      	b.n	800b878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fc3d 	bl	800be80 <USBH_SelectInterface>
 800b606:	4603      	mov	r3, r0
 800b608:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b610:	2302      	movs	r3, #2
 800b612:	e131      	b.n	800b878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b61a:	2050      	movs	r0, #80	; 0x50
 800b61c:	f002 fa08 	bl	800da30 <malloc>
 800b620:	4603      	mov	r3, r0
 800b622:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b634:	2302      	movs	r3, #2
 800b636:	e11f      	b.n	800b878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b638:	2250      	movs	r2, #80	; 0x50
 800b63a:	2100      	movs	r1, #0
 800b63c:	68b8      	ldr	r0, [r7, #8]
 800b63e:	f002 fa07 	bl	800da50 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b642:	7bfb      	ldrb	r3, [r7, #15]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	211a      	movs	r1, #26
 800b648:	fb01 f303 	mul.w	r3, r1, r3
 800b64c:	4413      	add	r3, r2
 800b64e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	b25b      	sxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	da15      	bge.n	800b686 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	211a      	movs	r1, #26
 800b660:	fb01 f303 	mul.w	r3, r1, r3
 800b664:	4413      	add	r3, r2
 800b666:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	211a      	movs	r1, #26
 800b676:	fb01 f303 	mul.w	r3, r1, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b680:	881a      	ldrh	r2, [r3, #0]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f001 fe36 	bl	800d2fe <USBH_AllocPipe>
 800b692:	4603      	mov	r3, r0
 800b694:	461a      	mov	r2, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	7819      	ldrb	r1, [r3, #0]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	7858      	ldrb	r0, [r3, #1]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	8952      	ldrh	r2, [r2, #10]
 800b6b2:	9202      	str	r2, [sp, #8]
 800b6b4:	2203      	movs	r2, #3
 800b6b6:	9201      	str	r2, [sp, #4]
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	4623      	mov	r3, r4
 800b6bc:	4602      	mov	r2, r0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 fdee 	bl	800d2a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f002 f8ff 	bl	800d8d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	210a      	movs	r1, #10
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 fbed 	bl	800beb8 <USBH_FindInterface>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	2bff      	cmp	r3, #255	; 0xff
 800b6e6:	d002      	beq.n	800b6ee <USBH_CDC_InterfaceInit+0x11a>
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d901      	bls.n	800b6f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e0c2      	b.n	800b878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	211a      	movs	r1, #26
 800b6f8:	fb01 f303 	mul.w	r3, r1, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	b25b      	sxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	da16      	bge.n	800b738 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	211a      	movs	r1, #26
 800b710:	fb01 f303 	mul.w	r3, r1, r3
 800b714:	4413      	add	r3, r2
 800b716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b71a:	781a      	ldrb	r2, [r3, #0]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	211a      	movs	r1, #26
 800b726:	fb01 f303 	mul.w	r3, r1, r3
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b730:	881a      	ldrh	r2, [r3, #0]
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	835a      	strh	r2, [r3, #26]
 800b736:	e015      	b.n	800b764 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b738:	7bfb      	ldrb	r3, [r7, #15]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	211a      	movs	r1, #26
 800b73e:	fb01 f303 	mul.w	r3, r1, r3
 800b742:	4413      	add	r3, r2
 800b744:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b748:	781a      	ldrb	r2, [r3, #0]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	211a      	movs	r1, #26
 800b754:	fb01 f303 	mul.w	r3, r1, r3
 800b758:	4413      	add	r3, r2
 800b75a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b75e:	881a      	ldrh	r2, [r3, #0]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	211a      	movs	r1, #26
 800b76a:	fb01 f303 	mul.w	r3, r1, r3
 800b76e:	4413      	add	r3, r2
 800b770:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	b25b      	sxtb	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da16      	bge.n	800b7aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b77c:	7bfb      	ldrb	r3, [r7, #15]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	211a      	movs	r1, #26
 800b782:	fb01 f303 	mul.w	r3, r1, r3
 800b786:	4413      	add	r3, r2
 800b788:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	211a      	movs	r1, #26
 800b798:	fb01 f303 	mul.w	r3, r1, r3
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7a2:	881a      	ldrh	r2, [r3, #0]
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	835a      	strh	r2, [r3, #26]
 800b7a8:	e015      	b.n	800b7d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	687a      	ldr	r2, [r7, #4]
 800b7ae:	211a      	movs	r1, #26
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b7c0:	7bfb      	ldrb	r3, [r7, #15]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	211a      	movs	r1, #26
 800b7c6:	fb01 f303 	mul.w	r3, r1, r3
 800b7ca:	4413      	add	r3, r2
 800b7cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b7d0:	881a      	ldrh	r2, [r3, #0]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	7b9b      	ldrb	r3, [r3, #14]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 fd8e 	bl	800d2fe <USBH_AllocPipe>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	7bdb      	ldrb	r3, [r3, #15]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 fd84 	bl	800d2fe <USBH_AllocPipe>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	7b59      	ldrb	r1, [r3, #13]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	7b98      	ldrb	r0, [r3, #14]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	8b12      	ldrh	r2, [r2, #24]
 800b816:	9202      	str	r2, [sp, #8]
 800b818:	2202      	movs	r2, #2
 800b81a:	9201      	str	r2, [sp, #4]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	4623      	mov	r3, r4
 800b820:	4602      	mov	r2, r0
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f001 fd3c 	bl	800d2a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	7b19      	ldrb	r1, [r3, #12]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	7bd8      	ldrb	r0, [r3, #15]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	8b52      	ldrh	r2, [r2, #26]
 800b840:	9202      	str	r2, [sp, #8]
 800b842:	2202      	movs	r2, #2
 800b844:	9201      	str	r2, [sp, #4]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	4623      	mov	r3, r4
 800b84a:	4602      	mov	r2, r0
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 fd27 	bl	800d2a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	7b5b      	ldrb	r3, [r3, #13]
 800b85e:	2200      	movs	r2, #0
 800b860:	4619      	mov	r1, r3
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f002 f834 	bl	800d8d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	7b1b      	ldrb	r3, [r3, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	4619      	mov	r1, r3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f002 f82d 	bl	800d8d0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd90      	pop	{r4, r7, pc}

0800b880 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00e      	beq.n	800b8b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 fd1c 	bl	800d2de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 fd47 	bl	800d340 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	7b1b      	ldrb	r3, [r3, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00e      	beq.n	800b8de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	7b1b      	ldrb	r3, [r3, #12]
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f001 fd09 	bl	800d2de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7b1b      	ldrb	r3, [r3, #12]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f001 fd34 	bl	800d340 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	7b5b      	ldrb	r3, [r3, #13]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	7b5b      	ldrb	r3, [r3, #13]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f001 fcf6 	bl	800d2de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	7b5b      	ldrb	r3, [r3, #13]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 fd21 	bl	800d340 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00b      	beq.n	800b928 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b916:	69db      	ldr	r3, [r3, #28]
 800b918:	4618      	mov	r0, r3
 800b91a:	f002 f891 	bl	800da40 <free>
    phost->pActiveClass->pData = 0U;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b924:	2200      	movs	r2, #0
 800b926:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b928:	2300      	movs	r3, #0
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3340      	adds	r3, #64	; 0x40
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f8b1 	bl	800bab2 <GetLineCoding>
 800b950:	4603      	mov	r3, r0
 800b952:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d105      	bne.n	800b966 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b960:	2102      	movs	r1, #2
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b966:	7afb      	ldrb	r3, [r7, #11]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b978:	2301      	movs	r3, #1
 800b97a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b990:	2b04      	cmp	r3, #4
 800b992:	d877      	bhi.n	800ba84 <USBH_CDC_Process+0x114>
 800b994:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <USBH_CDC_Process+0x2c>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9b1 	.word	0x0800b9b1
 800b9a0:	0800b9b7 	.word	0x0800b9b7
 800b9a4:	0800b9e7 	.word	0x0800b9e7
 800b9a8:	0800ba5b 	.word	0x0800ba5b
 800b9ac:	0800ba69 	.word	0x0800ba69
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b4:	e06d      	b.n	800ba92 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f897 	bl	800baf0 <SetLineCoding>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d104      	bne.n	800b9d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b9d4:	e058      	b.n	800ba88 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d055      	beq.n	800ba88 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2204      	movs	r2, #4
 800b9e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b9e4:	e050      	b.n	800ba88 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	3340      	adds	r3, #64	; 0x40
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f860 	bl	800bab2 <GetLineCoding>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d126      	bne.n	800ba4a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d13b      	bne.n	800ba8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba1e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d133      	bne.n	800ba8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba2e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d12b      	bne.n	800ba8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba3c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d124      	bne.n	800ba8c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f95a 	bl	800bcfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ba48:	e020      	b.n	800ba8c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d01d      	beq.n	800ba8c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2204      	movs	r2, #4
 800ba54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ba58:	e018      	b.n	800ba8c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f867 	bl	800bb2e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f8dc 	bl	800bc1e <CDC_ProcessReception>
      break;
 800ba66:	e014      	b.n	800ba92 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ba68:	2100      	movs	r1, #0
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 ffe5 	bl	800ca3a <USBH_ClrFeature>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ba82:	e005      	b.n	800ba90 <USBH_CDC_Process+0x120>

    default:
      break;
 800ba84:	bf00      	nop
 800ba86:	e004      	b.n	800ba92 <USBH_CDC_Process+0x122>
      break;
 800ba88:	bf00      	nop
 800ba8a:	e002      	b.n	800ba92 <USBH_CDC_Process+0x122>
      break;
 800ba8c:	bf00      	nop
 800ba8e:	e000      	b.n	800ba92 <USBH_CDC_Process+0x122>
      break;
 800ba90:	bf00      	nop

  }

  return status;
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	370c      	adds	r7, #12
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b082      	sub	sp, #8
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
 800baba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	22a1      	movs	r2, #161	; 0xa1
 800bac0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2221      	movs	r2, #33	; 0x21
 800bac6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2207      	movs	r2, #7
 800bad8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2207      	movs	r2, #7
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 f98a 	bl	800cdfa <USBH_CtlReq>
 800bae6:	4603      	mov	r3, r0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2221      	movs	r2, #33	; 0x21
 800bafe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2220      	movs	r2, #32
 800bb04:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2207      	movs	r2, #7
 800bb16:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2207      	movs	r2, #7
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 f96b 	bl	800cdfa <USBH_CtlReq>
 800bb24:	4603      	mov	r3, r0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b086      	sub	sp, #24
 800bb32:	af02      	add	r7, sp, #8
 800bb34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb3c:	69db      	ldr	r3, [r3, #28]
 800bb3e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bb40:	2300      	movs	r3, #0
 800bb42:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d002      	beq.n	800bb54 <CDC_ProcessTransmission+0x26>
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d025      	beq.n	800bb9e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800bb52:	e060      	b.n	800bc16 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	8b12      	ldrh	r2, [r2, #24]
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d90c      	bls.n	800bb7a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	69d9      	ldr	r1, [r3, #28]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8b1a      	ldrh	r2, [r3, #24]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	7b58      	ldrb	r0, [r3, #13]
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	4603      	mov	r3, r0
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 fb51 	bl	800d21a <USBH_BulkSendData>
 800bb78:	e00c      	b.n	800bb94 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	7b58      	ldrb	r0, [r3, #13]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f001 fb43 	bl	800d21a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bb9c:	e03b      	b.n	800bc16 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	7b5b      	ldrb	r3, [r3, #13]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 fe69 	bl	800d87c <USBH_LL_GetURBState>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bbae:	7afb      	ldrb	r3, [r7, #11]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d128      	bne.n	800bc06 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	8b12      	ldrh	r2, [r2, #24]
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d90e      	bls.n	800bbde <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	8b12      	ldrh	r2, [r2, #24]
 800bbc8:	1a9a      	subs	r2, r3, r2
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	8b12      	ldrh	r2, [r2, #24]
 800bbd6:	441a      	add	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	61da      	str	r2, [r3, #28]
 800bbdc:	e002      	b.n	800bbe4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d004      	beq.n	800bbf6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2201      	movs	r2, #1
 800bbf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bbf4:	e00e      	b.n	800bc14 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 f868 	bl	800bcd4 <USBH_CDC_TransmitCallback>
      break;
 800bc04:	e006      	b.n	800bc14 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d103      	bne.n	800bc14 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bc14:	bf00      	nop
  }
}
 800bc16:	bf00      	nop
 800bc18:	3710      	adds	r7, #16
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b086      	sub	sp, #24
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc30:	2300      	movs	r3, #0
 800bc32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d002      	beq.n	800bc44 <CDC_ProcessReception+0x26>
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d00e      	beq.n	800bc60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bc42:	e043      	b.n	800bccc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	6a19      	ldr	r1, [r3, #32]
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	8b5a      	ldrh	r2, [r3, #26]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	7b1b      	ldrb	r3, [r3, #12]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 fb07 	bl	800d264 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2204      	movs	r2, #4
 800bc5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bc5e:	e035      	b.n	800bccc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	7b1b      	ldrb	r3, [r3, #12]
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f001 fe08 	bl	800d87c <USBH_LL_GetURBState>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bc70:	7cfb      	ldrb	r3, [r7, #19]
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d129      	bne.n	800bcca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	7b1b      	ldrb	r3, [r3, #12]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 fd6b 	bl	800d758 <USBH_LL_GetLastXferSize>
 800bc82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d016      	beq.n	800bcbc <CDC_ProcessReception+0x9e>
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	8b5b      	ldrh	r3, [r3, #26]
 800bc92:	461a      	mov	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d910      	bls.n	800bcbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	1ad2      	subs	r2, r2, r3
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	6a1a      	ldr	r2, [r3, #32]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	441a      	add	r2, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2203      	movs	r2, #3
 800bcb6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bcba:	e006      	b.n	800bcca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 f80f 	bl	800bce8 <USBH_CDC_ReceiveCallback>
      break;
 800bcca:	bf00      	nop
  }
}
 800bccc:	bf00      	nop
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bd24:	2302      	movs	r3, #2
 800bd26:	e029      	b.n	800bd7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	79fa      	ldrb	r2, [r7, #7]
 800bd2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f000 f81f 	bl	800bd84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d003      	beq.n	800bd74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f001 fc3d 	bl	800d5f4 <USBH_LL_Init>

  return USBH_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	e009      	b.n	800bdaa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	33e0      	adds	r3, #224	; 0xe0
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	2200      	movs	r2, #0
 800bda2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2b0e      	cmp	r3, #14
 800bdae:	d9f2      	bls.n	800bd96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]
 800bdb4:	e009      	b.n	800bdca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd0:	d3f1      	bcc.n	800bdb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2240      	movs	r2, #64	; 0x40
 800bdf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d016      	beq.n	800be6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10e      	bne.n	800be68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800be50:	1c59      	adds	r1, r3, #1
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	33de      	adds	r3, #222	; 0xde
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800be62:	2300      	movs	r3, #0
 800be64:	73fb      	strb	r3, [r7, #15]
 800be66:	e004      	b.n	800be72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800be68:	2302      	movs	r3, #2
 800be6a:	73fb      	strb	r3, [r7, #15]
 800be6c:	e001      	b.n	800be72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800be6e:	2302      	movs	r3, #2
 800be70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800be72:	7bfb      	ldrb	r3, [r7, #15]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800be96:	78fa      	ldrb	r2, [r7, #3]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d204      	bcs.n	800bea6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	78fa      	ldrb	r2, [r7, #3]
 800bea0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bea4:	e001      	b.n	800beaa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bea6:	2302      	movs	r3, #2
 800bea8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	4608      	mov	r0, r1
 800bec2:	4611      	mov	r1, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	4603      	mov	r3, r0
 800bec8:	70fb      	strb	r3, [r7, #3]
 800beca:	460b      	mov	r3, r1
 800becc:	70bb      	strb	r3, [r7, #2]
 800bece:	4613      	mov	r3, r2
 800bed0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bed2:	2300      	movs	r3, #0
 800bed4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bee0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bee2:	e025      	b.n	800bf30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	221a      	movs	r2, #26
 800bee8:	fb02 f303 	mul.w	r3, r2, r3
 800beec:	3308      	adds	r3, #8
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	4413      	add	r3, r2
 800bef2:	3302      	adds	r3, #2
 800bef4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	795b      	ldrb	r3, [r3, #5]
 800befa:	78fa      	ldrb	r2, [r7, #3]
 800befc:	429a      	cmp	r2, r3
 800befe:	d002      	beq.n	800bf06 <USBH_FindInterface+0x4e>
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	2bff      	cmp	r3, #255	; 0xff
 800bf04:	d111      	bne.n	800bf2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bf0a:	78ba      	ldrb	r2, [r7, #2]
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d002      	beq.n	800bf16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf10:	78bb      	ldrb	r3, [r7, #2]
 800bf12:	2bff      	cmp	r3, #255	; 0xff
 800bf14:	d109      	bne.n	800bf2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bf1a:	787a      	ldrb	r2, [r7, #1]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d002      	beq.n	800bf26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bf20:	787b      	ldrb	r3, [r7, #1]
 800bf22:	2bff      	cmp	r3, #255	; 0xff
 800bf24:	d101      	bne.n	800bf2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	e006      	b.n	800bf38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d9d6      	bls.n	800bee4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bf36:	23ff      	movs	r3, #255	; 0xff
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	371c      	adds	r7, #28
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f001 fb8d 	bl	800d66c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bf52:	2101      	movs	r1, #1
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fca4 	bl	800d8a2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b088      	sub	sp, #32
 800bf68:	af04      	add	r7, sp, #16
 800bf6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bf6c:	2302      	movs	r3, #2
 800bf6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d102      	bne.n	800bf86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2203      	movs	r2, #3
 800bf84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b0b      	cmp	r3, #11
 800bf8e:	f200 81b3 	bhi.w	800c2f8 <USBH_Process+0x394>
 800bf92:	a201      	add	r2, pc, #4	; (adr r2, 800bf98 <USBH_Process+0x34>)
 800bf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf98:	0800bfc9 	.word	0x0800bfc9
 800bf9c:	0800bffb 	.word	0x0800bffb
 800bfa0:	0800c063 	.word	0x0800c063
 800bfa4:	0800c293 	.word	0x0800c293
 800bfa8:	0800c2f9 	.word	0x0800c2f9
 800bfac:	0800c107 	.word	0x0800c107
 800bfb0:	0800c239 	.word	0x0800c239
 800bfb4:	0800c13d 	.word	0x0800c13d
 800bfb8:	0800c15d 	.word	0x0800c15d
 800bfbc:	0800c17d 	.word	0x0800c17d
 800bfc0:	0800c1ab 	.word	0x0800c1ab
 800bfc4:	0800c27b 	.word	0x0800c27b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 8193 	beq.w	800c2fc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bfdc:	20c8      	movs	r0, #200	; 0xc8
 800bfde:	f001 fcaa 	bl	800d936 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f001 fb9d 	bl	800d722 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bff8:	e180      	b.n	800c2fc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c000:	2b01      	cmp	r3, #1
 800c002:	d107      	bne.n	800c014 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c012:	e182      	b.n	800c31a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c01e:	d914      	bls.n	800c04a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c026:	3301      	adds	r3, #1
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c036:	2b03      	cmp	r3, #3
 800c038:	d903      	bls.n	800c042 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	220d      	movs	r2, #13
 800c03e:	701a      	strb	r2, [r3, #0]
      break;
 800c040:	e16b      	b.n	800c31a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	701a      	strb	r2, [r3, #0]
      break;
 800c048:	e167      	b.n	800c31a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c050:	f103 020a 	add.w	r2, r3, #10
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c05a:	200a      	movs	r0, #10
 800c05c:	f001 fc6b 	bl	800d936 <USBH_Delay>
      break;
 800c060:	e15b      	b.n	800c31a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c072:	2104      	movs	r1, #4
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c078:	2064      	movs	r0, #100	; 0x64
 800c07a:	f001 fc5c 	bl	800d936 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fb2a 	bl	800d6d8 <USBH_LL_GetSpeed>
 800c084:	4603      	mov	r3, r0
 800c086:	461a      	mov	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2205      	movs	r2, #5
 800c092:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c094:	2100      	movs	r1, #0
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 f931 	bl	800d2fe <USBH_AllocPipe>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c0a4:	2180      	movs	r1, #128	; 0x80
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 f929 	bl	800d2fe <USBH_AllocPipe>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7919      	ldrb	r1, [r3, #4]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c0c8:	b292      	uxth	r2, r2
 800c0ca:	9202      	str	r2, [sp, #8]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	9201      	str	r2, [sp, #4]
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2280      	movs	r2, #128	; 0x80
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f001 f8e2 	bl	800d2a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7959      	ldrb	r1, [r3, #5]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c0f0:	b292      	uxth	r2, r2
 800c0f2:	9202      	str	r2, [sp, #8]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	9201      	str	r2, [sp, #4]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 f8ce 	bl	800d2a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c104:	e109      	b.n	800c31a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f90c 	bl	800c324 <USBH_HandleEnum>
 800c10c:	4603      	mov	r3, r0
 800c10e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	f040 80f3 	bne.w	800c300 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d103      	bne.n	800c134 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2208      	movs	r2, #8
 800c130:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c132:	e0e5      	b.n	800c300 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2207      	movs	r2, #7
 800c138:	701a      	strb	r2, [r3, #0]
      break;
 800c13a:	e0e1      	b.n	800c300 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 80de 	beq.w	800c304 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c14e:	2101      	movs	r1, #1
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2208      	movs	r2, #8
 800c158:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c15a:	e0d3      	b.n	800c304 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c162:	b29b      	uxth	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fc20 	bl	800c9ac <USBH_SetCfg>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 80ca 	bne.w	800c308 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2209      	movs	r2, #9
 800c178:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c17a:	e0c5      	b.n	800c308 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c182:	f003 0320 	and.w	r3, r3, #32
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00b      	beq.n	800c1a2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c18a:	2101      	movs	r1, #1
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fc30 	bl	800c9f2 <USBH_SetFeature>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	f040 80b9 	bne.w	800c30c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	220a      	movs	r2, #10
 800c19e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c1a0:	e0b4      	b.n	800c30c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	220a      	movs	r2, #10
 800c1a6:	701a      	strb	r2, [r3, #0]
      break;
 800c1a8:	e0b0      	b.n	800c30c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f000 80ad 	beq.w	800c310 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
 800c1c2:	e016      	b.n	800c1f2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	32de      	adds	r2, #222	; 0xde
 800c1ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ce:	791a      	ldrb	r2, [r3, #4]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d108      	bne.n	800c1ec <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c1da:	7bfa      	ldrb	r2, [r7, #15]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	32de      	adds	r2, #222	; 0xde
 800c1e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c1ea:	e005      	b.n	800c1f8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	73fb      	strb	r3, [r7, #15]
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0e5      	beq.n	800c1c4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d016      	beq.n	800c230 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	4798      	blx	r3
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d109      	bne.n	800c228 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2206      	movs	r2, #6
 800c218:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c220:	2103      	movs	r1, #3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c226:	e073      	b.n	800c310 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	220d      	movs	r2, #13
 800c22c:	701a      	strb	r2, [r3, #0]
      break;
 800c22e:	e06f      	b.n	800c310 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	220d      	movs	r2, #13
 800c234:	701a      	strb	r2, [r3, #0]
      break;
 800c236:	e06b      	b.n	800c310 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d017      	beq.n	800c272 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	4798      	blx	r3
 800c24e:	4603      	mov	r3, r0
 800c250:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	d103      	bne.n	800c262 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	220b      	movs	r2, #11
 800c25e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c260:	e058      	b.n	800c314 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c262:	7bbb      	ldrb	r3, [r7, #14]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b02      	cmp	r3, #2
 800c268:	d154      	bne.n	800c314 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	220d      	movs	r2, #13
 800c26e:	701a      	strb	r2, [r3, #0]
      break;
 800c270:	e050      	b.n	800c314 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	220d      	movs	r2, #13
 800c276:	701a      	strb	r2, [r3, #0]
      break;
 800c278:	e04c      	b.n	800c314 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c280:	2b00      	cmp	r3, #0
 800c282:	d049      	beq.n	800c318 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c28a:	695b      	ldr	r3, [r3, #20]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	4798      	blx	r3
      }
      break;
 800c290:	e042      	b.n	800c318 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fd72 	bl	800bd84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d009      	beq.n	800c2be <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d005      	beq.n	800c2d4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2ce:	2105      	movs	r1, #5
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d107      	bne.n	800c2f0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7ff fe2b 	bl	800bf44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c2ee:	e014      	b.n	800c31a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 f9bb 	bl	800d66c <USBH_LL_Start>
      break;
 800c2f6:	e010      	b.n	800c31a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c2f8:	bf00      	nop
 800c2fa:	e00e      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c2fc:	bf00      	nop
 800c2fe:	e00c      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c300:	bf00      	nop
 800c302:	e00a      	b.n	800c31a <USBH_Process+0x3b6>
    break;
 800c304:	bf00      	nop
 800c306:	e008      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c308:	bf00      	nop
 800c30a:	e006      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c30c:	bf00      	nop
 800c30e:	e004      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c310:	bf00      	nop
 800c312:	e002      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c314:	bf00      	nop
 800c316:	e000      	b.n	800c31a <USBH_Process+0x3b6>
      break;
 800c318:	bf00      	nop
  }
  return USBH_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b088      	sub	sp, #32
 800c328:	af04      	add	r7, sp, #16
 800c32a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c32c:	2301      	movs	r3, #1
 800c32e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c330:	2301      	movs	r3, #1
 800c332:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	785b      	ldrb	r3, [r3, #1]
 800c338:	2b07      	cmp	r3, #7
 800c33a:	f200 81c1 	bhi.w	800c6c0 <USBH_HandleEnum+0x39c>
 800c33e:	a201      	add	r2, pc, #4	; (adr r2, 800c344 <USBH_HandleEnum+0x20>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c365 	.word	0x0800c365
 800c348:	0800c423 	.word	0x0800c423
 800c34c:	0800c48d 	.word	0x0800c48d
 800c350:	0800c51b 	.word	0x0800c51b
 800c354:	0800c585 	.word	0x0800c585
 800c358:	0800c5f5 	.word	0x0800c5f5
 800c35c:	0800c63b 	.word	0x0800c63b
 800c360:	0800c681 	.word	0x0800c681
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c364:	2108      	movs	r1, #8
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa50 	bl	800c80c <USBH_Get_DevDesc>
 800c36c:	4603      	mov	r3, r0
 800c36e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d130      	bne.n	800c3d8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7919      	ldrb	r1, [r3, #4]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c39a:	b292      	uxth	r2, r2
 800c39c:	9202      	str	r2, [sp, #8]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	9201      	str	r2, [sp, #4]
 800c3a2:	9300      	str	r3, [sp, #0]
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2280      	movs	r2, #128	; 0x80
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 ff79 	bl	800d2a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	7959      	ldrb	r1, [r3, #5]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c3c2:	b292      	uxth	r2, r2
 800c3c4:	9202      	str	r2, [sp, #8]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	9201      	str	r2, [sp, #4]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 ff65 	bl	800d2a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c3d6:	e175      	b.n	800c6c4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	f040 8172 	bne.w	800c6c4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d903      	bls.n	800c402 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	220d      	movs	r2, #13
 800c3fe:	701a      	strb	r2, [r3, #0]
      break;
 800c400:	e160      	b.n	800c6c4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	795b      	ldrb	r3, [r3, #5]
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 ff99 	bl	800d340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	791b      	ldrb	r3, [r3, #4]
 800c412:	4619      	mov	r1, r3
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 ff93 	bl	800d340 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	701a      	strb	r2, [r3, #0]
      break;
 800c420:	e150      	b.n	800c6c4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c422:	2112      	movs	r1, #18
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f9f1 	bl	800c80c <USBH_Get_DevDesc>
 800c42a:	4603      	mov	r3, r0
 800c42c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c42e:	7bbb      	ldrb	r3, [r7, #14]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d103      	bne.n	800c43c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2202      	movs	r2, #2
 800c438:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c43a:	e145      	b.n	800c6c8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	2b03      	cmp	r3, #3
 800c440:	f040 8142 	bne.w	800c6c8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c44a:	3301      	adds	r3, #1
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d903      	bls.n	800c466 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	220d      	movs	r2, #13
 800c462:	701a      	strb	r2, [r3, #0]
      break;
 800c464:	e130      	b.n	800c6c8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	795b      	ldrb	r3, [r3, #5]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 ff67 	bl	800d340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	791b      	ldrb	r3, [r3, #4]
 800c476:	4619      	mov	r1, r3
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 ff61 	bl	800d340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	701a      	strb	r2, [r3, #0]
      break;
 800c48a:	e11d      	b.n	800c6c8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c48c:	2101      	movs	r1, #1
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 fa68 	bl	800c964 <USBH_SetAddress>
 800c494:	4603      	mov	r3, r0
 800c496:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d132      	bne.n	800c504 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c49e:	2002      	movs	r0, #2
 800c4a0:	f001 fa49 	bl	800d936 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	7919      	ldrb	r1, [r3, #4]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c4c6:	b292      	uxth	r2, r2
 800c4c8:	9202      	str	r2, [sp, #8]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	9201      	str	r2, [sp, #4]
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2280      	movs	r2, #128	; 0x80
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fee3 	bl	800d2a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7959      	ldrb	r1, [r3, #5]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c4ee:	b292      	uxth	r2, r2
 800c4f0:	9202      	str	r2, [sp, #8]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	9201      	str	r2, [sp, #4]
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fecf 	bl	800d2a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c502:	e0e3      	b.n	800c6cc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	2b03      	cmp	r3, #3
 800c508:	f040 80e0 	bne.w	800c6cc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	220d      	movs	r2, #13
 800c510:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	705a      	strb	r2, [r3, #1]
      break;
 800c518:	e0d8      	b.n	800c6cc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c51a:	2109      	movs	r1, #9
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f99d 	bl	800c85c <USBH_Get_CfgDesc>
 800c522:	4603      	mov	r3, r0
 800c524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2204      	movs	r2, #4
 800c530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c532:	e0cd      	b.n	800c6d0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	2b03      	cmp	r3, #3
 800c538:	f040 80ca 	bne.w	800c6d0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c542:	3301      	adds	r3, #1
 800c544:	b2da      	uxtb	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c552:	2b03      	cmp	r3, #3
 800c554:	d903      	bls.n	800c55e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	220d      	movs	r2, #13
 800c55a:	701a      	strb	r2, [r3, #0]
      break;
 800c55c:	e0b8      	b.n	800c6d0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	795b      	ldrb	r3, [r3, #5]
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 feeb 	bl	800d340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	791b      	ldrb	r3, [r3, #4]
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fee5 	bl	800d340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	701a      	strb	r2, [r3, #0]
      break;
 800c582:	e0a5      	b.n	800c6d0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c58a:	4619      	mov	r1, r3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f965 	bl	800c85c <USBH_Get_CfgDesc>
 800c592:	4603      	mov	r3, r0
 800c594:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c596:	7bbb      	ldrb	r3, [r7, #14]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d103      	bne.n	800c5a4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2205      	movs	r2, #5
 800c5a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c5a2:	e097      	b.n	800c6d4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	f040 8094 	bne.w	800c6d4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d903      	bls.n	800c5ce <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	220d      	movs	r2, #13
 800c5ca:	701a      	strb	r2, [r3, #0]
      break;
 800c5cc:	e082      	b.n	800c6d4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	795b      	ldrb	r3, [r3, #5]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 feb3 	bl	800d340 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	791b      	ldrb	r3, [r3, #4]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 fead 	bl	800d340 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	701a      	strb	r2, [r3, #0]
      break;
 800c5f2:	e06f      	b.n	800c6d4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d019      	beq.n	800c632 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c60a:	23ff      	movs	r3, #255	; 0xff
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f949 	bl	800c8a4 <USBH_Get_StringDesc>
 800c612:	4603      	mov	r3, r0
 800c614:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d103      	bne.n	800c624 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2206      	movs	r2, #6
 800c620:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c622:	e059      	b.n	800c6d8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c624:	7bbb      	ldrb	r3, [r7, #14]
 800c626:	2b03      	cmp	r3, #3
 800c628:	d156      	bne.n	800c6d8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2206      	movs	r2, #6
 800c62e:	705a      	strb	r2, [r3, #1]
      break;
 800c630:	e052      	b.n	800c6d8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2206      	movs	r2, #6
 800c636:	705a      	strb	r2, [r3, #1]
      break;
 800c638:	e04e      	b.n	800c6d8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c640:	2b00      	cmp	r3, #0
 800c642:	d019      	beq.n	800c678 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c650:	23ff      	movs	r3, #255	; 0xff
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 f926 	bl	800c8a4 <USBH_Get_StringDesc>
 800c658:	4603      	mov	r3, r0
 800c65a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d103      	bne.n	800c66a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2207      	movs	r2, #7
 800c666:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c668:	e038      	b.n	800c6dc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d135      	bne.n	800c6dc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2207      	movs	r2, #7
 800c674:	705a      	strb	r2, [r3, #1]
      break;
 800c676:	e031      	b.n	800c6dc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2207      	movs	r2, #7
 800c67c:	705a      	strb	r2, [r3, #1]
      break;
 800c67e:	e02d      	b.n	800c6dc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c686:	2b00      	cmp	r3, #0
 800c688:	d017      	beq.n	800c6ba <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c696:	23ff      	movs	r3, #255	; 0xff
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f903 	bl	800c8a4 <USBH_Get_StringDesc>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c6ac:	e018      	b.n	800c6e0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d115      	bne.n	800c6e0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b8:	e012      	b.n	800c6e0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c6be:	e00f      	b.n	800c6e0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c6c0:	bf00      	nop
 800c6c2:	e00e      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6c4:	bf00      	nop
 800c6c6:	e00c      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6c8:	bf00      	nop
 800c6ca:	e00a      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6cc:	bf00      	nop
 800c6ce:	e008      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6d0:	bf00      	nop
 800c6d2:	e006      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6d4:	bf00      	nop
 800c6d6:	e004      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6d8:	bf00      	nop
 800c6da:	e002      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6dc:	bf00      	nop
 800c6de:	e000      	b.n	800c6e2 <USBH_HandleEnum+0x3be>
      break;
 800c6e0:	bf00      	nop
  }
  return Status;
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c6fe:	bf00      	nop
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b082      	sub	sp, #8
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f804 	bl	800c72e <USBH_HandleSof>
}
 800c726:	bf00      	nop
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b0b      	cmp	r3, #11
 800c73e:	d10a      	bne.n	800c756 <USBH_HandleSof+0x28>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
  }
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c75e:	b480      	push	{r7}
 800c760:	b083      	sub	sp, #12
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c76e:	bf00      	nop
}
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c78a:	bf00      	nop
}
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 ff5c 	bl	800d6a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	791b      	ldrb	r3, [r3, #4]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fda5 	bl	800d340 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	795b      	ldrb	r3, [r3, #5]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fd9f 	bl	800d340 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af02      	add	r7, sp, #8
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	460b      	mov	r3, r1
 800c816:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c81e:	78fb      	ldrb	r3, [r7, #3]
 800c820:	b29b      	uxth	r3, r3
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4613      	mov	r3, r2
 800c826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c82a:	2100      	movs	r1, #0
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f864 	bl	800c8fa <USBH_GetDescriptor>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c848:	78fa      	ldrb	r2, [r7, #3]
 800c84a:	b292      	uxth	r2, r2
 800c84c:	4619      	mov	r1, r3
 800c84e:	f000 f918 	bl	800ca82 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c852:	7bfb      	ldrb	r3, [r7, #15]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af02      	add	r7, sp, #8
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	331c      	adds	r3, #28
 800c86c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c86e:	887b      	ldrh	r3, [r7, #2]
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c878:	2100      	movs	r1, #0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f83d 	bl	800c8fa <USBH_GetDescriptor>
 800c880:	4603      	mov	r3, r0
 800c882:	72fb      	strb	r3, [r7, #11]
 800c884:	7afb      	ldrb	r3, [r7, #11]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d107      	bne.n	800c89a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c890:	887a      	ldrh	r2, [r7, #2]
 800c892:	68f9      	ldr	r1, [r7, #12]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f964 	bl	800cb62 <USBH_ParseCfgDesc>
  }

  return status;
 800c89a:	7afb      	ldrb	r3, [r7, #11]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	607a      	str	r2, [r7, #4]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	72fb      	strb	r3, [r7, #11]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c8b8:	7afb      	ldrb	r3, [r7, #11]
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c8c0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c8c8:	893b      	ldrh	r3, [r7, #8]
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	460b      	mov	r3, r1
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f812 	bl	800c8fa <USBH_GetDescriptor>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	75fb      	strb	r3, [r7, #23]
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d107      	bne.n	800c8f0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c8e6:	893a      	ldrh	r2, [r7, #8]
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 fa37 	bl	800cd5e <USBH_ParseStringDesc>
  }

  return status;
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3718      	adds	r7, #24
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	607b      	str	r3, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	72fb      	strb	r3, [r7, #11]
 800c908:	4613      	mov	r3, r2
 800c90a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	789b      	ldrb	r3, [r3, #2]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d11c      	bne.n	800c94e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c914:	7afb      	ldrb	r3, [r7, #11]
 800c916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c91a:	b2da      	uxtb	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2206      	movs	r2, #6
 800c924:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	893a      	ldrh	r2, [r7, #8]
 800c92a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c92c:	893b      	ldrh	r3, [r7, #8]
 800c92e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c936:	d104      	bne.n	800c942 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f240 4209 	movw	r2, #1033	; 0x409
 800c93e:	829a      	strh	r2, [r3, #20]
 800c940:	e002      	b.n	800c948 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8b3a      	ldrh	r2, [r7, #24]
 800c94c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c94e:	8b3b      	ldrh	r3, [r7, #24]
 800c950:	461a      	mov	r2, r3
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f000 fa50 	bl	800cdfa <USBH_CtlReq>
 800c95a:	4603      	mov	r3, r0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	789b      	ldrb	r3, [r3, #2]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d10f      	bne.n	800c998 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2205      	movs	r2, #5
 800c982:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c984:	78fb      	ldrb	r3, [r7, #3]
 800c986:	b29a      	uxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c998:	2200      	movs	r2, #0
 800c99a:	2100      	movs	r1, #0
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fa2c 	bl	800cdfa <USBH_CtlReq>
 800c9a2:	4603      	mov	r3, r0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	789b      	ldrb	r3, [r3, #2]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10e      	bne.n	800c9de <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2209      	movs	r2, #9
 800c9ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	887a      	ldrh	r2, [r7, #2]
 800c9d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c9de:	2200      	movs	r2, #0
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa09 	bl	800cdfa <USBH_CtlReq>
 800c9e8:	4603      	mov	r3, r0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	789b      	ldrb	r3, [r3, #2]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d10f      	bne.n	800ca26 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2203      	movs	r2, #3
 800ca10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ca26:	2200      	movs	r2, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f9e5 	bl	800cdfa <USBH_CtlReq>
 800ca30:	4603      	mov	r3, r0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3708      	adds	r7, #8
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b082      	sub	sp, #8
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	460b      	mov	r3, r1
 800ca44:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	789b      	ldrb	r3, [r3, #2]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d10f      	bne.n	800ca6e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2202      	movs	r2, #2
 800ca52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2201      	movs	r2, #1
 800ca58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ca60:	78fb      	ldrb	r3, [r7, #3]
 800ca62:	b29a      	uxth	r2, r3
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2100      	movs	r1, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f9c1 	bl	800cdfa <USBH_CtlReq>
 800ca78:	4603      	mov	r3, r0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b085      	sub	sp, #20
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	60b9      	str	r1, [r7, #8]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	781a      	ldrb	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	785a      	ldrb	r2, [r3, #1]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	3302      	adds	r3, #2
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	b29a      	uxth	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	3303      	adds	r3, #3
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	b29b      	uxth	r3, r3
 800cab0:	021b      	lsls	r3, r3, #8
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	4313      	orrs	r3, r2
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	791a      	ldrb	r2, [r3, #4]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	795a      	ldrb	r2, [r3, #5]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	799a      	ldrb	r2, [r3, #6]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	79da      	ldrb	r2, [r3, #7]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cadc:	88fb      	ldrh	r3, [r7, #6]
 800cade:	2b08      	cmp	r3, #8
 800cae0:	d939      	bls.n	800cb56 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	3308      	adds	r3, #8
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	b29a      	uxth	r2, r3
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	3309      	adds	r3, #9
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	021b      	lsls	r3, r3, #8
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	4313      	orrs	r3, r2
 800caf8:	b29a      	uxth	r2, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	330a      	adds	r3, #10
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	330b      	adds	r3, #11
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	021b      	lsls	r3, r3, #8
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4313      	orrs	r3, r2
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	330c      	adds	r3, #12
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	330d      	adds	r3, #13
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	021b      	lsls	r3, r3, #8
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	7b9a      	ldrb	r2, [r3, #14]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	7bda      	ldrb	r2, [r3, #15]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	7c1a      	ldrb	r2, [r3, #16]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	7c5a      	ldrb	r2, [r3, #17]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	745a      	strb	r2, [r3, #17]
  }
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b08a      	sub	sp, #40	; 0x28
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	785a      	ldrb	r2, [r3, #1]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3302      	adds	r3, #2
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3303      	adds	r3, #3
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	021b      	lsls	r3, r3, #8
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	791a      	ldrb	r2, [r3, #4]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	795a      	ldrb	r2, [r3, #5]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	799a      	ldrb	r2, [r3, #6]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	79da      	ldrb	r2, [r3, #7]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	7a1a      	ldrb	r2, [r3, #8]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	2b09      	cmp	r3, #9
 800cbdc:	d95f      	bls.n	800cc9e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cbde:	2309      	movs	r3, #9
 800cbe0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cbe6:	e051      	b.n	800cc8c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cbe8:	f107 0316 	add.w	r3, r7, #22
 800cbec:	4619      	mov	r1, r3
 800cbee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf0:	f000 f8e8 	bl	800cdc4 <USBH_GetNextDesc>
 800cbf4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf8:	785b      	ldrb	r3, [r3, #1]
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d146      	bne.n	800cc8c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800cbfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc02:	221a      	movs	r2, #26
 800cc04:	fb02 f303 	mul.w	r3, r2, r3
 800cc08:	3308      	adds	r3, #8
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	3302      	adds	r3, #2
 800cc10:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800cc12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc14:	69f8      	ldr	r0, [r7, #28]
 800cc16:	f000 f846 	bl	800cca6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc24:	e022      	b.n	800cc6c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cc26:	f107 0316 	add.w	r3, r7, #22
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc2e:	f000 f8c9 	bl	800cdc4 <USBH_GetNextDesc>
 800cc32:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	785b      	ldrb	r3, [r3, #1]
 800cc38:	2b05      	cmp	r3, #5
 800cc3a:	d117      	bne.n	800cc6c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cc3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc40:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc44:	3201      	adds	r2, #1
 800cc46:	00d2      	lsls	r2, r2, #3
 800cc48:	211a      	movs	r1, #26
 800cc4a:	fb01 f303 	mul.w	r3, r1, r3
 800cc4e:	4413      	add	r3, r2
 800cc50:	3308      	adds	r3, #8
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4413      	add	r3, r2
 800cc56:	3304      	adds	r3, #4
 800cc58:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800cc5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc5c:	69b8      	ldr	r0, [r7, #24]
 800cc5e:	f000 f851 	bl	800cd04 <USBH_ParseEPDesc>
            ep_ix++;
 800cc62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cc66:	3301      	adds	r3, #1
 800cc68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	791b      	ldrb	r3, [r3, #4]
 800cc70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d204      	bcs.n	800cc82 <USBH_ParseCfgDesc+0x120>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	885a      	ldrh	r2, [r3, #2]
 800cc7c:	8afb      	ldrh	r3, [r7, #22]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d8d1      	bhi.n	800cc26 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800cc82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc86:	3301      	adds	r3, #1
 800cc88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cc8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d804      	bhi.n	800cc9e <USBH_ParseCfgDesc+0x13c>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	885a      	ldrh	r2, [r3, #2]
 800cc98:	8afb      	ldrh	r3, [r7, #22]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d8a4      	bhi.n	800cbe8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cc9e:	bf00      	nop
 800cca0:	3728      	adds	r7, #40	; 0x28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b083      	sub	sp, #12
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781a      	ldrb	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	785a      	ldrb	r2, [r3, #1]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	789a      	ldrb	r2, [r3, #2]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	78da      	ldrb	r2, [r3, #3]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	791a      	ldrb	r2, [r3, #4]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	795a      	ldrb	r2, [r3, #5]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	799a      	ldrb	r2, [r3, #6]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	79da      	ldrb	r2, [r3, #7]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	7a1a      	ldrb	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	721a      	strb	r2, [r3, #8]
}
 800ccf8:	bf00      	nop
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	785a      	ldrb	r2, [r3, #1]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	789a      	ldrb	r2, [r3, #2]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	78da      	ldrb	r2, [r3, #3]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	3304      	adds	r3, #4
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	3305      	adds	r3, #5
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	021b      	lsls	r3, r3, #8
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	4313      	orrs	r3, r2
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	799a      	ldrb	r2, [r3, #6]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	719a      	strb	r2, [r3, #6]
}
 800cd52:	bf00      	nop
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b087      	sub	sp, #28
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	60f8      	str	r0, [r7, #12]
 800cd66:	60b9      	str	r1, [r7, #8]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d120      	bne.n	800cdb8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	1e9a      	subs	r2, r3, #2
 800cd7c:	88fb      	ldrh	r3, [r7, #6]
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	bf28      	it	cs
 800cd82:	4613      	movcs	r3, r2
 800cd84:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	3302      	adds	r3, #2
 800cd8a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	82fb      	strh	r3, [r7, #22]
 800cd90:	e00b      	b.n	800cdaa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cd92:	8afb      	ldrh	r3, [r7, #22]
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	4413      	add	r3, r2
 800cd98:	781a      	ldrb	r2, [r3, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	3301      	adds	r3, #1
 800cda2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cda4:	8afb      	ldrh	r3, [r7, #22]
 800cda6:	3302      	adds	r3, #2
 800cda8:	82fb      	strh	r3, [r7, #22]
 800cdaa:	8afa      	ldrh	r2, [r7, #22]
 800cdac:	8abb      	ldrh	r3, [r7, #20]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d3ef      	bcc.n	800cd92 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]
  }
}
 800cdb8:	bf00      	nop
 800cdba:	371c      	adds	r7, #28
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	881a      	ldrh	r2, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4413      	add	r3, r2
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4413      	add	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdec:	68fb      	ldr	r3, [r7, #12]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3714      	adds	r7, #20
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr

0800cdfa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cdfa:	b580      	push	{r7, lr}
 800cdfc:	b086      	sub	sp, #24
 800cdfe:	af00      	add	r7, sp, #0
 800ce00:	60f8      	str	r0, [r7, #12]
 800ce02:	60b9      	str	r1, [r7, #8]
 800ce04:	4613      	mov	r3, r2
 800ce06:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	789b      	ldrb	r3, [r3, #2]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d002      	beq.n	800ce1a <USBH_CtlReq+0x20>
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d00f      	beq.n	800ce38 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ce18:	e027      	b.n	800ce6a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	88fa      	ldrh	r2, [r7, #6]
 800ce24:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce32:	2301      	movs	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]
      break;
 800ce36:	e018      	b.n	800ce6a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 f81b 	bl	800ce74 <USBH_HandleControl>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce42:	7dfb      	ldrb	r3, [r7, #23]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <USBH_CtlReq+0x54>
 800ce48:	7dfb      	ldrb	r3, [r7, #23]
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d106      	bne.n	800ce5c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2201      	movs	r2, #1
 800ce52:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2200      	movs	r2, #0
 800ce58:	761a      	strb	r2, [r3, #24]
      break;
 800ce5a:	e005      	b.n	800ce68 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
 800ce5e:	2b02      	cmp	r3, #2
 800ce60:	d102      	bne.n	800ce68 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	709a      	strb	r2, [r3, #2]
      break;
 800ce68:	bf00      	nop
  }
  return status;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7e1b      	ldrb	r3, [r3, #24]
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	2b0a      	cmp	r3, #10
 800ce8c:	f200 8158 	bhi.w	800d140 <USBH_HandleControl+0x2cc>
 800ce90:	a201      	add	r2, pc, #4	; (adr r2, 800ce98 <USBH_HandleControl+0x24>)
 800ce92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce96:	bf00      	nop
 800ce98:	0800cec5 	.word	0x0800cec5
 800ce9c:	0800cedf 	.word	0x0800cedf
 800cea0:	0800cf49 	.word	0x0800cf49
 800cea4:	0800cf6f 	.word	0x0800cf6f
 800cea8:	0800cfa7 	.word	0x0800cfa7
 800ceac:	0800cfd3 	.word	0x0800cfd3
 800ceb0:	0800d025 	.word	0x0800d025
 800ceb4:	0800d047 	.word	0x0800d047
 800ceb8:	0800d083 	.word	0x0800d083
 800cebc:	0800d0ab 	.word	0x0800d0ab
 800cec0:	0800d0e9 	.word	0x0800d0e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f103 0110 	add.w	r1, r3, #16
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	795b      	ldrb	r3, [r3, #5]
 800cece:	461a      	mov	r2, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f945 	bl	800d160 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2202      	movs	r2, #2
 800ceda:	761a      	strb	r2, [r3, #24]
      break;
 800cedc:	e13b      	b.n	800d156 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	795b      	ldrb	r3, [r3, #5]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fcc9 	bl	800d87c <USBH_LL_GetURBState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d11e      	bne.n	800cf32 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7c1b      	ldrb	r3, [r3, #16]
 800cef8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cefc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	8adb      	ldrh	r3, [r3, #22]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00a      	beq.n	800cf1c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cf06:	7b7b      	ldrb	r3, [r7, #13]
 800cf08:	2b80      	cmp	r3, #128	; 0x80
 800cf0a:	d103      	bne.n	800cf14 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2203      	movs	r2, #3
 800cf10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf12:	e117      	b.n	800d144 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2205      	movs	r2, #5
 800cf18:	761a      	strb	r2, [r3, #24]
      break;
 800cf1a:	e113      	b.n	800d144 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800cf1c:	7b7b      	ldrb	r3, [r7, #13]
 800cf1e:	2b80      	cmp	r3, #128	; 0x80
 800cf20:	d103      	bne.n	800cf2a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2209      	movs	r2, #9
 800cf26:	761a      	strb	r2, [r3, #24]
      break;
 800cf28:	e10c      	b.n	800d144 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2207      	movs	r2, #7
 800cf2e:	761a      	strb	r2, [r3, #24]
      break;
 800cf30:	e108      	b.n	800d144 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	2b04      	cmp	r3, #4
 800cf36:	d003      	beq.n	800cf40 <USBH_HandleControl+0xcc>
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	f040 8102 	bne.w	800d144 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	220b      	movs	r2, #11
 800cf44:	761a      	strb	r2, [r3, #24]
      break;
 800cf46:	e0fd      	b.n	800d144 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6899      	ldr	r1, [r3, #8]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	899a      	ldrh	r2, [r3, #12]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	791b      	ldrb	r3, [r3, #4]
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 f93c 	bl	800d1de <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2204      	movs	r2, #4
 800cf6a:	761a      	strb	r2, [r3, #24]
      break;
 800cf6c:	e0f3      	b.n	800d156 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	791b      	ldrb	r3, [r3, #4]
 800cf72:	4619      	mov	r1, r3
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fc81 	bl	800d87c <USBH_LL_GetURBState>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d102      	bne.n	800cf8a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2209      	movs	r2, #9
 800cf88:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cf8a:	7bbb      	ldrb	r3, [r7, #14]
 800cf8c:	2b05      	cmp	r3, #5
 800cf8e:	d102      	bne.n	800cf96 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cf90:	2303      	movs	r3, #3
 800cf92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cf94:	e0d8      	b.n	800d148 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cf96:	7bbb      	ldrb	r3, [r7, #14]
 800cf98:	2b04      	cmp	r3, #4
 800cf9a:	f040 80d5 	bne.w	800d148 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	220b      	movs	r2, #11
 800cfa2:	761a      	strb	r2, [r3, #24]
      break;
 800cfa4:	e0d0      	b.n	800d148 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6899      	ldr	r1, [r3, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	899a      	ldrh	r2, [r3, #12]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7958      	ldrb	r0, [r3, #5]
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f000 f8eb 	bl	800d194 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2206      	movs	r2, #6
 800cfce:	761a      	strb	r2, [r3, #24]
      break;
 800cfd0:	e0c1      	b.n	800d156 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	795b      	ldrb	r3, [r3, #5]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fc4f 	bl	800d87c <USBH_LL_GetURBState>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d103      	bne.n	800cff0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2207      	movs	r2, #7
 800cfec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cfee:	e0ad      	b.n	800d14c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b05      	cmp	r3, #5
 800cff4:	d105      	bne.n	800d002 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	220c      	movs	r2, #12
 800cffa:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cffc:	2303      	movs	r3, #3
 800cffe:	73fb      	strb	r3, [r7, #15]
      break;
 800d000:	e0a4      	b.n	800d14c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	2b02      	cmp	r3, #2
 800d006:	d103      	bne.n	800d010 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2205      	movs	r2, #5
 800d00c:	761a      	strb	r2, [r3, #24]
      break;
 800d00e:	e09d      	b.n	800d14c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	2b04      	cmp	r3, #4
 800d014:	f040 809a 	bne.w	800d14c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	220b      	movs	r2, #11
 800d01c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d01e:	2302      	movs	r3, #2
 800d020:	73fb      	strb	r3, [r7, #15]
      break;
 800d022:	e093      	b.n	800d14c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	791b      	ldrb	r3, [r3, #4]
 800d028:	2200      	movs	r2, #0
 800d02a:	2100      	movs	r1, #0
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 f8d6 	bl	800d1de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d038:	b29a      	uxth	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2208      	movs	r2, #8
 800d042:	761a      	strb	r2, [r3, #24]

      break;
 800d044:	e087      	b.n	800d156 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	791b      	ldrb	r3, [r3, #4]
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fc15 	bl	800d87c <USBH_LL_GetURBState>
 800d052:	4603      	mov	r3, r0
 800d054:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d056:	7bbb      	ldrb	r3, [r7, #14]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d105      	bne.n	800d068 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	220d      	movs	r2, #13
 800d060:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d066:	e073      	b.n	800d150 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800d068:	7bbb      	ldrb	r3, [r7, #14]
 800d06a:	2b04      	cmp	r3, #4
 800d06c:	d103      	bne.n	800d076 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	220b      	movs	r2, #11
 800d072:	761a      	strb	r2, [r3, #24]
      break;
 800d074:	e06c      	b.n	800d150 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800d076:	7bbb      	ldrb	r3, [r7, #14]
 800d078:	2b05      	cmp	r3, #5
 800d07a:	d169      	bne.n	800d150 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800d07c:	2303      	movs	r3, #3
 800d07e:	73fb      	strb	r3, [r7, #15]
      break;
 800d080:	e066      	b.n	800d150 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	795a      	ldrb	r2, [r3, #5]
 800d086:	2301      	movs	r3, #1
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	4613      	mov	r3, r2
 800d08c:	2200      	movs	r2, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 f87f 	bl	800d194 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	220a      	movs	r2, #10
 800d0a6:	761a      	strb	r2, [r3, #24]
      break;
 800d0a8:	e055      	b.n	800d156 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	795b      	ldrb	r3, [r3, #5]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fbe3 	bl	800d87c <USBH_LL_GetURBState>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d105      	bne.n	800d0cc <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	220d      	movs	r2, #13
 800d0c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d0ca:	e043      	b.n	800d154 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d0cc:	7bbb      	ldrb	r3, [r7, #14]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d103      	bne.n	800d0da <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2209      	movs	r2, #9
 800d0d6:	761a      	strb	r2, [r3, #24]
      break;
 800d0d8:	e03c      	b.n	800d154 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d139      	bne.n	800d154 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	220b      	movs	r2, #11
 800d0e4:	761a      	strb	r2, [r3, #24]
      break;
 800d0e6:	e035      	b.n	800d154 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7e5b      	ldrb	r3, [r3, #25]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	765a      	strb	r2, [r3, #25]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7e5b      	ldrb	r3, [r3, #25]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d806      	bhi.n	800d10a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2201      	movs	r2, #1
 800d106:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d108:	e025      	b.n	800d156 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d110:	2106      	movs	r1, #6
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	795b      	ldrb	r3, [r3, #5]
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f90c 	bl	800d340 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	791b      	ldrb	r3, [r3, #4]
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f906 	bl	800d340 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d13a:	2302      	movs	r3, #2
 800d13c:	73fb      	strb	r3, [r7, #15]
      break;
 800d13e:	e00a      	b.n	800d156 <USBH_HandleControl+0x2e2>

    default:
      break;
 800d140:	bf00      	nop
 800d142:	e008      	b.n	800d156 <USBH_HandleControl+0x2e2>
      break;
 800d144:	bf00      	nop
 800d146:	e006      	b.n	800d156 <USBH_HandleControl+0x2e2>
      break;
 800d148:	bf00      	nop
 800d14a:	e004      	b.n	800d156 <USBH_HandleControl+0x2e2>
      break;
 800d14c:	bf00      	nop
 800d14e:	e002      	b.n	800d156 <USBH_HandleControl+0x2e2>
      break;
 800d150:	bf00      	nop
 800d152:	e000      	b.n	800d156 <USBH_HandleControl+0x2e2>
      break;
 800d154:	bf00      	nop
  }

  return status;
 800d156:	7bfb      	ldrb	r3, [r7, #15]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af04      	add	r7, sp, #16
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	4613      	mov	r3, r2
 800d16c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d16e:	79f9      	ldrb	r1, [r7, #7]
 800d170:	2300      	movs	r3, #0
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	2308      	movs	r3, #8
 800d176:	9302      	str	r3, [sp, #8]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	2300      	movs	r3, #0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	2300      	movs	r3, #0
 800d182:	2200      	movs	r2, #0
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 fb48 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af04      	add	r7, sp, #16
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	4611      	mov	r1, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	80fb      	strh	r3, [r7, #6]
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d001      	beq.n	800d1b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1b8:	7979      	ldrb	r1, [r7, #5]
 800d1ba:	7e3b      	ldrb	r3, [r7, #24]
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	88fb      	ldrh	r3, [r7, #6]
 800d1c0:	9302      	str	r3, [sp, #8]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	9301      	str	r3, [sp, #4]
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 fb23 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b088      	sub	sp, #32
 800d1e2:	af04      	add	r7, sp, #16
 800d1e4:	60f8      	str	r0, [r7, #12]
 800d1e6:	60b9      	str	r1, [r7, #8]
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	80fb      	strh	r3, [r7, #6]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d1f4:	7979      	ldrb	r1, [r7, #5]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9303      	str	r3, [sp, #12]
 800d1fa:	88fb      	ldrh	r3, [r7, #6]
 800d1fc:	9302      	str	r3, [sp, #8]
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	2301      	movs	r3, #1
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	2300      	movs	r3, #0
 800d208:	2201      	movs	r2, #1
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 fb05 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d210:	2300      	movs	r3, #0

}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b088      	sub	sp, #32
 800d21e:	af04      	add	r7, sp, #16
 800d220:	60f8      	str	r0, [r7, #12]
 800d222:	60b9      	str	r1, [r7, #8]
 800d224:	4611      	mov	r1, r2
 800d226:	461a      	mov	r2, r3
 800d228:	460b      	mov	r3, r1
 800d22a:	80fb      	strh	r3, [r7, #6]
 800d22c:	4613      	mov	r3, r2
 800d22e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d23e:	7979      	ldrb	r1, [r7, #5]
 800d240:	7e3b      	ldrb	r3, [r7, #24]
 800d242:	9303      	str	r3, [sp, #12]
 800d244:	88fb      	ldrh	r3, [r7, #6]
 800d246:	9302      	str	r3, [sp, #8]
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	9301      	str	r3, [sp, #4]
 800d24c:	2301      	movs	r3, #1
 800d24e:	9300      	str	r3, [sp, #0]
 800d250:	2302      	movs	r3, #2
 800d252:	2200      	movs	r2, #0
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f000 fae0 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3710      	adds	r7, #16
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af04      	add	r7, sp, #16
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4611      	mov	r1, r2
 800d270:	461a      	mov	r2, r3
 800d272:	460b      	mov	r3, r1
 800d274:	80fb      	strh	r3, [r7, #6]
 800d276:	4613      	mov	r3, r2
 800d278:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d27a:	7979      	ldrb	r1, [r7, #5]
 800d27c:	2300      	movs	r3, #0
 800d27e:	9303      	str	r3, [sp, #12]
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	9302      	str	r3, [sp, #8]
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	2301      	movs	r3, #1
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	2302      	movs	r3, #2
 800d28e:	2201      	movs	r2, #1
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 fac2 	bl	800d81a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af04      	add	r7, sp, #16
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	4608      	mov	r0, r1
 800d2aa:	4611      	mov	r1, r2
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	70fb      	strb	r3, [r7, #3]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	70bb      	strb	r3, [r7, #2]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d2ba:	7878      	ldrb	r0, [r7, #1]
 800d2bc:	78ba      	ldrb	r2, [r7, #2]
 800d2be:	78f9      	ldrb	r1, [r7, #3]
 800d2c0:	8b3b      	ldrh	r3, [r7, #24]
 800d2c2:	9302      	str	r3, [sp, #8]
 800d2c4:	7d3b      	ldrb	r3, [r7, #20]
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	7c3b      	ldrb	r3, [r7, #16]
 800d2ca:	9300      	str	r3, [sp, #0]
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fa55 	bl	800d77e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d2ea:	78fb      	ldrb	r3, [r7, #3]
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fa74 	bl	800d7dc <USBH_LL_ClosePipe>

  return USBH_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f836 	bl	800d37c <USBH_GetFreePipe>
 800d310:	4603      	mov	r3, r0
 800d312:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d314:	89fb      	ldrh	r3, [r7, #14]
 800d316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d00a      	beq.n	800d334 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	89fb      	ldrh	r3, [r7, #14]
 800d322:	f003 030f 	and.w	r3, r3, #15
 800d326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	33e0      	adds	r3, #224	; 0xe0
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	440b      	add	r3, r1
 800d332:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d334:	89fb      	ldrh	r3, [r7, #14]
 800d336:	b2db      	uxtb	r3, r3
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	2b0a      	cmp	r3, #10
 800d350:	d80d      	bhi.n	800d36e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d352:	78fb      	ldrb	r3, [r7, #3]
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	33e0      	adds	r3, #224	; 0xe0
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	4413      	add	r3, r2
 800d35c:	685a      	ldr	r2, [r3, #4]
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	33e0      	adds	r3, #224	; 0xe0
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	440b      	add	r3, r1
 800d36c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
 800d38c:	e00f      	b.n	800d3ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	33e0      	adds	r3, #224	; 0xe0
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d3a2:	7bfb      	ldrb	r3, [r7, #15]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	e007      	b.n	800d3b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d3a8:	7bfb      	ldrb	r3, [r7, #15]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	73fb      	strb	r3, [r7, #15]
 800d3ae:	7bfb      	ldrb	r3, [r7, #15]
 800d3b0:	2b0a      	cmp	r3, #10
 800d3b2:	d9ec      	bls.n	800d38e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d3b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	490e      	ldr	r1, [pc, #56]	; (800d404 <MX_USB_HOST_Init+0x40>)
 800d3cc:	480e      	ldr	r0, [pc, #56]	; (800d408 <MX_USB_HOST_Init+0x44>)
 800d3ce:	f7fe fc9f 	bl	800bd10 <USBH_Init>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d001      	beq.n	800d3dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d3d8:	f7f4 fa13 	bl	8001802 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d3dc:	490b      	ldr	r1, [pc, #44]	; (800d40c <MX_USB_HOST_Init+0x48>)
 800d3de:	480a      	ldr	r0, [pc, #40]	; (800d408 <MX_USB_HOST_Init+0x44>)
 800d3e0:	f7fe fd24 	bl	800be2c <USBH_RegisterClass>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d001      	beq.n	800d3ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3ea:	f7f4 fa0a 	bl	8001802 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3ee:	4806      	ldr	r0, [pc, #24]	; (800d408 <MX_USB_HOST_Init+0x44>)
 800d3f0:	f7fe fda8 	bl	800bf44 <USBH_Start>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d3fa:	f7f4 fa02 	bl	8001802 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d3fe:	bf00      	nop
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0800d425 	.word	0x0800d425
 800d408:	200028bc 	.word	0x200028bc
 800d40c:	20000014 	.word	0x20000014

0800d410 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d414:	4802      	ldr	r0, [pc, #8]	; (800d420 <MX_USB_HOST_Process+0x10>)
 800d416:	f7fe fda5 	bl	800bf64 <USBH_Process>
}
 800d41a:	bf00      	nop
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	200028bc 	.word	0x200028bc

0800d424 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	460b      	mov	r3, r1
 800d42e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d430:	78fb      	ldrb	r3, [r7, #3]
 800d432:	3b01      	subs	r3, #1
 800d434:	2b04      	cmp	r3, #4
 800d436:	d819      	bhi.n	800d46c <USBH_UserProcess+0x48>
 800d438:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USBH_UserProcess+0x1c>)
 800d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43e:	bf00      	nop
 800d440:	0800d46d 	.word	0x0800d46d
 800d444:	0800d45d 	.word	0x0800d45d
 800d448:	0800d46d 	.word	0x0800d46d
 800d44c:	0800d465 	.word	0x0800d465
 800d450:	0800d455 	.word	0x0800d455
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d454:	4b09      	ldr	r3, [pc, #36]	; (800d47c <USBH_UserProcess+0x58>)
 800d456:	2203      	movs	r2, #3
 800d458:	701a      	strb	r2, [r3, #0]
  break;
 800d45a:	e008      	b.n	800d46e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d45c:	4b07      	ldr	r3, [pc, #28]	; (800d47c <USBH_UserProcess+0x58>)
 800d45e:	2202      	movs	r2, #2
 800d460:	701a      	strb	r2, [r3, #0]
  break;
 800d462:	e004      	b.n	800d46e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d464:	4b05      	ldr	r3, [pc, #20]	; (800d47c <USBH_UserProcess+0x58>)
 800d466:	2201      	movs	r2, #1
 800d468:	701a      	strb	r2, [r3, #0]
  break;
 800d46a:	e000      	b.n	800d46e <USBH_UserProcess+0x4a>

  default:
  break;
 800d46c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d46e:	bf00      	nop
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	200004c8 	.word	0x200004c8

0800d480 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08a      	sub	sp, #40	; 0x28
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d488:	f107 0314 	add.w	r3, r7, #20
 800d48c:	2200      	movs	r2, #0
 800d48e:	601a      	str	r2, [r3, #0]
 800d490:	605a      	str	r2, [r3, #4]
 800d492:	609a      	str	r2, [r3, #8]
 800d494:	60da      	str	r2, [r3, #12]
 800d496:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d4a0:	d14e      	bne.n	800d540 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4a2:	4b29      	ldr	r3, [pc, #164]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4a6:	4a28      	ldr	r2, [pc, #160]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4a8:	f043 0301 	orr.w	r3, r3, #1
 800d4ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ae:	4b26      	ldr	r3, [pc, #152]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	613b      	str	r3, [r7, #16]
 800d4b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d4ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d4be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4c8:	2303      	movs	r3, #3
 800d4ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4cc:	230a      	movs	r3, #10
 800d4ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4d0:	f107 0314 	add.w	r3, r7, #20
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d4da:	f7f7 f969 	bl	80047b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4de:	4b1a      	ldr	r3, [pc, #104]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e2:	4a19      	ldr	r2, [pc, #100]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d4e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d4ea:	4b17      	ldr	r3, [pc, #92]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4f2:	60fb      	str	r3, [r7, #12]
 800d4f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d4f6:	4b14      	ldr	r3, [pc, #80]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d114      	bne.n	800d52c <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d502:	4b11      	ldr	r3, [pc, #68]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d506:	4a10      	ldr	r2, [pc, #64]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d50c:	6593      	str	r3, [r2, #88]	; 0x58
 800d50e:	4b0e      	ldr	r3, [pc, #56]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d516:	60bb      	str	r3, [r7, #8]
 800d518:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d51a:	f7f9 fadf 	bl	8006adc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d51e:	4b0a      	ldr	r3, [pc, #40]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d522:	4a09      	ldr	r2, [pc, #36]	; (800d548 <HAL_HCD_MspInit+0xc8>)
 800d524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d528:	6593      	str	r3, [r2, #88]	; 0x58
 800d52a:	e001      	b.n	800d530 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d52c:	f7f9 fad6 	bl	8006adc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d530:	2200      	movs	r2, #0
 800d532:	2100      	movs	r1, #0
 800d534:	2043      	movs	r0, #67	; 0x43
 800d536:	f7f7 f8c4 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d53a:	2043      	movs	r0, #67	; 0x43
 800d53c:	f7f7 f8dd 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d540:	bf00      	nop
 800d542:	3728      	adds	r7, #40	; 0x28
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	40021000 	.word	0x40021000

0800d54c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff f8d5 	bl	800c70a <USBH_LL_IncTimer>
}
 800d560:	bf00      	nop
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff f90d 	bl	800c796 <USBH_LL_Connect>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff f916 	bl	800c7c4 <USBH_LL_Disconnect>
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7ff f8c7 	bl	800c75e <USBH_LL_PortEnabled>
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff f8c7 	bl	800c77a <USBH_LL_PortDisabled>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d602:	2b01      	cmp	r3, #1
 800d604:	d12a      	bne.n	800d65c <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d606:	4a18      	ldr	r2, [pc, #96]	; (800d668 <USBH_LL_Init+0x74>)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a15      	ldr	r2, [pc, #84]	; (800d668 <USBH_LL_Init+0x74>)
 800d612:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <USBH_LL_Init+0x74>)
 800d618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d61c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <USBH_LL_Init+0x74>)
 800d620:	2208      	movs	r2, #8
 800d622:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d624:	4b10      	ldr	r3, [pc, #64]	; (800d668 <USBH_LL_Init+0x74>)
 800d626:	2201      	movs	r2, #1
 800d628:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d62a:	4b0f      	ldr	r3, [pc, #60]	; (800d668 <USBH_LL_Init+0x74>)
 800d62c:	2200      	movs	r2, #0
 800d62e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <USBH_LL_Init+0x74>)
 800d632:	2202      	movs	r2, #2
 800d634:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d636:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <USBH_LL_Init+0x74>)
 800d638:	2200      	movs	r2, #0
 800d63a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d63c:	480a      	ldr	r0, [pc, #40]	; (800d668 <USBH_LL_Init+0x74>)
 800d63e:	f7f7 faa9 	bl	8004b94 <HAL_HCD_Init>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d648:	f7f4 f8db 	bl	8001802 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d64c:	4806      	ldr	r0, [pc, #24]	; (800d668 <USBH_LL_Init+0x74>)
 800d64e:	f7f7 fea9 	bl	80053a4 <HAL_HCD_GetCurrentFrame>
 800d652:	4603      	mov	r3, r0
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff f848 	bl	800c6ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20002c94 	.word	0x20002c94

0800d66c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d682:	4618      	mov	r0, r3
 800d684:	f7f7 fe16 	bl	80052b4 <HAL_HCD_Start>
 800d688:	4603      	mov	r3, r0
 800d68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f95c 	bl	800d94c <USBH_Get_USB_Status>
 800d694:	4603      	mov	r3, r0
 800d696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d698:	7bbb      	ldrb	r3, [r7, #14]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b084      	sub	sp, #16
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f7 fe1e 	bl	80052fa <HAL_HCD_Stop>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f000 f941 	bl	800d94c <USBH_Get_USB_Status>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7f7 fe68 	bl	80053c0 <HAL_HCD_GetCurrentSpeed>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d007      	beq.n	800d706 <USBH_LL_GetSpeed+0x2e>
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d302      	bcc.n	800d700 <USBH_LL_GetSpeed+0x28>
 800d6fa:	2b02      	cmp	r3, #2
 800d6fc:	d006      	beq.n	800d70c <USBH_LL_GetSpeed+0x34>
 800d6fe:	e008      	b.n	800d712 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
    break;
 800d704:	e008      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d706:	2301      	movs	r3, #1
 800d708:	73fb      	strb	r3, [r7, #15]
    break;
 800d70a:	e005      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d70c:	2302      	movs	r3, #2
 800d70e:	73fb      	strb	r3, [r7, #15]
    break;
 800d710:	e002      	b.n	800d718 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d712:	2301      	movs	r3, #1
 800d714:	73fb      	strb	r3, [r7, #15]
    break;
 800d716:	bf00      	nop
  }
  return  speed;
 800d718:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f7 fdfb 	bl	8005334 <HAL_HCD_ResetPort>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f901 	bl	800d94c <USBH_Get_USB_Status>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7f7 fe03 	bl	800537a <HAL_HCD_HC_GetXferCount>
 800d774:	4603      	mov	r3, r0
}
 800d776:	4618      	mov	r0, r3
 800d778:	3708      	adds	r7, #8
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}

0800d77e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d77e:	b590      	push	{r4, r7, lr}
 800d780:	b089      	sub	sp, #36	; 0x24
 800d782:	af04      	add	r7, sp, #16
 800d784:	6078      	str	r0, [r7, #4]
 800d786:	4608      	mov	r0, r1
 800d788:	4611      	mov	r1, r2
 800d78a:	461a      	mov	r2, r3
 800d78c:	4603      	mov	r3, r0
 800d78e:	70fb      	strb	r3, [r7, #3]
 800d790:	460b      	mov	r3, r1
 800d792:	70bb      	strb	r3, [r7, #2]
 800d794:	4613      	mov	r3, r2
 800d796:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d7a6:	787c      	ldrb	r4, [r7, #1]
 800d7a8:	78ba      	ldrb	r2, [r7, #2]
 800d7aa:	78f9      	ldrb	r1, [r7, #3]
 800d7ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	4623      	mov	r3, r4
 800d7be:	f7f7 fa4b 	bl	8004c58 <HAL_HCD_HC_Init>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 f8bf 	bl	800d94c <USBH_Get_USB_Status>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd90      	pop	{r4, r7, pc}

0800d7dc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7f6:	78fa      	ldrb	r2, [r7, #3]
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f7 fac4 	bl	8004d88 <HAL_HCD_HC_Halt>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d804:	7bfb      	ldrb	r3, [r7, #15]
 800d806:	4618      	mov	r0, r3
 800d808:	f000 f8a0 	bl	800d94c <USBH_Get_USB_Status>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d810:	7bbb      	ldrb	r3, [r7, #14]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d81a:	b590      	push	{r4, r7, lr}
 800d81c:	b089      	sub	sp, #36	; 0x24
 800d81e:	af04      	add	r7, sp, #16
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	4608      	mov	r0, r1
 800d824:	4611      	mov	r1, r2
 800d826:	461a      	mov	r2, r3
 800d828:	4603      	mov	r3, r0
 800d82a:	70fb      	strb	r3, [r7, #3]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70bb      	strb	r3, [r7, #2]
 800d830:	4613      	mov	r3, r2
 800d832:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d842:	787c      	ldrb	r4, [r7, #1]
 800d844:	78ba      	ldrb	r2, [r7, #2]
 800d846:	78f9      	ldrb	r1, [r7, #3]
 800d848:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d84c:	9303      	str	r3, [sp, #12]
 800d84e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d850:	9302      	str	r3, [sp, #8]
 800d852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4623      	mov	r3, r4
 800d85e:	f7f7 fab7 	bl	8004dd0 <HAL_HCD_HC_SubmitRequest>
 800d862:	4603      	mov	r3, r0
 800d864:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d866:	7bfb      	ldrb	r3, [r7, #15]
 800d868:	4618      	mov	r0, r3
 800d86a:	f000 f86f 	bl	800d94c <USBH_Get_USB_Status>
 800d86e:	4603      	mov	r3, r0
 800d870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d872:	7bbb      	ldrb	r3, [r7, #14]
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd90      	pop	{r4, r7, pc}

0800d87c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d88e:	78fa      	ldrb	r2, [r7, #3]
 800d890:	4611      	mov	r1, r2
 800d892:	4618      	mov	r0, r3
 800d894:	f7f7 fd5c 	bl	8005350 <HAL_HCD_HC_GetURBState>
 800d898:	4603      	mov	r3, r0
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b082      	sub	sp, #8
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d103      	bne.n	800d8c0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f872 	bl	800d9a4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d8c0:	20c8      	movs	r0, #200	; 0xc8
 800d8c2:	f7f4 fdf5 	bl	80024b0 <HAL_Delay>
  return USBH_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70fb      	strb	r3, [r7, #3]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8e6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	68f9      	ldr	r1, [r7, #12]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4413      	add	r3, r2
 800d8f2:	00db      	lsls	r3, r3, #3
 800d8f4:	440b      	add	r3, r1
 800d8f6:	333b      	adds	r3, #59	; 0x3b
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00a      	beq.n	800d914 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d8fe:	78fa      	ldrb	r2, [r7, #3]
 800d900:	68f9      	ldr	r1, [r7, #12]
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	440b      	add	r3, r1
 800d90c:	3350      	adds	r3, #80	; 0x50
 800d90e:	78ba      	ldrb	r2, [r7, #2]
 800d910:	701a      	strb	r2, [r3, #0]
 800d912:	e009      	b.n	800d928 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	68f9      	ldr	r1, [r7, #12]
 800d918:	4613      	mov	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	440b      	add	r3, r1
 800d922:	3351      	adds	r3, #81	; 0x51
 800d924:	78ba      	ldrb	r2, [r7, #2]
 800d926:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3714      	adds	r7, #20
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7f4 fdb6 	bl	80024b0 <HAL_Delay>
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d95a:	79fb      	ldrb	r3, [r7, #7]
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d817      	bhi.n	800d990 <USBH_Get_USB_Status+0x44>
 800d960:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <USBH_Get_USB_Status+0x1c>)
 800d962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d966:	bf00      	nop
 800d968:	0800d979 	.word	0x0800d979
 800d96c:	0800d97f 	.word	0x0800d97f
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d98b 	.word	0x0800d98b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d978:	2300      	movs	r3, #0
 800d97a:	73fb      	strb	r3, [r7, #15]
    break;
 800d97c:	e00b      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d97e:	2302      	movs	r3, #2
 800d980:	73fb      	strb	r3, [r7, #15]
    break;
 800d982:	e008      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d984:	2301      	movs	r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
    break;
 800d988:	e005      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d98a:	2302      	movs	r3, #2
 800d98c:	73fb      	strb	r3, [r7, #15]
    break;
 800d98e:	e002      	b.n	800d996 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d990:	2302      	movs	r3, #2
 800d992:	73fb      	strb	r3, [r7, #15]
    break;
 800d994:	bf00      	nop
  }
  return usb_status;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3714      	adds	r7, #20
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b084      	sub	sp, #16
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d102      	bne.n	800d9be <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
 800d9bc:	e001      	b.n	800d9c2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d9ca:	4803      	ldr	r0, [pc, #12]	; (800d9d8 <MX_DriverVbusFS+0x34>)
 800d9cc:	f7f7 f898 	bl	8004b00 <HAL_GPIO_WritePin>
}
 800d9d0:	bf00      	nop
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	48000800 	.word	0x48000800

0800d9dc <__errno>:
 800d9dc:	4b01      	ldr	r3, [pc, #4]	; (800d9e4 <__errno+0x8>)
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	20000034 	.word	0x20000034

0800d9e8 <__libc_init_array>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	4e0d      	ldr	r6, [pc, #52]	; (800da20 <__libc_init_array+0x38>)
 800d9ec:	4c0d      	ldr	r4, [pc, #52]	; (800da24 <__libc_init_array+0x3c>)
 800d9ee:	1ba4      	subs	r4, r4, r6
 800d9f0:	10a4      	asrs	r4, r4, #2
 800d9f2:	2500      	movs	r5, #0
 800d9f4:	42a5      	cmp	r5, r4
 800d9f6:	d109      	bne.n	800da0c <__libc_init_array+0x24>
 800d9f8:	4e0b      	ldr	r6, [pc, #44]	; (800da28 <__libc_init_array+0x40>)
 800d9fa:	4c0c      	ldr	r4, [pc, #48]	; (800da2c <__libc_init_array+0x44>)
 800d9fc:	f000 ff14 	bl	800e828 <_init>
 800da00:	1ba4      	subs	r4, r4, r6
 800da02:	10a4      	asrs	r4, r4, #2
 800da04:	2500      	movs	r5, #0
 800da06:	42a5      	cmp	r5, r4
 800da08:	d105      	bne.n	800da16 <__libc_init_array+0x2e>
 800da0a:	bd70      	pop	{r4, r5, r6, pc}
 800da0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da10:	4798      	blx	r3
 800da12:	3501      	adds	r5, #1
 800da14:	e7ee      	b.n	800d9f4 <__libc_init_array+0xc>
 800da16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800da1a:	4798      	blx	r3
 800da1c:	3501      	adds	r5, #1
 800da1e:	e7f2      	b.n	800da06 <__libc_init_array+0x1e>
 800da20:	0800e93c 	.word	0x0800e93c
 800da24:	0800e93c 	.word	0x0800e93c
 800da28:	0800e93c 	.word	0x0800e93c
 800da2c:	0800e940 	.word	0x0800e940

0800da30 <malloc>:
 800da30:	4b02      	ldr	r3, [pc, #8]	; (800da3c <malloc+0xc>)
 800da32:	4601      	mov	r1, r0
 800da34:	6818      	ldr	r0, [r3, #0]
 800da36:	f000 b861 	b.w	800dafc <_malloc_r>
 800da3a:	bf00      	nop
 800da3c:	20000034 	.word	0x20000034

0800da40 <free>:
 800da40:	4b02      	ldr	r3, [pc, #8]	; (800da4c <free+0xc>)
 800da42:	4601      	mov	r1, r0
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	f000 b80b 	b.w	800da60 <_free_r>
 800da4a:	bf00      	nop
 800da4c:	20000034 	.word	0x20000034

0800da50 <memset>:
 800da50:	4402      	add	r2, r0
 800da52:	4603      	mov	r3, r0
 800da54:	4293      	cmp	r3, r2
 800da56:	d100      	bne.n	800da5a <memset+0xa>
 800da58:	4770      	bx	lr
 800da5a:	f803 1b01 	strb.w	r1, [r3], #1
 800da5e:	e7f9      	b.n	800da54 <memset+0x4>

0800da60 <_free_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4605      	mov	r5, r0
 800da64:	2900      	cmp	r1, #0
 800da66:	d045      	beq.n	800daf4 <_free_r+0x94>
 800da68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da6c:	1f0c      	subs	r4, r1, #4
 800da6e:	2b00      	cmp	r3, #0
 800da70:	bfb8      	it	lt
 800da72:	18e4      	addlt	r4, r4, r3
 800da74:	f000 fb62 	bl	800e13c <__malloc_lock>
 800da78:	4a1f      	ldr	r2, [pc, #124]	; (800daf8 <_free_r+0x98>)
 800da7a:	6813      	ldr	r3, [r2, #0]
 800da7c:	4610      	mov	r0, r2
 800da7e:	b933      	cbnz	r3, 800da8e <_free_r+0x2e>
 800da80:	6063      	str	r3, [r4, #4]
 800da82:	6014      	str	r4, [r2, #0]
 800da84:	4628      	mov	r0, r5
 800da86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da8a:	f000 bb58 	b.w	800e13e <__malloc_unlock>
 800da8e:	42a3      	cmp	r3, r4
 800da90:	d90c      	bls.n	800daac <_free_r+0x4c>
 800da92:	6821      	ldr	r1, [r4, #0]
 800da94:	1862      	adds	r2, r4, r1
 800da96:	4293      	cmp	r3, r2
 800da98:	bf04      	itt	eq
 800da9a:	681a      	ldreq	r2, [r3, #0]
 800da9c:	685b      	ldreq	r3, [r3, #4]
 800da9e:	6063      	str	r3, [r4, #4]
 800daa0:	bf04      	itt	eq
 800daa2:	1852      	addeq	r2, r2, r1
 800daa4:	6022      	streq	r2, [r4, #0]
 800daa6:	6004      	str	r4, [r0, #0]
 800daa8:	e7ec      	b.n	800da84 <_free_r+0x24>
 800daaa:	4613      	mov	r3, r2
 800daac:	685a      	ldr	r2, [r3, #4]
 800daae:	b10a      	cbz	r2, 800dab4 <_free_r+0x54>
 800dab0:	42a2      	cmp	r2, r4
 800dab2:	d9fa      	bls.n	800daaa <_free_r+0x4a>
 800dab4:	6819      	ldr	r1, [r3, #0]
 800dab6:	1858      	adds	r0, r3, r1
 800dab8:	42a0      	cmp	r0, r4
 800daba:	d10b      	bne.n	800dad4 <_free_r+0x74>
 800dabc:	6820      	ldr	r0, [r4, #0]
 800dabe:	4401      	add	r1, r0
 800dac0:	1858      	adds	r0, r3, r1
 800dac2:	4282      	cmp	r2, r0
 800dac4:	6019      	str	r1, [r3, #0]
 800dac6:	d1dd      	bne.n	800da84 <_free_r+0x24>
 800dac8:	6810      	ldr	r0, [r2, #0]
 800daca:	6852      	ldr	r2, [r2, #4]
 800dacc:	605a      	str	r2, [r3, #4]
 800dace:	4401      	add	r1, r0
 800dad0:	6019      	str	r1, [r3, #0]
 800dad2:	e7d7      	b.n	800da84 <_free_r+0x24>
 800dad4:	d902      	bls.n	800dadc <_free_r+0x7c>
 800dad6:	230c      	movs	r3, #12
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	e7d3      	b.n	800da84 <_free_r+0x24>
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	1821      	adds	r1, r4, r0
 800dae0:	428a      	cmp	r2, r1
 800dae2:	bf04      	itt	eq
 800dae4:	6811      	ldreq	r1, [r2, #0]
 800dae6:	6852      	ldreq	r2, [r2, #4]
 800dae8:	6062      	str	r2, [r4, #4]
 800daea:	bf04      	itt	eq
 800daec:	1809      	addeq	r1, r1, r0
 800daee:	6021      	streq	r1, [r4, #0]
 800daf0:	605c      	str	r4, [r3, #4]
 800daf2:	e7c7      	b.n	800da84 <_free_r+0x24>
 800daf4:	bd38      	pop	{r3, r4, r5, pc}
 800daf6:	bf00      	nop
 800daf8:	200004cc 	.word	0x200004cc

0800dafc <_malloc_r>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	1ccd      	adds	r5, r1, #3
 800db00:	f025 0503 	bic.w	r5, r5, #3
 800db04:	3508      	adds	r5, #8
 800db06:	2d0c      	cmp	r5, #12
 800db08:	bf38      	it	cc
 800db0a:	250c      	movcc	r5, #12
 800db0c:	2d00      	cmp	r5, #0
 800db0e:	4606      	mov	r6, r0
 800db10:	db01      	blt.n	800db16 <_malloc_r+0x1a>
 800db12:	42a9      	cmp	r1, r5
 800db14:	d903      	bls.n	800db1e <_malloc_r+0x22>
 800db16:	230c      	movs	r3, #12
 800db18:	6033      	str	r3, [r6, #0]
 800db1a:	2000      	movs	r0, #0
 800db1c:	bd70      	pop	{r4, r5, r6, pc}
 800db1e:	f000 fb0d 	bl	800e13c <__malloc_lock>
 800db22:	4a21      	ldr	r2, [pc, #132]	; (800dba8 <_malloc_r+0xac>)
 800db24:	6814      	ldr	r4, [r2, #0]
 800db26:	4621      	mov	r1, r4
 800db28:	b991      	cbnz	r1, 800db50 <_malloc_r+0x54>
 800db2a:	4c20      	ldr	r4, [pc, #128]	; (800dbac <_malloc_r+0xb0>)
 800db2c:	6823      	ldr	r3, [r4, #0]
 800db2e:	b91b      	cbnz	r3, 800db38 <_malloc_r+0x3c>
 800db30:	4630      	mov	r0, r6
 800db32:	f000 f855 	bl	800dbe0 <_sbrk_r>
 800db36:	6020      	str	r0, [r4, #0]
 800db38:	4629      	mov	r1, r5
 800db3a:	4630      	mov	r0, r6
 800db3c:	f000 f850 	bl	800dbe0 <_sbrk_r>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d124      	bne.n	800db8e <_malloc_r+0x92>
 800db44:	230c      	movs	r3, #12
 800db46:	6033      	str	r3, [r6, #0]
 800db48:	4630      	mov	r0, r6
 800db4a:	f000 faf8 	bl	800e13e <__malloc_unlock>
 800db4e:	e7e4      	b.n	800db1a <_malloc_r+0x1e>
 800db50:	680b      	ldr	r3, [r1, #0]
 800db52:	1b5b      	subs	r3, r3, r5
 800db54:	d418      	bmi.n	800db88 <_malloc_r+0x8c>
 800db56:	2b0b      	cmp	r3, #11
 800db58:	d90f      	bls.n	800db7a <_malloc_r+0x7e>
 800db5a:	600b      	str	r3, [r1, #0]
 800db5c:	50cd      	str	r5, [r1, r3]
 800db5e:	18cc      	adds	r4, r1, r3
 800db60:	4630      	mov	r0, r6
 800db62:	f000 faec 	bl	800e13e <__malloc_unlock>
 800db66:	f104 000b 	add.w	r0, r4, #11
 800db6a:	1d23      	adds	r3, r4, #4
 800db6c:	f020 0007 	bic.w	r0, r0, #7
 800db70:	1ac3      	subs	r3, r0, r3
 800db72:	d0d3      	beq.n	800db1c <_malloc_r+0x20>
 800db74:	425a      	negs	r2, r3
 800db76:	50e2      	str	r2, [r4, r3]
 800db78:	e7d0      	b.n	800db1c <_malloc_r+0x20>
 800db7a:	428c      	cmp	r4, r1
 800db7c:	684b      	ldr	r3, [r1, #4]
 800db7e:	bf16      	itet	ne
 800db80:	6063      	strne	r3, [r4, #4]
 800db82:	6013      	streq	r3, [r2, #0]
 800db84:	460c      	movne	r4, r1
 800db86:	e7eb      	b.n	800db60 <_malloc_r+0x64>
 800db88:	460c      	mov	r4, r1
 800db8a:	6849      	ldr	r1, [r1, #4]
 800db8c:	e7cc      	b.n	800db28 <_malloc_r+0x2c>
 800db8e:	1cc4      	adds	r4, r0, #3
 800db90:	f024 0403 	bic.w	r4, r4, #3
 800db94:	42a0      	cmp	r0, r4
 800db96:	d005      	beq.n	800dba4 <_malloc_r+0xa8>
 800db98:	1a21      	subs	r1, r4, r0
 800db9a:	4630      	mov	r0, r6
 800db9c:	f000 f820 	bl	800dbe0 <_sbrk_r>
 800dba0:	3001      	adds	r0, #1
 800dba2:	d0cf      	beq.n	800db44 <_malloc_r+0x48>
 800dba4:	6025      	str	r5, [r4, #0]
 800dba6:	e7db      	b.n	800db60 <_malloc_r+0x64>
 800dba8:	200004cc 	.word	0x200004cc
 800dbac:	200004d0 	.word	0x200004d0

0800dbb0 <iprintf>:
 800dbb0:	b40f      	push	{r0, r1, r2, r3}
 800dbb2:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <iprintf+0x2c>)
 800dbb4:	b513      	push	{r0, r1, r4, lr}
 800dbb6:	681c      	ldr	r4, [r3, #0]
 800dbb8:	b124      	cbz	r4, 800dbc4 <iprintf+0x14>
 800dbba:	69a3      	ldr	r3, [r4, #24]
 800dbbc:	b913      	cbnz	r3, 800dbc4 <iprintf+0x14>
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f000 f9ce 	bl	800df60 <__sinit>
 800dbc4:	ab05      	add	r3, sp, #20
 800dbc6:	9a04      	ldr	r2, [sp, #16]
 800dbc8:	68a1      	ldr	r1, [r4, #8]
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f000 fae1 	bl	800e194 <_vfiprintf_r>
 800dbd2:	b002      	add	sp, #8
 800dbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbd8:	b004      	add	sp, #16
 800dbda:	4770      	bx	lr
 800dbdc:	20000034 	.word	0x20000034

0800dbe0 <_sbrk_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4c06      	ldr	r4, [pc, #24]	; (800dbfc <_sbrk_r+0x1c>)
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	4608      	mov	r0, r1
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	f7f4 fa4a 	bl	8002084 <_sbrk>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_sbrk_r+0x1a>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_sbrk_r+0x1a>
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20002f58 	.word	0x20002f58

0800dc00 <__swbuf_r>:
 800dc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc02:	460e      	mov	r6, r1
 800dc04:	4614      	mov	r4, r2
 800dc06:	4605      	mov	r5, r0
 800dc08:	b118      	cbz	r0, 800dc12 <__swbuf_r+0x12>
 800dc0a:	6983      	ldr	r3, [r0, #24]
 800dc0c:	b90b      	cbnz	r3, 800dc12 <__swbuf_r+0x12>
 800dc0e:	f000 f9a7 	bl	800df60 <__sinit>
 800dc12:	4b21      	ldr	r3, [pc, #132]	; (800dc98 <__swbuf_r+0x98>)
 800dc14:	429c      	cmp	r4, r3
 800dc16:	d12a      	bne.n	800dc6e <__swbuf_r+0x6e>
 800dc18:	686c      	ldr	r4, [r5, #4]
 800dc1a:	69a3      	ldr	r3, [r4, #24]
 800dc1c:	60a3      	str	r3, [r4, #8]
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	071a      	lsls	r2, r3, #28
 800dc22:	d52e      	bpl.n	800dc82 <__swbuf_r+0x82>
 800dc24:	6923      	ldr	r3, [r4, #16]
 800dc26:	b363      	cbz	r3, 800dc82 <__swbuf_r+0x82>
 800dc28:	6923      	ldr	r3, [r4, #16]
 800dc2a:	6820      	ldr	r0, [r4, #0]
 800dc2c:	1ac0      	subs	r0, r0, r3
 800dc2e:	6963      	ldr	r3, [r4, #20]
 800dc30:	b2f6      	uxtb	r6, r6
 800dc32:	4283      	cmp	r3, r0
 800dc34:	4637      	mov	r7, r6
 800dc36:	dc04      	bgt.n	800dc42 <__swbuf_r+0x42>
 800dc38:	4621      	mov	r1, r4
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	f000 f926 	bl	800de8c <_fflush_r>
 800dc40:	bb28      	cbnz	r0, 800dc8e <__swbuf_r+0x8e>
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	60a3      	str	r3, [r4, #8]
 800dc48:	6823      	ldr	r3, [r4, #0]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	6022      	str	r2, [r4, #0]
 800dc4e:	701e      	strb	r6, [r3, #0]
 800dc50:	6963      	ldr	r3, [r4, #20]
 800dc52:	3001      	adds	r0, #1
 800dc54:	4283      	cmp	r3, r0
 800dc56:	d004      	beq.n	800dc62 <__swbuf_r+0x62>
 800dc58:	89a3      	ldrh	r3, [r4, #12]
 800dc5a:	07db      	lsls	r3, r3, #31
 800dc5c:	d519      	bpl.n	800dc92 <__swbuf_r+0x92>
 800dc5e:	2e0a      	cmp	r6, #10
 800dc60:	d117      	bne.n	800dc92 <__swbuf_r+0x92>
 800dc62:	4621      	mov	r1, r4
 800dc64:	4628      	mov	r0, r5
 800dc66:	f000 f911 	bl	800de8c <_fflush_r>
 800dc6a:	b190      	cbz	r0, 800dc92 <__swbuf_r+0x92>
 800dc6c:	e00f      	b.n	800dc8e <__swbuf_r+0x8e>
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <__swbuf_r+0x9c>)
 800dc70:	429c      	cmp	r4, r3
 800dc72:	d101      	bne.n	800dc78 <__swbuf_r+0x78>
 800dc74:	68ac      	ldr	r4, [r5, #8]
 800dc76:	e7d0      	b.n	800dc1a <__swbuf_r+0x1a>
 800dc78:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <__swbuf_r+0xa0>)
 800dc7a:	429c      	cmp	r4, r3
 800dc7c:	bf08      	it	eq
 800dc7e:	68ec      	ldreq	r4, [r5, #12]
 800dc80:	e7cb      	b.n	800dc1a <__swbuf_r+0x1a>
 800dc82:	4621      	mov	r1, r4
 800dc84:	4628      	mov	r0, r5
 800dc86:	f000 f80d 	bl	800dca4 <__swsetup_r>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d0cc      	beq.n	800dc28 <__swbuf_r+0x28>
 800dc8e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc92:	4638      	mov	r0, r7
 800dc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc96:	bf00      	nop
 800dc98:	0800e8c0 	.word	0x0800e8c0
 800dc9c:	0800e8e0 	.word	0x0800e8e0
 800dca0:	0800e8a0 	.word	0x0800e8a0

0800dca4 <__swsetup_r>:
 800dca4:	4b32      	ldr	r3, [pc, #200]	; (800dd70 <__swsetup_r+0xcc>)
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	681d      	ldr	r5, [r3, #0]
 800dcaa:	4606      	mov	r6, r0
 800dcac:	460c      	mov	r4, r1
 800dcae:	b125      	cbz	r5, 800dcba <__swsetup_r+0x16>
 800dcb0:	69ab      	ldr	r3, [r5, #24]
 800dcb2:	b913      	cbnz	r3, 800dcba <__swsetup_r+0x16>
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f000 f953 	bl	800df60 <__sinit>
 800dcba:	4b2e      	ldr	r3, [pc, #184]	; (800dd74 <__swsetup_r+0xd0>)
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	d10f      	bne.n	800dce0 <__swsetup_r+0x3c>
 800dcc0:	686c      	ldr	r4, [r5, #4]
 800dcc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	0715      	lsls	r5, r2, #28
 800dcca:	d42c      	bmi.n	800dd26 <__swsetup_r+0x82>
 800dccc:	06d0      	lsls	r0, r2, #27
 800dcce:	d411      	bmi.n	800dcf4 <__swsetup_r+0x50>
 800dcd0:	2209      	movs	r2, #9
 800dcd2:	6032      	str	r2, [r6, #0]
 800dcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	f04f 30ff 	mov.w	r0, #4294967295
 800dcde:	e03e      	b.n	800dd5e <__swsetup_r+0xba>
 800dce0:	4b25      	ldr	r3, [pc, #148]	; (800dd78 <__swsetup_r+0xd4>)
 800dce2:	429c      	cmp	r4, r3
 800dce4:	d101      	bne.n	800dcea <__swsetup_r+0x46>
 800dce6:	68ac      	ldr	r4, [r5, #8]
 800dce8:	e7eb      	b.n	800dcc2 <__swsetup_r+0x1e>
 800dcea:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <__swsetup_r+0xd8>)
 800dcec:	429c      	cmp	r4, r3
 800dcee:	bf08      	it	eq
 800dcf0:	68ec      	ldreq	r4, [r5, #12]
 800dcf2:	e7e6      	b.n	800dcc2 <__swsetup_r+0x1e>
 800dcf4:	0751      	lsls	r1, r2, #29
 800dcf6:	d512      	bpl.n	800dd1e <__swsetup_r+0x7a>
 800dcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcfa:	b141      	cbz	r1, 800dd0e <__swsetup_r+0x6a>
 800dcfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd00:	4299      	cmp	r1, r3
 800dd02:	d002      	beq.n	800dd0a <__swsetup_r+0x66>
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7ff feab 	bl	800da60 <_free_r>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800dd0e:	89a3      	ldrh	r3, [r4, #12]
 800dd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd14:	81a3      	strh	r3, [r4, #12]
 800dd16:	2300      	movs	r3, #0
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	6923      	ldr	r3, [r4, #16]
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	f043 0308 	orr.w	r3, r3, #8
 800dd24:	81a3      	strh	r3, [r4, #12]
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	b94b      	cbnz	r3, 800dd3e <__swsetup_r+0x9a>
 800dd2a:	89a3      	ldrh	r3, [r4, #12]
 800dd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd34:	d003      	beq.n	800dd3e <__swsetup_r+0x9a>
 800dd36:	4621      	mov	r1, r4
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f000 f9bf 	bl	800e0bc <__smakebuf_r>
 800dd3e:	89a2      	ldrh	r2, [r4, #12]
 800dd40:	f012 0301 	ands.w	r3, r2, #1
 800dd44:	d00c      	beq.n	800dd60 <__swsetup_r+0xbc>
 800dd46:	2300      	movs	r3, #0
 800dd48:	60a3      	str	r3, [r4, #8]
 800dd4a:	6963      	ldr	r3, [r4, #20]
 800dd4c:	425b      	negs	r3, r3
 800dd4e:	61a3      	str	r3, [r4, #24]
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	b953      	cbnz	r3, 800dd6a <__swsetup_r+0xc6>
 800dd54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd58:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dd5c:	d1ba      	bne.n	800dcd4 <__swsetup_r+0x30>
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	0792      	lsls	r2, r2, #30
 800dd62:	bf58      	it	pl
 800dd64:	6963      	ldrpl	r3, [r4, #20]
 800dd66:	60a3      	str	r3, [r4, #8]
 800dd68:	e7f2      	b.n	800dd50 <__swsetup_r+0xac>
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	e7f7      	b.n	800dd5e <__swsetup_r+0xba>
 800dd6e:	bf00      	nop
 800dd70:	20000034 	.word	0x20000034
 800dd74:	0800e8c0 	.word	0x0800e8c0
 800dd78:	0800e8e0 	.word	0x0800e8e0
 800dd7c:	0800e8a0 	.word	0x0800e8a0

0800dd80 <__sflush_r>:
 800dd80:	898a      	ldrh	r2, [r1, #12]
 800dd82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd86:	4605      	mov	r5, r0
 800dd88:	0710      	lsls	r0, r2, #28
 800dd8a:	460c      	mov	r4, r1
 800dd8c:	d458      	bmi.n	800de40 <__sflush_r+0xc0>
 800dd8e:	684b      	ldr	r3, [r1, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	dc05      	bgt.n	800dda0 <__sflush_r+0x20>
 800dd94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	dc02      	bgt.n	800dda0 <__sflush_r+0x20>
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dda2:	2e00      	cmp	r6, #0
 800dda4:	d0f9      	beq.n	800dd9a <__sflush_r+0x1a>
 800dda6:	2300      	movs	r3, #0
 800dda8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddac:	682f      	ldr	r7, [r5, #0]
 800ddae:	6a21      	ldr	r1, [r4, #32]
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	d032      	beq.n	800de1a <__sflush_r+0x9a>
 800ddb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	075a      	lsls	r2, r3, #29
 800ddba:	d505      	bpl.n	800ddc8 <__sflush_r+0x48>
 800ddbc:	6863      	ldr	r3, [r4, #4]
 800ddbe:	1ac0      	subs	r0, r0, r3
 800ddc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddc2:	b10b      	cbz	r3, 800ddc8 <__sflush_r+0x48>
 800ddc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddc6:	1ac0      	subs	r0, r0, r3
 800ddc8:	2300      	movs	r3, #0
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddce:	6a21      	ldr	r1, [r4, #32]
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	47b0      	blx	r6
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	d106      	bne.n	800dde8 <__sflush_r+0x68>
 800ddda:	6829      	ldr	r1, [r5, #0]
 800dddc:	291d      	cmp	r1, #29
 800ddde:	d848      	bhi.n	800de72 <__sflush_r+0xf2>
 800dde0:	4a29      	ldr	r2, [pc, #164]	; (800de88 <__sflush_r+0x108>)
 800dde2:	40ca      	lsrs	r2, r1
 800dde4:	07d6      	lsls	r6, r2, #31
 800dde6:	d544      	bpl.n	800de72 <__sflush_r+0xf2>
 800dde8:	2200      	movs	r2, #0
 800ddea:	6062      	str	r2, [r4, #4]
 800ddec:	04d9      	lsls	r1, r3, #19
 800ddee:	6922      	ldr	r2, [r4, #16]
 800ddf0:	6022      	str	r2, [r4, #0]
 800ddf2:	d504      	bpl.n	800ddfe <__sflush_r+0x7e>
 800ddf4:	1c42      	adds	r2, r0, #1
 800ddf6:	d101      	bne.n	800ddfc <__sflush_r+0x7c>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b903      	cbnz	r3, 800ddfe <__sflush_r+0x7e>
 800ddfc:	6560      	str	r0, [r4, #84]	; 0x54
 800ddfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de00:	602f      	str	r7, [r5, #0]
 800de02:	2900      	cmp	r1, #0
 800de04:	d0c9      	beq.n	800dd9a <__sflush_r+0x1a>
 800de06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de0a:	4299      	cmp	r1, r3
 800de0c:	d002      	beq.n	800de14 <__sflush_r+0x94>
 800de0e:	4628      	mov	r0, r5
 800de10:	f7ff fe26 	bl	800da60 <_free_r>
 800de14:	2000      	movs	r0, #0
 800de16:	6360      	str	r0, [r4, #52]	; 0x34
 800de18:	e7c0      	b.n	800dd9c <__sflush_r+0x1c>
 800de1a:	2301      	movs	r3, #1
 800de1c:	4628      	mov	r0, r5
 800de1e:	47b0      	blx	r6
 800de20:	1c41      	adds	r1, r0, #1
 800de22:	d1c8      	bne.n	800ddb6 <__sflush_r+0x36>
 800de24:	682b      	ldr	r3, [r5, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0c5      	beq.n	800ddb6 <__sflush_r+0x36>
 800de2a:	2b1d      	cmp	r3, #29
 800de2c:	d001      	beq.n	800de32 <__sflush_r+0xb2>
 800de2e:	2b16      	cmp	r3, #22
 800de30:	d101      	bne.n	800de36 <__sflush_r+0xb6>
 800de32:	602f      	str	r7, [r5, #0]
 800de34:	e7b1      	b.n	800dd9a <__sflush_r+0x1a>
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3c:	81a3      	strh	r3, [r4, #12]
 800de3e:	e7ad      	b.n	800dd9c <__sflush_r+0x1c>
 800de40:	690f      	ldr	r7, [r1, #16]
 800de42:	2f00      	cmp	r7, #0
 800de44:	d0a9      	beq.n	800dd9a <__sflush_r+0x1a>
 800de46:	0793      	lsls	r3, r2, #30
 800de48:	680e      	ldr	r6, [r1, #0]
 800de4a:	bf08      	it	eq
 800de4c:	694b      	ldreq	r3, [r1, #20]
 800de4e:	600f      	str	r7, [r1, #0]
 800de50:	bf18      	it	ne
 800de52:	2300      	movne	r3, #0
 800de54:	eba6 0807 	sub.w	r8, r6, r7
 800de58:	608b      	str	r3, [r1, #8]
 800de5a:	f1b8 0f00 	cmp.w	r8, #0
 800de5e:	dd9c      	ble.n	800dd9a <__sflush_r+0x1a>
 800de60:	4643      	mov	r3, r8
 800de62:	463a      	mov	r2, r7
 800de64:	6a21      	ldr	r1, [r4, #32]
 800de66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de68:	4628      	mov	r0, r5
 800de6a:	47b0      	blx	r6
 800de6c:	2800      	cmp	r0, #0
 800de6e:	dc06      	bgt.n	800de7e <__sflush_r+0xfe>
 800de70:	89a3      	ldrh	r3, [r4, #12]
 800de72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	f04f 30ff 	mov.w	r0, #4294967295
 800de7c:	e78e      	b.n	800dd9c <__sflush_r+0x1c>
 800de7e:	4407      	add	r7, r0
 800de80:	eba8 0800 	sub.w	r8, r8, r0
 800de84:	e7e9      	b.n	800de5a <__sflush_r+0xda>
 800de86:	bf00      	nop
 800de88:	20400001 	.word	0x20400001

0800de8c <_fflush_r>:
 800de8c:	b538      	push	{r3, r4, r5, lr}
 800de8e:	690b      	ldr	r3, [r1, #16]
 800de90:	4605      	mov	r5, r0
 800de92:	460c      	mov	r4, r1
 800de94:	b1db      	cbz	r3, 800dece <_fflush_r+0x42>
 800de96:	b118      	cbz	r0, 800dea0 <_fflush_r+0x14>
 800de98:	6983      	ldr	r3, [r0, #24]
 800de9a:	b90b      	cbnz	r3, 800dea0 <_fflush_r+0x14>
 800de9c:	f000 f860 	bl	800df60 <__sinit>
 800dea0:	4b0c      	ldr	r3, [pc, #48]	; (800ded4 <_fflush_r+0x48>)
 800dea2:	429c      	cmp	r4, r3
 800dea4:	d109      	bne.n	800deba <_fflush_r+0x2e>
 800dea6:	686c      	ldr	r4, [r5, #4]
 800dea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deac:	b17b      	cbz	r3, 800dece <_fflush_r+0x42>
 800deae:	4621      	mov	r1, r4
 800deb0:	4628      	mov	r0, r5
 800deb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deb6:	f7ff bf63 	b.w	800dd80 <__sflush_r>
 800deba:	4b07      	ldr	r3, [pc, #28]	; (800ded8 <_fflush_r+0x4c>)
 800debc:	429c      	cmp	r4, r3
 800debe:	d101      	bne.n	800dec4 <_fflush_r+0x38>
 800dec0:	68ac      	ldr	r4, [r5, #8]
 800dec2:	e7f1      	b.n	800dea8 <_fflush_r+0x1c>
 800dec4:	4b05      	ldr	r3, [pc, #20]	; (800dedc <_fflush_r+0x50>)
 800dec6:	429c      	cmp	r4, r3
 800dec8:	bf08      	it	eq
 800deca:	68ec      	ldreq	r4, [r5, #12]
 800decc:	e7ec      	b.n	800dea8 <_fflush_r+0x1c>
 800dece:	2000      	movs	r0, #0
 800ded0:	bd38      	pop	{r3, r4, r5, pc}
 800ded2:	bf00      	nop
 800ded4:	0800e8c0 	.word	0x0800e8c0
 800ded8:	0800e8e0 	.word	0x0800e8e0
 800dedc:	0800e8a0 	.word	0x0800e8a0

0800dee0 <std>:
 800dee0:	2300      	movs	r3, #0
 800dee2:	b510      	push	{r4, lr}
 800dee4:	4604      	mov	r4, r0
 800dee6:	e9c0 3300 	strd	r3, r3, [r0]
 800deea:	6083      	str	r3, [r0, #8]
 800deec:	8181      	strh	r1, [r0, #12]
 800deee:	6643      	str	r3, [r0, #100]	; 0x64
 800def0:	81c2      	strh	r2, [r0, #14]
 800def2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800def6:	6183      	str	r3, [r0, #24]
 800def8:	4619      	mov	r1, r3
 800defa:	2208      	movs	r2, #8
 800defc:	305c      	adds	r0, #92	; 0x5c
 800defe:	f7ff fda7 	bl	800da50 <memset>
 800df02:	4b05      	ldr	r3, [pc, #20]	; (800df18 <std+0x38>)
 800df04:	6263      	str	r3, [r4, #36]	; 0x24
 800df06:	4b05      	ldr	r3, [pc, #20]	; (800df1c <std+0x3c>)
 800df08:	62a3      	str	r3, [r4, #40]	; 0x28
 800df0a:	4b05      	ldr	r3, [pc, #20]	; (800df20 <std+0x40>)
 800df0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df0e:	4b05      	ldr	r3, [pc, #20]	; (800df24 <std+0x44>)
 800df10:	6224      	str	r4, [r4, #32]
 800df12:	6323      	str	r3, [r4, #48]	; 0x30
 800df14:	bd10      	pop	{r4, pc}
 800df16:	bf00      	nop
 800df18:	0800e6d1 	.word	0x0800e6d1
 800df1c:	0800e6f3 	.word	0x0800e6f3
 800df20:	0800e72b 	.word	0x0800e72b
 800df24:	0800e74f 	.word	0x0800e74f

0800df28 <_cleanup_r>:
 800df28:	4901      	ldr	r1, [pc, #4]	; (800df30 <_cleanup_r+0x8>)
 800df2a:	f000 b885 	b.w	800e038 <_fwalk_reent>
 800df2e:	bf00      	nop
 800df30:	0800de8d 	.word	0x0800de8d

0800df34 <__sfmoreglue>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	1e4a      	subs	r2, r1, #1
 800df38:	2568      	movs	r5, #104	; 0x68
 800df3a:	4355      	muls	r5, r2
 800df3c:	460e      	mov	r6, r1
 800df3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df42:	f7ff fddb 	bl	800dafc <_malloc_r>
 800df46:	4604      	mov	r4, r0
 800df48:	b140      	cbz	r0, 800df5c <__sfmoreglue+0x28>
 800df4a:	2100      	movs	r1, #0
 800df4c:	e9c0 1600 	strd	r1, r6, [r0]
 800df50:	300c      	adds	r0, #12
 800df52:	60a0      	str	r0, [r4, #8]
 800df54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df58:	f7ff fd7a 	bl	800da50 <memset>
 800df5c:	4620      	mov	r0, r4
 800df5e:	bd70      	pop	{r4, r5, r6, pc}

0800df60 <__sinit>:
 800df60:	6983      	ldr	r3, [r0, #24]
 800df62:	b510      	push	{r4, lr}
 800df64:	4604      	mov	r4, r0
 800df66:	bb33      	cbnz	r3, 800dfb6 <__sinit+0x56>
 800df68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800df6c:	6503      	str	r3, [r0, #80]	; 0x50
 800df6e:	4b12      	ldr	r3, [pc, #72]	; (800dfb8 <__sinit+0x58>)
 800df70:	4a12      	ldr	r2, [pc, #72]	; (800dfbc <__sinit+0x5c>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6282      	str	r2, [r0, #40]	; 0x28
 800df76:	4298      	cmp	r0, r3
 800df78:	bf04      	itt	eq
 800df7a:	2301      	moveq	r3, #1
 800df7c:	6183      	streq	r3, [r0, #24]
 800df7e:	f000 f81f 	bl	800dfc0 <__sfp>
 800df82:	6060      	str	r0, [r4, #4]
 800df84:	4620      	mov	r0, r4
 800df86:	f000 f81b 	bl	800dfc0 <__sfp>
 800df8a:	60a0      	str	r0, [r4, #8]
 800df8c:	4620      	mov	r0, r4
 800df8e:	f000 f817 	bl	800dfc0 <__sfp>
 800df92:	2200      	movs	r2, #0
 800df94:	60e0      	str	r0, [r4, #12]
 800df96:	2104      	movs	r1, #4
 800df98:	6860      	ldr	r0, [r4, #4]
 800df9a:	f7ff ffa1 	bl	800dee0 <std>
 800df9e:	2201      	movs	r2, #1
 800dfa0:	2109      	movs	r1, #9
 800dfa2:	68a0      	ldr	r0, [r4, #8]
 800dfa4:	f7ff ff9c 	bl	800dee0 <std>
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	2112      	movs	r1, #18
 800dfac:	68e0      	ldr	r0, [r4, #12]
 800dfae:	f7ff ff97 	bl	800dee0 <std>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	61a3      	str	r3, [r4, #24]
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	0800e89c 	.word	0x0800e89c
 800dfbc:	0800df29 	.word	0x0800df29

0800dfc0 <__sfp>:
 800dfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc2:	4b1b      	ldr	r3, [pc, #108]	; (800e030 <__sfp+0x70>)
 800dfc4:	681e      	ldr	r6, [r3, #0]
 800dfc6:	69b3      	ldr	r3, [r6, #24]
 800dfc8:	4607      	mov	r7, r0
 800dfca:	b913      	cbnz	r3, 800dfd2 <__sfp+0x12>
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f7ff ffc7 	bl	800df60 <__sinit>
 800dfd2:	3648      	adds	r6, #72	; 0x48
 800dfd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	d503      	bpl.n	800dfe4 <__sfp+0x24>
 800dfdc:	6833      	ldr	r3, [r6, #0]
 800dfde:	b133      	cbz	r3, 800dfee <__sfp+0x2e>
 800dfe0:	6836      	ldr	r6, [r6, #0]
 800dfe2:	e7f7      	b.n	800dfd4 <__sfp+0x14>
 800dfe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfe8:	b16d      	cbz	r5, 800e006 <__sfp+0x46>
 800dfea:	3468      	adds	r4, #104	; 0x68
 800dfec:	e7f4      	b.n	800dfd8 <__sfp+0x18>
 800dfee:	2104      	movs	r1, #4
 800dff0:	4638      	mov	r0, r7
 800dff2:	f7ff ff9f 	bl	800df34 <__sfmoreglue>
 800dff6:	6030      	str	r0, [r6, #0]
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d1f1      	bne.n	800dfe0 <__sfp+0x20>
 800dffc:	230c      	movs	r3, #12
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	4604      	mov	r4, r0
 800e002:	4620      	mov	r0, r4
 800e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <__sfp+0x74>)
 800e008:	6665      	str	r5, [r4, #100]	; 0x64
 800e00a:	e9c4 5500 	strd	r5, r5, [r4]
 800e00e:	60a5      	str	r5, [r4, #8]
 800e010:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e014:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e018:	2208      	movs	r2, #8
 800e01a:	4629      	mov	r1, r5
 800e01c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e020:	f7ff fd16 	bl	800da50 <memset>
 800e024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e02c:	e7e9      	b.n	800e002 <__sfp+0x42>
 800e02e:	bf00      	nop
 800e030:	0800e89c 	.word	0x0800e89c
 800e034:	ffff0001 	.word	0xffff0001

0800e038 <_fwalk_reent>:
 800e038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e03c:	4680      	mov	r8, r0
 800e03e:	4689      	mov	r9, r1
 800e040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e044:	2600      	movs	r6, #0
 800e046:	b914      	cbnz	r4, 800e04e <_fwalk_reent+0x16>
 800e048:	4630      	mov	r0, r6
 800e04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e04e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e052:	3f01      	subs	r7, #1
 800e054:	d501      	bpl.n	800e05a <_fwalk_reent+0x22>
 800e056:	6824      	ldr	r4, [r4, #0]
 800e058:	e7f5      	b.n	800e046 <_fwalk_reent+0xe>
 800e05a:	89ab      	ldrh	r3, [r5, #12]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d907      	bls.n	800e070 <_fwalk_reent+0x38>
 800e060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e064:	3301      	adds	r3, #1
 800e066:	d003      	beq.n	800e070 <_fwalk_reent+0x38>
 800e068:	4629      	mov	r1, r5
 800e06a:	4640      	mov	r0, r8
 800e06c:	47c8      	blx	r9
 800e06e:	4306      	orrs	r6, r0
 800e070:	3568      	adds	r5, #104	; 0x68
 800e072:	e7ee      	b.n	800e052 <_fwalk_reent+0x1a>

0800e074 <__swhatbuf_r>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	460e      	mov	r6, r1
 800e078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e07c:	2900      	cmp	r1, #0
 800e07e:	b096      	sub	sp, #88	; 0x58
 800e080:	4614      	mov	r4, r2
 800e082:	461d      	mov	r5, r3
 800e084:	da07      	bge.n	800e096 <__swhatbuf_r+0x22>
 800e086:	2300      	movs	r3, #0
 800e088:	602b      	str	r3, [r5, #0]
 800e08a:	89b3      	ldrh	r3, [r6, #12]
 800e08c:	061a      	lsls	r2, r3, #24
 800e08e:	d410      	bmi.n	800e0b2 <__swhatbuf_r+0x3e>
 800e090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e094:	e00e      	b.n	800e0b4 <__swhatbuf_r+0x40>
 800e096:	466a      	mov	r2, sp
 800e098:	f000 fb80 	bl	800e79c <_fstat_r>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	dbf2      	blt.n	800e086 <__swhatbuf_r+0x12>
 800e0a0:	9a01      	ldr	r2, [sp, #4]
 800e0a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0aa:	425a      	negs	r2, r3
 800e0ac:	415a      	adcs	r2, r3
 800e0ae:	602a      	str	r2, [r5, #0]
 800e0b0:	e7ee      	b.n	800e090 <__swhatbuf_r+0x1c>
 800e0b2:	2340      	movs	r3, #64	; 0x40
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	6023      	str	r3, [r4, #0]
 800e0b8:	b016      	add	sp, #88	; 0x58
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}

0800e0bc <__smakebuf_r>:
 800e0bc:	898b      	ldrh	r3, [r1, #12]
 800e0be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0c0:	079d      	lsls	r5, r3, #30
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	d507      	bpl.n	800e0d8 <__smakebuf_r+0x1c>
 800e0c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	6123      	str	r3, [r4, #16]
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	6163      	str	r3, [r4, #20]
 800e0d4:	b002      	add	sp, #8
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	ab01      	add	r3, sp, #4
 800e0da:	466a      	mov	r2, sp
 800e0dc:	f7ff ffca 	bl	800e074 <__swhatbuf_r>
 800e0e0:	9900      	ldr	r1, [sp, #0]
 800e0e2:	4605      	mov	r5, r0
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f7ff fd09 	bl	800dafc <_malloc_r>
 800e0ea:	b948      	cbnz	r0, 800e100 <__smakebuf_r+0x44>
 800e0ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f0:	059a      	lsls	r2, r3, #22
 800e0f2:	d4ef      	bmi.n	800e0d4 <__smakebuf_r+0x18>
 800e0f4:	f023 0303 	bic.w	r3, r3, #3
 800e0f8:	f043 0302 	orr.w	r3, r3, #2
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	e7e3      	b.n	800e0c8 <__smakebuf_r+0xc>
 800e100:	4b0d      	ldr	r3, [pc, #52]	; (800e138 <__smakebuf_r+0x7c>)
 800e102:	62b3      	str	r3, [r6, #40]	; 0x28
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	6020      	str	r0, [r4, #0]
 800e108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e10c:	81a3      	strh	r3, [r4, #12]
 800e10e:	9b00      	ldr	r3, [sp, #0]
 800e110:	6163      	str	r3, [r4, #20]
 800e112:	9b01      	ldr	r3, [sp, #4]
 800e114:	6120      	str	r0, [r4, #16]
 800e116:	b15b      	cbz	r3, 800e130 <__smakebuf_r+0x74>
 800e118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e11c:	4630      	mov	r0, r6
 800e11e:	f000 fb4f 	bl	800e7c0 <_isatty_r>
 800e122:	b128      	cbz	r0, 800e130 <__smakebuf_r+0x74>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	f023 0303 	bic.w	r3, r3, #3
 800e12a:	f043 0301 	orr.w	r3, r3, #1
 800e12e:	81a3      	strh	r3, [r4, #12]
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	431d      	orrs	r5, r3
 800e134:	81a5      	strh	r5, [r4, #12]
 800e136:	e7cd      	b.n	800e0d4 <__smakebuf_r+0x18>
 800e138:	0800df29 	.word	0x0800df29

0800e13c <__malloc_lock>:
 800e13c:	4770      	bx	lr

0800e13e <__malloc_unlock>:
 800e13e:	4770      	bx	lr

0800e140 <__sfputc_r>:
 800e140:	6893      	ldr	r3, [r2, #8]
 800e142:	3b01      	subs	r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	b410      	push	{r4}
 800e148:	6093      	str	r3, [r2, #8]
 800e14a:	da08      	bge.n	800e15e <__sfputc_r+0x1e>
 800e14c:	6994      	ldr	r4, [r2, #24]
 800e14e:	42a3      	cmp	r3, r4
 800e150:	db01      	blt.n	800e156 <__sfputc_r+0x16>
 800e152:	290a      	cmp	r1, #10
 800e154:	d103      	bne.n	800e15e <__sfputc_r+0x1e>
 800e156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e15a:	f7ff bd51 	b.w	800dc00 <__swbuf_r>
 800e15e:	6813      	ldr	r3, [r2, #0]
 800e160:	1c58      	adds	r0, r3, #1
 800e162:	6010      	str	r0, [r2, #0]
 800e164:	7019      	strb	r1, [r3, #0]
 800e166:	4608      	mov	r0, r1
 800e168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <__sfputs_r>:
 800e16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e170:	4606      	mov	r6, r0
 800e172:	460f      	mov	r7, r1
 800e174:	4614      	mov	r4, r2
 800e176:	18d5      	adds	r5, r2, r3
 800e178:	42ac      	cmp	r4, r5
 800e17a:	d101      	bne.n	800e180 <__sfputs_r+0x12>
 800e17c:	2000      	movs	r0, #0
 800e17e:	e007      	b.n	800e190 <__sfputs_r+0x22>
 800e180:	463a      	mov	r2, r7
 800e182:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e186:	4630      	mov	r0, r6
 800e188:	f7ff ffda 	bl	800e140 <__sfputc_r>
 800e18c:	1c43      	adds	r3, r0, #1
 800e18e:	d1f3      	bne.n	800e178 <__sfputs_r+0xa>
 800e190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e194 <_vfiprintf_r>:
 800e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	460c      	mov	r4, r1
 800e19a:	b09d      	sub	sp, #116	; 0x74
 800e19c:	4617      	mov	r7, r2
 800e19e:	461d      	mov	r5, r3
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	b118      	cbz	r0, 800e1ac <_vfiprintf_r+0x18>
 800e1a4:	6983      	ldr	r3, [r0, #24]
 800e1a6:	b90b      	cbnz	r3, 800e1ac <_vfiprintf_r+0x18>
 800e1a8:	f7ff feda 	bl	800df60 <__sinit>
 800e1ac:	4b7c      	ldr	r3, [pc, #496]	; (800e3a0 <_vfiprintf_r+0x20c>)
 800e1ae:	429c      	cmp	r4, r3
 800e1b0:	d158      	bne.n	800e264 <_vfiprintf_r+0xd0>
 800e1b2:	6874      	ldr	r4, [r6, #4]
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	0718      	lsls	r0, r3, #28
 800e1b8:	d55e      	bpl.n	800e278 <_vfiprintf_r+0xe4>
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d05b      	beq.n	800e278 <_vfiprintf_r+0xe4>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1c4:	2320      	movs	r3, #32
 800e1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1ca:	2330      	movs	r3, #48	; 0x30
 800e1cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1d0:	9503      	str	r5, [sp, #12]
 800e1d2:	f04f 0b01 	mov.w	fp, #1
 800e1d6:	46b8      	mov	r8, r7
 800e1d8:	4645      	mov	r5, r8
 800e1da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e1de:	b10b      	cbz	r3, 800e1e4 <_vfiprintf_r+0x50>
 800e1e0:	2b25      	cmp	r3, #37	; 0x25
 800e1e2:	d154      	bne.n	800e28e <_vfiprintf_r+0xfa>
 800e1e4:	ebb8 0a07 	subs.w	sl, r8, r7
 800e1e8:	d00b      	beq.n	800e202 <_vfiprintf_r+0x6e>
 800e1ea:	4653      	mov	r3, sl
 800e1ec:	463a      	mov	r2, r7
 800e1ee:	4621      	mov	r1, r4
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7ff ffbc 	bl	800e16e <__sfputs_r>
 800e1f6:	3001      	adds	r0, #1
 800e1f8:	f000 80c2 	beq.w	800e380 <_vfiprintf_r+0x1ec>
 800e1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1fe:	4453      	add	r3, sl
 800e200:	9309      	str	r3, [sp, #36]	; 0x24
 800e202:	f898 3000 	ldrb.w	r3, [r8]
 800e206:	2b00      	cmp	r3, #0
 800e208:	f000 80ba 	beq.w	800e380 <_vfiprintf_r+0x1ec>
 800e20c:	2300      	movs	r3, #0
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e216:	9304      	str	r3, [sp, #16]
 800e218:	9307      	str	r3, [sp, #28]
 800e21a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e21e:	931a      	str	r3, [sp, #104]	; 0x68
 800e220:	46a8      	mov	r8, r5
 800e222:	2205      	movs	r2, #5
 800e224:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e228:	485e      	ldr	r0, [pc, #376]	; (800e3a4 <_vfiprintf_r+0x210>)
 800e22a:	f7f1 ffd1 	bl	80001d0 <memchr>
 800e22e:	9b04      	ldr	r3, [sp, #16]
 800e230:	bb78      	cbnz	r0, 800e292 <_vfiprintf_r+0xfe>
 800e232:	06d9      	lsls	r1, r3, #27
 800e234:	bf44      	itt	mi
 800e236:	2220      	movmi	r2, #32
 800e238:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e23c:	071a      	lsls	r2, r3, #28
 800e23e:	bf44      	itt	mi
 800e240:	222b      	movmi	r2, #43	; 0x2b
 800e242:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e246:	782a      	ldrb	r2, [r5, #0]
 800e248:	2a2a      	cmp	r2, #42	; 0x2a
 800e24a:	d02a      	beq.n	800e2a2 <_vfiprintf_r+0x10e>
 800e24c:	9a07      	ldr	r2, [sp, #28]
 800e24e:	46a8      	mov	r8, r5
 800e250:	2000      	movs	r0, #0
 800e252:	250a      	movs	r5, #10
 800e254:	4641      	mov	r1, r8
 800e256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e25a:	3b30      	subs	r3, #48	; 0x30
 800e25c:	2b09      	cmp	r3, #9
 800e25e:	d969      	bls.n	800e334 <_vfiprintf_r+0x1a0>
 800e260:	b360      	cbz	r0, 800e2bc <_vfiprintf_r+0x128>
 800e262:	e024      	b.n	800e2ae <_vfiprintf_r+0x11a>
 800e264:	4b50      	ldr	r3, [pc, #320]	; (800e3a8 <_vfiprintf_r+0x214>)
 800e266:	429c      	cmp	r4, r3
 800e268:	d101      	bne.n	800e26e <_vfiprintf_r+0xda>
 800e26a:	68b4      	ldr	r4, [r6, #8]
 800e26c:	e7a2      	b.n	800e1b4 <_vfiprintf_r+0x20>
 800e26e:	4b4f      	ldr	r3, [pc, #316]	; (800e3ac <_vfiprintf_r+0x218>)
 800e270:	429c      	cmp	r4, r3
 800e272:	bf08      	it	eq
 800e274:	68f4      	ldreq	r4, [r6, #12]
 800e276:	e79d      	b.n	800e1b4 <_vfiprintf_r+0x20>
 800e278:	4621      	mov	r1, r4
 800e27a:	4630      	mov	r0, r6
 800e27c:	f7ff fd12 	bl	800dca4 <__swsetup_r>
 800e280:	2800      	cmp	r0, #0
 800e282:	d09d      	beq.n	800e1c0 <_vfiprintf_r+0x2c>
 800e284:	f04f 30ff 	mov.w	r0, #4294967295
 800e288:	b01d      	add	sp, #116	; 0x74
 800e28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28e:	46a8      	mov	r8, r5
 800e290:	e7a2      	b.n	800e1d8 <_vfiprintf_r+0x44>
 800e292:	4a44      	ldr	r2, [pc, #272]	; (800e3a4 <_vfiprintf_r+0x210>)
 800e294:	1a80      	subs	r0, r0, r2
 800e296:	fa0b f000 	lsl.w	r0, fp, r0
 800e29a:	4318      	orrs	r0, r3
 800e29c:	9004      	str	r0, [sp, #16]
 800e29e:	4645      	mov	r5, r8
 800e2a0:	e7be      	b.n	800e220 <_vfiprintf_r+0x8c>
 800e2a2:	9a03      	ldr	r2, [sp, #12]
 800e2a4:	1d11      	adds	r1, r2, #4
 800e2a6:	6812      	ldr	r2, [r2, #0]
 800e2a8:	9103      	str	r1, [sp, #12]
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	db01      	blt.n	800e2b2 <_vfiprintf_r+0x11e>
 800e2ae:	9207      	str	r2, [sp, #28]
 800e2b0:	e004      	b.n	800e2bc <_vfiprintf_r+0x128>
 800e2b2:	4252      	negs	r2, r2
 800e2b4:	f043 0302 	orr.w	r3, r3, #2
 800e2b8:	9207      	str	r2, [sp, #28]
 800e2ba:	9304      	str	r3, [sp, #16]
 800e2bc:	f898 3000 	ldrb.w	r3, [r8]
 800e2c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e2c2:	d10e      	bne.n	800e2e2 <_vfiprintf_r+0x14e>
 800e2c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e2c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ca:	d138      	bne.n	800e33e <_vfiprintf_r+0x1aa>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	1d1a      	adds	r2, r3, #4
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	9203      	str	r2, [sp, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	bfb8      	it	lt
 800e2d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2dc:	f108 0802 	add.w	r8, r8, #2
 800e2e0:	9305      	str	r3, [sp, #20]
 800e2e2:	4d33      	ldr	r5, [pc, #204]	; (800e3b0 <_vfiprintf_r+0x21c>)
 800e2e4:	f898 1000 	ldrb.w	r1, [r8]
 800e2e8:	2203      	movs	r2, #3
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	f7f1 ff70 	bl	80001d0 <memchr>
 800e2f0:	b140      	cbz	r0, 800e304 <_vfiprintf_r+0x170>
 800e2f2:	2340      	movs	r3, #64	; 0x40
 800e2f4:	1b40      	subs	r0, r0, r5
 800e2f6:	fa03 f000 	lsl.w	r0, r3, r0
 800e2fa:	9b04      	ldr	r3, [sp, #16]
 800e2fc:	4303      	orrs	r3, r0
 800e2fe:	f108 0801 	add.w	r8, r8, #1
 800e302:	9304      	str	r3, [sp, #16]
 800e304:	f898 1000 	ldrb.w	r1, [r8]
 800e308:	482a      	ldr	r0, [pc, #168]	; (800e3b4 <_vfiprintf_r+0x220>)
 800e30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e30e:	2206      	movs	r2, #6
 800e310:	f108 0701 	add.w	r7, r8, #1
 800e314:	f7f1 ff5c 	bl	80001d0 <memchr>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d037      	beq.n	800e38c <_vfiprintf_r+0x1f8>
 800e31c:	4b26      	ldr	r3, [pc, #152]	; (800e3b8 <_vfiprintf_r+0x224>)
 800e31e:	bb1b      	cbnz	r3, 800e368 <_vfiprintf_r+0x1d4>
 800e320:	9b03      	ldr	r3, [sp, #12]
 800e322:	3307      	adds	r3, #7
 800e324:	f023 0307 	bic.w	r3, r3, #7
 800e328:	3308      	adds	r3, #8
 800e32a:	9303      	str	r3, [sp, #12]
 800e32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32e:	444b      	add	r3, r9
 800e330:	9309      	str	r3, [sp, #36]	; 0x24
 800e332:	e750      	b.n	800e1d6 <_vfiprintf_r+0x42>
 800e334:	fb05 3202 	mla	r2, r5, r2, r3
 800e338:	2001      	movs	r0, #1
 800e33a:	4688      	mov	r8, r1
 800e33c:	e78a      	b.n	800e254 <_vfiprintf_r+0xc0>
 800e33e:	2300      	movs	r3, #0
 800e340:	f108 0801 	add.w	r8, r8, #1
 800e344:	9305      	str	r3, [sp, #20]
 800e346:	4619      	mov	r1, r3
 800e348:	250a      	movs	r5, #10
 800e34a:	4640      	mov	r0, r8
 800e34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e350:	3a30      	subs	r2, #48	; 0x30
 800e352:	2a09      	cmp	r2, #9
 800e354:	d903      	bls.n	800e35e <_vfiprintf_r+0x1ca>
 800e356:	2b00      	cmp	r3, #0
 800e358:	d0c3      	beq.n	800e2e2 <_vfiprintf_r+0x14e>
 800e35a:	9105      	str	r1, [sp, #20]
 800e35c:	e7c1      	b.n	800e2e2 <_vfiprintf_r+0x14e>
 800e35e:	fb05 2101 	mla	r1, r5, r1, r2
 800e362:	2301      	movs	r3, #1
 800e364:	4680      	mov	r8, r0
 800e366:	e7f0      	b.n	800e34a <_vfiprintf_r+0x1b6>
 800e368:	ab03      	add	r3, sp, #12
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	4622      	mov	r2, r4
 800e36e:	4b13      	ldr	r3, [pc, #76]	; (800e3bc <_vfiprintf_r+0x228>)
 800e370:	a904      	add	r1, sp, #16
 800e372:	4630      	mov	r0, r6
 800e374:	f3af 8000 	nop.w
 800e378:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e37c:	4681      	mov	r9, r0
 800e37e:	d1d5      	bne.n	800e32c <_vfiprintf_r+0x198>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	065b      	lsls	r3, r3, #25
 800e384:	f53f af7e 	bmi.w	800e284 <_vfiprintf_r+0xf0>
 800e388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e38a:	e77d      	b.n	800e288 <_vfiprintf_r+0xf4>
 800e38c:	ab03      	add	r3, sp, #12
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	4622      	mov	r2, r4
 800e392:	4b0a      	ldr	r3, [pc, #40]	; (800e3bc <_vfiprintf_r+0x228>)
 800e394:	a904      	add	r1, sp, #16
 800e396:	4630      	mov	r0, r6
 800e398:	f000 f888 	bl	800e4ac <_printf_i>
 800e39c:	e7ec      	b.n	800e378 <_vfiprintf_r+0x1e4>
 800e39e:	bf00      	nop
 800e3a0:	0800e8c0 	.word	0x0800e8c0
 800e3a4:	0800e900 	.word	0x0800e900
 800e3a8:	0800e8e0 	.word	0x0800e8e0
 800e3ac:	0800e8a0 	.word	0x0800e8a0
 800e3b0:	0800e906 	.word	0x0800e906
 800e3b4:	0800e90a 	.word	0x0800e90a
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	0800e16f 	.word	0x0800e16f

0800e3c0 <_printf_common>:
 800e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	4691      	mov	r9, r2
 800e3c6:	461f      	mov	r7, r3
 800e3c8:	688a      	ldr	r2, [r1, #8]
 800e3ca:	690b      	ldr	r3, [r1, #16]
 800e3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	bfb8      	it	lt
 800e3d4:	4613      	movlt	r3, r2
 800e3d6:	f8c9 3000 	str.w	r3, [r9]
 800e3da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	b112      	cbz	r2, 800e3ea <_printf_common+0x2a>
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f8c9 3000 	str.w	r3, [r9]
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	0699      	lsls	r1, r3, #26
 800e3ee:	bf42      	ittt	mi
 800e3f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e3f4:	3302      	addmi	r3, #2
 800e3f6:	f8c9 3000 	strmi.w	r3, [r9]
 800e3fa:	6825      	ldr	r5, [r4, #0]
 800e3fc:	f015 0506 	ands.w	r5, r5, #6
 800e400:	d107      	bne.n	800e412 <_printf_common+0x52>
 800e402:	f104 0a19 	add.w	sl, r4, #25
 800e406:	68e3      	ldr	r3, [r4, #12]
 800e408:	f8d9 2000 	ldr.w	r2, [r9]
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	42ab      	cmp	r3, r5
 800e410:	dc28      	bgt.n	800e464 <_printf_common+0xa4>
 800e412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e416:	6822      	ldr	r2, [r4, #0]
 800e418:	3300      	adds	r3, #0
 800e41a:	bf18      	it	ne
 800e41c:	2301      	movne	r3, #1
 800e41e:	0692      	lsls	r2, r2, #26
 800e420:	d42d      	bmi.n	800e47e <_printf_common+0xbe>
 800e422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e426:	4639      	mov	r1, r7
 800e428:	4630      	mov	r0, r6
 800e42a:	47c0      	blx	r8
 800e42c:	3001      	adds	r0, #1
 800e42e:	d020      	beq.n	800e472 <_printf_common+0xb2>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	68e5      	ldr	r5, [r4, #12]
 800e434:	f8d9 2000 	ldr.w	r2, [r9]
 800e438:	f003 0306 	and.w	r3, r3, #6
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	bf08      	it	eq
 800e440:	1aad      	subeq	r5, r5, r2
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	6922      	ldr	r2, [r4, #16]
 800e446:	bf0c      	ite	eq
 800e448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e44c:	2500      	movne	r5, #0
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfc4      	itt	gt
 800e452:	1a9b      	subgt	r3, r3, r2
 800e454:	18ed      	addgt	r5, r5, r3
 800e456:	f04f 0900 	mov.w	r9, #0
 800e45a:	341a      	adds	r4, #26
 800e45c:	454d      	cmp	r5, r9
 800e45e:	d11a      	bne.n	800e496 <_printf_common+0xd6>
 800e460:	2000      	movs	r0, #0
 800e462:	e008      	b.n	800e476 <_printf_common+0xb6>
 800e464:	2301      	movs	r3, #1
 800e466:	4652      	mov	r2, sl
 800e468:	4639      	mov	r1, r7
 800e46a:	4630      	mov	r0, r6
 800e46c:	47c0      	blx	r8
 800e46e:	3001      	adds	r0, #1
 800e470:	d103      	bne.n	800e47a <_printf_common+0xba>
 800e472:	f04f 30ff 	mov.w	r0, #4294967295
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	3501      	adds	r5, #1
 800e47c:	e7c3      	b.n	800e406 <_printf_common+0x46>
 800e47e:	18e1      	adds	r1, r4, r3
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	2030      	movs	r0, #48	; 0x30
 800e484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e488:	4422      	add	r2, r4
 800e48a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e48e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e492:	3302      	adds	r3, #2
 800e494:	e7c5      	b.n	800e422 <_printf_common+0x62>
 800e496:	2301      	movs	r3, #1
 800e498:	4622      	mov	r2, r4
 800e49a:	4639      	mov	r1, r7
 800e49c:	4630      	mov	r0, r6
 800e49e:	47c0      	blx	r8
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d0e6      	beq.n	800e472 <_printf_common+0xb2>
 800e4a4:	f109 0901 	add.w	r9, r9, #1
 800e4a8:	e7d8      	b.n	800e45c <_printf_common+0x9c>
	...

0800e4ac <_printf_i>:
 800e4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	7e09      	ldrb	r1, [r1, #24]
 800e4b8:	b085      	sub	sp, #20
 800e4ba:	296e      	cmp	r1, #110	; 0x6e
 800e4bc:	4617      	mov	r7, r2
 800e4be:	4606      	mov	r6, r0
 800e4c0:	4698      	mov	r8, r3
 800e4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4c4:	f000 80b3 	beq.w	800e62e <_printf_i+0x182>
 800e4c8:	d822      	bhi.n	800e510 <_printf_i+0x64>
 800e4ca:	2963      	cmp	r1, #99	; 0x63
 800e4cc:	d036      	beq.n	800e53c <_printf_i+0x90>
 800e4ce:	d80a      	bhi.n	800e4e6 <_printf_i+0x3a>
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	f000 80b9 	beq.w	800e648 <_printf_i+0x19c>
 800e4d6:	2958      	cmp	r1, #88	; 0x58
 800e4d8:	f000 8083 	beq.w	800e5e2 <_printf_i+0x136>
 800e4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e4e4:	e032      	b.n	800e54c <_printf_i+0xa0>
 800e4e6:	2964      	cmp	r1, #100	; 0x64
 800e4e8:	d001      	beq.n	800e4ee <_printf_i+0x42>
 800e4ea:	2969      	cmp	r1, #105	; 0x69
 800e4ec:	d1f6      	bne.n	800e4dc <_printf_i+0x30>
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	6813      	ldr	r3, [r2, #0]
 800e4f2:	0605      	lsls	r5, r0, #24
 800e4f4:	f103 0104 	add.w	r1, r3, #4
 800e4f8:	d52a      	bpl.n	800e550 <_printf_i+0xa4>
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	da03      	bge.n	800e50a <_printf_i+0x5e>
 800e502:	222d      	movs	r2, #45	; 0x2d
 800e504:	425b      	negs	r3, r3
 800e506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e50a:	486f      	ldr	r0, [pc, #444]	; (800e6c8 <_printf_i+0x21c>)
 800e50c:	220a      	movs	r2, #10
 800e50e:	e039      	b.n	800e584 <_printf_i+0xd8>
 800e510:	2973      	cmp	r1, #115	; 0x73
 800e512:	f000 809d 	beq.w	800e650 <_printf_i+0x1a4>
 800e516:	d808      	bhi.n	800e52a <_printf_i+0x7e>
 800e518:	296f      	cmp	r1, #111	; 0x6f
 800e51a:	d020      	beq.n	800e55e <_printf_i+0xb2>
 800e51c:	2970      	cmp	r1, #112	; 0x70
 800e51e:	d1dd      	bne.n	800e4dc <_printf_i+0x30>
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	f043 0320 	orr.w	r3, r3, #32
 800e526:	6023      	str	r3, [r4, #0]
 800e528:	e003      	b.n	800e532 <_printf_i+0x86>
 800e52a:	2975      	cmp	r1, #117	; 0x75
 800e52c:	d017      	beq.n	800e55e <_printf_i+0xb2>
 800e52e:	2978      	cmp	r1, #120	; 0x78
 800e530:	d1d4      	bne.n	800e4dc <_printf_i+0x30>
 800e532:	2378      	movs	r3, #120	; 0x78
 800e534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e538:	4864      	ldr	r0, [pc, #400]	; (800e6cc <_printf_i+0x220>)
 800e53a:	e055      	b.n	800e5e8 <_printf_i+0x13c>
 800e53c:	6813      	ldr	r3, [r2, #0]
 800e53e:	1d19      	adds	r1, r3, #4
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6011      	str	r1, [r2, #0]
 800e544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e54c:	2301      	movs	r3, #1
 800e54e:	e08c      	b.n	800e66a <_printf_i+0x1be>
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6011      	str	r1, [r2, #0]
 800e554:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e558:	bf18      	it	ne
 800e55a:	b21b      	sxthne	r3, r3
 800e55c:	e7cf      	b.n	800e4fe <_printf_i+0x52>
 800e55e:	6813      	ldr	r3, [r2, #0]
 800e560:	6825      	ldr	r5, [r4, #0]
 800e562:	1d18      	adds	r0, r3, #4
 800e564:	6010      	str	r0, [r2, #0]
 800e566:	0628      	lsls	r0, r5, #24
 800e568:	d501      	bpl.n	800e56e <_printf_i+0xc2>
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	e002      	b.n	800e574 <_printf_i+0xc8>
 800e56e:	0668      	lsls	r0, r5, #25
 800e570:	d5fb      	bpl.n	800e56a <_printf_i+0xbe>
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	4854      	ldr	r0, [pc, #336]	; (800e6c8 <_printf_i+0x21c>)
 800e576:	296f      	cmp	r1, #111	; 0x6f
 800e578:	bf14      	ite	ne
 800e57a:	220a      	movne	r2, #10
 800e57c:	2208      	moveq	r2, #8
 800e57e:	2100      	movs	r1, #0
 800e580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e584:	6865      	ldr	r5, [r4, #4]
 800e586:	60a5      	str	r5, [r4, #8]
 800e588:	2d00      	cmp	r5, #0
 800e58a:	f2c0 8095 	blt.w	800e6b8 <_printf_i+0x20c>
 800e58e:	6821      	ldr	r1, [r4, #0]
 800e590:	f021 0104 	bic.w	r1, r1, #4
 800e594:	6021      	str	r1, [r4, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d13d      	bne.n	800e616 <_printf_i+0x16a>
 800e59a:	2d00      	cmp	r5, #0
 800e59c:	f040 808e 	bne.w	800e6bc <_printf_i+0x210>
 800e5a0:	4665      	mov	r5, ip
 800e5a2:	2a08      	cmp	r2, #8
 800e5a4:	d10b      	bne.n	800e5be <_printf_i+0x112>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	07db      	lsls	r3, r3, #31
 800e5aa:	d508      	bpl.n	800e5be <_printf_i+0x112>
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	6862      	ldr	r2, [r4, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	bfde      	ittt	le
 800e5b4:	2330      	movle	r3, #48	; 0x30
 800e5b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5be:	ebac 0305 	sub.w	r3, ip, r5
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	f8cd 8000 	str.w	r8, [sp]
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	aa03      	add	r2, sp, #12
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f7ff fef6 	bl	800e3c0 <_printf_common>
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	d14d      	bne.n	800e674 <_printf_i+0x1c8>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5dc:	b005      	add	sp, #20
 800e5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e2:	4839      	ldr	r0, [pc, #228]	; (800e6c8 <_printf_i+0x21c>)
 800e5e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e5e8:	6813      	ldr	r3, [r2, #0]
 800e5ea:	6821      	ldr	r1, [r4, #0]
 800e5ec:	1d1d      	adds	r5, r3, #4
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6015      	str	r5, [r2, #0]
 800e5f2:	060a      	lsls	r2, r1, #24
 800e5f4:	d50b      	bpl.n	800e60e <_printf_i+0x162>
 800e5f6:	07ca      	lsls	r2, r1, #31
 800e5f8:	bf44      	itt	mi
 800e5fa:	f041 0120 	orrmi.w	r1, r1, #32
 800e5fe:	6021      	strmi	r1, [r4, #0]
 800e600:	b91b      	cbnz	r3, 800e60a <_printf_i+0x15e>
 800e602:	6822      	ldr	r2, [r4, #0]
 800e604:	f022 0220 	bic.w	r2, r2, #32
 800e608:	6022      	str	r2, [r4, #0]
 800e60a:	2210      	movs	r2, #16
 800e60c:	e7b7      	b.n	800e57e <_printf_i+0xd2>
 800e60e:	064d      	lsls	r5, r1, #25
 800e610:	bf48      	it	mi
 800e612:	b29b      	uxthmi	r3, r3
 800e614:	e7ef      	b.n	800e5f6 <_printf_i+0x14a>
 800e616:	4665      	mov	r5, ip
 800e618:	fbb3 f1f2 	udiv	r1, r3, r2
 800e61c:	fb02 3311 	mls	r3, r2, r1, r3
 800e620:	5cc3      	ldrb	r3, [r0, r3]
 800e622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e626:	460b      	mov	r3, r1
 800e628:	2900      	cmp	r1, #0
 800e62a:	d1f5      	bne.n	800e618 <_printf_i+0x16c>
 800e62c:	e7b9      	b.n	800e5a2 <_printf_i+0xf6>
 800e62e:	6813      	ldr	r3, [r2, #0]
 800e630:	6825      	ldr	r5, [r4, #0]
 800e632:	6961      	ldr	r1, [r4, #20]
 800e634:	1d18      	adds	r0, r3, #4
 800e636:	6010      	str	r0, [r2, #0]
 800e638:	0628      	lsls	r0, r5, #24
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	d501      	bpl.n	800e642 <_printf_i+0x196>
 800e63e:	6019      	str	r1, [r3, #0]
 800e640:	e002      	b.n	800e648 <_printf_i+0x19c>
 800e642:	066a      	lsls	r2, r5, #25
 800e644:	d5fb      	bpl.n	800e63e <_printf_i+0x192>
 800e646:	8019      	strh	r1, [r3, #0]
 800e648:	2300      	movs	r3, #0
 800e64a:	6123      	str	r3, [r4, #16]
 800e64c:	4665      	mov	r5, ip
 800e64e:	e7b9      	b.n	800e5c4 <_printf_i+0x118>
 800e650:	6813      	ldr	r3, [r2, #0]
 800e652:	1d19      	adds	r1, r3, #4
 800e654:	6011      	str	r1, [r2, #0]
 800e656:	681d      	ldr	r5, [r3, #0]
 800e658:	6862      	ldr	r2, [r4, #4]
 800e65a:	2100      	movs	r1, #0
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7f1 fdb7 	bl	80001d0 <memchr>
 800e662:	b108      	cbz	r0, 800e668 <_printf_i+0x1bc>
 800e664:	1b40      	subs	r0, r0, r5
 800e666:	6060      	str	r0, [r4, #4]
 800e668:	6863      	ldr	r3, [r4, #4]
 800e66a:	6123      	str	r3, [r4, #16]
 800e66c:	2300      	movs	r3, #0
 800e66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e672:	e7a7      	b.n	800e5c4 <_printf_i+0x118>
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	462a      	mov	r2, r5
 800e678:	4639      	mov	r1, r7
 800e67a:	4630      	mov	r0, r6
 800e67c:	47c0      	blx	r8
 800e67e:	3001      	adds	r0, #1
 800e680:	d0aa      	beq.n	800e5d8 <_printf_i+0x12c>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	079b      	lsls	r3, r3, #30
 800e686:	d413      	bmi.n	800e6b0 <_printf_i+0x204>
 800e688:	68e0      	ldr	r0, [r4, #12]
 800e68a:	9b03      	ldr	r3, [sp, #12]
 800e68c:	4298      	cmp	r0, r3
 800e68e:	bfb8      	it	lt
 800e690:	4618      	movlt	r0, r3
 800e692:	e7a3      	b.n	800e5dc <_printf_i+0x130>
 800e694:	2301      	movs	r3, #1
 800e696:	464a      	mov	r2, r9
 800e698:	4639      	mov	r1, r7
 800e69a:	4630      	mov	r0, r6
 800e69c:	47c0      	blx	r8
 800e69e:	3001      	adds	r0, #1
 800e6a0:	d09a      	beq.n	800e5d8 <_printf_i+0x12c>
 800e6a2:	3501      	adds	r5, #1
 800e6a4:	68e3      	ldr	r3, [r4, #12]
 800e6a6:	9a03      	ldr	r2, [sp, #12]
 800e6a8:	1a9b      	subs	r3, r3, r2
 800e6aa:	42ab      	cmp	r3, r5
 800e6ac:	dcf2      	bgt.n	800e694 <_printf_i+0x1e8>
 800e6ae:	e7eb      	b.n	800e688 <_printf_i+0x1dc>
 800e6b0:	2500      	movs	r5, #0
 800e6b2:	f104 0919 	add.w	r9, r4, #25
 800e6b6:	e7f5      	b.n	800e6a4 <_printf_i+0x1f8>
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1ac      	bne.n	800e616 <_printf_i+0x16a>
 800e6bc:	7803      	ldrb	r3, [r0, #0]
 800e6be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6c6:	e76c      	b.n	800e5a2 <_printf_i+0xf6>
 800e6c8:	0800e911 	.word	0x0800e911
 800e6cc:	0800e922 	.word	0x0800e922

0800e6d0 <__sread>:
 800e6d0:	b510      	push	{r4, lr}
 800e6d2:	460c      	mov	r4, r1
 800e6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d8:	f000 f894 	bl	800e804 <_read_r>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	bfab      	itete	ge
 800e6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e6e4:	181b      	addge	r3, r3, r0
 800e6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6ea:	bfac      	ite	ge
 800e6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6ee:	81a3      	strhlt	r3, [r4, #12]
 800e6f0:	bd10      	pop	{r4, pc}

0800e6f2 <__swrite>:
 800e6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f6:	461f      	mov	r7, r3
 800e6f8:	898b      	ldrh	r3, [r1, #12]
 800e6fa:	05db      	lsls	r3, r3, #23
 800e6fc:	4605      	mov	r5, r0
 800e6fe:	460c      	mov	r4, r1
 800e700:	4616      	mov	r6, r2
 800e702:	d505      	bpl.n	800e710 <__swrite+0x1e>
 800e704:	2302      	movs	r3, #2
 800e706:	2200      	movs	r2, #0
 800e708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e70c:	f000 f868 	bl	800e7e0 <_lseek_r>
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e71a:	81a3      	strh	r3, [r4, #12]
 800e71c:	4632      	mov	r2, r6
 800e71e:	463b      	mov	r3, r7
 800e720:	4628      	mov	r0, r5
 800e722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e726:	f000 b817 	b.w	800e758 <_write_r>

0800e72a <__sseek>:
 800e72a:	b510      	push	{r4, lr}
 800e72c:	460c      	mov	r4, r1
 800e72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e732:	f000 f855 	bl	800e7e0 <_lseek_r>
 800e736:	1c43      	adds	r3, r0, #1
 800e738:	89a3      	ldrh	r3, [r4, #12]
 800e73a:	bf15      	itete	ne
 800e73c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e73e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e742:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e746:	81a3      	strheq	r3, [r4, #12]
 800e748:	bf18      	it	ne
 800e74a:	81a3      	strhne	r3, [r4, #12]
 800e74c:	bd10      	pop	{r4, pc}

0800e74e <__sclose>:
 800e74e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e752:	f000 b813 	b.w	800e77c <_close_r>
	...

0800e758 <_write_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4c07      	ldr	r4, [pc, #28]	; (800e778 <_write_r+0x20>)
 800e75c:	4605      	mov	r5, r0
 800e75e:	4608      	mov	r0, r1
 800e760:	4611      	mov	r1, r2
 800e762:	2200      	movs	r2, #0
 800e764:	6022      	str	r2, [r4, #0]
 800e766:	461a      	mov	r2, r3
 800e768:	f7f3 fc3b 	bl	8001fe2 <_write>
 800e76c:	1c43      	adds	r3, r0, #1
 800e76e:	d102      	bne.n	800e776 <_write_r+0x1e>
 800e770:	6823      	ldr	r3, [r4, #0]
 800e772:	b103      	cbz	r3, 800e776 <_write_r+0x1e>
 800e774:	602b      	str	r3, [r5, #0]
 800e776:	bd38      	pop	{r3, r4, r5, pc}
 800e778:	20002f58 	.word	0x20002f58

0800e77c <_close_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4c06      	ldr	r4, [pc, #24]	; (800e798 <_close_r+0x1c>)
 800e780:	2300      	movs	r3, #0
 800e782:	4605      	mov	r5, r0
 800e784:	4608      	mov	r0, r1
 800e786:	6023      	str	r3, [r4, #0]
 800e788:	f7f3 fc47 	bl	800201a <_close>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	d102      	bne.n	800e796 <_close_r+0x1a>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	b103      	cbz	r3, 800e796 <_close_r+0x1a>
 800e794:	602b      	str	r3, [r5, #0]
 800e796:	bd38      	pop	{r3, r4, r5, pc}
 800e798:	20002f58 	.word	0x20002f58

0800e79c <_fstat_r>:
 800e79c:	b538      	push	{r3, r4, r5, lr}
 800e79e:	4c07      	ldr	r4, [pc, #28]	; (800e7bc <_fstat_r+0x20>)
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	4608      	mov	r0, r1
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	6023      	str	r3, [r4, #0]
 800e7aa:	f7f3 fc42 	bl	8002032 <_fstat>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	d102      	bne.n	800e7b8 <_fstat_r+0x1c>
 800e7b2:	6823      	ldr	r3, [r4, #0]
 800e7b4:	b103      	cbz	r3, 800e7b8 <_fstat_r+0x1c>
 800e7b6:	602b      	str	r3, [r5, #0]
 800e7b8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ba:	bf00      	nop
 800e7bc:	20002f58 	.word	0x20002f58

0800e7c0 <_isatty_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4c06      	ldr	r4, [pc, #24]	; (800e7dc <_isatty_r+0x1c>)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	6023      	str	r3, [r4, #0]
 800e7cc:	f7f3 fc41 	bl	8002052 <_isatty>
 800e7d0:	1c43      	adds	r3, r0, #1
 800e7d2:	d102      	bne.n	800e7da <_isatty_r+0x1a>
 800e7d4:	6823      	ldr	r3, [r4, #0]
 800e7d6:	b103      	cbz	r3, 800e7da <_isatty_r+0x1a>
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	bd38      	pop	{r3, r4, r5, pc}
 800e7dc:	20002f58 	.word	0x20002f58

0800e7e0 <_lseek_r>:
 800e7e0:	b538      	push	{r3, r4, r5, lr}
 800e7e2:	4c07      	ldr	r4, [pc, #28]	; (800e800 <_lseek_r+0x20>)
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	4608      	mov	r0, r1
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6022      	str	r2, [r4, #0]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f7f3 fc3a 	bl	8002068 <_lseek>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_lseek_r+0x1e>
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_lseek_r+0x1e>
 800e7fc:	602b      	str	r3, [r5, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	20002f58 	.word	0x20002f58

0800e804 <_read_r>:
 800e804:	b538      	push	{r3, r4, r5, lr}
 800e806:	4c07      	ldr	r4, [pc, #28]	; (800e824 <_read_r+0x20>)
 800e808:	4605      	mov	r5, r0
 800e80a:	4608      	mov	r0, r1
 800e80c:	4611      	mov	r1, r2
 800e80e:	2200      	movs	r2, #0
 800e810:	6022      	str	r2, [r4, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	f7f3 fbc8 	bl	8001fa8 <_read>
 800e818:	1c43      	adds	r3, r0, #1
 800e81a:	d102      	bne.n	800e822 <_read_r+0x1e>
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	b103      	cbz	r3, 800e822 <_read_r+0x1e>
 800e820:	602b      	str	r3, [r5, #0]
 800e822:	bd38      	pop	{r3, r4, r5, pc}
 800e824:	20002f58 	.word	0x20002f58

0800e828 <_init>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	bf00      	nop
 800e82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82e:	bc08      	pop	{r3}
 800e830:	469e      	mov	lr, r3
 800e832:	4770      	bx	lr

0800e834 <_fini>:
 800e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e836:	bf00      	nop
 800e838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e83a:	bc08      	pop	{r3}
 800e83c:	469e      	mov	lr, r3
 800e83e:	4770      	bx	lr
