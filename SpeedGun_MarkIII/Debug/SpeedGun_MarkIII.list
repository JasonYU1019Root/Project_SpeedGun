
SpeedGun_MarkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f59c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a0a0  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197cc  080197cc  0003009c  2**0
                  CONTENTS
  4 .ARM          00000008  080197cc  080197cc  000297cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197d4  080197d4  0003009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080197d4  080197d4  000297d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080197d8  080197d8  000297d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080197dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cb8  2000009c  08019878  0003009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005d54  08019878  00035d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d82b  00000000  00000000  000300cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006ec8  00000000  00000000  0006d8f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024f0  00000000  00000000  000747c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002270  00000000  00000000  00076cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032212  00000000  00000000  00078f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026750  00000000  00000000  000ab132  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011f774  00000000  00000000  000d1882  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  001f0ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2dc  00000000  00000000  001f10e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002baf  00000000  00000000  001fb3c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f714 	.word	0x0800f714

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	0800f714 	.word	0x0800f714

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e20:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <MX_ADC1_Init+0xe4>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e80:	f001 fe74 	bl	8002b6c <HAL_ADC_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e8a:	f000 fdb3 	bl	80019f4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	4810      	ldr	r0, [pc, #64]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000e9a:	f003 f99d 	bl	80041d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ea4:	f000 fda6 	bl	80019f4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_ADC1_Init+0xe8>)
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2306      	movs	r3, #6
 8000eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb4:	237f      	movs	r3, #127	; 0x7f
 8000eb6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_ADC1_Init+0xe0>)
 8000ec6:	f002 fb4d 	bl	8003564 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ed0:	f000 fd90 	bl	80019f4 <Error_Handler>
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200004d8 	.word	0x200004d8
 8000ee0:	50040000 	.word	0x50040000
 8000ee4:	1d500080 	.word	0x1d500080

08000ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a25      	ldr	r2, [pc, #148]	; (8000f9c <HAL_ADC_MspInit+0xb4>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d144      	bne.n	8000f94 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	f003 0304 	and.w	r3, r3, #4
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <HAL_ADC_MspInit+0xb8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f56:	230b      	movs	r3, #11
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_ADC_MspInit+0xbc>)
 8000f66:	f003 fb35 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f003 fb28 	bl	80045d4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	2012      	movs	r0, #18
 8000f8a:	f003 faac 	bl	80044e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f003 fac5 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000800 	.word	0x48000800

08000fa8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 8000fb0:	4825      	ldr	r0, [pc, #148]	; (8001048 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000fb2:	f002 f861 	bl	8003078 <HAL_ADC_Stop_IT>
	int AD_Value = HAL_ADC_GetValue(&hadc1);
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000fb8:	f002 f899 	bl	80030ee <HAL_ADC_GetValue>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]
	Value_1 = (int) (AD_Value * 3.3 * 1000 / 4096);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff faa7 	bl	8000514 <__aeabi_i2d>
 8000fc6:	a31e      	add	r3, pc, #120	; (adr r3, 8001040 <HAL_ADC_ConvCpltCallback+0x98>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fb0c 	bl	80005e8 <__aeabi_dmul>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_ADC_ConvCpltCallback+0xa4>)
 8000fde:	f7ff fb03 	bl	80005e8 <__aeabi_dmul>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460c      	mov	r4, r1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4621      	mov	r1, r4
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000ff0:	f7ff fc24 	bl	800083c <__aeabi_ddiv>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	f7ff fd06 	bl	8000a0c <__aeabi_d2iz>
 8001000:	4602      	mov	r2, r0
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_ADC_ConvCpltCallback+0xac>)
 8001004:	601a      	str	r2, [r3, #0]
	Value_2[counter_adc++] = Value_1;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	4912      	ldr	r1, [pc, #72]	; (8001058 <HAL_ADC_ConvCpltCallback+0xb0>)
 800100e:	600a      	str	r2, [r1, #0]
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_ADC_ConvCpltCallback+0xac>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4911      	ldr	r1, [pc, #68]	; (800105c <HAL_ADC_ConvCpltCallback+0xb4>)
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (counter_adc >= 4096) {
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_ADC_ConvCpltCallback+0xb0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001022:	db05      	blt.n	8001030 <HAL_ADC_ConvCpltCallback+0x88>
		counter_adc = 0;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
		flag_adc = 0;
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <HAL_ADC_ConvCpltCallback+0xb8>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001030:	2104      	movs	r1, #4
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001034:	f003 fc8e 	bl	8004954 <HAL_GPIO_TogglePin>
	return;
 8001038:	bf00      	nop
}
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	66666666 	.word	0x66666666
 8001044:	400a6666 	.word	0x400a6666
 8001048:	200004d8 	.word	0x200004d8
 800104c:	408f4000 	.word	0x408f4000
 8001050:	40b00000 	.word	0x40b00000
 8001054:	200053e4 	.word	0x200053e4
 8001058:	20000000 	.word	0x20000000
 800105c:	200005c4 	.word	0x200005c4
 8001060:	200000b8 	.word	0x200000b8
 8001064:	48000400 	.word	0x48000400

08001068 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001070:	1d39      	adds	r1, r7, #4
 8001072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001076:	2201      	movs	r2, #1
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <__io_putchar+0x20>)
 800107a:	f008 fc59 	bl	8009930 <HAL_UART_Transmit>
    return ch;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20005630 	.word	0x20005630

0800108c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB7   ------> COMP2_INM
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4bac      	ldr	r3, [pc, #688]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4aab      	ldr	r2, [pc, #684]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4ba9      	ldr	r3, [pc, #676]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4ba6      	ldr	r3, [pc, #664]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4aa5      	ldr	r2, [pc, #660]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4ba3      	ldr	r3, [pc, #652]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d2:	4ba0      	ldr	r3, [pc, #640]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a9f      	ldr	r2, [pc, #636]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b9d      	ldr	r3, [pc, #628]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b9a      	ldr	r3, [pc, #616]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a99      	ldr	r2, [pc, #612]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b97      	ldr	r3, [pc, #604]	; (8001354 <MX_GPIO_Init+0x2c8>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b94      	ldr	r3, [pc, #592]	; (8001354 <MX_GPIO_Init+0x2c8>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a93      	ldr	r2, [pc, #588]	; (8001354 <MX_GPIO_Init+0x2c8>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b91      	ldr	r3, [pc, #580]	; (8001354 <MX_GPIO_Init+0x2c8>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b8e      	ldr	r3, [pc, #568]	; (8001354 <MX_GPIO_Init+0x2c8>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a8d      	ldr	r2, [pc, #564]	; (8001354 <MX_GPIO_Init+0x2c8>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b8b      	ldr	r3, [pc, #556]	; (8001354 <MX_GPIO_Init+0x2c8>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f240 1109 	movw	r1, #265	; 0x109
 8001138:	4887      	ldr	r0, [pc, #540]	; (8001358 <MX_GPIO_Init+0x2cc>)
 800113a:	f003 fbf3 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	210c      	movs	r1, #12
 8001142:	4886      	ldr	r0, [pc, #536]	; (800135c <MX_GPIO_Init+0x2d0>)
 8001144:	f003 fbee 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4884      	ldr	r0, [pc, #528]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001150:	f003 fbe8 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800115a:	4881      	ldr	r0, [pc, #516]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800115c:	f003 fbe2 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2180      	movs	r1, #128	; 0x80
 8001164:	487f      	ldr	r0, [pc, #508]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001166:	f003 fbdd 	bl	8004924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 800116a:	2308      	movs	r3, #8
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4875      	ldr	r0, [pc, #468]	; (8001358 <MX_GPIO_Init+0x2cc>)
 8001182:	f003 fa27 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8001186:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800118c:	4b76      	ldr	r3, [pc, #472]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4871      	ldr	r0, [pc, #452]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800119c:	f003 fa1a 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_DRDY_Pin;
 80011a0:	2306      	movs	r3, #6
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	486b      	ldr	r0, [pc, #428]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80011b4:	f003 fa0e 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_CENTRE_Pin;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <MX_GPIO_Init+0x2e0>)
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTRE_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f003 fa01 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 80011d2:	232a      	movs	r3, #42	; 0x2a
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011da:	2302      	movs	r3, #2
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f003 f9f4 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80011ec:	2310      	movs	r3, #16
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f003 f9e7 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001206:	2304      	movs	r3, #4
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	484f      	ldr	r0, [pc, #316]	; (800135c <MX_GPIO_Init+0x2d0>)
 800121e:	f003 f9d9 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4847      	ldr	r0, [pc, #284]	; (8001358 <MX_GPIO_Init+0x2cc>)
 800123c:	f003 f9ca 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8001240:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4841      	ldr	r0, [pc, #260]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800125a:	f003 f9bb 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 800125e:	2304      	movs	r3, #4
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	483c      	ldr	r0, [pc, #240]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001272:	f003 f9af 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4835      	ldr	r0, [pc, #212]	; (8001364 <MX_GPIO_Init+0x2d8>)
 800128e:	f003 f9a1 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8001292:	2308      	movs	r3, #8
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	482c      	ldr	r0, [pc, #176]	; (800135c <MX_GPIO_Init+0x2d0>)
 80012aa:	f003 f993 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COMP_Pin;
 80012ae:	2340      	movs	r3, #64	; 0x40
 80012b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <MX_GPIO_Init+0x2e0>)
 80012b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COMP_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4826      	ldr	r0, [pc, #152]	; (800135c <MX_GPIO_Init+0x2d0>)
 80012c2:	f003 f987 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4820      	ldr	r0, [pc, #128]	; (800135c <MX_GPIO_Init+0x2d0>)
 80012da:	f003 f97b 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	481a      	ldr	r0, [pc, #104]	; (800135c <MX_GPIO_Init+0x2d0>)
 80012f4:	f003 f96e 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_GPIO_Init+0x2cc>)
 8001310:	f003 f960 	bl	80045d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0x2cc>)
 8001328:	f003 f954 	bl	80045d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2102      	movs	r1, #2
 8001330:	2006      	movs	r0, #6
 8001332:	f003 f8d8 	bl	80044e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001336:	2006      	movs	r0, #6
 8001338:	f003 f8f1 	bl	800451e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2101      	movs	r1, #1
 8001340:	2017      	movs	r0, #23
 8001342:	f003 f8d0 	bl	80044e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001346:	2017      	movs	r0, #23
 8001348:	f003 f8e9 	bl	800451e <HAL_NVIC_EnableIRQ>

}
 800134c:	bf00      	nop
 800134e:	3730      	adds	r7, #48	; 0x30
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	48001000 	.word	0x48001000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	10120000 	.word	0x10120000
 800136c:	10110000 	.word	0x10110000

08001370 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <MX_I2C2_Init+0x78>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_I2C2_Init+0x74>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <MX_I2C2_Init+0x7c>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013ac:	f004 ffad 	bl	800630a <HAL_I2C_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013b6:	f000 fb1d 	bl	80019f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013be:	f005 f833 	bl	8006428 <HAL_I2CEx_ConfigAnalogFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013c8:	f000 fb14 	bl	80019f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013d0:	f005 f875 	bl	80064be <HAL_I2CEx_ConfigDigitalFilter>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 fb0b 	bl	80019f4 <Error_Handler>
  }

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000053c 	.word	0x2000053c
 80013e8:	40005800 	.word	0x40005800
 80013ec:	10909cec 	.word	0x10909cec

080013f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a17      	ldr	r2, [pc, #92]	; (800146c <HAL_I2C_MspInit+0x7c>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d128      	bne.n	8001464 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b17      	ldr	r3, [pc, #92]	; (8001470 <HAL_I2C_MspInit+0x80>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <HAL_I2C_MspInit+0x80>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b14      	ldr	r3, [pc, #80]	; (8001470 <HAL_I2C_MspInit+0x80>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800142a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800143c:	2304      	movs	r3, #4
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_I2C_MspInit+0x84>)
 8001448:	f003 f8c4 	bl	80045d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <HAL_I2C_MspInit+0x80>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_I2C_MspInit+0x80>)
 8001452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001456:	6593      	str	r3, [r2, #88]	; 0x58
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_I2C_MspInit+0x80>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005800 	.word	0x40005800
 8001470:	40021000 	.word	0x40021000
 8001474:	48000400 	.word	0x48000400

08001478 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_LCD_Init+0x68>)
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <MX_LCD_Init+0x6c>)
 8001480:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_LCD_Init+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_LCD_Init+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_LCD_Init+0x68>)
 8001490:	220c      	movs	r2, #12
 8001492:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MX_LCD_Init+0x68>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_LCD_Init+0x68>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <MX_LCD_Init+0x68>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <MX_LCD_Init+0x68>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_LCD_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MX_LCD_Init+0x68>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <MX_LCD_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <MX_LCD_Init+0x68>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <MX_LCD_Init+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_LCD_Init+0x68>)
 80014cc:	f005 f844 	bl	8006558 <HAL_LCD_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_LCD_Init+0x62>
  {
    Error_Handler();
 80014d6:	f000 fa8d 	bl	80019f4 <Error_Handler>
  }

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000588 	.word	0x20000588
 80014e4:	40002400 	.word	0x40002400

080014e8 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a44      	ldr	r2, [pc, #272]	; (8001618 <HAL_LCD_MspInit+0x130>)
 8001506:	4293      	cmp	r3, r2
 8001508:	f040 8081 	bne.w	800160e <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_LCD_MspInit+0x134>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_LCD_MspInit+0x134>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a3c      	ldr	r2, [pc, #240]	; (800161c <HAL_LCD_MspInit+0x134>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b3a      	ldr	r3, [pc, #232]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <HAL_LCD_MspInit+0x134>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a36      	ldr	r2, [pc, #216]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <HAL_LCD_MspInit+0x134>)
 800154a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001558:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_LCD_MspInit+0x134>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b2b      	ldr	r3, [pc, #172]	; (800161c <HAL_LCD_MspInit+0x134>)
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	4a2a      	ldr	r2, [pc, #168]	; (800161c <HAL_LCD_MspInit+0x134>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_LCD_MspInit+0x134>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8001584:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001588:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001596:	230b      	movs	r3, #11
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	4619      	mov	r1, r3
 80015a0:	481f      	ldr	r0, [pc, #124]	; (8001620 <HAL_LCD_MspInit+0x138>)
 80015a2:	f003 f817 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 80015a6:	f248 73c0 	movw	r3, #34752	; 0x87c0
 80015aa:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015b8:	230b      	movs	r3, #11
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f003 f805 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 80015ca:	f24f 2333 	movw	r3, #62003	; 0xf233
 80015ce:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015dc:	230b      	movs	r3, #11
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	480f      	ldr	r0, [pc, #60]	; (8001624 <HAL_LCD_MspInit+0x13c>)
 80015e8:	f002 fff4 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 80015ec:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80015f0:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80015fe:	230b      	movs	r3, #11
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <HAL_LCD_MspInit+0x140>)
 800160a:	f002 ffe3 	bl	80045d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40002400 	.word	0x40002400
 800161c:	40021000 	.word	0x40021000
 8001620:	48000800 	.word	0x48000800
 8001624:	48000400 	.word	0x48000400
 8001628:	48000c00 	.word	0x48000c00

0800162c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001632:	f000 ffc0 	bl	80025b6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001636:	f000 f863 	bl	8001700 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800163a:	f7ff fd27 	bl	800108c <MX_GPIO_Init>
	MX_I2C2_Init();
 800163e:	f7ff fe97 	bl	8001370 <MX_I2C2_Init>
	MX_LCD_Init();
 8001642:	f7ff ff19 	bl	8001478 <MX_LCD_Init>
	MX_QUADSPI_Init();
 8001646:	f000 f9dd 	bl	8001a04 <MX_QUADSPI_Init>
	MX_SAI1_Init();
 800164a:	f000 fa45 	bl	8001ad8 <MX_SAI1_Init>
	MX_SPI2_Init();
 800164e:	f000 fb63 	bl	8001d18 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 8001652:	f000 ff03 	bl	800245c <MX_USART2_UART_Init>
	MX_USB_HOST_Init();
 8001656:	f00b fdc7 	bl	800d1e8 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 800165a:	f000 fe77 	bl	800234c <MX_TIM3_Init>
	MX_ADC1_Init();
 800165e:	f7ff fbcd 	bl	8000dfc <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //adc calibration
 8001662:	217f      	movs	r1, #127	; 0x7f
 8001664:	4820      	ldr	r0, [pc, #128]	; (80016e8 <main+0xbc>)
 8001666:	f002 fd24 	bl	80040b2 <HAL_ADCEx_Calibration_Start>
	BSP_LCD_GLASS_Init();
 800166a:	f000 fbd7 	bl	8001e1c <BSP_LCD_GLASS_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 800166e:	481f      	ldr	r0, [pc, #124]	; (80016ec <main+0xc0>)
 8001670:	f007 fcc6 	bl	8009000 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001674:	f00b fdde 	bl	800d234 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		if (!flag_adc) {
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <main+0xc4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f9      	bne.n	8001674 <main+0x48>
			int freq_fft=dfft();
 8001680:	f000 f8e6 	bl	8001850 <dfft>
 8001684:	6038      	str	r0, [r7, #0]
			for (int i = 0; i < 4096; i++)
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	e005      	b.n	8001698 <main+0x6c>
			{
				//printf("%d\n", Value_2[i]);

				//
				flag_adc = 1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <main+0xc4>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 4096; i++)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3301      	adds	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	dbf5      	blt.n	800168c <main+0x60>
			}printf("freq:%dHz speed:%dkmph\n", freq_fft*8014/8000, freq_fft*8014/8000 * 513 / 10000);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f641 724e 	movw	r2, #8014	; 0x1f4e
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <main+0xc8>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1252      	asrs	r2, r2, #9
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad1      	subs	r1, r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f641 724e 	movw	r2, #8014	; 0x1f4e
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <main+0xc8>)
 80016c2:	fb82 0203 	smull	r0, r2, r2, r3
 80016c6:	1252      	asrs	r2, r2, #9
 80016c8:	17db      	asrs	r3, r3, #31
 80016ca:	1ad2      	subs	r2, r2, r3
 80016cc:	4613      	mov	r3, r2
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4413      	add	r3, r2
 80016d2:	4a09      	ldr	r2, [pc, #36]	; (80016f8 <main+0xcc>)
 80016d4:	fb82 0203 	smull	r0, r2, r2, r3
 80016d8:	1312      	asrs	r2, r2, #12
 80016da:	17db      	asrs	r3, r3, #31
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <main+0xd0>)
 80016e2:	f00d f985 	bl	800e9f0 <iprintf>
		MX_USB_HOST_Process();
 80016e6:	e7c5      	b.n	8001674 <main+0x48>
 80016e8:	200004d8 	.word	0x200004d8
 80016ec:	200055e4 	.word	0x200055e4
 80016f0:	200000b8 	.word	0x200000b8
 80016f4:	10624dd3 	.word	0x10624dd3
 80016f8:	68db8bad 	.word	0x68db8bad
 80016fc:	0800f72c 	.word	0x0800f72c

08001700 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b0b8      	sub	sp, #224	; 0xe0
 8001704:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001706:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800170a:	2244      	movs	r2, #68	; 0x44
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00d f8be 	bl	800e890 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001714:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001724:	463b      	mov	r3, r7
 8001726:	2288      	movs	r2, #136	; 0x88
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f00d f8b0 	bl	800e890 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001730:	2318      	movs	r3, #24
 8001732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800173c:	2301      	movs	r3, #1
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001748:	2360      	movs	r3, #96	; 0x60
 800174a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001754:	2301      	movs	r3, #1
 8001756:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001760:	2328      	movs	r3, #40	; 0x28
 8001762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001766:	2307      	movs	r3, #7
 8001768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177c:	4618      	mov	r0, r3
 800177e:	f005 f98b 	bl	8006a98 <HAL_RCC_OscConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0x8c>
		Error_Handler();
 8001788:	f000 f934 	bl	80019f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800178c:	230f      	movs	r3, #15
 800178e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2303      	movs	r3, #3
 8001794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80017aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 fd57 	bl	8007264 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xc0>
		Error_Handler();
 80017bc:	f000 f91a 	bl	80019f4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <SystemClock_Config+0x12c>)
 80017c2:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_I2C2
			| RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017d4:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80017de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80017ec:	2318      	movs	r3, #24
 80017ee:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017f0:	2307      	movs	r3, #7
 80017f2:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017f4:	2302      	movs	r3, #2
 80017f6:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80017f8:	2308      	movs	r3, #8
 80017fa:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <SystemClock_Config+0x130>)
 80017fe:	61fb      	str	r3, [r7, #28]
			| RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001800:	463b      	mov	r3, r7
 8001802:	4618      	mov	r0, r3
 8001804:	f005 ff32 	bl	800766c <HAL_RCCEx_PeriphCLKConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0x112>
		Error_Handler();
 800180e:	f000 f8f1 	bl	80019f4 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001812:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001816:	f005 f81d 	bl	8006854 <HAL_PWREx_ControlVoltageScaling>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0x124>
			!= HAL_OK) {
		Error_Handler();
 8001820:	f000 f8e8 	bl	80019f4 <Error_Handler>
	}
}
 8001824:	bf00      	nop
 8001826:	37e0      	adds	r7, #224	; 0xe0
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	00026882 	.word	0x00026882
 8001830:	01110000 	.word	0x01110000

08001834 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
//			counter_comp = 0;
//			counter_timer = 0;
//		}
//	}
//	return;
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	0000      	movs	r0, r0
 800184c:	0000      	movs	r0, r0
	...

08001850 <dfft>:
//fft
int dfft() {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	466b      	mov	r3, sp
 8001858:	461d      	mov	r5, r3
	int fft_dot = 4096;
 800185a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185e:	623b      	str	r3, [r7, #32]
	float32_t complex[fft_dot * 2];
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	0058      	lsls	r0, r3, #1
 8001864:	1e43      	subs	r3, r0, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	4603      	mov	r3, r0
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f04f 0400 	mov.w	r4, #0
 8001878:	0154      	lsls	r4, r2, #5
 800187a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800187e:	014b      	lsls	r3, r1, #5
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	0154      	lsls	r4, r2, #5
 8001892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001896:	014b      	lsls	r3, r1, #5
 8001898:	4603      	mov	r3, r0
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3303      	adds	r3, #3
 800189e:	3307      	adds	r3, #7
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	ebad 0d03 	sub.w	sp, sp, r3
 80018a8:	466b      	mov	r3, sp
 80018aa:	3303      	adds	r3, #3
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
	float32_t output[fft_dot];
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	1e43      	subs	r3, r0, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	4603      	mov	r3, r0
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	0154      	lsls	r4, r2, #5
 80018ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ce:	014b      	lsls	r3, r1, #5
 80018d0:	4603      	mov	r3, r0
 80018d2:	4619      	mov	r1, r3
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	0154      	lsls	r4, r2, #5
 80018e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	4603      	mov	r3, r0
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3303      	adds	r3, #3
 80018ee:	3307      	adds	r3, #7
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	ebad 0d03 	sub.w	sp, sp, r3
 80018f8:	466b      	mov	r3, sp
 80018fa:	3303      	adds	r3, #3
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	613b      	str	r3, [r7, #16]
	float32_t maxvalue = 0.0f;
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
	uint32_t maxindex = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]

	for (uint16_t i = 0; i < (fft_dot * 2); i += 2) {
 800190c:	2300      	movs	r3, #0
 800190e:	83fb      	strh	r3, [r7, #30]
 8001910:	e01b      	b.n	800194a <dfft+0xfa>
		complex[i] = (float32_t) Value_2[i / 2];
 8001912:	8bfb      	ldrh	r3, [r7, #30]
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <dfft+0x198>)
 800191c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001920:	8bfb      	ldrh	r3, [r7, #30]
 8001922:	ee07 2a90 	vmov	s15, r2
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	edc3 7a00 	vstr	s15, [r3]
		complex[i + 1] = 0.0f;
 8001934:	8bfb      	ldrh	r3, [r7, #30]
 8001936:	3301      	adds	r3, #1
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < (fft_dot * 2); i += 2) {
 8001944:	8bfb      	ldrh	r3, [r7, #30]
 8001946:	3302      	adds	r3, #2
 8001948:	83fb      	strh	r3, [r7, #30]
 800194a:	8bfa      	ldrh	r2, [r7, #30]
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	429a      	cmp	r2, r3
 8001952:	dbde      	blt.n	8001912 <dfft+0xc2>
	}

	arm_cfft_f32(&arm_cfft_sR_f32_len4096, complex, 0, 1); // 1024 4096-------
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	2301      	movs	r3, #1
 8001958:	2200      	movs	r2, #0
 800195a:	4824      	ldr	r0, [pc, #144]	; (80019ec <dfft+0x19c>)
 800195c:	f00c fae2 	bl	800df24 <arm_cfft_f32>
	arm_cmplx_mag_f32(complex, output, fft_dot);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6939      	ldr	r1, [r7, #16]
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	4618      	mov	r0, r3
 8001968:	f00c fb74 	bl	800e054 <arm_cmplx_mag_f32>
	output[0] = 0.0f; //remove DC value
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

	float32_t unit_freq = (float32_t) 5000 / fft_dot; //2500 is timer freq
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800197e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80019f0 <dfft+0x1a0>
 8001982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001986:	edc7 7a03 	vstr	s15, [r7, #12]
//    for (uint16_t i= (FREQ_MAX / unit_freq); i< fft_dot; i++)
//    {
//        output[i]=0.0f;
//    }

	arm_max_f32(output, fft_dot / 2, &maxvalue, &maxindex);
 800198a:	6938      	ldr	r0, [r7, #16]
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	0fda      	lsrs	r2, r3, #31
 8001990:	4413      	add	r3, r2
 8001992:	105b      	asrs	r3, r3, #1
 8001994:	4619      	mov	r1, r3
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	f107 0208 	add.w	r2, r7, #8
 800199c:	f00b ff30 	bl	800d800 <arm_max_f32>
	return (int) unit_freq * maxindex*1.95;
 80019a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	ee17 2a90 	vmov	r2, s15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	fb03 f302 	mul.w	r3, r3, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fd9e 	bl	80004f4 <__aeabi_ui2d>
 80019b8:	a309      	add	r3, pc, #36	; (adr r3, 80019e0 <dfft+0x190>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fe13 	bl	80005e8 <__aeabi_dmul>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f81f 	bl	8000a0c <__aeabi_d2iz>
 80019ce:	4603      	mov	r3, r0
 80019d0:	46ad      	mov	sp, r5
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	33333333 	.word	0x33333333
 80019e4:	3fff3333 	.word	0x3fff3333
 80019e8:	200005c4 	.word	0x200005c4
 80019ec:	0800f79c 	.word	0x0800f79c
 80019f0:	459c4000 	.word	0x459c4000

080019f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <MX_QUADSPI_Init+0x48>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_QUADSPI_Init+0x44>)
 8001a34:	f004 ff74 	bl	8006920 <HAL_QSPI_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001a3e:	f7ff ffd9 	bl	80019f4 <Error_Handler>
  }

}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200053e8 	.word	0x200053e8
 8001a4c:	a0001000 	.word	0xa0001000

08001a50 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_QSPI_MspInit+0x7c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d128      	bne.n	8001ac4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a76:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <HAL_QSPI_MspInit+0x80>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001aa2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001aa6:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	4619      	mov	r1, r3
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <HAL_QSPI_MspInit+0x84>)
 8001ac0:	f002 fd88 	bl	80045d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	a0001000 	.word	0xa0001000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48001000 	.word	0x48001000

08001ad8 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001adc:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001ade:	4a4e      	ldr	r2, [pc, #312]	; (8001c18 <MX_SAI1_Init+0x140>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ae8:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001af4:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b00:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001b18:	4b3e      	ldr	r3, [pc, #248]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b1a:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <MX_SAI1_Init+0x144>)
 8001b1c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b24:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b30:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b38:	2208      	movs	r2, #8
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001b3c:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b48:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001b6c:	4829      	ldr	r0, [pc, #164]	; (8001c14 <MX_SAI1_Init+0x13c>)
 8001b6e:	f006 ffa3 	bl	8008ab8 <HAL_SAI_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001b78:	f7ff ff3c 	bl	80019f4 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b7e:	4a29      	ldr	r2, [pc, #164]	; (8001c24 <MX_SAI1_Init+0x14c>)
 8001b80:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bcc:	2208      	movs	r2, #8
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001c00:	4807      	ldr	r0, [pc, #28]	; (8001c20 <MX_SAI1_Init+0x148>)
 8001c02:	f006 ff59 	bl	8008ab8 <HAL_SAI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001c0c:	f7ff fef2 	bl	80019f4 <Error_Handler>
  }

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	200054b0 	.word	0x200054b0
 8001c18:	40015404 	.word	0x40015404
 8001c1c:	0002ee00 	.word	0x0002ee00
 8001c20:	2000542c 	.word	0x2000542c
 8001c24:	40015424 	.word	0x40015424

08001c28 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a33      	ldr	r2, [pc, #204]	; (8001d04 <HAL_SAI_MspInit+0xdc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d135      	bne.n	8001ca6 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10b      	bne.n	8001c5a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001c62:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001c64:	2374      	movs	r3, #116	; 0x74
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c74:	230d      	movs	r3, #13
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4824      	ldr	r0, [pc, #144]	; (8001d10 <HAL_SAI_MspInit+0xe8>)
 8001c80:	f002 fca8 	bl	80045d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001c96:	230d      	movs	r3, #13
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481b      	ldr	r0, [pc, #108]	; (8001d10 <HAL_SAI_MspInit+0xe8>)
 8001ca2:	f002 fc97 	bl	80045d4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_SAI_MspInit+0xec>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d124      	bne.n	8001cfa <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10b      	bne.n	8001cd0 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbc:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_SAI_MspInit+0xe4>)
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_SAI_MspInit+0xe0>)
 8001cd8:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001cea:	230d      	movs	r3, #13
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4806      	ldr	r0, [pc, #24]	; (8001d10 <HAL_SAI_MspInit+0xe8>)
 8001cf6:	f002 fc6d 	bl	80045d4 <HAL_GPIO_Init>

    }
}
 8001cfa:	bf00      	nop
 8001cfc:	3728      	adds	r7, #40	; 0x28
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40015404 	.word	0x40015404
 8001d08:	200000bc 	.word	0x200000bc
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48001000 	.word	0x48001000
 8001d14:	40015424 	.word	0x40015424

08001d18 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <MX_SPI2_Init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d72:	2208      	movs	r2, #8
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_SPI2_Init+0x74>)
 8001d78:	f007 f848 	bl	8008e0c <HAL_SPI_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d82:	f7ff fe37 	bl	80019f4 <Error_Handler>
  }

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20005534 	.word	0x20005534
 8001d90:	40003800 	.word	0x40003800

08001d94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_SPI_MspInit+0x7c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d127      	bne.n	8001e06 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	4a16      	ldr	r2, [pc, #88]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_SPI_MspInit+0x80>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001de6:	231a      	movs	r3, #26
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df6:	2305      	movs	r3, #5
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <HAL_SPI_MspInit+0x84>)
 8001e02:	f002 fbe7 	bl	80045d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40003800 	.word	0x40003800
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000c00 	.word	0x48000c00

08001e1c <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e22:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <BSP_LCD_GLASS_Init+0x70>)
 8001e24:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e2e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e32:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e48:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001e4c:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e76:	f000 f815 	bl	8001ea4 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <BSP_LCD_GLASS_Init+0x6c>)
 8001e7c:	f004 fb6c 	bl	8006558 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8001e80:	f000 f806 	bl	8001e90 <BSP_LCD_GLASS_Clear>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	200055a8 	.word	0x200055a8
 8001e8c:	40002400 	.word	0x40002400

08001e90 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <BSP_LCD_GLASS_Clear+0x10>)
 8001e96:	f004 fc1f 	bl	80066d8 <HAL_LCD_Clear>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200055a8 	.word	0x200055a8

08001ea4 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0c0      	sub	sp, #256	; 0x100
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001eac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001ebc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001ec0:	2244      	movs	r2, #68	; 0x44
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f00c fce3 	bl	800e890 <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	2288      	movs	r2, #136	; 0x88
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00c fcdc 	bl	800e890 <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b51      	ldr	r3, [pc, #324]	; (8002020 <LCD_MspInit+0x17c>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a50      	ldr	r2, [pc, #320]	; (8002020 <LCD_MspInit+0x17c>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <LCD_MspInit+0x17c>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001efc:	2301      	movs	r3, #1
 8001efe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001f02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fdc6 	bl	8006a98 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d000      	beq.n	8001f14 <LCD_MspInit+0x70>
  {
    while (1);
 8001f12:	e7fe      	b.n	8001f12 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f18:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 fba0 	bl	800766c <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <LCD_MspInit+0x17c>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <LCD_MspInit+0x17c>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f38:	4b39      	ldr	r3, [pc, #228]	; (8002020 <LCD_MspInit+0x17c>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	61bb      	str	r3, [r7, #24]
 8001f42:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <LCD_MspInit+0x17c>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	4a35      	ldr	r2, [pc, #212]	; (8002020 <LCD_MspInit+0x17c>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <LCD_MspInit+0x17c>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <LCD_MspInit+0x17c>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <LCD_MspInit+0x17c>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <LCD_MspInit+0x17c>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <LCD_MspInit+0x17c>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	4a29      	ldr	r2, [pc, #164]	; (8002020 <LCD_MspInit+0x17c>)
 8001f7a:	f043 0308 	orr.w	r3, r3, #8
 8001f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <LCD_MspInit+0x17c>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8001f8c:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001f90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001fa6:	230b      	movs	r3, #11
 8001fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001fac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb6:	f002 fb0d 	bl	80045d4 <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001fba:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001fbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001fc2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4816      	ldr	r0, [pc, #88]	; (8002024 <LCD_MspInit+0x180>)
 8001fca:	f002 fb03 	bl	80045d4 <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001fce:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001fd6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4812      	ldr	r0, [pc, #72]	; (8002028 <LCD_MspInit+0x184>)
 8001fde:	f002 faf9 	bl	80045d4 <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8001fe2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001fea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480e      	ldr	r0, [pc, #56]	; (800202c <LCD_MspInit+0x188>)
 8001ff2:	f002 faef 	bl	80045d4 <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f000 fb52 	bl	80026a0 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <LCD_MspInit+0x17c>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <LCD_MspInit+0x17c>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <LCD_MspInit+0x17c>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
}
 8002014:	bf00      	nop
 8002016:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	48000400 	.word	0x48000400
 8002028:	48000800 	.word	0x48000800
 800202c:	48000c00 	.word	0x48000c00

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_MspInit+0x44>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_MspInit+0x44>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6613      	str	r3, [r2, #96]	; 0x60
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_MspInit+0x44>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_MspInit+0x44>)
 8002050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_MspInit+0x44>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6593      	str	r3, [r2, #88]	; 0x58
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_MspInit+0x44>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002066:	2005      	movs	r0, #5
 8002068:	f002 fa32 	bl	80044d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000

08002078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 fac8 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020d8:	2001      	movs	r0, #1
 80020da:	f002 fc55 	bl	8004988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <ADC1_2_IRQHandler+0x10>)
 80020ea:	f001 f80d 	bl	8003108 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200004d8 	.word	0x200004d8

080020f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020fc:	2040      	movs	r0, #64	; 0x40
 80020fe:	f002 fc43 	bl	8004988 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM3_IRQHandler+0x10>)
 800210e:	f006 ffe7 	bl	80090e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200055e4 	.word	0x200055e4

0800211c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	static unsigned char uRx_Data[1024] = { 0 };
	static unsigned char *pRx_Data = uRx_Data;
	static unsigned char uLength = 0;

	//rx
	HAL_UART_Receive(&huart2, pRx_Data, 1, 1000);
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <USART2_IRQHandler+0x54>)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002128:	2201      	movs	r2, #1
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <USART2_IRQHandler+0x58>)
 800212c:	f007 fc93 	bl	8009a56 <HAL_UART_Receive>
	if (*pRx_Data == '\n') {
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <USART2_IRQHandler+0x54>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d10a      	bne.n	8002150 <USART2_IRQHandler+0x34>
		printf("Msg Rx: %s", uRx_Data);
 800213a:	490f      	ldr	r1, [pc, #60]	; (8002178 <USART2_IRQHandler+0x5c>)
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <USART2_IRQHandler+0x60>)
 800213e:	f00c fc57 	bl	800e9f0 <iprintf>
		pRx_Data = uRx_Data;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <USART2_IRQHandler+0x54>)
 8002144:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <USART2_IRQHandler+0x5c>)
 8002146:	601a      	str	r2, [r3, #0]
		uLength = 0;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <USART2_IRQHandler+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
 800214e:	e00a      	b.n	8002166 <USART2_IRQHandler+0x4a>
	} else {
		pRx_Data++;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <USART2_IRQHandler+0x54>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <USART2_IRQHandler+0x54>)
 8002158:	6013      	str	r3, [r2, #0]
		uLength++;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <USART2_IRQHandler+0x64>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <USART2_IRQHandler+0x64>)
 8002164:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <USART2_IRQHandler+0x58>)
 8002168:	f007 fd42 	bl	8009bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000004 	.word	0x20000004
 8002174:	20005630 	.word	0x20005630
 8002178:	200000c0 	.word	0x200000c0
 800217c:	0800f744 	.word	0x0800f744
 8002180:	200004c0 	.word	0x200004c0

08002184 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <OTG_FS_IRQHandler+0x10>)
 800218a:	f002 fea1 	bl	8004ed0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20005a8c 	.word	0x20005a8c

08002198 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
	}

return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b086      	sub	sp, #24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	e009      	b.n	80021f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	60ba      	str	r2, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe ff3b 	bl	8001068 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf1      	blt.n	80021e4 <_write+0x12>
	}
	return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_close>:

int _close(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
	return -1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002232:	605a      	str	r2, [r3, #4]
	return 0;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_isatty>:

int _isatty(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
	return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
	return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <_sbrk+0x5c>)
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <_sbrk+0x60>)
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_sbrk+0x64>)
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <_sbrk+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <_sbrk+0x64>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4413      	add	r3, r2
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d207      	bcs.n	80022b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a4:	f00c faba 	bl	800e81c <__errno>
 80022a8:	4602      	mov	r2, r0
 80022aa:	230c      	movs	r3, #12
 80022ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
 80022b2:	e009      	b.n	80022c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <_sbrk+0x64>)
 80022c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20018000 	.word	0x20018000
 80022d4:	00000400 	.word	0x00000400
 80022d8:	200004c4 	.word	0x200004c4
 80022dc:	20005d58 	.word	0x20005d58

080022e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <SystemInit+0x64>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <SystemInit+0x64>)
 80022ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <SystemInit+0x68>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a13      	ldr	r2, [pc, #76]	; (8002348 <SystemInit+0x68>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <SystemInit+0x68>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <SystemInit+0x68>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <SystemInit+0x68>)
 800230c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002310:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002314:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <SystemInit+0x68>)
 8002318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <SystemInit+0x68>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <SystemInit+0x68>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <SystemInit+0x68>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SystemInit+0x64>)
 8002332:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002336:	609a      	str	r2, [r3, #8]
#endif
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	40021000 	.word	0x40021000

0800234c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_TIM3_Init+0x94>)
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <MX_TIM3_Init+0x98>)
 800236e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002372:	2263      	movs	r2, #99	; 0x63
 8002374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_TIM3_Init+0x94>)
 800237e:	2263      	movs	r2, #99	; 0x63
 8002380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <MX_TIM3_Init+0x94>)
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800238e:	4814      	ldr	r0, [pc, #80]	; (80023e0 <MX_TIM3_Init+0x94>)
 8002390:	f006 fddf 	bl	8008f52 <HAL_TIM_Base_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800239a:	f7ff fb2b 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_TIM3_Init+0x94>)
 80023ac:	f006 ffb7 	bl	800931e <HAL_TIM_ConfigClockSource>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80023b6:	f7ff fb1d 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ba:	2320      	movs	r3, #32
 80023bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <MX_TIM3_Init+0x94>)
 80023c8:	f007 f9be 	bl	8009748 <HAL_TIMEx_MasterConfigSynchronization>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80023d2:	f7ff fb0f 	bl	80019f4 <Error_Handler>
  }

}
 80023d6:	bf00      	nop
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200055e4 	.word	0x200055e4
 80023e4:	40000400 	.word	0x40000400

080023e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_TIM_Base_MspInit+0x44>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d113      	bne.n	8002422 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_TIM_Base_MspInit+0x48>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	201d      	movs	r0, #29
 8002418:	f002 f865 	bl	80044e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800241c:	201d      	movs	r0, #29
 800241e:	f002 f87e 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40000400 	.word	0x40000400
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	//adc
	if (flag_adc)
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_ADC_Start_IT(&hadc1);
 8002444:	4804      	ldr	r0, [pc, #16]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002446:	f000 fce5 	bl	8002e14 <HAL_ADC_Start_IT>
	return;
 800244a:	bf00      	nop
 800244c:	bf00      	nop
	//comp
//	counter_timer++;
}
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	200000b8 	.word	0x200000b8
 8002458:	200004d8 	.word	0x200004d8

0800245c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002462:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <MX_USART2_UART_Init+0x58>)
 8002464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <MX_USART2_UART_Init+0x5c>)
 800246a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246c:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002480:	220c      	movs	r2, #12
 8002482:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 800248c:	2200      	movs	r2, #0
 800248e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002492:	2200      	movs	r2, #0
 8002494:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_USART2_UART_Init+0x54>)
 800249e:	f007 f9f9 	bl	8009894 <HAL_UART_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80024a8:	f7ff faa4 	bl	80019f4 <Error_Handler>
  }

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20005630 	.word	0x20005630
 80024b4:	40004400 	.word	0x40004400
 80024b8:	001e8480 	.word	0x001e8480

080024bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <HAL_UART_MspInit+0x9c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d137      	bne.n	800254e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_UART_MspInit+0xa0>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_UART_MspInit+0xa0>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800250e:	2360      	movs	r3, #96	; 0x60
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002516:	2301      	movs	r3, #1
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251e:	2307      	movs	r3, #7
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	480d      	ldr	r0, [pc, #52]	; (8002560 <HAL_UART_MspInit+0xa4>)
 800252a:	f002 f853 	bl	80045d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2102      	movs	r1, #2
 8002532:	2026      	movs	r0, #38	; 0x26
 8002534:	f001 ffd7 	bl	80044e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002538:	2026      	movs	r0, #38	; 0x26
 800253a:	f001 fff0 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_MspInit 1 */
  }
}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	; 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40004400 	.word	0x40004400
 800255c:	40021000 	.word	0x40021000
 8002560:	48000c00 	.word	0x48000c00

08002564 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800259c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002568:	f7ff feba 	bl	80022e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800256c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800256e:	e003      	b.n	8002578 <LoopCopyDataInit>

08002570 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002572:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002574:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002576:	3104      	adds	r1, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800257a:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800257c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800257e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002580:	d3f6      	bcc.n	8002570 <CopyDataInit>
	ldr	r2, =_sbss
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8002584:	e002      	b.n	800258c <LoopFillZerobss>

08002586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002586:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002588:	f842 3b04 	str.w	r3, [r2], #4

0800258c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <LoopForever+0x16>)
	cmp	r2, r3
 800258e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002590:	d3f9      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002592:	f00c f949 	bl	800e828 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002596:	f7ff f849 	bl	800162c <main>

0800259a <LoopForever>:

LoopForever:
    b LoopForever
 800259a:	e7fe      	b.n	800259a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800259c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80025a0:	080197dc 	.word	0x080197dc
	ldr	r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025a8:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 80025ac:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 80025b0:	20005d54 	.word	0x20005d54

080025b4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC3_IRQHandler>

080025b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f001 ff85 	bl	80044d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f80e 	bl	80025e8 <HAL_InitTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	71fb      	strb	r3, [r7, #7]
 80025d6:	e001      	b.n	80025dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025d8:	f7ff fd2a 	bl	8002030 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025dc:	79fb      	ldrb	r3, [r7, #7]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_InitTick+0x6c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_InitTick+0x70>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_InitTick+0x6c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f001 ff91 	bl	800453a <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10f      	bne.n	800263e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d809      	bhi.n	8002638 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f001 ff5b 	bl	80044e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002630:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_InitTick+0x74>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e007      	b.n	8002648 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e004      	b.n	8002648 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e001      	b.n	8002648 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000010 	.word	0x20000010
 8002658:	20000008 	.word	0x20000008
 800265c:	2000000c 	.word	0x2000000c

08002660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x20>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x24>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <HAL_IncTick+0x24>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000010 	.word	0x20000010
 8002684:	200056b0 	.word	0x200056b0

08002688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return uwTick;
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_GetTick+0x14>)
 800268e:	681b      	ldr	r3, [r3, #0]
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	200056b0 	.word	0x200056b0

080026a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a8:	f7ff ffee 	bl	8002688 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d005      	beq.n	80026c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_Delay+0x40>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	bf00      	nop
 80026c8:	f7ff ffde 	bl	8002688 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d8f7      	bhi.n	80026c8 <HAL_Delay+0x28>
  {
  }
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000010 	.word	0x20000010

080026e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3360      	adds	r3, #96	; 0x60
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <LL_ADC_SetOffset+0x44>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	4313      	orrs	r3, r2
 800277c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	03fff000 	.word	0x03fff000

08002794 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3360      	adds	r3, #96	; 0x60
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3360      	adds	r3, #96	; 0x60
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3330      	adds	r3, #48	; 0x30
 800282c:	461a      	mov	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	4413      	add	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	211f      	movs	r1, #31
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	f003 011f 	and.w	r1, r3, #31
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3314      	adds	r3, #20
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	0e5b      	lsrs	r3, r3, #25
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	4413      	add	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	0d1b      	lsrs	r3, r3, #20
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2107      	movs	r1, #7
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	401a      	ands	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0d1b      	lsrs	r3, r3, #20
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0318 	and.w	r3, r3, #24
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002914:	40d9      	lsrs	r1, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	400b      	ands	r3, r1
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	431a      	orrs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	0007ffff 	.word	0x0007ffff

08002938 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 031f 	and.w	r3, r3, #31
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002980:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6093      	str	r3, [r2, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a8:	d101      	bne.n	80029ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsEnabled+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsEnabled+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_IsDisableOngoing+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_IsDisableOngoing+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d101      	bne.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d101      	bne.n	8002b5e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e134      	b.n	8002df0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7fe f9a7 	bl	8000ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fef1 	bl	8002994 <LL_ADC_IsDeepPowerDownEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fed7 	bl	8002970 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff0c 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fef0 	bl	80029bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002bdc:	4b86      	ldr	r3, [pc, #536]	; (8002df8 <HAL_ADC_Init+0x28c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	4a86      	ldr	r2, [pc, #536]	; (8002dfc <HAL_ADC_Init+0x290>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fef0 	bl	80029e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff64 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002c30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80cf 	bne.w	8002dde <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 80cb 	bne.w	8002dde <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c50:	f043 0202 	orr.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fefd 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d115      	bne.n	8002c94 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c68:	4865      	ldr	r0, [pc, #404]	; (8002e00 <HAL_ADC_Init+0x294>)
 8002c6a:	f7ff fef7 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4864      	ldr	r0, [pc, #400]	; (8002e04 <HAL_ADC_Init+0x298>)
 8002c72:	f7ff fef3 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c76:	4603      	mov	r3, r0
 8002c78:	431c      	orrs	r4, r3
 8002c7a:	4863      	ldr	r0, [pc, #396]	; (8002e08 <HAL_ADC_Init+0x29c>)
 8002c7c:	f7ff feee 	bl	8002a5c <LL_ADC_IsEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4323      	orrs	r3, r4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	485f      	ldr	r0, [pc, #380]	; (8002e0c <HAL_ADC_Init+0x2a0>)
 8002c90:	f7ff fd28 	bl	80026e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7e5b      	ldrb	r3, [r3, #25]
 8002c98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ca4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002caa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d106      	bne.n	8002cd0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	045b      	lsls	r3, r3, #17
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d009      	beq.n	8002cec <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_ADC_Init+0x2a4>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fef7 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff18 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8002d16:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d13d      	bne.n	8002d9a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13a      	bne.n	8002d9a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d28:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d30:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d40:	f023 0302 	bic.w	r3, r3, #2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	69b9      	ldr	r1, [r7, #24]
 8002d4a:	430b      	orrs	r3, r1
 8002d4c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d118      	bne.n	8002d8a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d62:	f023 0304 	bic.w	r3, r3, #4
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d6e:	4311      	orrs	r1, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d74:	4311      	orrs	r1, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	611a      	str	r2, [r3, #16]
 8002d88:	e007      	b.n	8002d9a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10c      	bne.n	8002dbc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f023 010f 	bic.w	r1, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dba:	e007      	b.n	8002dcc <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 020f 	bic.w	r2, r2, #15
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f023 0303 	bic.w	r3, r3, #3
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54
 8002ddc:	e007      	b.n	8002dee <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	f043 0210 	orr.w	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	20000008 	.word	0x20000008
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	50040000 	.word	0x50040000
 8002e04:	50040100 	.word	0x50040100
 8002e08:	50040200 	.word	0x50040200
 8002e0c:	50040300 	.word	0x50040300
 8002e10:	fff0c007 	.word	0xfff0c007

08002e14 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1c:	4893      	ldr	r0, [pc, #588]	; (800306c <HAL_ADC_Start_IT+0x258>)
 8002e1e:	f7ff fd8b 	bl	8002938 <LL_ADC_GetMultimode>
 8002e22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fe65 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f040 8112 	bne.w	800305a <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_Start_IT+0x30>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e10f      	b.n	8003064 <HAL_ADC_Start_IT+0x250>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 f82b 	bl	8003ea8 <ADC_Enable>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80f9 	bne.w	8003050 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_ADC_Start_IT+0x25c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d002      	beq.n	8002e82 <HAL_ADC_Start_IT+0x6e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e000      	b.n	8002e84 <HAL_ADC_Start_IT+0x70>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	; (8003074 <HAL_ADC_Start_IT+0x260>)
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d002      	beq.n	8002e92 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d006      	beq.n	8002eb8 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f023 0206 	bic.w	r2, r3, #6
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8002eb6:	e002      	b.n	8002ebe <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	221c      	movs	r2, #28
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 021c 	bic.w	r2, r2, #28
 8002edc:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d108      	bne.n	8002ef8 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0208 	orr.w	r2, r2, #8
 8002ef4:	605a      	str	r2, [r3, #4]
          break;
 8002ef6:	e008      	b.n	8002f0a <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0204 	orr.w	r2, r2, #4
 8002f06:	605a      	str	r2, [r3, #4]
          break;
 8002f08:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0210 	orr.w	r2, r2, #16
 8002f20:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_ADC_Start_IT+0x25c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d002      	beq.n	8002f32 <HAL_ADC_Start_IT+0x11e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_Start_IT+0x120>
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_ADC_Start_IT+0x260>)
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d008      	beq.n	8002f4e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d002      	beq.n	8002f4e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d13b      	bne.n	8002fc6 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02d      	beq.n	8002fb8 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d110      	bne.n	8002f96 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0220 	bic.w	r2, r2, #32
 8002f82:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f92:	605a      	str	r2, [r3, #4]
              break;
 8002f94:	e011      	b.n	8002fba <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	605a      	str	r2, [r3, #4]
              break;
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002fb8:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fd72 	bl	8002aa8 <LL_ADC_REG_StartConversion>
 8002fc4:	e04d      	b.n	8003062 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_ADC_Start_IT+0x25c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d002      	beq.n	8002fe2 <HAL_ADC_Start_IT+0x1ce>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Start_IT+0x1d0>
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_ADC_Start_IT+0x260>)
 8002fe4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d036      	beq.n	8003060 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ffa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b08      	cmp	r3, #8
 8003008:	d110      	bne.n	800302c <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0220 	bic.w	r2, r2, #32
 8003018:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003028:	605a      	str	r2, [r3, #4]
              break;
 800302a:	e01a      	b.n	8003062 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0220 	orr.w	r2, r2, #32
 800304a:	605a      	str	r2, [r3, #4]
              break;
 800304c:	bf00      	nop
 800304e:	e008      	b.n	8003062 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003058:	e003      	b.n	8003062 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	75fb      	strb	r3, [r7, #23]
 800305e:	e000      	b.n	8003062 <HAL_ADC_Start_IT+0x24e>
        }
 8003060:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	50040300 	.word	0x50040300
 8003070:	50040100 	.word	0x50040100
 8003074:	50040000 	.word	0x50040000

08003078 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_ADC_Stop_IT+0x16>
 800308a:	2302      	movs	r3, #2
 800308c:	e02b      	b.n	80030e6 <HAL_ADC_Stop_IT+0x6e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003096:	2103      	movs	r1, #3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fe51 	bl	8003d40 <ADC_ConversionStop>
 800309e:	4603      	mov	r3, r0
 80030a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d119      	bne.n	80030dc <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 021c 	bic.w	r2, r2, #28
 80030b6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 ff4f 	bl	8003f5c <ADC_Disable>
 80030be:	4603      	mov	r3, r0
 80030c0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003124:	4882      	ldr	r0, [pc, #520]	; (8003330 <HAL_ADC_IRQHandler+0x228>)
 8003126:	f7ff fc07 	bl	8002938 <LL_ADC_GetMultimode>
 800312a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d017      	beq.n	8003166 <HAL_ADC_IRQHandler+0x5e>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 f832 	bl	80041c2 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d004      	beq.n	800317a <HAL_ADC_IRQHandler+0x72>
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8083 	beq.w	800328c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d07d      	beq.n	800328c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fb22 	bl	80027f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d062      	beq.n	800327e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_ADC_IRQHandler+0x22c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d002      	beq.n	80031c8 <HAL_ADC_IRQHandler+0xc0>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e000      	b.n	80031ca <HAL_ADC_IRQHandler+0xc2>
 80031c8:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <HAL_ADC_IRQHandler+0x230>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d008      	beq.n	80031e4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d002      	beq.n	80031e4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d104      	bne.n	80031ee <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	e00c      	b.n	8003208 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_ADC_IRQHandler+0x22c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d002      	beq.n	80031fe <HAL_ADC_IRQHandler+0xf6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	e000      	b.n	8003200 <HAL_ADC_IRQHandler+0xf8>
 80031fe:	4b4e      	ldr	r3, [pc, #312]	; (8003338 <HAL_ADC_IRQHandler+0x230>)
 8003200:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d135      	bne.n	800327e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d12e      	bne.n	800327e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fc67 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11a      	bne.n	8003266 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 020c 	bic.w	r2, r2, #12
 800323e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d112      	bne.n	800327e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
 8003264:	e00b      	b.n	800327e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd fe92 	bl	8000fa8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	220c      	movs	r2, #12
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d004      	beq.n	80032a0 <HAL_ADC_IRQHandler+0x198>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 809f 	beq.w	80033ea <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 8099 	beq.w	80033ea <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff facd 	bl	8002874 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80032da:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fa88 	bl	80027f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032e6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_ADC_IRQHandler+0x22c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d002      	beq.n	80032f8 <HAL_ADC_IRQHandler+0x1f0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e000      	b.n	80032fa <HAL_ADC_IRQHandler+0x1f2>
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_ADC_IRQHandler+0x230>)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d008      	beq.n	8003314 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d002      	beq.n	8003314 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b07      	cmp	r3, #7
 8003312:	d104      	bne.n	800331e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	e013      	b.n	8003346 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_ADC_IRQHandler+0x22c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_ADC_IRQHandler+0x234>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	e007      	b.n	800333e <HAL_ADC_IRQHandler+0x236>
 800332e:	bf00      	nop
 8003330:	50040300 	.word	0x50040300
 8003334:	50040100 	.word	0x50040100
 8003338:	50040000 	.word	0x50040000
 800333c:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <HAL_ADC_IRQHandler+0x42c>)
 800333e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10c      	bne.n	8003366 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8003352:	2b00      	cmp	r3, #0
 8003354:	d142      	bne.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d03f      	beq.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	d13a      	bne.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d133      	bne.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d12e      	bne.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fbdf 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11a      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800339c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d112      	bne.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ba:	f043 0201 	orr.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
 80033c2:	e00b      	b.n	80033dc <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	f043 0210 	orr.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f043 0201 	orr.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fec8 	bl	8004172 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2260      	movs	r2, #96	; 0x60
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_ADC_IRQHandler+0x310>
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f896 	bl	800353c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d012      	beq.n	8003448 <HAL_ADC_IRQHandler+0x340>
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 feae 	bl	800419a <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_ADC_IRQHandler+0x370>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fea0 	bl	80041ae <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x3e8>
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d031      	beq.n	80034f0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
 8003498:	e014      	b.n	80034c4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80034a0:	4825      	ldr	r0, [pc, #148]	; (8003538 <HAL_ADC_IRQHandler+0x430>)
 80034a2:	f7ff fa57 	bl	8002954 <LL_ADC_GetMultiDMATransfer>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80034ac:	2301      	movs	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	e008      	b.n	80034c4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d10e      	bne.n	80034e8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f043 0202 	orr.w	r2, r3, #2
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f834 	bl	8003550 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2210      	movs	r2, #16
 80034ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <HAL_ADC_IRQHandler+0x424>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003514:	f043 0208 	orr.w	r2, r3, #8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003524:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fe2d 	bl	8004186 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800352c:	bf00      	nop
 800352e:	3728      	adds	r7, #40	; 0x28
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	50040000 	.word	0x50040000
 8003538:	50040300 	.word	0x50040300

0800353c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0b6      	sub	sp, #216	; 0xd8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x22>
 8003582:	2302      	movs	r3, #2
 8003584:	e3c6      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x7b0>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fab0 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 83a7 	bne.w	8003cee <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d824      	bhi.n	80035f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	3b02      	subs	r3, #2
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d81b      	bhi.n	80035ea <HAL_ADC_ConfigChannel+0x86>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_ADC_ConfigChannel+0x54>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035c9 	.word	0x080035c9
 80035bc:	080035d1 	.word	0x080035d1
 80035c0:	080035d9 	.word	0x080035d9
 80035c4:	080035e1 	.word	0x080035e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	220c      	movs	r2, #12
 80035cc:	605a      	str	r2, [r3, #4]
          break;
 80035ce:	e011      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2212      	movs	r2, #18
 80035d4:	605a      	str	r2, [r3, #4]
          break;
 80035d6:	e00d      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2218      	movs	r2, #24
 80035dc:	605a      	str	r2, [r3, #4]
          break;
 80035de:	e009      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	605a      	str	r2, [r3, #4]
          break;
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2206      	movs	r2, #6
 80035ee:	605a      	str	r2, [r3, #4]
          break;
 80035f0:	e000      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80035f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	f7ff f90b 	bl	800281c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fa74 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003610:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fa94 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 800361e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003622:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 81a6 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800362c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 81a1 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6819      	ldr	r1, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	461a      	mov	r2, r3
 8003644:	f7ff f929 	bl	800289a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b04      	cmp	r3, #4
 8003668:	d00a      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6919      	ldr	r1, [r3, #16]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800367a:	f7ff f867 	bl	800274c <LL_ADC_SetOffset>
 800367e:	e17b      	b.n	8003978 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f884 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x148>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f879 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	0e9b      	lsrs	r3, r3, #26
 80036a6:	f003 021f 	and.w	r2, r3, #31
 80036aa:	e01e      	b.n	80036ea <HAL_ADC_ConfigChannel+0x186>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f86e 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e004      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80036de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x19e>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	0e9b      	lsrs	r3, r3, #26
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	e018      	b.n	8003734 <HAL_ADC_ConfigChannel+0x1d0>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800371a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800371e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003726:	2320      	movs	r3, #32
 8003728:	e004      	b.n	8003734 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800372a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003734:	429a      	cmp	r2, r3
 8003736:	d106      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff f83d 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2101      	movs	r1, #1
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f821 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003752:	4603      	mov	r3, r0
 8003754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x20e>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff f816 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003768:	4603      	mov	r3, r0
 800376a:	0e9b      	lsrs	r3, r3, #26
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	e01e      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x24c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff f80b 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e004      	b.n	80037ae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80037a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x264>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	e018      	b.n	80037fa <HAL_ADC_ConfigChannel+0x296>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80037e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e004      	b.n	80037fa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80037f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d106      	bne.n	800380c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2200      	movs	r2, #0
 8003804:	2101      	movs	r1, #1
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe ffda 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2102      	movs	r1, #2
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe ffbe 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003818:	4603      	mov	r3, r0
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_ADC_ConfigChannel+0x2d4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2102      	movs	r1, #2
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe ffb3 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800382e:	4603      	mov	r3, r0
 8003830:	0e9b      	lsrs	r3, r3, #26
 8003832:	f003 021f 	and.w	r2, r3, #31
 8003836:	e01e      	b.n	8003876 <HAL_ADC_ConfigChannel+0x312>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe ffa8 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003844:	4603      	mov	r3, r0
 8003846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800385e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003866:	2320      	movs	r3, #32
 8003868:	e004      	b.n	8003874 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800386a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <HAL_ADC_ConfigChannel+0x32a>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0e9b      	lsrs	r3, r3, #26
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	e016      	b.n	80038bc <HAL_ADC_ConfigChannel+0x358>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e004      	b.n	80038bc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80038b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2102      	movs	r1, #2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fe ff79 	bl	80027c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2103      	movs	r1, #3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe ff5d 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80038da:	4603      	mov	r3, r0
 80038dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10a      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x396>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2103      	movs	r1, #3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe ff52 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	0e9b      	lsrs	r3, r3, #26
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	e017      	b.n	800392a <HAL_ADC_ConfigChannel+0x3c6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2103      	movs	r1, #3
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe ff47 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800390c:	fa93 f3a3 	rbit	r3, r3
 8003910:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003914:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800391c:	2320      	movs	r3, #32
 800391e:	e003      	b.n	8003928 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x3de>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	e011      	b.n	8003966 <HAL_ADC_ConfigChannel+0x402>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003952:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800395a:	2320      	movs	r3, #32
 800395c:	e003      	b.n	8003966 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	fab3 f383 	clz	r3, r3
 8003964:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003966:	429a      	cmp	r2, r3
 8003968:	d106      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	2103      	movs	r1, #3
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe ff24 	bl	80027c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff f86d 	bl	8002a5c <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	f040 813f 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	461a      	mov	r2, r3
 8003998:	f7fe ffaa 	bl	80028f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4a8e      	ldr	r2, [pc, #568]	; (8003bdc <HAL_ADC_ConfigChannel+0x678>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f040 8130 	bne.w	8003c08 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x46c>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0e9b      	lsrs	r3, r3, #26
 80039be:	3301      	adds	r3, #1
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e019      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x4a0>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d8:	fa93 f3a3 	rbit	r3, r3
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80039e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80039e8:	2320      	movs	r3, #32
 80039ea:	e003      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80039ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3301      	adds	r3, #1
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2b09      	cmp	r3, #9
 80039fc:	bf94      	ite	ls
 80039fe:	2301      	movls	r3, #1
 8003a00:	2300      	movhi	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d079      	beq.n	8003afc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x4c0>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0e9b      	lsrs	r3, r3, #26
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	069b      	lsls	r3, r3, #26
 8003a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a22:	e015      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x4ec>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2c:	fa93 f3a3 	rbit	r3, r3
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	e003      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	fab3 f383 	clz	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3301      	adds	r3, #1
 8003a4a:	069b      	lsls	r3, r3, #26
 8003a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x50c>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	3301      	adds	r3, #1
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	e017      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x53c>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a78:	fa93 f3a3 	rbit	r3, r3
 8003a7c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003a88:	2320      	movs	r3, #32
 8003a8a:	e003      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f003 031f 	and.w	r3, r3, #31
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	ea42 0103 	orr.w	r1, r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x562>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	0e9b      	lsrs	r3, r3, #26
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	051b      	lsls	r3, r3, #20
 8003ac4:	e018      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x594>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003ade:	2320      	movs	r3, #32
 8003ae0:	e003      	b.n	8003aea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	fab3 f383 	clz	r3, r3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af8:	430b      	orrs	r3, r1
 8003afa:	e080      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x5b4>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	0e9b      	lsrs	r3, r3, #26
 8003b0e:	3301      	adds	r3, #1
 8003b10:	069b      	lsls	r3, r3, #26
 8003b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b16:	e015      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x5e0>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003b30:	2320      	movs	r3, #32
 8003b32:	e003      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	fab3 f383 	clz	r3, r3
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x600>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b62:	e017      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x630>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	61fb      	str	r3, [r7, #28]
  return result;
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	ea42 0103 	orr.w	r1, r2, r3
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x65c>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0e9b      	lsrs	r3, r3, #26
 8003baa:	3301      	adds	r3, #1
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3b1e      	subs	r3, #30
 8003bb8:	051b      	lsls	r3, r3, #20
 8003bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	e01d      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x698>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	613b      	str	r3, [r7, #16]
  return result;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e005      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x684>
 8003bdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3b1e      	subs	r3, #30
 8003bf6:	051b      	lsls	r3, r3, #20
 8003bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	4619      	mov	r1, r3
 8003c04:	f7fe fe49 	bl	800289a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b43      	ldr	r3, [pc, #268]	; (8003d1c <HAL_ADC_ConfigChannel+0x7b8>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d079      	beq.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c14:	4842      	ldr	r0, [pc, #264]	; (8003d20 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c16:	f7fe fd8b 	bl	8002730 <LL_ADC_GetCommonPathInternalCh>
 8003c1a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a40      	ldr	r2, [pc, #256]	; (8003d24 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d12b      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d125      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3b      	ldr	r2, [pc, #236]	; (8003d28 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d004      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0x6e4>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <HAL_ADC_ConfigChannel+0x7c8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d15c      	bne.n	8003d02 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c50:	4619      	mov	r1, r3
 8003c52:	4833      	ldr	r0, [pc, #204]	; (8003d20 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c54:	f7fe fd59 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	4a35      	ldr	r2, [pc, #212]	; (8003d34 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	099a      	lsrs	r2, r3, #6
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c70:	e002      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f9      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c7e:	e040      	b.n	8003d02 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <HAL_ADC_ConfigChannel+0x7d4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d118      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x758>
 8003c8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d112      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_ADC_ConfigChannel+0x746>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_ADC_ConfigChannel+0x7c8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12d      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	481a      	ldr	r0, [pc, #104]	; (8003d20 <HAL_ADC_ConfigChannel+0x7bc>)
 8003cb6:	f7fe fd28 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cba:	e024      	b.n	8003d06 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_ADC_ConfigChannel+0x7d8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d120      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11a      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_ADC_ConfigChannel+0x7c4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d115      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	480e      	ldr	r0, [pc, #56]	; (8003d20 <HAL_ADC_ConfigChannel+0x7bc>)
 8003ce8:	f7fe fd0f 	bl	800270a <LL_ADC_SetCommonPathInternalCh>
 8003cec:	e00c      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d00:	e002      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d10:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	37d8      	adds	r7, #216	; 0xd8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	80080000 	.word	0x80080000
 8003d20:	50040300 	.word	0x50040300
 8003d24:	c7520000 	.word	0xc7520000
 8003d28:	50040000 	.word	0x50040000
 8003d2c:	50040200 	.word	0x50040200
 8003d30:	20000008 	.word	0x20000008
 8003d34:	053e2d63 	.word	0x053e2d63
 8003d38:	cb840000 	.word	0xcb840000
 8003d3c:	80000001 	.word	0x80000001

08003d40 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fe fece 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003d5c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe feef 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003d68:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8090 	beq.w	8003e98 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02a      	beq.n	8003ddc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	7e5b      	ldrb	r3, [r3, #25]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d126      	bne.n	8003ddc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7e1b      	ldrb	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d122      	bne.n	8003ddc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d9a:	e014      	b.n	8003dc6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4a41      	ldr	r2, [pc, #260]	; (8003ea4 <ADC_ConversionStop+0x164>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d90d      	bls.n	8003dc0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e06c      	b.n	8003e9a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d1e3      	bne.n	8003d9c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2240      	movs	r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d014      	beq.n	8003e0c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fe86 	bl	8002af8 <LL_ADC_REG_IsConversionOngoing>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fe43 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fe fe62 	bl	8002ad0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d014      	beq.n	8003e3c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fe95 	bl	8002b46 <LL_ADC_INJ_IsConversionOngoing>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00c      	beq.n	8003e3c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fe2b 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fe71 	bl	8002b1e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d004      	beq.n	8003e4c <ADC_ConversionStop+0x10c>
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d105      	bne.n	8003e52 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e46:	230c      	movs	r3, #12
 8003e48:	617b      	str	r3, [r7, #20]
        break;
 8003e4a:	e005      	b.n	8003e58 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	617b      	str	r3, [r7, #20]
        break;
 8003e50:	e002      	b.n	8003e58 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e52:	2304      	movs	r3, #4
 8003e54:	617b      	str	r3, [r7, #20]
        break;
 8003e56:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e58:	f7fe fc16 	bl	8002688 <HAL_GetTick>
 8003e5c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e5e:	e014      	b.n	8003e8a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e60:	f7fe fc12 	bl	8002688 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d90d      	bls.n	8003e8a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f043 0210 	orr.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e007      	b.n	8003e9a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e3      	bne.n	8003e60 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	a33fffff 	.word	0xa33fffff

08003ea8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fdd1 	bl	8002a5c <LL_ADC_IsEnabled>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d146      	bne.n	8003f4e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <ADC_Enable+0xb0>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00d      	beq.n	8003eea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0210 	orr.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ede:	f043 0201 	orr.w	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e032      	b.n	8003f50 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fd8c 	bl	8002a0c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe fbc8 	bl	8002688 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003efa:	e021      	b.n	8003f40 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fdab 	bl	8002a5c <LL_ADC_IsEnabled>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fd7b 	bl	8002a0c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f16:	f7fe fbb7 	bl	8002688 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d90d      	bls.n	8003f40 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d1d6      	bne.n	8003efc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	8000003f 	.word	0x8000003f

08003f5c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fd8a 	bl	8002a82 <LL_ADC_IsDisableOngoing>
 8003f6e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fd71 	bl	8002a5c <LL_ADC_IsEnabled>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d040      	beq.n	8004002 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d13d      	bne.n	8004002 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 030d 	and.w	r3, r3, #13
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10c      	bne.n	8003fae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe fd4b 	bl	8002a34 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fa6:	f7fe fb6f 	bl	8002688 <HAL_GetTick>
 8003faa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fac:	e022      	b.n	8003ff4 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0210 	orr.w	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e01c      	b.n	8004004 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fca:	f7fe fb5d 	bl	8002688 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d90d      	bls.n	8003ff4 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	f043 0210 	orr.w	r2, r3, #16
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f043 0201 	orr.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e007      	b.n	8004004 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e3      	bne.n	8003fca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <LL_ADC_IsEnabled>:
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <LL_ADC_IsEnabled+0x18>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <LL_ADC_IsEnabled+0x1a>
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_ADC_StartCalibration>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_ADC_IsCalibrationOnGoing>:
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004078:	d101      	bne.n	800407e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <LL_ADC_REG_IsConversionOngoing>:
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d101      	bne.n	80040a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_ADCEx_Calibration_Start+0x1c>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e04d      	b.n	800416a <HAL_ADCEx_Calibration_Start+0xb8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ff40 	bl	8003f5c <ADC_Disable>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d136      	bne.n	8004154 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040ee:	f023 0302 	bic.w	r3, r3, #2
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff96 	bl	8004032 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004106:	e014      	b.n	8004132 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3301      	adds	r3, #1
 800410c:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004114:	d30d      	bcc.n	8004132 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f023 0312 	bic.w	r3, r3, #18
 800411e:	f043 0210 	orr.w	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e01b      	b.n	800416a <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff94 	bl	8004064 <LL_ADC_IsCalibrationOnGoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e2      	bne.n	8004108 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	f043 0201 	orr.w	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
 8004152:	e005      	b.n	8004160 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b09f      	sub	sp, #124	; 0x7c
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e08f      	b.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a47      	ldr	r2, [pc, #284]	; (8004320 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004208:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e001      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e072      	b.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ff2a 	bl	800408c <LL_ADC_REG_IsConversionOngoing>
 8004238:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ff24 	bl	800408c <LL_ADC_REG_IsConversionOngoing>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d154      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800424a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800424c:	2b00      	cmp	r3, #0
 800424e:	d151      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004250:	4b35      	ldr	r3, [pc, #212]	; (8004328 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004252:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02c      	beq.n	80042b6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800425c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426e:	035b      	lsls	r3, r3, #13
 8004270:	430b      	orrs	r3, r1
 8004272:	431a      	orrs	r2, r3
 8004274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004276:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004278:	4829      	ldr	r0, [pc, #164]	; (8004320 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800427a:	f7ff fec7 	bl	800400c <LL_ADC_IsEnabled>
 800427e:	4604      	mov	r4, r0
 8004280:	4828      	ldr	r0, [pc, #160]	; (8004324 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004282:	f7ff fec3 	bl	800400c <LL_ADC_IsEnabled>
 8004286:	4603      	mov	r3, r0
 8004288:	431c      	orrs	r4, r3
 800428a:	4828      	ldr	r0, [pc, #160]	; (800432c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800428c:	f7ff febe 	bl	800400c <LL_ADC_IsEnabled>
 8004290:	4603      	mov	r3, r0
 8004292:	4323      	orrs	r3, r4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d137      	bne.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042a0:	f023 030f 	bic.w	r3, r3, #15
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	6811      	ldr	r1, [r2, #0]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	431a      	orrs	r2, r3
 80042b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042b4:	e028      	b.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042c2:	4817      	ldr	r0, [pc, #92]	; (8004320 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80042c4:	f7ff fea2 	bl	800400c <LL_ADC_IsEnabled>
 80042c8:	4604      	mov	r4, r0
 80042ca:	4816      	ldr	r0, [pc, #88]	; (8004324 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80042cc:	f7ff fe9e 	bl	800400c <LL_ADC_IsEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	431c      	orrs	r4, r3
 80042d4:	4815      	ldr	r0, [pc, #84]	; (800432c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80042d6:	f7ff fe99 	bl	800400c <LL_ADC_IsEnabled>
 80042da:	4603      	mov	r3, r0
 80042dc:	4323      	orrs	r3, r4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d112      	bne.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80042e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80042ea:	f023 030f 	bic.w	r3, r3, #15
 80042ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042f0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042f2:	e009      	b.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004306:	e000      	b.n	800430a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004312:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004316:	4618      	mov	r0, r3
 8004318:	377c      	adds	r7, #124	; 0x7c
 800431a:	46bd      	mov	sp, r7
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	bf00      	nop
 8004320:	50040000 	.word	0x50040000
 8004324:	50040100 	.word	0x50040100
 8004328:	50040300 	.word	0x50040300
 800432c:	50040200 	.word	0x50040200

08004330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800434c:	4013      	ands	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800435c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60d3      	str	r3, [r2, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <__NVIC_GetPriorityGrouping+0x18>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 0307 	and.w	r3, r3, #7
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db0b      	blt.n	80043be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4907      	ldr	r1, [pc, #28]	; (80043cc <__NVIC_EnableIRQ+0x38>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2001      	movs	r0, #1
 80043b6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf28      	it	cs
 8004442:	2304      	movcs	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3304      	adds	r3, #4
 800444a:	2b06      	cmp	r3, #6
 800444c:	d902      	bls.n	8004454 <NVIC_EncodePriority+0x30>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3b03      	subs	r3, #3
 8004452:	e000      	b.n	8004456 <NVIC_EncodePriority+0x32>
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	f04f 32ff 	mov.w	r2, #4294967295
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43d9      	mvns	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	4313      	orrs	r3, r2
         );
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3b01      	subs	r3, #1
 8004498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800449c:	d301      	bcc.n	80044a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800449e:	2301      	movs	r3, #1
 80044a0:	e00f      	b.n	80044c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <SysTick_Config+0x40>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044aa:	210f      	movs	r1, #15
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	f7ff ff8e 	bl	80043d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <SysTick_Config+0x40>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ba:	4b04      	ldr	r3, [pc, #16]	; (80044cc <SysTick_Config+0x40>)
 80044bc:	2207      	movs	r2, #7
 80044be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	e000e010 	.word	0xe000e010

080044d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff29 	bl	8004330 <__NVIC_SetPriorityGrouping>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b086      	sub	sp, #24
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	4603      	mov	r3, r0
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044f8:	f7ff ff3e 	bl	8004378 <__NVIC_GetPriorityGrouping>
 80044fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	6978      	ldr	r0, [r7, #20]
 8004504:	f7ff ff8e 	bl	8004424 <NVIC_EncodePriority>
 8004508:	4602      	mov	r2, r0
 800450a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff5d 	bl	80043d0 <__NVIC_SetPriority>
}
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff31 	bl	8004394 <__NVIC_EnableIRQ>
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff ffa2 	bl	800448c <SysTick_Config>
 8004548:	4603      	mov	r3, r0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d005      	beq.n	8004576 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
 8004574:	e029      	b.n	80045ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020e 	bic.w	r2, r2, #14
 8004584:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f003 021c 	and.w	r2, r3, #28
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
    }
  }
  return status;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045e2:	e17f      	b.n	80048e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2101      	movs	r1, #1
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8171 	beq.w	80048de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d00b      	beq.n	800461c <HAL_GPIO_Init+0x48>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d007      	beq.n	800461c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004610:	2b11      	cmp	r3, #17
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b12      	cmp	r3, #18
 800461a:	d130      	bne.n	800467e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004652:	2201      	movs	r2, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4013      	ands	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0201 	and.w	r2, r3, #1
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b03      	cmp	r3, #3
 8004688:	d118      	bne.n	80046bc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004690:	2201      	movs	r2, #1
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0201 	and.w	r2, r3, #1
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	2203      	movs	r2, #3
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d003      	beq.n	80046fc <HAL_GPIO_Init+0x128>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b12      	cmp	r3, #18
 80046fa:	d123      	bne.n	8004744 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	08da      	lsrs	r2, r3, #3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3208      	adds	r2, #8
 8004704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004708:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	220f      	movs	r2, #15
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4013      	ands	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	08da      	lsrs	r2, r3, #3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3208      	adds	r2, #8
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	2203      	movs	r2, #3
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0203 	and.w	r2, r3, #3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80ac 	beq.w	80048de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004786:	4b5e      	ldr	r3, [pc, #376]	; (8004900 <HAL_GPIO_Init+0x32c>)
 8004788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800478a:	4a5d      	ldr	r2, [pc, #372]	; (8004900 <HAL_GPIO_Init+0x32c>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	6613      	str	r3, [r2, #96]	; 0x60
 8004792:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <HAL_GPIO_Init+0x32c>)
 8004794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800479e:	4a59      	ldr	r2, [pc, #356]	; (8004904 <HAL_GPIO_Init+0x330>)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	089b      	lsrs	r3, r3, #2
 80047a4:	3302      	adds	r3, #2
 80047a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	220f      	movs	r2, #15
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80047c8:	d025      	beq.n	8004816 <HAL_GPIO_Init+0x242>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a4e      	ldr	r2, [pc, #312]	; (8004908 <HAL_GPIO_Init+0x334>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01f      	beq.n	8004812 <HAL_GPIO_Init+0x23e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a4d      	ldr	r2, [pc, #308]	; (800490c <HAL_GPIO_Init+0x338>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d019      	beq.n	800480e <HAL_GPIO_Init+0x23a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a4c      	ldr	r2, [pc, #304]	; (8004910 <HAL_GPIO_Init+0x33c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d013      	beq.n	800480a <HAL_GPIO_Init+0x236>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a4b      	ldr	r2, [pc, #300]	; (8004914 <HAL_GPIO_Init+0x340>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00d      	beq.n	8004806 <HAL_GPIO_Init+0x232>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <HAL_GPIO_Init+0x344>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <HAL_GPIO_Init+0x22e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a49      	ldr	r2, [pc, #292]	; (800491c <HAL_GPIO_Init+0x348>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d101      	bne.n	80047fe <HAL_GPIO_Init+0x22a>
 80047fa:	2306      	movs	r3, #6
 80047fc:	e00c      	b.n	8004818 <HAL_GPIO_Init+0x244>
 80047fe:	2307      	movs	r3, #7
 8004800:	e00a      	b.n	8004818 <HAL_GPIO_Init+0x244>
 8004802:	2305      	movs	r3, #5
 8004804:	e008      	b.n	8004818 <HAL_GPIO_Init+0x244>
 8004806:	2304      	movs	r3, #4
 8004808:	e006      	b.n	8004818 <HAL_GPIO_Init+0x244>
 800480a:	2303      	movs	r3, #3
 800480c:	e004      	b.n	8004818 <HAL_GPIO_Init+0x244>
 800480e:	2302      	movs	r3, #2
 8004810:	e002      	b.n	8004818 <HAL_GPIO_Init+0x244>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <HAL_GPIO_Init+0x244>
 8004816:	2300      	movs	r3, #0
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	f002 0203 	and.w	r2, r2, #3
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	4093      	lsls	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004828:	4936      	ldr	r1, [pc, #216]	; (8004904 <HAL_GPIO_Init+0x330>)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	089b      	lsrs	r3, r3, #2
 800482e:	3302      	adds	r3, #2
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004836:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_GPIO_Init+0x34c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800485a:	4a31      	ldr	r2, [pc, #196]	; (8004920 <HAL_GPIO_Init+0x34c>)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004860:	4b2f      	ldr	r3, [pc, #188]	; (8004920 <HAL_GPIO_Init+0x34c>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	43db      	mvns	r3, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4013      	ands	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004884:	4a26      	ldr	r2, [pc, #152]	; (8004920 <HAL_GPIO_Init+0x34c>)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800488a:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_GPIO_Init+0x34c>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	43db      	mvns	r3, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ae:	4a1c      	ldr	r2, [pc, #112]	; (8004920 <HAL_GPIO_Init+0x34c>)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048b4:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_GPIO_Init+0x34c>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048d8:	4a11      	ldr	r2, [pc, #68]	; (8004920 <HAL_GPIO_Init+0x34c>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	3301      	adds	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	fa22 f303 	lsr.w	r3, r2, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f47f ae78 	bne.w	80045e4 <HAL_GPIO_Init+0x10>
  }
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40021000 	.word	0x40021000
 8004904:	40010000 	.word	0x40010000
 8004908:	48000400 	.word	0x48000400
 800490c:	48000800 	.word	0x48000800
 8004910:	48000c00 	.word	0x48000c00
 8004914:	48001000 	.word	0x48001000
 8004918:	48001400 	.word	0x48001400
 800491c:	48001800 	.word	0x48001800
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	807b      	strh	r3, [r7, #2]
 8004930:	4613      	mov	r3, r2
 8004932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004934:	787b      	ldrb	r3, [r7, #1]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800493a:	887a      	ldrh	r2, [r7, #2]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004940:	e002      	b.n	8004948 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004966:	887a      	ldrh	r2, [r7, #2]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	041a      	lsls	r2, r3, #16
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	43d9      	mvns	r1, r3
 8004972:	887b      	ldrh	r3, [r7, #2]
 8004974:	400b      	ands	r3, r1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	619a      	str	r2, [r3, #24]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800499e:	4a05      	ldr	r2, [pc, #20]	; (80049b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fc ff44 	bl	8001834 <HAL_GPIO_EXTI_Callback>
  }
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40010400 	.word	0x40010400

080049b8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80049b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ba:	b08f      	sub	sp, #60	; 0x3c
 80049bc:	af0a      	add	r7, sp, #40	; 0x28
 80049be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e054      	b.n	8004a74 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f008 fc5d 	bl	800d2a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2203      	movs	r2, #3
 80049ee:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f005 fef5 	bl	800a7f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	603b      	str	r3, [r7, #0]
 8004a14:	687e      	ldr	r6, [r7, #4]
 8004a16:	466d      	mov	r5, sp
 8004a18:	f106 0410 	add.w	r4, r6, #16
 8004a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a28:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a2c:	1d33      	adds	r3, r6, #4
 8004a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a30:	6838      	ldr	r0, [r7, #0]
 8004a32:	f005 fe7e 	bl	800a732 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f005 feec 	bl	800a81a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	687e      	ldr	r6, [r7, #4]
 8004a4a:	466d      	mov	r5, sp
 8004a4c:	f106 0410 	add.w	r4, r6, #16
 8004a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a60:	1d33      	adds	r3, r6, #4
 8004a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	f005 fffb 	bl	800aa60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a7c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af04      	add	r7, sp, #16
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	4608      	mov	r0, r1
 8004a86:	4611      	mov	r1, r2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	70fb      	strb	r3, [r7, #3]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70bb      	strb	r3, [r7, #2]
 8004a92:	4613      	mov	r3, r2
 8004a94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_HCD_HC_Init+0x28>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e07f      	b.n	8004ba4 <HAL_HCD_HC_Init+0x128>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	440b      	add	r3, r1
 8004aba:	333d      	adds	r3, #61	; 0x3d
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3338      	adds	r3, #56	; 0x38
 8004ad0:	787a      	ldrb	r2, [r7, #1]
 8004ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	3340      	adds	r3, #64	; 0x40
 8004ae4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ae6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	440b      	add	r3, r1
 8004af6:	3339      	adds	r3, #57	; 0x39
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	440b      	add	r3, r1
 8004b0a:	333f      	adds	r3, #63	; 0x3f
 8004b0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004b10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	78bb      	ldrb	r3, [r7, #2]
 8004b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1a:	b2d8      	uxtb	r0, r3
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	333a      	adds	r3, #58	; 0x3a
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004b2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	da0a      	bge.n	8004b4c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	333b      	adds	r3, #59	; 0x3b
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e009      	b.n	8004b60 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	333b      	adds	r3, #59	; 0x3b
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	333c      	adds	r3, #60	; 0x3c
 8004b70:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b74:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	787c      	ldrb	r4, [r7, #1]
 8004b7c:	78ba      	ldrb	r2, [r7, #2]
 8004b7e:	78f9      	ldrb	r1, [r7, #3]
 8004b80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	4623      	mov	r3, r4
 8004b92:	f006 f8a9 	bl	800ace8 <USB_HC_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd90      	pop	{r4, r7, pc}

08004bac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_HCD_HC_Halt+0x1e>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e00f      	b.n	8004bea <HAL_HCD_HC_Halt+0x3e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f006 fa87 	bl	800b0ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	70fb      	strb	r3, [r7, #3]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70bb      	strb	r3, [r7, #2]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	440b      	add	r3, r1
 8004c1c:	333b      	adds	r3, #59	; 0x3b
 8004c1e:	78ba      	ldrb	r2, [r7, #2]
 8004c20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	333f      	adds	r3, #63	; 0x3f
 8004c32:	787a      	ldrb	r2, [r7, #1]
 8004c34:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004c36:	7c3b      	ldrb	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d114      	bne.n	8004c66 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	440b      	add	r3, r1
 8004c4a:	3342      	adds	r3, #66	; 0x42
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	440b      	add	r3, r1
 8004c5e:	333d      	adds	r3, #61	; 0x3d
 8004c60:	7f3a      	ldrb	r2, [r7, #28]
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e009      	b.n	8004c7a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	440b      	add	r3, r1
 8004c74:	3342      	adds	r3, #66	; 0x42
 8004c76:	2202      	movs	r2, #2
 8004c78:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c7a:	787b      	ldrb	r3, [r7, #1]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	f200 80d6 	bhi.w	8004e2e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004e19 	.word	0x08004e19
 8004c90:	08004d05 	.word	0x08004d05
 8004c94:	08004d8f 	.word	0x08004d8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004c98:	7c3b      	ldrb	r3, [r7, #16]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	f040 80c9 	bne.w	8004e32 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004ca0:	78bb      	ldrb	r3, [r7, #2]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f040 80c5 	bne.w	8004e32 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004ca8:	8b3b      	ldrh	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	440b      	add	r3, r1
 8004cbc:	3351      	adds	r3, #81	; 0x51
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	3351      	adds	r3, #81	; 0x51
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3342      	adds	r3, #66	; 0x42
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004cec:	e0a1      	b.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	3342      	adds	r3, #66	; 0x42
 8004cfe:	2202      	movs	r2, #2
 8004d00:	701a      	strb	r2, [r3, #0]
      break;
 8004d02:	e096      	b.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004d04:	78bb      	ldrb	r3, [r7, #2]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d120      	bne.n	8004d4c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	440b      	add	r3, r1
 8004d18:	3351      	adds	r3, #81	; 0x51
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3342      	adds	r3, #66	; 0x42
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004d34:	e07e      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	3342      	adds	r3, #66	; 0x42
 8004d46:	2202      	movs	r2, #2
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e073      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	3350      	adds	r3, #80	; 0x50
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	440b      	add	r3, r1
 8004d70:	3342      	adds	r3, #66	; 0x42
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e05d      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	440b      	add	r3, r1
 8004d86:	3342      	adds	r3, #66	; 0x42
 8004d88:	2202      	movs	r2, #2
 8004d8a:	701a      	strb	r2, [r3, #0]
      break;
 8004d8c:	e052      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004d8e:	78bb      	ldrb	r3, [r7, #2]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d120      	bne.n	8004dd6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	3351      	adds	r3, #81	; 0x51
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	440b      	add	r3, r1
 8004db8:	3342      	adds	r3, #66	; 0x42
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004dbe:	e039      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	440b      	add	r3, r1
 8004dce:	3342      	adds	r3, #66	; 0x42
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	701a      	strb	r2, [r3, #0]
      break;
 8004dd4:	e02e      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	440b      	add	r3, r1
 8004de4:	3350      	adds	r3, #80	; 0x50
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dec:	78fa      	ldrb	r2, [r7, #3]
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	440b      	add	r3, r1
 8004dfa:	3342      	adds	r3, #66	; 0x42
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
      break;
 8004e00:	e018      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	3342      	adds	r3, #66	; 0x42
 8004e12:	2202      	movs	r2, #2
 8004e14:	701a      	strb	r2, [r3, #0]
      break;
 8004e16:	e00d      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3342      	adds	r3, #66	; 0x42
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
      break;
 8004e2c:	e002      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004e32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	440b      	add	r3, r1
 8004e42:	3344      	adds	r3, #68	; 0x44
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	8b39      	ldrh	r1, [r7, #24]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4403      	add	r3, r0
 8004e58:	3348      	adds	r3, #72	; 0x48
 8004e5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004e5c:	78fa      	ldrb	r2, [r7, #3]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	440b      	add	r3, r1
 8004e6a:	335c      	adds	r3, #92	; 0x5c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	334c      	adds	r3, #76	; 0x4c
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	3339      	adds	r3, #57	; 0x39
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004e98:	78fa      	ldrb	r2, [r7, #3]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	335d      	adds	r3, #93	; 0x5d
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	3338      	adds	r3, #56	; 0x38
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f006 f803 	bl	800aecc <USB_HC_StartXfer>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f005 fd77 	bl	800a9da <USB_GetMode>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	f040 80ef 	bne.w	80050d2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f005 fd5b 	bl	800a9b4 <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80e5 	beq.w	80050d0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f005 fd52 	bl	800a9b4 <USB_ReadInterrupts>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f1a:	d104      	bne.n	8004f26 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004f24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f005 fd42 	bl	800a9b4 <USB_ReadInterrupts>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3a:	d104      	bne.n	8004f46 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f005 fd32 	bl	800a9b4 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5a:	d104      	bne.n	8004f66 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004f64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 fd22 	bl	800a9b4 <USB_ReadInterrupts>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d103      	bne.n	8004f82 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 fd14 	bl	800a9b4 <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f96:	d115      	bne.n	8004fc4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004fa0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f008 f9f8 	bl	800d3a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f005 fdcc 	bl	800ab5c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f005 fcf3 	bl	800a9b4 <USB_ReadInterrupts>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd8:	d102      	bne.n	8004fe0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 f922 	bl	8006224 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f005 fce5 	bl	800a9b4 <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d106      	bne.n	8005002 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f008 f9bb 	bl	800d370 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2208      	movs	r2, #8
 8005000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f005 fcd4 	bl	800a9b4 <USB_ReadInterrupts>
 800500c:	4603      	mov	r3, r0
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005016:	d138      	bne.n	800508a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f006 f855 	bl	800b0cc <USB_HC_ReadInterrupt>
 8005022:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e025      	b.n	8005076 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	fa22 f303 	lsr.w	r3, r2, r3
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d018      	beq.n	8005070 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005054:	d106      	bne.n	8005064 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8cf 	bl	8005200 <HCD_HC_IN_IRQHandler>
 8005062:	e005      	b.n	8005070 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fcd9 	bl	8005a22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	429a      	cmp	r2, r3
 800507e:	d3d4      	bcc.n	800502a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f005 fc90 	bl	800a9b4 <USB_ReadInterrupts>
 8005094:	4603      	mov	r3, r0
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b10      	cmp	r3, #16
 800509c:	d101      	bne.n	80050a2 <HAL_HCD_IRQHandler+0x1d2>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_HCD_IRQHandler+0x1d4>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d014      	beq.n	80050d2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0210 	bic.w	r2, r2, #16
 80050b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f001 f807 	bl	80060cc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0210 	orr.w	r2, r2, #16
 80050cc:	619a      	str	r2, [r3, #24]
 80050ce:	e000      	b.n	80050d2 <HAL_HCD_IRQHandler+0x202>
      return;
 80050d0:	bf00      	nop
    }
  }
}
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_HCD_Start+0x16>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e013      	b.n	8005116 <HAL_HCD_Start+0x3e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f005 fb6b 	bl	800a7d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	4618      	mov	r0, r3
 8005108:	f005 fd8c 	bl	800ac24 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <HAL_HCD_Stop+0x16>
 8005130:	2302      	movs	r3, #2
 8005132:	e00d      	b.n	8005150 <HAL_HCD_Stop+0x32>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f006 f8d3 	bl	800b2ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f005 fd33 	bl	800abd0 <USB_ResetPort>
 800516a:	4603      	mov	r3, r0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	335c      	adds	r3, #92	; 0x5c
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	460b      	mov	r3, r1
 80051a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	334c      	adds	r3, #76	; 0x4c
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f005 fd75 	bl	800acc4 <USB_GetCurrentFrame>
 80051da:	4603      	mov	r3, r0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f005 fd50 	bl	800ac96 <USB_GetHostSpeed>
 80051f6:	4603      	mov	r3, r0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	460b      	mov	r3, r1
 800520a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d119      	bne.n	8005264 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	2304      	movs	r3, #4
 8005240:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	60d3      	str	r3, [r2, #12]
 8005262:	e0ce      	b.n	8005402 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527a:	d12c      	bne.n	80052d6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	461a      	mov	r2, r3
 800528a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	440b      	add	r3, r1
 800529e:	335d      	adds	r3, #93	; 0x5d
 80052a0:	2207      	movs	r2, #7
 80052a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	0151      	lsls	r1, r2, #5
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	440a      	add	r2, r1
 80052ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 ff0d 	bl	800b0ee <USB_HC_Halt>
 80052d4:	e095      	b.n	8005402 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0320 	and.w	r3, r3, #32
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d109      	bne.n	8005300 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	461a      	mov	r2, r3
 80052fa:	2320      	movs	r3, #32
 80052fc:	6093      	str	r3, [r2, #8]
 80052fe:	e080      	b.n	8005402 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b08      	cmp	r3, #8
 8005314:	d134      	bne.n	8005380 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	440a      	add	r2, r1
 800532c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005330:	f043 0302 	orr.w	r3, r3, #2
 8005334:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	440b      	add	r3, r1
 8005344:	335d      	adds	r3, #93	; 0x5d
 8005346:	2205      	movs	r2, #5
 8005348:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	461a      	mov	r2, r3
 8005358:	2310      	movs	r3, #16
 800535a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	2308      	movs	r3, #8
 800536c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f005 feb8 	bl	800b0ee <USB_HC_Halt>
 800537e:	e040      	b.n	8005402 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	4413      	add	r3, r2
 8005388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d134      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b2:	f043 0302 	orr.w	r3, r3, #2
 80053b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	4611      	mov	r1, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f005 fe93 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	461a      	mov	r2, r3
 80053d6:	2310      	movs	r3, #16
 80053d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	440b      	add	r3, r1
 80053e8:	335d      	adds	r3, #93	; 0x5d
 80053ea:	2208      	movs	r2, #8
 80053ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fa:	461a      	mov	r2, r3
 80053fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005400:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005418:	d122      	bne.n	8005460 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4413      	add	r3, r2
 8005422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	0151      	lsls	r1, r2, #5
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	440a      	add	r2, r1
 8005430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f005 fe52 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	461a      	mov	r2, r3
 8005458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800545e:	e2dc      	b.n	8005a1a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b01      	cmp	r3, #1
 8005474:	f040 80dd 	bne.w	8005632 <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	440b      	add	r3, r1
 8005486:	335d      	adds	r3, #93	; 0x5d
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	00db      	lsls	r3, r3, #3
 8005498:	440b      	add	r3, r1
 800549a:	3358      	adds	r3, #88	; 0x58
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	2301      	movs	r3, #1
 80054b0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	440b      	add	r3, r1
 80054c0:	333f      	adds	r3, #63	; 0x3f
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	333f      	adds	r3, #63	; 0x3f
 80054d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d121      	bne.n	8005522 <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f005 fdf0 	bl	800b0ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	461a      	mov	r2, r3
 800551c:	2310      	movs	r3, #16
 800551e:	6093      	str	r3, [r2, #8]
 8005520:	e070      	b.n	8005604 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	333f      	adds	r3, #63	; 0x3f
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b03      	cmp	r3, #3
 8005536:	d12a      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	0151      	lsls	r1, r2, #5
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	440a      	add	r2, r1
 800554e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005556:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	440b      	add	r3, r1
 8005566:	335c      	adds	r3, #92	; 0x5c
 8005568:	2201      	movs	r2, #1
 800556a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	b2d8      	uxtb	r0, r3
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	335c      	adds	r3, #92	; 0x5c
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	4601      	mov	r1, r0
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f007 ff1c 	bl	800d3c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800558c:	e03a      	b.n	8005604 <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	333f      	adds	r3, #63	; 0x3f
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d12f      	bne.n	8005604 <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	335c      	adds	r3, #92	; 0x5c
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4613      	mov	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	440b      	add	r3, r1
 80055c6:	3350      	adds	r3, #80	; 0x50
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2d8      	uxtb	r0, r3
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	3350      	adds	r3, #80	; 0x50
 80055e0:	4602      	mov	r2, r0
 80055e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	b2d8      	uxtb	r0, r3
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	440b      	add	r3, r1
 80055f6:	335c      	adds	r3, #92	; 0x5c
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4601      	mov	r1, r0
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f007 fee0 	bl	800d3c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	3350      	adds	r3, #80	; 0x50
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2d8      	uxtb	r0, r3
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	3350      	adds	r3, #80	; 0x50
 800562c:	4602      	mov	r2, r0
 800562e:	701a      	strb	r2, [r3, #0]
}
 8005630:	e1f3      	b.n	8005a1a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	f040 811a 	bne.w	800587e <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4413      	add	r3, r2
 8005652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	440a      	add	r2, r1
 8005660:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	440b      	add	r3, r1
 8005678:	335d      	adds	r3, #93	; 0x5d
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10a      	bne.n	8005696 <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	335c      	adds	r3, #92	; 0x5c
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e0d9      	b.n	800584a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	335d      	adds	r3, #93	; 0x5d
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d10a      	bne.n	80056c2 <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	335c      	adds	r3, #92	; 0x5c
 80056bc:	2205      	movs	r2, #5
 80056be:	701a      	strb	r2, [r3, #0]
 80056c0:	e0c3      	b.n	800584a <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	335d      	adds	r3, #93	; 0x5d
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b06      	cmp	r3, #6
 80056d6:	d00a      	beq.n	80056ee <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	335d      	adds	r3, #93	; 0x5d
 80056e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d156      	bne.n	800579c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	3358      	adds	r3, #88	; 0x58
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1c59      	adds	r1, r3, #1
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4403      	add	r3, r0
 8005710:	3358      	adds	r3, #88	; 0x58
 8005712:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3358      	adds	r3, #88	; 0x58
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d914      	bls.n	8005754 <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	440b      	add	r3, r1
 8005738:	3358      	adds	r3, #88	; 0x58
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	440b      	add	r3, r1
 800574c:	335c      	adds	r3, #92	; 0x5c
 800574e:	2204      	movs	r2, #4
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e009      	b.n	8005768 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	440b      	add	r3, r1
 8005762:	335c      	adds	r3, #92	; 0x5c
 8005764:	2202      	movs	r2, #2
 8005766:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800577e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005786:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4413      	add	r3, r2
 8005790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e056      	b.n	800584a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	440b      	add	r3, r1
 80057aa:	335d      	adds	r3, #93	; 0x5d
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d123      	bne.n	80057fa <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	335c      	adds	r3, #92	; 0x5c
 80057c2:	2202      	movs	r2, #2
 80057c4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057dc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057e4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e027      	b.n	800584a <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	335d      	adds	r3, #93	; 0x5d
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d11c      	bne.n	800584a <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	3358      	adds	r3, #88	; 0x58
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	1c59      	adds	r1, r3, #1
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4403      	add	r3, r0
 8005832:	3358      	adds	r3, #88	; 0x58
 8005834:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	440b      	add	r3, r1
 8005844:	335c      	adds	r3, #92	; 0x5c
 8005846:	2204      	movs	r2, #4
 8005848:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	461a      	mov	r2, r3
 8005858:	2302      	movs	r3, #2
 800585a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	b2d8      	uxtb	r0, r3
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	335c      	adds	r3, #92	; 0x5c
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	4601      	mov	r1, r0
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f007 fda4 	bl	800d3c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800587c:	e0cd      	b.n	8005a1a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d13e      	bne.n	8005912 <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80058b4:	6879      	ldr	r1, [r7, #4]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	3358      	adds	r3, #88	; 0x58
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4403      	add	r3, r0
 80058d6:	3358      	adds	r3, #88	; 0x58
 80058d8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	335d      	adds	r3, #93	; 0x5d
 80058ea:	2206      	movs	r2, #6
 80058ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4611      	mov	r1, r2
 80058f8:	4618      	mov	r0, r3
 80058fa:	f005 fbf8 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4413      	add	r3, r2
 8005906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590a:	461a      	mov	r2, r3
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	6093      	str	r3, [r2, #8]
}
 8005910:	e083      	b.n	8005a1a <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b10      	cmp	r3, #16
 8005926:	d178      	bne.n	8005a1a <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	440b      	add	r3, r1
 8005936:	333f      	adds	r3, #63	; 0x3f
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d122      	bne.n	8005984 <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	440b      	add	r3, r1
 800594c:	3358      	adds	r3, #88	; 0x58
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f043 0302 	orr.w	r3, r3, #2
 8005970:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f005 fbb6 	bl	800b0ee <USB_HC_Halt>
 8005982:	e041      	b.n	8005a08 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	333f      	adds	r3, #63	; 0x3f
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	333f      	adds	r3, #63	; 0x3f
 80059aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d12b      	bne.n	8005a08 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	440b      	add	r3, r1
 80059be:	3358      	adds	r3, #88	; 0x58
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	440b      	add	r3, r1
 80059d2:	335d      	adds	r3, #93	; 0x5d
 80059d4:	2203      	movs	r2, #3
 80059d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f2:	f043 0302 	orr.w	r3, r3, #2
 80059f6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f005 fb73 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	461a      	mov	r2, r3
 8005a16:	2310      	movs	r3, #16
 8005a18:	6093      	str	r3, [r2, #8]
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d119      	bne.n	8005a86 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5e:	461a      	mov	r2, r3
 8005a60:	2304      	movs	r3, #4
 8005a62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7e:	f043 0302 	orr.w	r3, r3, #2
 8005a82:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005a84:	e31e      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d141      	bne.n	8005b20 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2320      	movs	r3, #32
 8005aac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	333d      	adds	r3, #61	; 0x3d
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 82ff 	bne.w	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	333d      	adds	r3, #61	; 0x3d
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	440b      	add	r3, r1
 8005ae8:	335c      	adds	r3, #92	; 0x5c
 8005aea:	2202      	movs	r2, #2
 8005aec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f005 fae8 	bl	800b0ee <USB_HC_Halt>
}
 8005b1e:	e2d1      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b40      	cmp	r3, #64	; 0x40
 8005b34:	d13f      	bne.n	8005bb6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	335d      	adds	r3, #93	; 0x5d
 8005b46:	2204      	movs	r2, #4
 8005b48:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	333d      	adds	r3, #61	; 0x3d
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3358      	adds	r3, #88	; 0x58
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f005 faa6 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2340      	movs	r3, #64	; 0x40
 8005bb2:	6093      	str	r3, [r2, #8]
}
 8005bb4:	e286      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	d122      	bne.n	8005c14 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	0151      	lsls	r1, r2, #5
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	440a      	add	r2, r1
 8005be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f005 fa78 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c10:	6093      	str	r3, [r2, #8]
}
 8005c12:	e257      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d135      	bne.n	8005c96 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	440b      	add	r3, r1
 8005c38:	3358      	adds	r3, #88	; 0x58
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c58:	f043 0302 	orr.w	r3, r3, #2
 8005c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f005 fa40 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	335d      	adds	r3, #93	; 0x5d
 8005c90:	2201      	movs	r2, #1
 8005c92:	701a      	strb	r2, [r3, #0]
}
 8005c94:	e216      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d12b      	bne.n	8005d04 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2308      	movs	r3, #8
 8005cbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	0151      	lsls	r1, r2, #5
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	440a      	add	r2, r1
 8005cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f005 fa00 	bl	800b0ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	335d      	adds	r3, #93	; 0x5d
 8005cfe:	2205      	movs	r2, #5
 8005d00:	701a      	strb	r2, [r3, #0]
}
 8005d02:	e1df      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d135      	bne.n	8005d86 <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	440b      	add	r3, r1
 8005d28:	3358      	adds	r3, #88	; 0x58
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005d2e:	6879      	ldr	r1, [r7, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	440b      	add	r3, r1
 8005d3c:	335d      	adds	r3, #93	; 0x5d
 8005d3e:	2203      	movs	r2, #3
 8005d40:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d5c:	f043 0302 	orr.w	r3, r3, #2
 8005d60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f005 f9be 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2310      	movs	r3, #16
 8005d82:	6093      	str	r3, [r2, #8]
}
 8005d84:	e19e      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b80      	cmp	r3, #128	; 0x80
 8005d9a:	d12b      	bne.n	8005df4 <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db6:	f043 0302 	orr.w	r3, r3, #2
 8005dba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f005 f991 	bl	800b0ee <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	440b      	add	r3, r1
 8005dda:	335d      	adds	r3, #93	; 0x5d
 8005ddc:	2206      	movs	r2, #6
 8005dde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dec:	461a      	mov	r2, r3
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	6093      	str	r3, [r2, #8]
}
 8005df2:	e167      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d135      	bne.n	8005e78 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e26:	f043 0302 	orr.w	r3, r3, #2
 8005e2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f005 f959 	bl	800b0ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	335d      	adds	r3, #93	; 0x5d
 8005e72:	2208      	movs	r2, #8
 8005e74:	701a      	strb	r2, [r3, #0]
}
 8005e76:	e125      	b.n	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	f040 811a 	bne.w	80060c4 <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eaa:	f023 0302 	bic.w	r3, r3, #2
 8005eae:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	440b      	add	r3, r1
 8005ebe:	335d      	adds	r3, #93	; 0x5d
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d137      	bne.n	8005f36 <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	440b      	add	r3, r1
 8005ed4:	335c      	adds	r3, #92	; 0x5c
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	440b      	add	r3, r1
 8005ee8:	333f      	adds	r3, #63	; 0x3f
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d00b      	beq.n	8005f08 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	440b      	add	r3, r1
 8005efe:	333f      	adds	r3, #63	; 0x3f
 8005f00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	f040 80c5 	bne.w	8006092 <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	440b      	add	r3, r1
 8005f16:	3351      	adds	r3, #81	; 0x51
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f083 0301 	eor.w	r3, r3, #1
 8005f1e:	b2d8      	uxtb	r0, r3
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3351      	adds	r3, #81	; 0x51
 8005f30:	4602      	mov	r2, r0
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e0ad      	b.n	8006092 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	440b      	add	r3, r1
 8005f44:	335d      	adds	r3, #93	; 0x5d
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d10a      	bne.n	8005f62 <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	440b      	add	r3, r1
 8005f5a:	335c      	adds	r3, #92	; 0x5c
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e097      	b.n	8006092 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	440b      	add	r3, r1
 8005f70:	335d      	adds	r3, #93	; 0x5d
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d10a      	bne.n	8005f8e <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	440b      	add	r3, r1
 8005f86:	335c      	adds	r3, #92	; 0x5c
 8005f88:	2202      	movs	r2, #2
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e081      	b.n	8006092 <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	440b      	add	r3, r1
 8005f9c:	335d      	adds	r3, #93	; 0x5d
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d10a      	bne.n	8005fba <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	440b      	add	r3, r1
 8005fb2:	335c      	adds	r3, #92	; 0x5c
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e06b      	b.n	8006092 <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	440b      	add	r3, r1
 8005fc8:	335d      	adds	r3, #93	; 0x5d
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	d00a      	beq.n	8005fe6 <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	335d      	adds	r3, #93	; 0x5d
 8005fe0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d155      	bne.n	8006092 <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3358      	adds	r3, #88	; 0x58
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4403      	add	r3, r0
 8006008:	3358      	adds	r3, #88	; 0x58
 800600a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3358      	adds	r3, #88	; 0x58
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d914      	bls.n	800604c <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	3358      	adds	r3, #88	; 0x58
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	440b      	add	r3, r1
 8006044:	335c      	adds	r3, #92	; 0x5c
 8006046:	2204      	movs	r2, #4
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e009      	b.n	8006060 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	440b      	add	r3, r1
 800605a:	335c      	adds	r3, #92	; 0x5c
 800605c:	2202      	movs	r2, #2
 800605e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006076:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	461a      	mov	r2, r3
 80060a0:	2302      	movs	r3, #2
 80060a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	b2d8      	uxtb	r0, r3
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335c      	adds	r3, #92	; 0x5c
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	4601      	mov	r1, r0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f007 f980 	bl	800d3c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80060c4:	bf00      	nop
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	0c5b      	lsrs	r3, r3, #17
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006100:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b02      	cmp	r3, #2
 8006106:	d003      	beq.n	8006110 <HCD_RXQLVL_IRQHandler+0x44>
 8006108:	2b05      	cmp	r3, #5
 800610a:	f000 8082 	beq.w	8006212 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800610e:	e083      	b.n	8006218 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d07f      	beq.n	8006216 <HCD_RXQLVL_IRQHandler+0x14a>
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	3344      	adds	r3, #68	; 0x44
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d074      	beq.n	8006216 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	440b      	add	r3, r1
 800613e:	3344      	adds	r3, #68	; 0x44
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	b292      	uxth	r2, r2
 8006146:	4619      	mov	r1, r3
 8006148:	f004 fc0b 	bl	800a962 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	440b      	add	r3, r1
 800615a:	3344      	adds	r3, #68	; 0x44
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	18d1      	adds	r1, r2, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4613      	mov	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4403      	add	r3, r0
 8006170:	3344      	adds	r3, #68	; 0x44
 8006172:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	440b      	add	r3, r1
 8006182:	334c      	adds	r3, #76	; 0x4c
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	18d1      	adds	r1, r2, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4403      	add	r3, r0
 8006198:	334c      	adds	r3, #76	; 0x4c
 800619a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <HCD_RXQLVL_IRQHandler+0x154>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d031      	beq.n	8006216 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	461a      	mov	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	3350      	adds	r3, #80	; 0x50
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	f083 0301 	eor.w	r3, r3, #1
 80061fa:	b2d8      	uxtb	r0, r3
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	440b      	add	r3, r1
 800620a:	3350      	adds	r3, #80	; 0x50
 800620c:	4602      	mov	r2, r0
 800620e:	701a      	strb	r2, [r3, #0]
      break;
 8006210:	e001      	b.n	8006216 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006216:	bf00      	nop
  }
}
 8006218:	bf00      	nop
 800621a:	3728      	adds	r7, #40	; 0x28
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	1ff80000 	.word	0x1ff80000

08006224 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006250:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d10b      	bne.n	8006274 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d102      	bne.n	800626c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f007 f890 	bl	800d38c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f043 0302 	orr.w	r3, r3, #2
 8006272:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b08      	cmp	r3, #8
 800627c:	d132      	bne.n	80062e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f043 0308 	orr.w	r3, r3, #8
 8006284:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b04      	cmp	r3, #4
 800628e:	d126      	bne.n	80062de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d113      	bne.n	80062c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800629e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062a2:	d106      	bne.n	80062b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2102      	movs	r1, #2
 80062aa:	4618      	mov	r0, r3
 80062ac:	f004 fc56 	bl	800ab5c <USB_InitFSLSPClkSel>
 80062b0:	e011      	b.n	80062d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2101      	movs	r1, #1
 80062b8:	4618      	mov	r0, r3
 80062ba:	f004 fc4f 	bl	800ab5c <USB_InitFSLSPClkSel>
 80062be:	e00a      	b.n	80062d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ce:	461a      	mov	r2, r3
 80062d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80062d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f007 f882 	bl	800d3e0 <HAL_HCD_PortEnabled_Callback>
 80062dc:	e002      	b.n	80062e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f007 f88c 	bl	800d3fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d103      	bne.n	80062f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f043 0320 	orr.w	r3, r3, #32
 80062f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80062fc:	461a      	mov	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	6013      	str	r3, [r2, #0]
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e081      	b.n	8006420 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb f85d 	bl	80013f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800635a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800636a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	e006      	b.n	8006392 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006390:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d104      	bne.n	80063a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	ea42 0103 	orr.w	r1, r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	021a      	lsls	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69d9      	ldr	r1, [r3, #28]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b20      	cmp	r3, #32
 800643c:	d138      	bne.n	80064b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006448:	2302      	movs	r3, #2
 800644a:	e032      	b.n	80064b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0201 	bic.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800647a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6819      	ldr	r1, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064be:	b480      	push	{r7}
 80064c0:	b085      	sub	sp, #20
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d139      	bne.n	8006548 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064de:	2302      	movs	r3, #2
 80064e0:	e033      	b.n	800654a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2224      	movs	r2, #36	; 0x24
 80064ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 0201 	bic.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006510:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e0af      	b.n	80066ca <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fa ffb2 	bl	80014e8 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800659c:	2300      	movs	r3, #0
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e00a      	b.n	80065b8 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	3304      	adds	r3, #4
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	2200      	movs	r2, #0
 80065b0:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	3301      	adds	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b0f      	cmp	r3, #15
 80065bc:	d9f1      	bls.n	80065a2 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0204 	orr.w	r2, r2, #4
 80065cc:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <HAL_LCD_Init+0x17c>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6851      	ldr	r1, [r2, #4]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6892      	ldr	r2, [r2, #8]
 80065e0:	4311      	orrs	r1, r2
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80065e6:	4311      	orrs	r1, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065ec:	4311      	orrs	r1, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	69d2      	ldr	r2, [r2, #28]
 80065f2:	4311      	orrs	r1, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6a12      	ldr	r2, [r2, #32]
 80065f8:	4311      	orrs	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6992      	ldr	r2, [r2, #24]
 80065fe:	4311      	orrs	r1, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006604:	4311      	orrs	r1, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	430b      	orrs	r3, r1
 800660c:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f8f1 	bl	80067f6 <LCD_WaitForSynchro>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_LCD_Init+0xca>
  {
    return status;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	e053      	b.n	80066ca <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f042 0201 	orr.w	r2, r2, #1
 8006658:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 800665a:	f7fc f815 	bl	8002688 <HAL_GetTick>
 800665e:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006660:	e00c      	b.n	800667c <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006662:	f7fc f811 	bl	8002688 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006670:	d904      	bls.n	800667c <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2208      	movs	r2, #8
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e026      	b.n	80066ca <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b01      	cmp	r3, #1
 8006688:	d1eb      	bne.n	8006662 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 800668a:	f7fb fffd 	bl	8002688 <HAL_GetTick>
 800668e:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8006690:	e00c      	b.n	80066ac <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006692:	f7fb fff9 	bl	8002688 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a0:	d904      	bls.n	80066ac <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2210      	movs	r2, #16
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e00e      	b.n	80066ca <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d1eb      	bne.n	8006692 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	fc00000e 	.word	0xfc00000e

080066d8 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066ea:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 80066ec:	7cbb      	ldrb	r3, [r7, #18]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d002      	beq.n	80066f8 <HAL_LCD_Clear+0x20>
 80066f2:	7cbb      	ldrb	r3, [r7, #18]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d140      	bne.n	800677a <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d101      	bne.n	8006706 <HAL_LCD_Clear+0x2e>
 8006702:	2302      	movs	r3, #2
 8006704:	e03a      	b.n	800677c <HAL_LCD_Clear+0xa4>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 8006716:	f7fb ffb7 	bl	8002688 <HAL_GetTick>
 800671a:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 800671c:	e010      	b.n	8006740 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800671e:	f7fb ffb3 	bl	8002688 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800672c:	d908      	bls.n	8006740 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e01d      	b.n	800677c <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0304 	and.w	r3, r3, #4
 800674a:	2b04      	cmp	r3, #4
 800674c:	d0e7      	beq.n	800671e <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800674e:	2300      	movs	r3, #0
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e00a      	b.n	800676a <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	3304      	adds	r3, #4
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	2200      	movs	r2, #0
 8006762:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3301      	adds	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d9f1      	bls.n	8006754 <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f807 	bl	8006784 <HAL_LCD_UpdateDisplayRequest>
 8006776:	4603      	mov	r3, r0
 8006778:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 800677a:	7cfb      	ldrb	r3, [r7, #19]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3718      	adds	r7, #24
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0204 	orr.w	r2, r2, #4
 80067a2:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80067a4:	f7fb ff70 	bl	8002688 <HAL_GetTick>
 80067a8:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80067aa:	e010      	b.n	80067ce <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80067ac:	f7fb ff6c 	bl	8002688 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ba:	d908      	bls.n	80067ce <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2204      	movs	r2, #4
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e00f      	b.n	80067ee <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d1e7      	bne.n	80067ac <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80067fe:	f7fb ff43 	bl	8002688 <HAL_GetTick>
 8006802:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006804:	e00c      	b.n	8006820 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006806:	f7fb ff3f 	bl	8002688 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006814:	d904      	bls.n	8006820 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e007      	b.n	8006830 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b20      	cmp	r3, #32
 800682c:	d1eb      	bne.n	8006806 <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <HAL_PWREx_GetVoltageRange+0x18>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40007000 	.word	0x40007000

08006854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006862:	d130      	bne.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800686c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006870:	d038      	beq.n	80068e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006872:	4b20      	ldr	r3, [pc, #128]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800687a:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800687c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2232      	movs	r2, #50	; 0x32
 8006888:	fb02 f303 	mul.w	r3, r2, r3
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	0c9b      	lsrs	r3, r3, #18
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006898:	e002      	b.n	80068a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3b01      	subs	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068a0:	4b14      	ldr	r3, [pc, #80]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ac:	d102      	bne.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f2      	bne.n	800689a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c0:	d110      	bne.n	80068e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e00f      	b.n	80068e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80068c6:	4b0b      	ldr	r3, [pc, #44]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d007      	beq.n	80068e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068dc:	4a05      	ldr	r2, [pc, #20]	; (80068f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40007000 	.word	0x40007000
 80068f8:	20000008 	.word	0x20000008
 80068fc:	431bde83 	.word	0x431bde83

08006900 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006904:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4a04      	ldr	r2, [pc, #16]	; (800691c <HAL_PWREx_EnableVddUSB+0x1c>)
 800690a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800690e:	6053      	str	r3, [r2, #4]
}
 8006910:	bf00      	nop
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40007000 	.word	0x40007000

08006920 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006928:	f7fb feae 	bl	8002688 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e063      	b.n	8006a00 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fb f87f 	bl	8001a50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006952:	f241 3188 	movw	r1, #5000	; 0x1388
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f858 	bl	8006a0c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	3b01      	subs	r3, #1
 800696c:	021a      	lsls	r2, r3, #8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	2120      	movs	r1, #32
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f850 	bl	8006a28 <QSPI_WaitFlagStateUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800698c:	7afb      	ldrb	r3, [r7, #11]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d131      	bne.n	80069f6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6852      	ldr	r2, [r2, #4]
 80069a4:	0611      	lsls	r1, r2, #24
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68d2      	ldr	r2, [r2, #12]
 80069aa:	4311      	orrs	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_QSPI_Init+0xe8>)
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6912      	ldr	r2, [r2, #16]
 80069c2:	0411      	lsls	r1, r2, #16
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6952      	ldr	r2, [r2, #20]
 80069c8:	4311      	orrs	r1, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6992      	ldr	r2, [r2, #24]
 80069ce:	4311      	orrs	r1, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	430b      	orrs	r3, r1
 80069d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80069fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	ffe0f8fe 	.word	0xffe0f8fe

08006a0c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a38:	e01a      	b.n	8006a70 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d016      	beq.n	8006a70 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a42:	f7fb fe21 	bl	8002688 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d302      	bcc.n	8006a58 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	f043 0201 	orr.w	r2, r3, #1
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e00e      	b.n	8006a8e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689a      	ldr	r2, [r3, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bf14      	ite	ne
 8006a7e:	2301      	movne	r3, #1
 8006a80:	2300      	moveq	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d1d6      	bne.n	8006a3a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e3d4      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aaa:	4ba1      	ldr	r3, [pc, #644]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ab4:	4b9e      	ldr	r3, [pc, #632]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80e4 	beq.w	8006c94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x4a>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b0c      	cmp	r3, #12
 8006ad6:	f040 808b 	bne.w	8006bf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	f040 8087 	bne.w	8006bf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ae2:	4b93      	ldr	r3, [pc, #588]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCC_OscConfig+0x62>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e3ac      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1a      	ldr	r2, [r3, #32]
 8006afe:	4b8c      	ldr	r3, [pc, #560]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d004      	beq.n	8006b14 <HAL_RCC_OscConfig+0x7c>
 8006b0a:	4b89      	ldr	r3, [pc, #548]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b12:	e005      	b.n	8006b20 <HAL_RCC_OscConfig+0x88>
 8006b14:	4b86      	ldr	r3, [pc, #536]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1a:	091b      	lsrs	r3, r3, #4
 8006b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d223      	bcs.n	8006b6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fd3f 	bl	80075ac <RCC_SetFlashLatencyFromMSIRange>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e38d      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b38:	4b7d      	ldr	r3, [pc, #500]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a7c      	ldr	r2, [pc, #496]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b3e:	f043 0308 	orr.w	r3, r3, #8
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	4b7a      	ldr	r3, [pc, #488]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	4977      	ldr	r1, [pc, #476]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b56:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	4972      	ldr	r1, [pc, #456]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	604b      	str	r3, [r1, #4]
 8006b6a:	e025      	b.n	8006bb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b6c:	4b70      	ldr	r3, [pc, #448]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a6f      	ldr	r2, [pc, #444]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b72:	f043 0308 	orr.w	r3, r3, #8
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	4b6d      	ldr	r3, [pc, #436]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	496a      	ldr	r1, [pc, #424]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b8a:	4b69      	ldr	r3, [pc, #420]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	4965      	ldr	r1, [pc, #404]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fcff 	bl	80075ac <RCC_SetFlashLatencyFromMSIRange>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e34d      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bb8:	f000 fc36 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	4b5c      	ldr	r3, [pc, #368]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	4a5a      	ldr	r2, [pc, #360]	; (8006d34 <HAL_RCC_OscConfig+0x29c>)
 8006bca:	5cd3      	ldrb	r3, [r2, r3]
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	fa21 f303 	lsr.w	r3, r1, r3
 8006bd4:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <HAL_RCC_OscConfig+0x2a0>)
 8006bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006bd8:	4b58      	ldr	r3, [pc, #352]	; (8006d3c <HAL_RCC_OscConfig+0x2a4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fb fd03 	bl	80025e8 <HAL_InitTick>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d052      	beq.n	8006c92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	e331      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d032      	beq.n	8006c5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006bf8:	4b4d      	ldr	r3, [pc, #308]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a4c      	ldr	r2, [pc, #304]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c04:	f7fb fd40 	bl	8002688 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c0c:	f7fb fd3c 	bl	8002688 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e31a      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c1e:	4b44      	ldr	r3, [pc, #272]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d0f0      	beq.n	8006c0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c2a:	4b41      	ldr	r3, [pc, #260]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a40      	ldr	r2, [pc, #256]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	493b      	ldr	r1, [pc, #236]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c48:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	4936      	ldr	r1, [pc, #216]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	604b      	str	r3, [r1, #4]
 8006c5c:	e01a      	b.n	8006c94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c5e:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a33      	ldr	r2, [pc, #204]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c6a:	f7fb fd0d 	bl	8002688 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c72:	f7fb fd09 	bl	8002688 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e2e7      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006c84:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f0      	bne.n	8006c72 <HAL_RCC_OscConfig+0x1da>
 8006c90:	e000      	b.n	8006c94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d074      	beq.n	8006d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d005      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x21a>
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d10e      	bne.n	8006cca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d10b      	bne.n	8006cca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d064      	beq.n	8006d88 <HAL_RCC_OscConfig+0x2f0>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d160      	bne.n	8006d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e2c4      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x24a>
 8006cd4:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cde:	6013      	str	r3, [r2, #0]
 8006ce0:	e01d      	b.n	8006d1e <HAL_RCC_OscConfig+0x286>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cea:	d10c      	bne.n	8006d06 <HAL_RCC_OscConfig+0x26e>
 8006cec:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a0f      	ldr	r2, [pc, #60]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e00b      	b.n	8006d1e <HAL_RCC_OscConfig+0x286>
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a09      	ldr	r2, [pc, #36]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <HAL_RCC_OscConfig+0x298>)
 8006d18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01c      	beq.n	8006d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d26:	f7fb fcaf 	bl	8002688 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d2c:	e011      	b.n	8006d52 <HAL_RCC_OscConfig+0x2ba>
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000
 8006d34:	0800f754 	.word	0x0800f754
 8006d38:	20000008 	.word	0x20000008
 8006d3c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d40:	f7fb fca2 	bl	8002688 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b64      	cmp	r3, #100	; 0x64
 8006d4c:	d901      	bls.n	8006d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e280      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d52:	4baf      	ldr	r3, [pc, #700]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0f0      	beq.n	8006d40 <HAL_RCC_OscConfig+0x2a8>
 8006d5e:	e014      	b.n	8006d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fb fc92 	bl	8002688 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d68:	f7fb fc8e 	bl	8002688 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b64      	cmp	r3, #100	; 0x64
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e26c      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d7a:	4ba5      	ldr	r3, [pc, #660]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x2d0>
 8006d86:	e000      	b.n	8006d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d060      	beq.n	8006e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d005      	beq.n	8006da8 <HAL_RCC_OscConfig+0x310>
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d119      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d116      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006da8:	4b99      	ldr	r3, [pc, #612]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x328>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e249      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc0:	4b93      	ldr	r3, [pc, #588]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	4990      	ldr	r1, [pc, #576]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd4:	e040      	b.n	8006e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d023      	beq.n	8006e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dde:	4b8c      	ldr	r3, [pc, #560]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a8b      	ldr	r2, [pc, #556]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dea:	f7fb fc4d 	bl	8002688 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006df0:	e008      	b.n	8006e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df2:	f7fb fc49 	bl	8002688 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d901      	bls.n	8006e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e227      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e04:	4b82      	ldr	r3, [pc, #520]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f0      	beq.n	8006df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e10:	4b7f      	ldr	r3, [pc, #508]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	061b      	lsls	r3, r3, #24
 8006e1e:	497c      	ldr	r1, [pc, #496]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	604b      	str	r3, [r1, #4]
 8006e24:	e018      	b.n	8006e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e26:	4b7a      	ldr	r3, [pc, #488]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a79      	ldr	r2, [pc, #484]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e32:	f7fb fc29 	bl	8002688 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3a:	f7fb fc25 	bl	8002688 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e203      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e4c:	4b70      	ldr	r3, [pc, #448]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d03c      	beq.n	8006ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01c      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e6c:	4b68      	ldr	r3, [pc, #416]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e72:	4a67      	ldr	r2, [pc, #412]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7c:	f7fb fc04 	bl	8002688 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e82:	e008      	b.n	8006e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e84:	f7fb fc00 	bl	8002688 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d901      	bls.n	8006e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e1de      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e96:	4b5e      	ldr	r3, [pc, #376]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d0ef      	beq.n	8006e84 <HAL_RCC_OscConfig+0x3ec>
 8006ea4:	e01b      	b.n	8006ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea6:	4b5a      	ldr	r3, [pc, #360]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eac:	4a58      	ldr	r2, [pc, #352]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006eae:	f023 0301 	bic.w	r3, r3, #1
 8006eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb6:	f7fb fbe7 	bl	8002688 <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ebe:	f7fb fbe3 	bl	8002688 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e1c1      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ed0:	4b4f      	ldr	r3, [pc, #316]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1ef      	bne.n	8006ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0304 	and.w	r3, r3, #4
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80a6 	beq.w	8007038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eec:	2300      	movs	r3, #0
 8006eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ef0:	4b47      	ldr	r3, [pc, #284]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10d      	bne.n	8006f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006efc:	4b44      	ldr	r3, [pc, #272]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f00:	4a43      	ldr	r2, [pc, #268]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f06:	6593      	str	r3, [r2, #88]	; 0x58
 8006f08:	4b41      	ldr	r3, [pc, #260]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f10:	60bb      	str	r3, [r7, #8]
 8006f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f14:	2301      	movs	r3, #1
 8006f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f18:	4b3e      	ldr	r3, [pc, #248]	; (8007014 <HAL_RCC_OscConfig+0x57c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d118      	bne.n	8006f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f24:	4b3b      	ldr	r3, [pc, #236]	; (8007014 <HAL_RCC_OscConfig+0x57c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a3a      	ldr	r2, [pc, #232]	; (8007014 <HAL_RCC_OscConfig+0x57c>)
 8006f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f30:	f7fb fbaa 	bl	8002688 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f38:	f7fb fba6 	bl	8002688 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e184      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4a:	4b32      	ldr	r3, [pc, #200]	; (8007014 <HAL_RCC_OscConfig+0x57c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d108      	bne.n	8006f70 <HAL_RCC_OscConfig+0x4d8>
 8006f5e:	4b2c      	ldr	r3, [pc, #176]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	4a2a      	ldr	r2, [pc, #168]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f6e:	e024      	b.n	8006fba <HAL_RCC_OscConfig+0x522>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d110      	bne.n	8006f9a <HAL_RCC_OscConfig+0x502>
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	4a24      	ldr	r2, [pc, #144]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f80:	f043 0304 	orr.w	r3, r3, #4
 8006f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f88:	4b21      	ldr	r3, [pc, #132]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8e:	4a20      	ldr	r2, [pc, #128]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f98:	e00f      	b.n	8006fba <HAL_RCC_OscConfig+0x522>
 8006f9a:	4b1d      	ldr	r3, [pc, #116]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006fa2:	f023 0301 	bic.w	r3, r3, #1
 8006fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006faa:	4b19      	ldr	r3, [pc, #100]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb0:	4a17      	ldr	r2, [pc, #92]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006fb2:	f023 0304 	bic.w	r3, r3, #4
 8006fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc2:	f7fb fb61 	bl	8002688 <HAL_GetTick>
 8006fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fc8:	e00a      	b.n	8006fe0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fca:	f7fb fb5d 	bl	8002688 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e139      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <HAL_RCC_OscConfig+0x578>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ed      	beq.n	8006fca <HAL_RCC_OscConfig+0x532>
 8006fee:	e01a      	b.n	8007026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff0:	f7fb fb4a 	bl	8002688 <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ff6:	e00f      	b.n	8007018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff8:	f7fb fb46 	bl	8002688 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	; 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d906      	bls.n	8007018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e122      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
 800700e:	bf00      	nop
 8007010:	40021000 	.word	0x40021000
 8007014:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007018:	4b90      	ldr	r3, [pc, #576]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e8      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007026:	7ffb      	ldrb	r3, [r7, #31]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d105      	bne.n	8007038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800702c:	4b8b      	ldr	r3, [pc, #556]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800702e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007030:	4a8a      	ldr	r2, [pc, #552]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007036:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8108 	beq.w	8007252 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	2b02      	cmp	r3, #2
 8007048:	f040 80d0 	bne.w	80071ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800704c:	4b83      	ldr	r3, [pc, #524]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f003 0203 	and.w	r2, r3, #3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	429a      	cmp	r2, r3
 800705e:	d130      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706a:	3b01      	subs	r3, #1
 800706c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800706e:	429a      	cmp	r2, r3
 8007070:	d127      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800707e:	429a      	cmp	r2, r3
 8007080:	d11f      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800708c:	2a07      	cmp	r2, #7
 800708e:	bf14      	ite	ne
 8007090:	2201      	movne	r2, #1
 8007092:	2200      	moveq	r2, #0
 8007094:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	3b01      	subs	r3, #1
 80070a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d109      	bne.n	80070c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	3b01      	subs	r3, #1
 80070bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d06e      	beq.n	80071a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	d069      	beq.n	800719c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80070c8:	4b64      	ldr	r3, [pc, #400]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80070d4:	4b61      	ldr	r3, [pc, #388]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0b7      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070e4:	4b5d      	ldr	r3, [pc, #372]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a5c      	ldr	r2, [pc, #368]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80070ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070f0:	f7fb faca 	bl	8002688 <HAL_GetTick>
 80070f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f8:	f7fb fac6 	bl	8002688 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e0a4      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800710a:	4b54      	ldr	r3, [pc, #336]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007116:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	4b51      	ldr	r3, [pc, #324]	; (8007260 <HAL_RCC_OscConfig+0x7c8>)
 800711c:	4013      	ands	r3, r2
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007126:	3a01      	subs	r2, #1
 8007128:	0112      	lsls	r2, r2, #4
 800712a:	4311      	orrs	r1, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007130:	0212      	lsls	r2, r2, #8
 8007132:	4311      	orrs	r1, r2
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007138:	0852      	lsrs	r2, r2, #1
 800713a:	3a01      	subs	r2, #1
 800713c:	0552      	lsls	r2, r2, #21
 800713e:	4311      	orrs	r1, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007144:	0852      	lsrs	r2, r2, #1
 8007146:	3a01      	subs	r2, #1
 8007148:	0652      	lsls	r2, r2, #25
 800714a:	4311      	orrs	r1, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007150:	0912      	lsrs	r2, r2, #4
 8007152:	0452      	lsls	r2, r2, #17
 8007154:	430a      	orrs	r2, r1
 8007156:	4941      	ldr	r1, [pc, #260]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007158:	4313      	orrs	r3, r2
 800715a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800715c:	4b3f      	ldr	r3, [pc, #252]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3e      	ldr	r2, [pc, #248]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007168:	4b3c      	ldr	r3, [pc, #240]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4a3b      	ldr	r2, [pc, #236]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800716e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007174:	f7fb fa88 	bl	8002688 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fb fa84 	bl	8002688 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e062      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800719a:	e05a      	b.n	8007252 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e059      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071a0:	4b2e      	ldr	r3, [pc, #184]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d152      	bne.n	8007252 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80071ac:	4b2b      	ldr	r3, [pc, #172]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80071b8:	4b28      	ldr	r3, [pc, #160]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	4a27      	ldr	r2, [pc, #156]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071c4:	f7fb fa60 	bl	8002688 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071cc:	f7fb fa5c 	bl	8002688 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e03a      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80071de:	4b1f      	ldr	r3, [pc, #124]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0f0      	beq.n	80071cc <HAL_RCC_OscConfig+0x734>
 80071ea:	e032      	b.n	8007252 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b0c      	cmp	r3, #12
 80071f0:	d02d      	beq.n	800724e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b1a      	ldr	r3, [pc, #104]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 80071f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80071fe:	4b17      	ldr	r3, [pc, #92]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d105      	bne.n	8007216 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	4a13      	ldr	r2, [pc, #76]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007216:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	4a10      	ldr	r2, [pc, #64]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 800721c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007224:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007226:	f7fb fa2f 	bl	8002688 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800722e:	f7fb fa2b 	bl	8002688 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e009      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <HAL_RCC_OscConfig+0x7c4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f0      	bne.n	800722e <HAL_RCC_OscConfig+0x796>
 800724c:	e001      	b.n	8007252 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40021000 	.word	0x40021000
 8007260:	f99d808c 	.word	0xf99d808c

08007264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e0c8      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007278:	4b66      	ldr	r3, [pc, #408]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d910      	bls.n	80072a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007286:	4b63      	ldr	r3, [pc, #396]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f023 0207 	bic.w	r2, r3, #7
 800728e:	4961      	ldr	r1, [pc, #388]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007296:	4b5f      	ldr	r3, [pc, #380]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d001      	beq.n	80072a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0b0      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d04c      	beq.n	800734e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d107      	bne.n	80072cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072bc:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d121      	bne.n	800730c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e09e      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072d4:	4b50      	ldr	r3, [pc, #320]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d115      	bne.n	800730c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e092      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d107      	bne.n	80072fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072ec:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e086      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072fc:	4b46      	ldr	r3, [pc, #280]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e07e      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800730c:	4b42      	ldr	r3, [pc, #264]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f023 0203 	bic.w	r2, r3, #3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	493f      	ldr	r1, [pc, #252]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731e:	f7fb f9b3 	bl	8002688 <HAL_GetTick>
 8007322:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007324:	e00a      	b.n	800733c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007326:	f7fb f9af 	bl	8002688 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	; 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e066      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733c:	4b36      	ldr	r3, [pc, #216]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 020c 	and.w	r2, r3, #12
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	429a      	cmp	r2, r3
 800734c:	d1eb      	bne.n	8007326 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800735a:	4b2f      	ldr	r3, [pc, #188]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	492c      	ldr	r1, [pc, #176]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800736c:	4b29      	ldr	r3, [pc, #164]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d210      	bcs.n	800739c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	4b26      	ldr	r3, [pc, #152]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f023 0207 	bic.w	r2, r3, #7
 8007382:	4924      	ldr	r1, [pc, #144]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	4313      	orrs	r3, r2
 8007388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800738a:	4b22      	ldr	r3, [pc, #136]	; (8007414 <HAL_RCC_ClockConfig+0x1b0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0307 	and.w	r3, r3, #7
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d001      	beq.n	800739c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e036      	b.n	800740a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073a8:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	4918      	ldr	r1, [pc, #96]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80073b6:	4313      	orrs	r3, r2
 80073b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0308 	and.w	r3, r3, #8
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4910      	ldr	r1, [pc, #64]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073da:	f000 f825 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80073de:	4601      	mov	r1, r0
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <HAL_RCC_ClockConfig+0x1b4>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	091b      	lsrs	r3, r3, #4
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	4a0c      	ldr	r2, [pc, #48]	; (800741c <HAL_RCC_ClockConfig+0x1b8>)
 80073ec:	5cd3      	ldrb	r3, [r2, r3]
 80073ee:	f003 031f 	and.w	r3, r3, #31
 80073f2:	fa21 f303 	lsr.w	r3, r1, r3
 80073f6:	4a0a      	ldr	r2, [pc, #40]	; (8007420 <HAL_RCC_ClockConfig+0x1bc>)
 80073f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073fa:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <HAL_RCC_ClockConfig+0x1c0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fb f8f2 	bl	80025e8 <HAL_InitTick>
 8007404:	4603      	mov	r3, r0
 8007406:	72fb      	strb	r3, [r7, #11]

  return status;
 8007408:	7afb      	ldrb	r3, [r7, #11]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40022000 	.word	0x40022000
 8007418:	40021000 	.word	0x40021000
 800741c:	0800f754 	.word	0x0800f754
 8007420:	20000008 	.word	0x20000008
 8007424:	2000000c 	.word	0x2000000c

08007428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007428:	b480      	push	{r7}
 800742a:	b089      	sub	sp, #36	; 0x24
 800742c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007436:	4b3d      	ldr	r3, [pc, #244]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 030c 	and.w	r3, r3, #12
 800743e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007440:	4b3a      	ldr	r3, [pc, #232]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0303 	and.w	r3, r3, #3
 8007448:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_GetSysClockFreq+0x34>
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b0c      	cmp	r3, #12
 8007454:	d121      	bne.n	800749a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d11e      	bne.n	800749a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800745c:	4b33      	ldr	r3, [pc, #204]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d107      	bne.n	8007478 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007468:	4b30      	ldr	r3, [pc, #192]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 800746a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800746e:	0a1b      	lsrs	r3, r3, #8
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	e005      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007478:	4b2c      	ldr	r3, [pc, #176]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <HAL_RCC_GetSysClockFreq+0x108>)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10d      	bne.n	80074b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007498:	e00a      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b04      	cmp	r3, #4
 800749e:	d102      	bne.n	80074a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074a0:	4b24      	ldr	r3, [pc, #144]	; (8007534 <HAL_RCC_GetSysClockFreq+0x10c>)
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e004      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d101      	bne.n	80074b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074ac:	4b22      	ldr	r3, [pc, #136]	; (8007538 <HAL_RCC_GetSysClockFreq+0x110>)
 80074ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b0c      	cmp	r3, #12
 80074b4:	d133      	bne.n	800751e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074b6:	4b1d      	ldr	r3, [pc, #116]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d002      	beq.n	80074cc <HAL_RCC_GetSysClockFreq+0xa4>
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d003      	beq.n	80074d2 <HAL_RCC_GetSysClockFreq+0xaa>
 80074ca:	e005      	b.n	80074d8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80074cc:	4b19      	ldr	r3, [pc, #100]	; (8007534 <HAL_RCC_GetSysClockFreq+0x10c>)
 80074ce:	617b      	str	r3, [r7, #20]
      break;
 80074d0:	e005      	b.n	80074de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80074d2:	4b19      	ldr	r3, [pc, #100]	; (8007538 <HAL_RCC_GetSysClockFreq+0x110>)
 80074d4:	617b      	str	r3, [r7, #20]
      break;
 80074d6:	e002      	b.n	80074de <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	617b      	str	r3, [r7, #20]
      break;
 80074dc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074de:	4b13      	ldr	r3, [pc, #76]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	091b      	lsrs	r3, r3, #4
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	3301      	adds	r3, #1
 80074ea:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	fb02 f203 	mul.w	r2, r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007502:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <HAL_RCC_GetSysClockFreq+0x104>)
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	0e5b      	lsrs	r3, r3, #25
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	3301      	adds	r3, #1
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800751e:	69bb      	ldr	r3, [r7, #24]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3724      	adds	r7, #36	; 0x24
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	40021000 	.word	0x40021000
 8007530:	0800f76c 	.word	0x0800f76c
 8007534:	00f42400 	.word	0x00f42400
 8007538:	007a1200 	.word	0x007a1200

0800753c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <HAL_RCC_GetHCLKFreq+0x14>)
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	4618      	mov	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20000008 	.word	0x20000008

08007554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007558:	f7ff fff0 	bl	800753c <HAL_RCC_GetHCLKFreq>
 800755c:	4601      	mov	r1, r0
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	0a1b      	lsrs	r3, r3, #8
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	4a04      	ldr	r2, [pc, #16]	; (800757c <HAL_RCC_GetPCLK1Freq+0x28>)
 800756a:	5cd3      	ldrb	r3, [r2, r3]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007574:	4618      	mov	r0, r3
 8007576:	bd80      	pop	{r7, pc}
 8007578:	40021000 	.word	0x40021000
 800757c:	0800f764 	.word	0x0800f764

08007580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007584:	f7ff ffda 	bl	800753c <HAL_RCC_GetHCLKFreq>
 8007588:	4601      	mov	r1, r0
 800758a:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	0adb      	lsrs	r3, r3, #11
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007596:	5cd3      	ldrb	r3, [r2, r3]
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40021000 	.word	0x40021000
 80075a8:	0800f764 	.word	0x0800f764

080075ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80075c4:	f7ff f938 	bl	8006838 <HAL_PWREx_GetVoltageRange>
 80075c8:	6178      	str	r0, [r7, #20]
 80075ca:	e014      	b.n	80075f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d6:	6593      	str	r3, [r2, #88]	; 0x58
 80075d8:	4b22      	ldr	r3, [pc, #136]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075e4:	f7ff f928 	bl	8006838 <HAL_PWREx_GetVoltageRange>
 80075e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80075ea:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fc:	d10b      	bne.n	8007616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d919      	bls.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2ba0      	cmp	r3, #160	; 0xa0
 8007608:	d902      	bls.n	8007610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800760a:	2302      	movs	r3, #2
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	e013      	b.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007610:	2301      	movs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	e010      	b.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b80      	cmp	r3, #128	; 0x80
 800761a:	d902      	bls.n	8007622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800761c:	2303      	movs	r3, #3
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	e00a      	b.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d102      	bne.n	800762e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007628:	2302      	movs	r3, #2
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	e004      	b.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b70      	cmp	r3, #112	; 0x70
 8007632:	d101      	bne.n	8007638 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007634:	2301      	movs	r3, #1
 8007636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f023 0207 	bic.w	r2, r3, #7
 8007640:	4909      	ldr	r1, [pc, #36]	; (8007668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0307 	and.w	r3, r3, #7
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	429a      	cmp	r2, r3
 8007654:	d001      	beq.n	800765a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40021000 	.word	0x40021000
 8007668:	40022000 	.word	0x40022000

0800766c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007674:	2300      	movs	r3, #0
 8007676:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007678:	2300      	movs	r3, #0
 800767a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007684:	2b00      	cmp	r3, #0
 8007686:	d03f      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007690:	d01c      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007696:	d802      	bhi.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00e      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800769c:	e01f      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x72>
 800769e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076a2:	d003      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x40>
 80076a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076a8:	d01c      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80076aa:	e018      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80076ac:	4b85      	ldr	r3, [pc, #532]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	4a84      	ldr	r2, [pc, #528]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076b8:	e015      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3304      	adds	r3, #4
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 ff3f 	bl	8008544 <RCCEx_PLLSAI1_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076ca:	e00c      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3320      	adds	r3, #32
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f001 f826 	bl	8008724 <RCCEx_PLLSAI2_Config>
 80076d8:	4603      	mov	r3, r0
 80076da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076dc:	e003      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	74fb      	strb	r3, [r7, #19]
      break;
 80076e2:	e000      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80076e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e6:	7cfb      	ldrb	r3, [r7, #19]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076ec:	4b75      	ldr	r3, [pc, #468]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076fa:	4972      	ldr	r1, [pc, #456]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007702:	e001      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	7cfb      	ldrb	r3, [r7, #19]
 8007706:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d03f      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800771c:	d01c      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800771e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007722:	d802      	bhi.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007728:	e01f      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772e:	d003      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007730:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007734:	d01c      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007736:	e018      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007738:	4b62      	ldr	r3, [pc, #392]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	4a61      	ldr	r2, [pc, #388]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800773e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007742:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007744:	e015      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3304      	adds	r3, #4
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f000 fef9 	bl	8008544 <RCCEx_PLLSAI1_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007756:	e00c      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3320      	adds	r3, #32
 800775c:	2100      	movs	r1, #0
 800775e:	4618      	mov	r0, r3
 8007760:	f000 ffe0 	bl	8008724 <RCCEx_PLLSAI2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007768:	e003      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	74fb      	strb	r3, [r7, #19]
      break;
 800776e:	e000      	b.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007772:	7cfb      	ldrb	r3, [r7, #19]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007778:	4b52      	ldr	r3, [pc, #328]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007786:	494f      	ldr	r1, [pc, #316]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007788:	4313      	orrs	r3, r2
 800778a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800778e:	e001      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007790:	7cfb      	ldrb	r3, [r7, #19]
 8007792:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 80a0 	beq.w	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077a2:	2300      	movs	r3, #0
 80077a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077a6:	4b47      	ldr	r3, [pc, #284]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80077b6:	2300      	movs	r3, #0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00d      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077bc:	4b41      	ldr	r3, [pc, #260]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	4a40      	ldr	r2, [pc, #256]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c6:	6593      	str	r3, [r2, #88]	; 0x58
 80077c8:	4b3e      	ldr	r3, [pc, #248]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077d4:	2301      	movs	r3, #1
 80077d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077d8:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3a      	ldr	r2, [pc, #232]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80077de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077e4:	f7fa ff50 	bl	8002688 <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80077ea:	e009      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ec:	f7fa ff4c 	bl	8002688 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d902      	bls.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	74fb      	strb	r3, [r7, #19]
        break;
 80077fe:	e005      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007800:	4b31      	ldr	r3, [pc, #196]	; (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0ef      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d15c      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007812:	4b2c      	ldr	r3, [pc, #176]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	429a      	cmp	r2, r3
 800782e:	d019      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007830:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800783a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800783c:	4b21      	ldr	r3, [pc, #132]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800783e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007842:	4a20      	ldr	r2, [pc, #128]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800784c:	4b1d      	ldr	r3, [pc, #116]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	4a1c      	ldr	r2, [pc, #112]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800785c:	4a19      	ldr	r2, [pc, #100]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d016      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786e:	f7fa ff0b 	bl	8002688 <HAL_GetTick>
 8007872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007874:	e00b      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007876:	f7fa ff07 	bl	8002688 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	f241 3288 	movw	r2, #5000	; 0x1388
 8007884:	4293      	cmp	r3, r2
 8007886:	d902      	bls.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	74fb      	strb	r3, [r7, #19]
            break;
 800788c:	e006      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800788e:	4b0d      	ldr	r3, [pc, #52]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0ec      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10c      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b2:	4904      	ldr	r1, [pc, #16]	; (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80078ba:	e009      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	74bb      	strb	r3, [r7, #18]
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80078c2:	bf00      	nop
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	7cfb      	ldrb	r3, [r7, #19]
 80078ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078d0:	7c7b      	ldrb	r3, [r7, #17]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d105      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078d6:	4b9e      	ldr	r3, [pc, #632]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	4a9d      	ldr	r2, [pc, #628]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078ee:	4b98      	ldr	r3, [pc, #608]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f4:	f023 0203 	bic.w	r2, r3, #3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fc:	4994      	ldr	r1, [pc, #592]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007910:	4b8f      	ldr	r3, [pc, #572]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007916:	f023 020c 	bic.w	r2, r3, #12
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791e:	498c      	ldr	r1, [pc, #560]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007920:	4313      	orrs	r3, r2
 8007922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	4983      	ldr	r1, [pc, #524]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0308 	and.w	r3, r3, #8
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007954:	4b7e      	ldr	r3, [pc, #504]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	497b      	ldr	r1, [pc, #492]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007976:	4b76      	ldr	r3, [pc, #472]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007984:	4972      	ldr	r1, [pc, #456]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00a      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007998:	4b6d      	ldr	r3, [pc, #436]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800799a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800799e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a6:	496a      	ldr	r1, [pc, #424]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80079ba:	4b65      	ldr	r3, [pc, #404]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c8:	4961      	ldr	r1, [pc, #388]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079dc:	4b5c      	ldr	r3, [pc, #368]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ea:	4959      	ldr	r1, [pc, #356]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00a      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079fe:	4b54      	ldr	r3, [pc, #336]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	4950      	ldr	r1, [pc, #320]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00a      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a20:	4b4b      	ldr	r3, [pc, #300]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	4948      	ldr	r1, [pc, #288]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a42:	4b43      	ldr	r3, [pc, #268]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	493f      	ldr	r1, [pc, #252]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d028      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a64:	4b3a      	ldr	r3, [pc, #232]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a72:	4937      	ldr	r1, [pc, #220]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a82:	d106      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a84:	4b32      	ldr	r3, [pc, #200]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	4a31      	ldr	r2, [pc, #196]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a8e:	60d3      	str	r3, [r2, #12]
 8007a90:	e011      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a9a:	d10c      	bne.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fd4e 	bl	8008544 <RCCEx_PLLSAI1_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007aac:	7cfb      	ldrb	r3, [r7, #19]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8007ab2:	7cfb      	ldrb	r3, [r7, #19]
 8007ab4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d028      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ac2:	4b23      	ldr	r3, [pc, #140]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	491f      	ldr	r1, [pc, #124]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae0:	d106      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	4a1a      	ldr	r2, [pc, #104]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aec:	60d3      	str	r3, [r2, #12]
 8007aee:	e011      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007af8:	d10c      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3304      	adds	r3, #4
 8007afe:	2101      	movs	r1, #1
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fd1f 	bl	8008544 <RCCEx_PLLSAI1_Config>
 8007b06:	4603      	mov	r3, r0
 8007b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b0a:	7cfb      	ldrb	r3, [r7, #19]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007b10:	7cfb      	ldrb	r3, [r7, #19]
 8007b12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d02b      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2e:	4908      	ldr	r1, [pc, #32]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b3e:	d109      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	4a02      	ldr	r2, [pc, #8]	; (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b4a:	60d3      	str	r3, [r2, #12]
 8007b4c:	e014      	b.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007b4e:	bf00      	nop
 8007b50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b5c:	d10c      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3304      	adds	r3, #4
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fced 	bl	8008544 <RCCEx_PLLSAI1_Config>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b6e:	7cfb      	ldrb	r3, [r7, #19]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02f      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b84:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b92:	4928      	ldr	r1, [pc, #160]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba2:	d10d      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	2102      	movs	r1, #2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fcca 	bl	8008544 <RCCEx_PLLSAI1_Config>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bb4:	7cfb      	ldrb	r3, [r7, #19]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d014      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007bba:	7cfb      	ldrb	r3, [r7, #19]
 8007bbc:	74bb      	strb	r3, [r7, #18]
 8007bbe:	e011      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bc8:	d10c      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3320      	adds	r3, #32
 8007bce:	2102      	movs	r1, #2
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fda7 	bl	8008724 <RCCEx_PLLSAI2_Config>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bda:	7cfb      	ldrb	r3, [r7, #19]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007be0:	7cfb      	ldrb	r3, [r7, #19]
 8007be2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bf0:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfe:	490d      	ldr	r1, [pc, #52]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c12:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c22:	4904      	ldr	r1, [pc, #16]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007c2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40021000 	.word	0x40021000

08007c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c4a:	d137      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007c4c:	4bb8      	ldr	r3, [pc, #736]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c56:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5e:	d014      	beq.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c64:	d01e      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d001      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007c6c:	f000 bc60 	b.w	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c70:	4baf      	ldr	r3, [pc, #700]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	f040 8453 	bne.w	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 8007c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c84:	61fb      	str	r3, [r7, #28]
      break;
 8007c86:	f000 bc4e 	b.w	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007c8a:	4ba9      	ldr	r3, [pc, #676]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	f040 8448 	bne.w	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 8007c9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c9e:	61fb      	str	r3, [r7, #28]
      break;
 8007ca0:	f000 bc43 	b.w	800852a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ca4:	4ba2      	ldr	r3, [pc, #648]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb0:	f040 843d 	bne.w	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 8007cb4:	4b9f      	ldr	r3, [pc, #636]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8007cb6:	61fb      	str	r3, [r7, #28]
      break;
 8007cb8:	f000 bc39 	b.w	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cbc:	4b9c      	ldr	r3, [pc, #624]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d023      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d02e      	beq.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d139      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007cd4:	4b96      	ldr	r3, [pc, #600]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d116      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007ce0:	4b93      	ldr	r3, [pc, #588]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8007cec:	4b90      	ldr	r3, [pc, #576]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	091b      	lsrs	r3, r3, #4
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	e005      	b.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007cf8:	4b8d      	ldr	r3, [pc, #564]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cfe:	0a1b      	lsrs	r3, r3, #8
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	4a8c      	ldr	r2, [pc, #560]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d0a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d0c:	e01f      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61bb      	str	r3, [r7, #24]
      break;
 8007d12:	e01c      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d14:	4b86      	ldr	r3, [pc, #536]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d20:	d102      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 8007d22:	4b86      	ldr	r3, [pc, #536]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8007d24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d26:	e012      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61bb      	str	r3, [r7, #24]
      break;
 8007d2c:	e00f      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007d2e:	4b80      	ldr	r3, [pc, #512]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d3a:	d102      	bne.n	8007d42 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8007d3c:	4b80      	ldr	r3, [pc, #512]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8007d3e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007d40:	e005      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
      break;
 8007d46:	e002      	b.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]
      break;
 8007d4c:	bf00      	nop
    }

    switch(PeriphClk)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d54:	f000 8345 	beq.w	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8007d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5c:	d825      	bhi.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	f000 81df 	beq.w	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d80f      	bhi.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	f000 8128 	beq.w	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d803      	bhi.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	f000 80ec 	beq.w	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8007d78:	e3da      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	f000 8169 	beq.w	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	f000 819a 	beq.w	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 8007d86:	e3d3      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007d88:	2b40      	cmp	r3, #64	; 0x40
 8007d8a:	f000 82c1 	beq.w	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d803      	bhi.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	f000 81fd 	beq.w	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 8007d98:	e3ca      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007d9a:	2b80      	cmp	r3, #128	; 0x80
 8007d9c:	f000 82db 	beq.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 8007da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da4:	f000 82fa 	beq.w	800839c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 8007da8:	e3c2      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dae:	f000 822d 	beq.w	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8007db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007db6:	d811      	bhi.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dbc:	d021      	beq.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc2:	d804      	bhi.n	8007dce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc8:	f000 834c 	beq.w	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 8007dcc:	e3b0      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	d01d      	beq.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8007dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dd8:	d021      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007dda:	e3a9      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	f000 8285 	beq.w	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8007de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de8:	d804      	bhi.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dee:	f000 837e 	beq.w	80084ee <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 8007df2:	e39d      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007df8:	d011      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007dfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dfe:	d00e      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007e00:	e396      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007e02:	69b9      	ldr	r1, [r7, #24]
 8007e04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e08:	f000 fd66 	bl	80088d8 <RCCEx_GetSAIxPeriphCLKFreq>
 8007e0c:	61f8      	str	r0, [r7, #28]
      break;
 8007e0e:	e38f      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007e10:	69b9      	ldr	r1, [r7, #24]
 8007e12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e16:	f000 fd5f 	bl	80088d8 <RCCEx_GetSAIxPeriphCLKFreq>
 8007e1a:	61f8      	str	r0, [r7, #28]
      break;
 8007e1c:	e388      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007e1e:	4b44      	ldr	r3, [pc, #272]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007e28:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e30:	d023      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 8007e32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007e36:	d003      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007e38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e3c:	d04a      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8007e3e:	e086      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007e40:	4b3b      	ldr	r3, [pc, #236]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d17b      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007e4c:	4b38      	ldr	r3, [pc, #224]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007e58:	4b35      	ldr	r3, [pc, #212]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	e005      	b.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 8007e64:	4b32      	ldr	r3, [pc, #200]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	f003 030f 	and.w	r3, r3, #15
 8007e70:	4a31      	ldr	r2, [pc, #196]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8007e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e76:	61fb      	str	r3, [r7, #28]
          break;
 8007e78:	e064      	b.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007e7a:	4b2d      	ldr	r3, [pc, #180]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e86:	d15f      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007e88:	4b29      	ldr	r3, [pc, #164]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e94:	d158      	bne.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007e96:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	fb02 f203 	mul.w	r2, r2, r3
 8007eaa:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eba:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007ebc:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	0d5b      	lsrs	r3, r3, #21
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed0:	61fb      	str	r3, [r7, #28]
          break;
 8007ed2:	e039      	b.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8007ed4:	4b16      	ldr	r3, [pc, #88]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ee0:	d134      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8007ee2:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eee:	d12d      	bne.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	0a1b      	lsrs	r3, r3, #8
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	fb02 f203 	mul.w	r2, r2, r3
 8007f04:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	091b      	lsrs	r3, r3, #4
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	3301      	adds	r3, #1
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	0d5b      	lsrs	r3, r3, #21
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	3301      	adds	r3, #1
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2a:	61fb      	str	r3, [r7, #28]
          break;
 8007f2c:	e00e      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007f2e:	bf00      	nop
 8007f30:	40021000 	.word	0x40021000
 8007f34:	0003d090 	.word	0x0003d090
 8007f38:	0800f76c 	.word	0x0800f76c
 8007f3c:	00f42400 	.word	0x00f42400
 8007f40:	007a1200 	.word	0x007a1200
          break;
 8007f44:	bf00      	nop
 8007f46:	e2f3      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007f48:	bf00      	nop
 8007f4a:	e2f1      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007f4c:	bf00      	nop
        break;
 8007f4e:	e2ef      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007f50:	4bac      	ldr	r3, [pc, #688]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	d827      	bhi.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8007f62:	a201      	add	r2, pc, #4	; (adr r2, 8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8007f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f81 	.word	0x08007f81
 8007f70:	08007f89 	.word	0x08007f89
 8007f74:	08007f9d 	.word	0x08007f9d
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f78:	f7ff fb02 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 8007f7c:	61f8      	str	r0, [r7, #28]
          break;
 8007f7e:	e01d      	b.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f80:	f7ff fa52 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8007f84:	61f8      	str	r0, [r7, #28]
          break;
 8007f86:	e019      	b.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f88:	4b9e      	ldr	r3, [pc, #632]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d10f      	bne.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 8007f96:	4b9c      	ldr	r3, [pc, #624]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007f98:	61fb      	str	r3, [r7, #28]
          break;
 8007f9a:	e00c      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f9c:	4b99      	ldr	r3, [pc, #612]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d107      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 8007faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fae:	61fb      	str	r3, [r7, #28]
          break;
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 8007fb2:	bf00      	nop
 8007fb4:	e2bc      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007fb6:	bf00      	nop
 8007fb8:	e2ba      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007fba:	bf00      	nop
        break;
 8007fbc:	e2b8      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007fbe:	4b91      	ldr	r3, [pc, #580]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fc4:	f003 030c 	and.w	r3, r3, #12
 8007fc8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b0c      	cmp	r3, #12
 8007fce:	d83a      	bhi.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007fd0:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 8007fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd6:	bf00      	nop
 8007fd8:	0800800d 	.word	0x0800800d
 8007fdc:	08008047 	.word	0x08008047
 8007fe0:	08008047 	.word	0x08008047
 8007fe4:	08008047 	.word	0x08008047
 8007fe8:	08008015 	.word	0x08008015
 8007fec:	08008047 	.word	0x08008047
 8007ff0:	08008047 	.word	0x08008047
 8007ff4:	08008047 	.word	0x08008047
 8007ff8:	0800801d 	.word	0x0800801d
 8007ffc:	08008047 	.word	0x08008047
 8008000:	08008047 	.word	0x08008047
 8008004:	08008047 	.word	0x08008047
 8008008:	08008031 	.word	0x08008031
          frequency = HAL_RCC_GetPCLK1Freq();
 800800c:	f7ff faa2 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008010:	61f8      	str	r0, [r7, #28]
          break;
 8008012:	e01d      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8008014:	f7ff fa08 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8008018:	61f8      	str	r0, [r7, #28]
          break;
 800801a:	e019      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800801c:	4b79      	ldr	r3, [pc, #484]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008028:	d10f      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 800802a:	4b77      	ldr	r3, [pc, #476]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800802c:	61fb      	str	r3, [r7, #28]
          break;
 800802e:	e00c      	b.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008030:	4b74      	ldr	r3, [pc, #464]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	d107      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 800803e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008042:	61fb      	str	r3, [r7, #28]
          break;
 8008044:	e003      	b.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8008046:	bf00      	nop
 8008048:	e272      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800804a:	bf00      	nop
 800804c:	e270      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800804e:	bf00      	nop
        break;
 8008050:	e26e      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008052:	4b6c      	ldr	r3, [pc, #432]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800805c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	2b10      	cmp	r3, #16
 8008062:	d00d      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8008064:	2b10      	cmp	r3, #16
 8008066:	d802      	bhi.n	800806e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d005      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 800806c:	e024      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 800806e:	2b20      	cmp	r3, #32
 8008070:	d00a      	beq.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8008072:	2b30      	cmp	r3, #48	; 0x30
 8008074:	d012      	beq.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8008076:	e01f      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008078:	f7ff fa6c 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800807c:	61f8      	str	r0, [r7, #28]
          break;
 800807e:	e01b      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8008080:	f7ff f9d2 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8008084:	61f8      	str	r0, [r7, #28]
          break;
 8008086:	e017      	b.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008088:	4b5e      	ldr	r3, [pc, #376]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008094:	d10d      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8008096:	4b5c      	ldr	r3, [pc, #368]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008098:	61fb      	str	r3, [r7, #28]
          break;
 800809a:	e00a      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800809c:	4b59      	ldr	r3, [pc, #356]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d105      	bne.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 80080aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ae:	61fb      	str	r3, [r7, #28]
          break;
 80080b0:	e001      	b.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80080b2:	bf00      	nop
 80080b4:	e23c      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80080b6:	bf00      	nop
        break;
 80080b8:	e23a      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80080ba:	4b52      	ldr	r3, [pc, #328]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080c4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b40      	cmp	r3, #64	; 0x40
 80080ca:	d00d      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d802      	bhi.n	80080d6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 80080d4:	e024      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 80080d6:	2b80      	cmp	r3, #128	; 0x80
 80080d8:	d00a      	beq.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80080da:	2bc0      	cmp	r3, #192	; 0xc0
 80080dc:	d012      	beq.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 80080de:	e01f      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80080e0:	f7ff fa38 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 80080e4:	61f8      	str	r0, [r7, #28]
          break;
 80080e6:	e01b      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80080e8:	f7ff f99e 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80080ec:	61f8      	str	r0, [r7, #28]
          break;
 80080ee:	e017      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080f0:	4b44      	ldr	r3, [pc, #272]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d10d      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 80080fe:	4b42      	ldr	r3, [pc, #264]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008100:	61fb      	str	r3, [r7, #28]
          break;
 8008102:	e00a      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008104:	4b3f      	ldr	r3, [pc, #252]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	d105      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8008112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008116:	61fb      	str	r3, [r7, #28]
          break;
 8008118:	e001      	b.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 800811a:	bf00      	nop
 800811c:	e208      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800811e:	bf00      	nop
        break;
 8008120:	e206      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008122:	4b38      	ldr	r3, [pc, #224]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800812c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008134:	d010      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8008136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800813a:	d802      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8008140:	e026      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8008142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008146:	d00b      	beq.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814c:	d012      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 800814e:	e01f      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008150:	f7ff fa00 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008154:	61f8      	str	r0, [r7, #28]
          break;
 8008156:	e01b      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8008158:	f7ff f966 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800815c:	61f8      	str	r0, [r7, #28]
          break;
 800815e:	e017      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816c:	d10d      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 800816e:	4b26      	ldr	r3, [pc, #152]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008170:	61fb      	str	r3, [r7, #28]
          break;
 8008172:	e00a      	b.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008174:	4b23      	ldr	r3, [pc, #140]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d105      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	61fb      	str	r3, [r7, #28]
          break;
 8008188:	e001      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 800818a:	bf00      	nop
 800818c:	e1d0      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800818e:	bf00      	nop
        break;
 8008190:	e1ce      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8008194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800819c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a4:	d010      	beq.n	80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081aa:	d802      	bhi.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 80081b0:	e026      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 80081b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b6:	d00b      	beq.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 80081b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081bc:	d012      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 80081be:	e01f      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80081c0:	f7ff f9c8 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 80081c4:	61f8      	str	r0, [r7, #28]
          break;
 80081c6:	e01b      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 80081c8:	f7ff f92e 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80081cc:	61f8      	str	r0, [r7, #28]
          break;
 80081ce:	e017      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081dc:	d10d      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 80081de:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80081e0:	61fb      	str	r3, [r7, #28]
          break;
 80081e2:	e00a      	b.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d105      	bne.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 80081f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081f6:	61fb      	str	r3, [r7, #28]
          break;
 80081f8:	e001      	b.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 80081fa:	bf00      	nop
 80081fc:	e198      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80081fe:	bf00      	nop
        break;
 8008200:	e196      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008202:	bf00      	nop
 8008204:	40021000 	.word	0x40021000
 8008208:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800820c:	4bad      	ldr	r3, [pc, #692]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800820e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008216:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800821e:	d036      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8008220:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008224:	d003      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8008226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800822a:	d004      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 800822c:	e05e      	b.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 800822e:	f7ff f8fb 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8008232:	61f8      	str	r0, [r7, #28]
          break;
 8008234:	e05a      	b.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8008236:	4ba3      	ldr	r3, [pc, #652]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800823e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008242:	d150      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008244:	4b9f      	ldr	r3, [pc, #636]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d04a      	beq.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008250:	4b9c      	ldr	r3, [pc, #624]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	0a1b      	lsrs	r3, r3, #8
 8008256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	fb02 f203 	mul.w	r2, r2, r3
 8008264:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	091b      	lsrs	r3, r3, #4
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	3301      	adds	r3, #1
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8008276:	4b93      	ldr	r3, [pc, #588]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	0e5b      	lsrs	r3, r3, #25
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	3301      	adds	r3, #1
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	61fb      	str	r3, [r7, #28]
          break;
 800828c:	e02b      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800828e:	4b8d      	ldr	r3, [pc, #564]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800829a:	d126      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 800829c:	4b89      	ldr	r3, [pc, #548]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d020      	beq.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80082a8:	4b86      	ldr	r3, [pc, #536]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	0a1b      	lsrs	r3, r3, #8
 80082ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	fb02 f203 	mul.w	r2, r2, r3
 80082bc:	4b81      	ldr	r3, [pc, #516]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	3301      	adds	r3, #1
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80082ce:	4b7d      	ldr	r3, [pc, #500]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	0e5b      	lsrs	r3, r3, #25
 80082d4:	f003 0303 	and.w	r3, r3, #3
 80082d8:	3301      	adds	r3, #1
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e2:	61fb      	str	r3, [r7, #28]
          break;
 80082e4:	e001      	b.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 80082e6:	bf00      	nop
 80082e8:	e122      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80082ea:	bf00      	nop
        break;
 80082ec:	e120      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80082ee:	4b75      	ldr	r3, [pc, #468]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082f8:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d103      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8008300:	f7ff f93e 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 8008304:	61f8      	str	r0, [r7, #28]
        break;
 8008306:	e113      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8008308:	f7ff f88e 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800830c:	61f8      	str	r0, [r7, #28]
        break;
 800830e:	e10f      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008310:	4b6c      	ldr	r3, [pc, #432]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008316:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800831a:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008322:	d009      	beq.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008328:	d00a      	beq.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d000      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 800832e:	e011      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008330:	f7ff f910 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008334:	61f8      	str	r0, [r7, #28]
          break;
 8008336:	e00d      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008338:	f7ff f876 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800833c:	61f8      	str	r0, [r7, #28]
          break;
 800833e:	e009      	b.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008340:	4b60      	ldr	r3, [pc, #384]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800834c:	d101      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 800834e:	4b5e      	ldr	r3, [pc, #376]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8008350:	61fb      	str	r3, [r7, #28]
          break;
 8008352:	bf00      	nop
        break;
 8008354:	e0ec      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008356:	4b5b      	ldr	r3, [pc, #364]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008360:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008368:	d009      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800836a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800836e:	d00a      	beq.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d000      	beq.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8008374:	e011      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008376:	f7ff f8ed 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800837a:	61f8      	str	r0, [r7, #28]
          break;
 800837c:	e00d      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 800837e:	f7ff f853 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 8008382:	61f8      	str	r0, [r7, #28]
          break;
 8008384:	e009      	b.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008386:	4b4f      	ldr	r3, [pc, #316]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800838e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008392:	d101      	bne.n	8008398 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 8008394:	4b4c      	ldr	r3, [pc, #304]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8008396:	61fb      	str	r3, [r7, #28]
          break;
 8008398:	bf00      	nop
        break;
 800839a:	e0c9      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800839c:	4b49      	ldr	r3, [pc, #292]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083a6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ae:	d009      	beq.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 80083b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b4:	d00a      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d000      	beq.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 80083ba:	e011      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80083bc:	f7ff f8ca 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 80083c0:	61f8      	str	r0, [r7, #28]
          break;
 80083c2:	e00d      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 80083c4:	f7ff f830 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 80083c8:	61f8      	str	r0, [r7, #28]
          break;
 80083ca:	e009      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083cc:	4b3d      	ldr	r3, [pc, #244]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d8:	d101      	bne.n	80083de <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 80083da:	4b3b      	ldr	r3, [pc, #236]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80083dc:	61fb      	str	r3, [r7, #28]
          break;
 80083de:	bf00      	nop
        break;
 80083e0:	e0a6      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80083e2:	4b38      	ldr	r3, [pc, #224]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80083e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80083ec:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083f4:	d010      	beq.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 80083f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083fa:	d802      	bhi.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d007      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 8008400:	e02f      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 8008402:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008406:	d012      	beq.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8008408:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800840c:	d019      	beq.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 800840e:	e028      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008410:	f7ff f8a0 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008414:	61f8      	str	r0, [r7, #28]
          break;
 8008416:	e024      	b.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008418:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800841a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800841e:	f003 0302 	and.w	r3, r3, #2
 8008422:	2b02      	cmp	r3, #2
 8008424:	d118      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 8008426:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800842a:	61fb      	str	r3, [r7, #28]
          break;
 800842c:	e014      	b.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800842e:	4b25      	ldr	r3, [pc, #148]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843a:	d10f      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 800843c:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 800843e:	61fb      	str	r3, [r7, #28]
          break;
 8008440:	e00c      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008442:	4b20      	ldr	r3, [pc, #128]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d107      	bne.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 8008450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008454:	61fb      	str	r3, [r7, #28]
          break;
 8008456:	e003      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8008458:	bf00      	nop
 800845a:	e069      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 800845c:	bf00      	nop
 800845e:	e067      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8008460:	bf00      	nop
        break;
 8008462:	e065      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008464:	4b17      	ldr	r3, [pc, #92]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8008466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800846e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008476:	d010      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8008478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800847c:	d802      	bhi.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d007      	beq.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8008482:	e033      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 8008484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008488:	d012      	beq.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 800848a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800848e:	d01d      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 8008490:	e02c      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008492:	f7ff f85f 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 8008496:	61f8      	str	r0, [r7, #28]
          break;
 8008498:	e028      	b.n	80084ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800849a:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 800849c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d11c      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 80084a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084ac:	61fb      	str	r3, [r7, #28]
          break;
 80084ae:	e018      	b.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084bc:	d113      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 80084c0:	61fb      	str	r3, [r7, #28]
          break;
 80084c2:	e010      	b.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80084c4:	40021000 	.word	0x40021000
 80084c8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d107      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	61fb      	str	r3, [r7, #28]
          break;
 80084e0:	e003      	b.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 80084e2:	bf00      	nop
 80084e4:	e024      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80084e6:	bf00      	nop
 80084e8:	e022      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80084ea:	bf00      	nop
        break;
 80084ec:	e020      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80084ee:	4b13      	ldr	r3, [pc, #76]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084f8:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008504:	d004      	beq.n	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 8008506:	e00d      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008508:	f7ff f824 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800850c:	61f8      	str	r0, [r7, #28]
          break;
 800850e:	e009      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008510:	4b0a      	ldr	r3, [pc, #40]	; (800853c <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851c:	d101      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 800851e:	4b08      	ldr	r3, [pc, #32]	; (8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 8008520:	61fb      	str	r3, [r7, #28]
          break;
 8008522:	bf00      	nop
        break;
 8008524:	e004      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8008526:	bf00      	nop
 8008528:	e002      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800852a:	bf00      	nop
 800852c:	e000      	b.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 800852e:	bf00      	nop
    }
  }

  return(frequency);
 8008530:	69fb      	ldr	r3, [r7, #28]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3720      	adds	r7, #32
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000
 8008540:	00f42400 	.word	0x00f42400

08008544 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008552:	4b73      	ldr	r3, [pc, #460]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d018      	beq.n	8008590 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800855e:	4b70      	ldr	r3, [pc, #448]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f003 0203 	and.w	r2, r3, #3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d10d      	bne.n	800858a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
       ||
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008576:	4b6a      	ldr	r3, [pc, #424]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	091b      	lsrs	r3, r3, #4
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
       ||
 8008586:	429a      	cmp	r2, r3
 8008588:	d044      	beq.n	8008614 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	e041      	b.n	8008614 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d00c      	beq.n	80085b2 <RCCEx_PLLSAI1_Config+0x6e>
 8008598:	2b03      	cmp	r3, #3
 800859a:	d013      	beq.n	80085c4 <RCCEx_PLLSAI1_Config+0x80>
 800859c:	2b01      	cmp	r3, #1
 800859e:	d120      	bne.n	80085e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80085a0:	4b5f      	ldr	r3, [pc, #380]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d11d      	bne.n	80085e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085b0:	e01a      	b.n	80085e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80085b2:	4b5b      	ldr	r3, [pc, #364]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d116      	bne.n	80085ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085c2:	e013      	b.n	80085ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80085c4:	4b56      	ldr	r3, [pc, #344]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10f      	bne.n	80085f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80085d0:	4b53      	ldr	r3, [pc, #332]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d109      	bne.n	80085f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085e0:	e006      	b.n	80085f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	73fb      	strb	r3, [r7, #15]
      break;
 80085e6:	e004      	b.n	80085f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085e8:	bf00      	nop
 80085ea:	e002      	b.n	80085f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085ec:	bf00      	nop
 80085ee:	e000      	b.n	80085f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80085f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10d      	bne.n	8008614 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80085f8:	4b49      	ldr	r3, [pc, #292]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	3b01      	subs	r3, #1
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	430b      	orrs	r3, r1
 800860e:	4944      	ldr	r1, [pc, #272]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008610:	4313      	orrs	r3, r2
 8008612:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d17d      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800861a:	4b41      	ldr	r3, [pc, #260]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a40      	ldr	r2, [pc, #256]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008620:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008626:	f7fa f82f 	bl	8002688 <HAL_GetTick>
 800862a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800862c:	e009      	b.n	8008642 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800862e:	f7fa f82b 	bl	8002688 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d902      	bls.n	8008642 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	73fb      	strb	r3, [r7, #15]
        break;
 8008640:	e005      	b.n	800864e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008642:	4b37      	ldr	r3, [pc, #220]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1ef      	bne.n	800862e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d160      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d111      	bne.n	800867e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800865a:	4b31      	ldr	r3, [pc, #196]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6892      	ldr	r2, [r2, #8]
 800866a:	0211      	lsls	r1, r2, #8
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68d2      	ldr	r2, [r2, #12]
 8008670:	0912      	lsrs	r2, r2, #4
 8008672:	0452      	lsls	r2, r2, #17
 8008674:	430a      	orrs	r2, r1
 8008676:	492a      	ldr	r1, [pc, #168]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008678:	4313      	orrs	r3, r2
 800867a:	610b      	str	r3, [r1, #16]
 800867c:	e027      	b.n	80086ce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d112      	bne.n	80086aa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008684:	4b26      	ldr	r3, [pc, #152]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800868c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6892      	ldr	r2, [r2, #8]
 8008694:	0211      	lsls	r1, r2, #8
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6912      	ldr	r2, [r2, #16]
 800869a:	0852      	lsrs	r2, r2, #1
 800869c:	3a01      	subs	r2, #1
 800869e:	0552      	lsls	r2, r2, #21
 80086a0:	430a      	orrs	r2, r1
 80086a2:	491f      	ldr	r1, [pc, #124]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	610b      	str	r3, [r1, #16]
 80086a8:	e011      	b.n	80086ce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086aa:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80086b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6892      	ldr	r2, [r2, #8]
 80086ba:	0211      	lsls	r1, r2, #8
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6952      	ldr	r2, [r2, #20]
 80086c0:	0852      	lsrs	r2, r2, #1
 80086c2:	3a01      	subs	r2, #1
 80086c4:	0652      	lsls	r2, r2, #25
 80086c6:	430a      	orrs	r2, r1
 80086c8:	4915      	ldr	r1, [pc, #84]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80086ce:	4b14      	ldr	r3, [pc, #80]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a13      	ldr	r2, [pc, #76]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086da:	f7f9 ffd5 	bl	8002688 <HAL_GetTick>
 80086de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086e0:	e009      	b.n	80086f6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086e2:	f7f9 ffd1 	bl	8002688 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d902      	bls.n	80086f6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	73fb      	strb	r3, [r7, #15]
          break;
 80086f4:	e005      	b.n	8008702 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	4903      	ldr	r1, [pc, #12]	; (8008720 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008712:	4313      	orrs	r3, r2
 8008714:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	40021000 	.word	0x40021000

08008724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008732:	4b68      	ldr	r3, [pc, #416]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d018      	beq.n	8008770 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800873e:	4b65      	ldr	r3, [pc, #404]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f003 0203 	and.w	r2, r3, #3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d10d      	bne.n	800876a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
       ||
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008756:	4b5f      	ldr	r3, [pc, #380]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	091b      	lsrs	r3, r3, #4
 800875c:	f003 0307 	and.w	r3, r3, #7
 8008760:	1c5a      	adds	r2, r3, #1
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
       ||
 8008766:	429a      	cmp	r2, r3
 8008768:	d044      	beq.n	80087f4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	73fb      	strb	r3, [r7, #15]
 800876e:	e041      	b.n	80087f4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d00c      	beq.n	8008792 <RCCEx_PLLSAI2_Config+0x6e>
 8008778:	2b03      	cmp	r3, #3
 800877a:	d013      	beq.n	80087a4 <RCCEx_PLLSAI2_Config+0x80>
 800877c:	2b01      	cmp	r3, #1
 800877e:	d120      	bne.n	80087c2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008780:	4b54      	ldr	r3, [pc, #336]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11d      	bne.n	80087c8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008790:	e01a      	b.n	80087c8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008792:	4b50      	ldr	r3, [pc, #320]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800879a:	2b00      	cmp	r3, #0
 800879c:	d116      	bne.n	80087cc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087a2:	e013      	b.n	80087cc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80087a4:	4b4b      	ldr	r3, [pc, #300]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10f      	bne.n	80087d0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80087b0:	4b48      	ldr	r3, [pc, #288]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087c0:	e006      	b.n	80087d0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	73fb      	strb	r3, [r7, #15]
      break;
 80087c6:	e004      	b.n	80087d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087c8:	bf00      	nop
 80087ca:	e002      	b.n	80087d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087cc:	bf00      	nop
 80087ce:	e000      	b.n	80087d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80087d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10d      	bne.n	80087f4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80087d8:	4b3e      	ldr	r3, [pc, #248]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	011b      	lsls	r3, r3, #4
 80087ec:	430b      	orrs	r3, r1
 80087ee:	4939      	ldr	r1, [pc, #228]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d167      	bne.n	80088ca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80087fa:	4b36      	ldr	r3, [pc, #216]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a35      	ldr	r2, [pc, #212]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7f9 ff3f 	bl	8002688 <HAL_GetTick>
 800880a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800880c:	e009      	b.n	8008822 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800880e:	f7f9 ff3b 	bl	8002688 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d902      	bls.n	8008822 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	73fb      	strb	r3, [r7, #15]
        break;
 8008820:	e005      	b.n	800882e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008822:	4b2c      	ldr	r3, [pc, #176]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1ef      	bne.n	800880e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d14a      	bne.n	80088ca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d111      	bne.n	800885e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800883a:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6892      	ldr	r2, [r2, #8]
 800884a:	0211      	lsls	r1, r2, #8
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	68d2      	ldr	r2, [r2, #12]
 8008850:	0912      	lsrs	r2, r2, #4
 8008852:	0452      	lsls	r2, r2, #17
 8008854:	430a      	orrs	r2, r1
 8008856:	491f      	ldr	r1, [pc, #124]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008858:	4313      	orrs	r3, r2
 800885a:	614b      	str	r3, [r1, #20]
 800885c:	e011      	b.n	8008882 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008866:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6892      	ldr	r2, [r2, #8]
 800886e:	0211      	lsls	r1, r2, #8
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6912      	ldr	r2, [r2, #16]
 8008874:	0852      	lsrs	r2, r2, #1
 8008876:	3a01      	subs	r2, #1
 8008878:	0652      	lsls	r2, r2, #25
 800887a:	430a      	orrs	r2, r1
 800887c:	4915      	ldr	r1, [pc, #84]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800887e:	4313      	orrs	r3, r2
 8008880:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800888c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888e:	f7f9 fefb 	bl	8002688 <HAL_GetTick>
 8008892:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008894:	e009      	b.n	80088aa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008896:	f7f9 fef7 	bl	8002688 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d902      	bls.n	80088aa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
          break;
 80088a8:	e005      	b.n	80088b6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0ef      	beq.n	8008896 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80088bc:	4b05      	ldr	r3, [pc, #20]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	4903      	ldr	r1, [pc, #12]	; (80088d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	40021000 	.word	0x40021000

080088d8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80088d8:	b480      	push	{r7}
 80088da:	b089      	sub	sp, #36	; 0x24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f4:	d10c      	bne.n	8008910 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80088f6:	4b6e      	ldr	r3, [pc, #440]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008900:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008908:	d112      	bne.n	8008930 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800890a:	4b6a      	ldr	r3, [pc, #424]	; (8008ab4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800890c:	61fb      	str	r3, [r7, #28]
 800890e:	e00f      	b.n	8008930 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008916:	d10b      	bne.n	8008930 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008918:	4b65      	ldr	r3, [pc, #404]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800891a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008922:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800892a:	d101      	bne.n	8008930 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800892c:	4b61      	ldr	r3, [pc, #388]	; (8008ab4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800892e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 80b4 	bne.w	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008942:	d003      	beq.n	800894c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800894a:	d135      	bne.n	80089b8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800894c:	4b58      	ldr	r3, [pc, #352]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008958:	f040 80a1 	bne.w	8008a9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800895c:	4b54      	ldr	r3, [pc, #336]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 809a 	beq.w	8008a9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800896a:	4b51      	ldr	r3, [pc, #324]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	091b      	lsrs	r3, r3, #4
 8008970:	f003 0307 	and.w	r3, r3, #7
 8008974:	3301      	adds	r3, #1
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	fbb2 f3f3 	udiv	r3, r2, r3
 800897c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800897e:	4b4c      	ldr	r3, [pc, #304]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008988:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8008990:	4b47      	ldr	r3, [pc, #284]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800899c:	2311      	movs	r3, #17
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e001      	b.n	80089a6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80089a2:	2307      	movs	r3, #7
 80089a4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	fb02 f203 	mul.w	r2, r2, r3
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80089b6:	e072      	b.n	8008a9e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d133      	bne.n	8008a26 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80089be:	4b3c      	ldr	r3, [pc, #240]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089ca:	d169      	bne.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80089cc:	4b38      	ldr	r3, [pc, #224]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d063      	beq.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80089d8:	4b35      	ldr	r3, [pc, #212]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	091b      	lsrs	r3, r3, #4
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	3301      	adds	r3, #1
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80089ec:	4b30      	ldr	r3, [pc, #192]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	0a1b      	lsrs	r3, r3, #8
 80089f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80089fe:	4b2c      	ldr	r3, [pc, #176]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8008a0a:	2311      	movs	r3, #17
 8008a0c:	617b      	str	r3, [r7, #20]
 8008a0e:	e001      	b.n	8008a14 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008a10:	2307      	movs	r3, #7
 8008a12:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	fb02 f203 	mul.w	r2, r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a22:	61fb      	str	r3, [r7, #28]
 8008a24:	e03c      	b.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a2c:	d003      	beq.n	8008a36 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a34:	d134      	bne.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8008a36:	4b1e      	ldr	r3, [pc, #120]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a42:	d12d      	bne.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8008a44:	4b1a      	ldr	r3, [pc, #104]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d027      	beq.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	091b      	lsrs	r3, r3, #4
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8008a64:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8008a82:	2311      	movs	r3, #17
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	e001      	b.n	8008a8c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8008a88:	2307      	movs	r3, #7
 8008a8a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	fb02 f203 	mul.w	r2, r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	61fb      	str	r3, [r7, #28]
 8008a9c:	e000      	b.n	8008aa0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008a9e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3724      	adds	r7, #36	; 0x24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	40021000 	.word	0x40021000
 8008ab4:	001fff68 	.word	0x001fff68

08008ab8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e153      	b.n	8008d72 <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d106      	bne.n	8008ae4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7f9 f8a2 	bl	8001c28 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f957 	bl	8008d98 <SAI_Disable>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e13e      	b.n	8008d72 <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d007      	beq.n	8008b14 <HAL_SAI_Init+0x5c>
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d302      	bcc.n	8008b0e <HAL_SAI_Init+0x56>
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d006      	beq.n	8008b1a <HAL_SAI_Init+0x62>
 8008b0c:	e008      	b.n	8008b20 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	61fb      	str	r3, [r7, #28]
      break;
 8008b12:	e008      	b.n	8008b26 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008b14:	2310      	movs	r3, #16
 8008b16:	61fb      	str	r3, [r7, #28]
      break;
 8008b18:	e005      	b.n	8008b26 <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	61fb      	str	r3, [r7, #28]
      break;
 8008b1e:	e002      	b.n	8008b26 <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	61fb      	str	r3, [r7, #28]
      break;
 8008b24:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d81d      	bhi.n	8008b6a <HAL_SAI_Init+0xb2>
 8008b2e:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <HAL_SAI_Init+0x7c>)
 8008b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b34:	08008b45 	.word	0x08008b45
 8008b38:	08008b4b 	.word	0x08008b4b
 8008b3c:	08008b53 	.word	0x08008b53
 8008b40:	08008b5b 	.word	0x08008b5b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
      break;
 8008b48:	e012      	b.n	8008b70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b4e:	617b      	str	r3, [r7, #20]
      break;
 8008b50:	e00e      	b.n	8008b70 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b56:	617b      	str	r3, [r7, #20]
      break;
 8008b58:	e00a      	b.n	8008b70 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b5e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	f043 0301 	orr.w	r3, r3, #1
 8008b66:	61fb      	str	r3, [r7, #28]
      break;
 8008b68:	e002      	b.n	8008b70 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
      break;
 8008b6e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a81      	ldr	r2, [pc, #516]	; (8008d7c <HAL_SAI_Init+0x2c4>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_SAI_Init+0xcc>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a80      	ldr	r2, [pc, #512]	; (8008d80 <HAL_SAI_Init+0x2c8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d103      	bne.n	8008b8c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008b84:	4a7f      	ldr	r2, [pc, #508]	; (8008d84 <HAL_SAI_Init+0x2cc>)
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e002      	b.n	8008b92 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008b8c:	4a7e      	ldr	r2, [pc, #504]	; (8008d88 <HAL_SAI_Init+0x2d0>)
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d041      	beq.n	8008c1e <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a77      	ldr	r2, [pc, #476]	; (8008d7c <HAL_SAI_Init+0x2c4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d004      	beq.n	8008bae <HAL_SAI_Init+0xf6>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a75      	ldr	r2, [pc, #468]	; (8008d80 <HAL_SAI_Init+0x2c8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d105      	bne.n	8008bba <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008bae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008bb2:	f7ff f841 	bl	8007c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bb6:	6138      	str	r0, [r7, #16]
 8008bb8:	e004      	b.n	8008bc4 <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008bbe:	f7ff f83b 	bl	8007c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bc2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	461a      	mov	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	025b      	lsls	r3, r3, #9
 8008bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bda:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a6b      	ldr	r2, [pc, #428]	; (8008d8c <HAL_SAI_Init+0x2d4>)
 8008be0:	fba2 2303 	umull	r2, r3, r2, r3
 8008be4:	08da      	lsrs	r2, r3, #3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	4b67      	ldr	r3, [pc, #412]	; (8008d8c <HAL_SAI_Init+0x2d4>)
 8008bee:	fba3 2301 	umull	r2, r3, r3, r1
 8008bf2:	08da      	lsrs	r2, r3, #3
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	1aca      	subs	r2, r1, r3
 8008bfe:	2a08      	cmp	r2, #8
 8008c00:	d904      	bls.n	8008c0c <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d104      	bne.n	8008c1e <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	085a      	lsrs	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_SAI_Init+0x176>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d109      	bne.n	8008c42 <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d101      	bne.n	8008c3a <HAL_SAI_Init+0x182>
 8008c36:	2300      	movs	r3, #0
 8008c38:	e001      	b.n	8008c3e <HAL_SAI_Init+0x186>
 8008c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c3e:	61bb      	str	r3, [r7, #24]
 8008c40:	e008      	b.n	8008c54 <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d102      	bne.n	8008c50 <HAL_SAI_Init+0x198>
 8008c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c4e:	e000      	b.n	8008c52 <HAL_SAI_Init+0x19a>
 8008c50:	2300      	movs	r3, #0
 8008c52:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b4c      	ldr	r3, [pc, #304]	; (8008d90 <HAL_SAI_Init+0x2d8>)
 8008c60:	400b      	ands	r3, r1
 8008c62:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6819      	ldr	r1, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008c78:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8008c8c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008c98:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	051b      	lsls	r3, r3, #20
 8008ca0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008cb8:	f023 030f 	bic.w	r3, r3, #15
 8008cbc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6859      	ldr	r1, [r3, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	431a      	orrs	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6899      	ldr	r1, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <HAL_SAI_Init+0x2dc>)
 8008ce8:	400b      	ands	r3, r1
 8008cea:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6899      	ldr	r1, [r3, #8]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008cfc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008d02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008d08:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008d12:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68d9      	ldr	r1, [r3, #12]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008d2a:	400b      	ands	r3, r1
 8008d2c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68d9      	ldr	r1, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d3c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d42:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008d44:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3720      	adds	r7, #32
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40015404 	.word	0x40015404
 8008d80:	40015424 	.word	0x40015424
 8008d84:	40015400 	.word	0x40015400
 8008d88:	40015800 	.word	0x40015800
 8008d8c:	cccccccd 	.word	0xcccccccd
 8008d90:	ff05c010 	.word	0xff05c010
 8008d94:	fff88000 	.word	0xfff88000

08008d98 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008da0:	4b18      	ldr	r3, [pc, #96]	; (8008e04 <SAI_Disable+0x6c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <SAI_Disable+0x70>)
 8008da6:	fba2 2303 	umull	r2, r3, r2, r3
 8008daa:	0b1b      	lsrs	r3, r3, #12
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008dc2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	72fb      	strb	r3, [r7, #11]
      break;
 8008dde:	e009      	b.n	8008df4 <SAI_Disable+0x5c>
    }
    count--;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	3b01      	subs	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e7      	bne.n	8008dc4 <SAI_Disable+0x2c>

  return status;
 8008df4:	7afb      	ldrb	r3, [r7, #11]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20000008 	.word	0x20000008
 8008e08:	95cbec1b 	.word	0x95cbec1b

08008e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e095      	b.n	8008f4a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e2e:	d009      	beq.n	8008e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	61da      	str	r2, [r3, #28]
 8008e36:	e005      	b.n	8008e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7f8 ff98 	bl	8001d94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e84:	d902      	bls.n	8008e8c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	e002      	b.n	8008e92 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e90:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008e9a:	d007      	beq.n	8008eac <HAL_SPI_Init+0xa0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ea4:	d002      	beq.n	8008eac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eda:	431a      	orrs	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee4:	431a      	orrs	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	ea42 0103 	orr.w	r1, r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	0c1b      	lsrs	r3, r3, #16
 8008f08:	f003 0204 	and.w	r2, r3, #4
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	f003 0308 	and.w	r3, r3, #8
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008f28:	ea42 0103 	orr.w	r1, r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e049      	b.n	8008ff8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7f9 fa35 	bl	80023e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4610      	mov	r0, r2
 8008f92:	f000 faa5 	bl	80094e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b01      	cmp	r3, #1
 8009012:	d001      	beq.n	8009018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e04f      	b.n	80090b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0201 	orr.w	r2, r2, #1
 800902e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a23      	ldr	r2, [pc, #140]	; (80090c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d01d      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009042:	d018      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1f      	ldr	r2, [pc, #124]	; (80090c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d013      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a1e      	ldr	r2, [pc, #120]	; (80090cc <HAL_TIM_Base_Start_IT+0xcc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00e      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a1c      	ldr	r2, [pc, #112]	; (80090d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d009      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a1b      	ldr	r2, [pc, #108]	; (80090d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d004      	beq.n	8009076 <HAL_TIM_Base_Start_IT+0x76>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a19      	ldr	r2, [pc, #100]	; (80090d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d115      	bne.n	80090a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	4b17      	ldr	r3, [pc, #92]	; (80090dc <HAL_TIM_Base_Start_IT+0xdc>)
 800907e:	4013      	ands	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b06      	cmp	r3, #6
 8009086:	d015      	beq.n	80090b4 <HAL_TIM_Base_Start_IT+0xb4>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908e:	d011      	beq.n	80090b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f042 0201 	orr.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a0:	e008      	b.n	80090b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e000      	b.n	80090b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	40012c00 	.word	0x40012c00
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40013400 	.word	0x40013400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	00010007 	.word	0x00010007

080090e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d122      	bne.n	800913c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b02      	cmp	r3, #2
 8009102:	d11b      	bne.n	800913c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f06f 0202 	mvn.w	r2, #2
 800910c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	f003 0303 	and.w	r3, r3, #3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f9be 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 8009128:	e005      	b.n	8009136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f9b0 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9c1 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b04      	cmp	r3, #4
 8009148:	d122      	bne.n	8009190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b04      	cmp	r3, #4
 8009156:	d11b      	bne.n	8009190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0204 	mvn.w	r2, #4
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f994 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f986 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f997 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	f003 0308 	and.w	r3, r3, #8
 800919a:	2b08      	cmp	r3, #8
 800919c:	d122      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d11b      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f06f 0208 	mvn.w	r2, #8
 80091b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2204      	movs	r2, #4
 80091ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f96a 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 80091d0:	e005      	b.n	80091de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f95c 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 f96d 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0310 	and.w	r3, r3, #16
 80091ee:	2b10      	cmp	r3, #16
 80091f0:	d122      	bne.n	8009238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0310 	and.w	r3, r3, #16
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d11b      	bne.n	8009238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0210 	mvn.w	r2, #16
 8009208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2208      	movs	r2, #8
 800920e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f940 	bl	80094a4 <HAL_TIM_IC_CaptureCallback>
 8009224:	e005      	b.n	8009232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f932 	bl	8009490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f943 	bl	80094b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b01      	cmp	r3, #1
 8009244:	d10e      	bne.n	8009264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b01      	cmp	r3, #1
 8009252:	d107      	bne.n	8009264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f06f 0201 	mvn.w	r2, #1
 800925c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7f9 f8e8 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d10e      	bne.n	8009290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800927c:	2b80      	cmp	r3, #128	; 0x80
 800927e:	d107      	bne.n	8009290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 faee 	bl	800986c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800929e:	d10e      	bne.n	80092be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b80      	cmp	r3, #128	; 0x80
 80092ac:	d107      	bne.n	80092be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fae1 	bl	8009880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d10e      	bne.n	80092ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d6:	2b40      	cmp	r3, #64	; 0x40
 80092d8:	d107      	bne.n	80092ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8f1 	bl	80094cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d10e      	bne.n	8009316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b20      	cmp	r3, #32
 8009304:	d107      	bne.n	8009316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f06f 0220 	mvn.w	r2, #32
 800930e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 faa1 	bl	8009858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <HAL_TIM_ConfigClockSource+0x18>
 8009332:	2302      	movs	r3, #2
 8009334:	e0a8      	b.n	8009488 <HAL_TIM_ConfigClockSource+0x16a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009354:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009358:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009360:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d067      	beq.n	8009442 <HAL_TIM_ConfigClockSource+0x124>
 8009372:	2b40      	cmp	r3, #64	; 0x40
 8009374:	d80b      	bhi.n	800938e <HAL_TIM_ConfigClockSource+0x70>
 8009376:	2b10      	cmp	r3, #16
 8009378:	d073      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x144>
 800937a:	2b10      	cmp	r3, #16
 800937c:	d802      	bhi.n	8009384 <HAL_TIM_ConfigClockSource+0x66>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d06f      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009382:	e078      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8009384:	2b20      	cmp	r3, #32
 8009386:	d06c      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x144>
 8009388:	2b30      	cmp	r3, #48	; 0x30
 800938a:	d06a      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800938c:	e073      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800938e:	2b70      	cmp	r3, #112	; 0x70
 8009390:	d00d      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x90>
 8009392:	2b70      	cmp	r3, #112	; 0x70
 8009394:	d804      	bhi.n	80093a0 <HAL_TIM_ConfigClockSource+0x82>
 8009396:	2b50      	cmp	r3, #80	; 0x50
 8009398:	d033      	beq.n	8009402 <HAL_TIM_ConfigClockSource+0xe4>
 800939a:	2b60      	cmp	r3, #96	; 0x60
 800939c:	d041      	beq.n	8009422 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800939e:	e06a      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80093a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a4:	d066      	beq.n	8009474 <HAL_TIM_ConfigClockSource+0x156>
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093aa:	d017      	beq.n	80093dc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80093ac:	e063      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6899      	ldr	r1, [r3, #8]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f000 f9a3 	bl	8009708 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	609a      	str	r2, [r3, #8]
      break;
 80093da:	e04c      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	6899      	ldr	r1, [r3, #8]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f000 f98c 	bl	8009708 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093fe:	609a      	str	r2, [r3, #8]
      break;
 8009400:	e039      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	6859      	ldr	r1, [r3, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	461a      	mov	r2, r3
 8009410:	f000 f900 	bl	8009614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2150      	movs	r1, #80	; 0x50
 800941a:	4618      	mov	r0, r3
 800941c:	f000 f959 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 8009420:	e029      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	461a      	mov	r2, r3
 8009430:	f000 f91f 	bl	8009672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2160      	movs	r1, #96	; 0x60
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f949 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 8009440:	e019      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	6859      	ldr	r1, [r3, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	461a      	mov	r2, r3
 8009450:	f000 f8e0 	bl	8009614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2140      	movs	r1, #64	; 0x40
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f939 	bl	80096d2 <TIM_ITRx_SetConfig>
      break;
 8009460:	e009      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f000 f930 	bl	80096d2 <TIM_ITRx_SetConfig>
        break;
 8009472:	e000      	b.n	8009476 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8009474:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a40      	ldr	r2, [pc, #256]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d013      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fe:	d00f      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a3d      	ldr	r2, [pc, #244]	; (80095f8 <TIM_Base_SetConfig+0x118>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00b      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a3c      	ldr	r2, [pc, #240]	; (80095fc <TIM_Base_SetConfig+0x11c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d007      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a3b      	ldr	r2, [pc, #236]	; (8009600 <TIM_Base_SetConfig+0x120>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d003      	beq.n	8009520 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3a      	ldr	r2, [pc, #232]	; (8009604 <TIM_Base_SetConfig+0x124>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d108      	bne.n	8009532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a2f      	ldr	r2, [pc, #188]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d01f      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009540:	d01b      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2c      	ldr	r2, [pc, #176]	; (80095f8 <TIM_Base_SetConfig+0x118>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d017      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2b      	ldr	r2, [pc, #172]	; (80095fc <TIM_Base_SetConfig+0x11c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d013      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a2a      	ldr	r2, [pc, #168]	; (8009600 <TIM_Base_SetConfig+0x120>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00f      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a29      	ldr	r2, [pc, #164]	; (8009604 <TIM_Base_SetConfig+0x124>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00b      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a28      	ldr	r2, [pc, #160]	; (8009608 <TIM_Base_SetConfig+0x128>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d007      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a27      	ldr	r2, [pc, #156]	; (800960c <TIM_Base_SetConfig+0x12c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <TIM_Base_SetConfig+0x9a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <TIM_Base_SetConfig+0x130>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d108      	bne.n	800958c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	4313      	orrs	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a10      	ldr	r2, [pc, #64]	; (80095f4 <TIM_Base_SetConfig+0x114>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d00f      	beq.n	80095d8 <TIM_Base_SetConfig+0xf8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a12      	ldr	r2, [pc, #72]	; (8009604 <TIM_Base_SetConfig+0x124>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <TIM_Base_SetConfig+0xf8>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a11      	ldr	r2, [pc, #68]	; (8009608 <TIM_Base_SetConfig+0x128>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_Base_SetConfig+0xf8>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a10      	ldr	r2, [pc, #64]	; (800960c <TIM_Base_SetConfig+0x12c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_Base_SetConfig+0xf8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a0f      	ldr	r2, [pc, #60]	; (8009610 <TIM_Base_SetConfig+0x130>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d103      	bne.n	80095e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	615a      	str	r2, [r3, #20]
}
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40012c00 	.word	0x40012c00
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	40000c00 	.word	0x40000c00
 8009604:	40013400 	.word	0x40013400
 8009608:	40014000 	.word	0x40014000
 800960c:	40014400 	.word	0x40014400
 8009610:	40014800 	.word	0x40014800

08009614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009614:	b480      	push	{r7}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a1b      	ldr	r3, [r3, #32]
 8009624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f023 0201 	bic.w	r2, r3, #1
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800963e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f023 030a 	bic.w	r3, r3, #10
 8009650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4313      	orrs	r3, r2
 8009658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	621a      	str	r2, [r3, #32]
}
 8009666:	bf00      	nop
 8009668:	371c      	adds	r7, #28
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009672:	b480      	push	{r7}
 8009674:	b087      	sub	sp, #28
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	f023 0210 	bic.w	r2, r3, #16
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800969c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	031b      	lsls	r3, r3, #12
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f043 0307 	orr.w	r3, r3, #7
 80096f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	021a      	lsls	r2, r3, #8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	431a      	orrs	r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4313      	orrs	r3, r2
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	609a      	str	r2, [r3, #8]
}
 800973c:	bf00      	nop
 800973e:	371c      	adds	r7, #28
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800975c:	2302      	movs	r3, #2
 800975e:	e068      	b.n	8009832 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2202      	movs	r2, #2
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a2e      	ldr	r2, [pc, #184]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d004      	beq.n	8009794 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a2d      	ldr	r2, [pc, #180]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d108      	bne.n	80097a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800979a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a1e      	ldr	r2, [pc, #120]	; (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d01d      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d2:	d018      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d013      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a1a      	ldr	r2, [pc, #104]	; (800984c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00e      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a18      	ldr	r2, [pc, #96]	; (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d009      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a13      	ldr	r2, [pc, #76]	; (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d004      	beq.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a14      	ldr	r2, [pc, #80]	; (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d10c      	bne.n	8009820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800980c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4313      	orrs	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40012c00 	.word	0x40012c00
 8009844:	40013400 	.word	0x40013400
 8009848:	40000400 	.word	0x40000400
 800984c:	40000800 	.word	0x40000800
 8009850:	40000c00 	.word	0x40000c00
 8009854:	40014000 	.word	0x40014000

08009858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009860:	bf00      	nop
 8009862:	370c      	adds	r7, #12
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e040      	b.n	8009928 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f8 fe00 	bl	80024bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2224      	movs	r2, #36	; 0x24
 80098c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fae8 	bl	8009ea8 <UART_SetConfig>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d101      	bne.n	80098e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e022      	b.n	8009928 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fd66 	bl	800a3bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800990e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fded 	bl	800a500 <UART_CheckIdleState>
 8009926:	4603      	mov	r3, r0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08a      	sub	sp, #40	; 0x28
 8009934:	af02      	add	r7, sp, #8
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009944:	2b20      	cmp	r3, #32
 8009946:	f040 8081 	bne.w	8009a4c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_UART_Transmit+0x26>
 8009950:	88fb      	ldrh	r3, [r7, #6]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e079      	b.n	8009a4e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_UART_Transmit+0x38>
 8009964:	2302      	movs	r3, #2
 8009966:	e072      	b.n	8009a4e <HAL_UART_Transmit+0x11e>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2221      	movs	r2, #33	; 0x21
 800997a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800997c:	f7f8 fe84 	bl	8002688 <HAL_GetTick>
 8009980:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	88fa      	ldrh	r2, [r7, #6]
 8009986:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	88fa      	ldrh	r2, [r7, #6]
 800998e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800999a:	d108      	bne.n	80099ae <HAL_UART_Transmit+0x7e>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d104      	bne.n	80099ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e003      	b.n	80099b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80099be:	e02d      	b.n	8009a1c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	2200      	movs	r2, #0
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 fddd 	bl	800a58a <UART_WaitOnFlagUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e039      	b.n	8009a4e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10b      	bne.n	80099f8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	881a      	ldrh	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ec:	b292      	uxth	r2, r2
 80099ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	3302      	adds	r3, #2
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	e008      	b.n	8009a0a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	781a      	ldrb	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	b292      	uxth	r2, r2
 8009a02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	3301      	adds	r3, #1
 8009a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1cb      	bne.n	80099c0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2140      	movs	r1, #64	; 0x40
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 fda9 	bl	800a58a <UART_WaitOnFlagUntilTimeout>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e005      	b.n	8009a4e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2220      	movs	r2, #32
 8009a46:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	e000      	b.n	8009a4e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009a4c:	2302      	movs	r3, #2
  }
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b08a      	sub	sp, #40	; 0x28
 8009a5a:	af02      	add	r7, sp, #8
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	f040 80bb 	bne.w	8009be6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <HAL_UART_Receive+0x26>
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e0b3      	b.n	8009be8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d101      	bne.n	8009a8e <HAL_UART_Receive+0x38>
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	e0ac      	b.n	8009be8 <HAL_UART_Receive+0x192>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2222      	movs	r2, #34	; 0x22
 8009aa0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009aa2:	f7f8 fdf1 	bl	8002688 <HAL_GetTick>
 8009aa6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	88fa      	ldrh	r2, [r7, #6]
 8009aac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	88fa      	ldrh	r2, [r7, #6]
 8009ab4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac0:	d10e      	bne.n	8009ae0 <HAL_UART_Receive+0x8a>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d105      	bne.n	8009ad6 <HAL_UART_Receive+0x80>
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ad4:	e02d      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	22ff      	movs	r2, #255	; 0xff
 8009ada:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ade:	e028      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <HAL_UART_Receive+0xae>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d104      	bne.n	8009afa <HAL_UART_Receive+0xa4>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	22ff      	movs	r2, #255	; 0xff
 8009af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009af8:	e01b      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	227f      	movs	r2, #127	; 0x7f
 8009afe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b02:	e016      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b0c:	d10d      	bne.n	8009b2a <HAL_UART_Receive+0xd4>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d104      	bne.n	8009b20 <HAL_UART_Receive+0xca>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	227f      	movs	r2, #127	; 0x7f
 8009b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b1e:	e008      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	223f      	movs	r2, #63	; 0x3f
 8009b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b28:	e003      	b.n	8009b32 <HAL_UART_Receive+0xdc>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b38:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b42:	d108      	bne.n	8009b56 <HAL_UART_Receive+0x100>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	61bb      	str	r3, [r7, #24]
 8009b54:	e003      	b.n	8009b5e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009b66:	e033      	b.n	8009bd0 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2120      	movs	r1, #32
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 fd09 	bl	800a58a <UART_WaitOnFlagUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e032      	b.n	8009be8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10c      	bne.n	8009ba2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	8a7b      	ldrh	r3, [r7, #18]
 8009b92:	4013      	ands	r3, r2
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	3302      	adds	r3, #2
 8009b9e:	61bb      	str	r3, [r7, #24]
 8009ba0:	e00d      	b.n	8009bbe <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	8a7b      	ldrh	r3, [r7, #18]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1c5      	bne.n	8009b68 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2220      	movs	r2, #32
 8009be0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c16:	4013      	ands	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d113      	bne.n	8009c48 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00e      	beq.n	8009c48 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	f003 0320 	and.w	r3, r3, #32
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d009      	beq.n	8009c48 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 8114 	beq.w	8009e66 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
      }
      return;
 8009c46:	e10e      	b.n	8009e66 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 80d6 	beq.w	8009dfc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d105      	bne.n	8009c66 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009c5a:	69ba      	ldr	r2, [r7, #24]
 8009c5c:	4b86      	ldr	r3, [pc, #536]	; (8009e78 <HAL_UART_IRQHandler+0x288>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f000 80cb 	beq.w	8009dfc <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00e      	beq.n	8009c8e <HAL_UART_IRQHandler+0x9e>
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c86:	f043 0201 	orr.w	r2, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00e      	beq.n	8009cb6 <HAL_UART_IRQHandler+0xc6>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cae:	f043 0204 	orr.w	r2, r3, #4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00e      	beq.n	8009cde <HAL_UART_IRQHandler+0xee>
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2204      	movs	r2, #4
 8009cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cd6:	f043 0202 	orr.w	r2, r3, #2
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f003 0308 	and.w	r3, r3, #8
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d013      	beq.n	8009d10 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d104      	bne.n	8009cfc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d009      	beq.n	8009d10 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2208      	movs	r2, #8
 8009d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d08:	f043 0208 	orr.w	r2, r3, #8
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00f      	beq.n	8009d3a <HAL_UART_IRQHandler+0x14a>
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d00a      	beq.n	8009d3a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d32:	f043 0220 	orr.w	r2, r3, #32
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 8093 	beq.w	8009e6a <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00c      	beq.n	8009d68 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	f003 0320 	and.w	r3, r3, #32
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d003      	beq.n	8009d68 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d004      	beq.n	8009d86 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d031      	beq.n	8009dea <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fc7a 	bl	800a680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d96:	2b40      	cmp	r3, #64	; 0x40
 8009d98:	d123      	bne.n	8009de2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009da8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d013      	beq.n	8009dda <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db6:	4a31      	ldr	r2, [pc, #196]	; (8009e7c <HAL_UART_IRQHandler+0x28c>)
 8009db8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fa fbc7 	bl	8004552 <HAL_DMA_Abort_IT>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d016      	beq.n	8009df8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd8:	e00e      	b.n	8009df8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f85a 	bl	8009e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de0:	e00a      	b.n	8009df8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f856 	bl	8009e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de8:	e006      	b.n	8009df8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f852 	bl	8009e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009df6:	e038      	b.n	8009e6a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	bf00      	nop
    return;
 8009dfa:	e036      	b.n	8009e6a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <HAL_UART_IRQHandler+0x232>
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fc7f 	bl	800a71e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e20:	e026      	b.n	8009e70 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00d      	beq.n	8009e48 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d008      	beq.n	8009e48 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d017      	beq.n	8009e6e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	4798      	blx	r3
    }
    return;
 8009e46:	e012      	b.n	8009e6e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00e      	beq.n	8009e70 <HAL_UART_IRQHandler+0x280>
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc45 	bl	800a6ec <UART_EndTransmit_IT>
    return;
 8009e62:	bf00      	nop
 8009e64:	e004      	b.n	8009e70 <HAL_UART_IRQHandler+0x280>
      return;
 8009e66:	bf00      	nop
 8009e68:	e002      	b.n	8009e70 <HAL_UART_IRQHandler+0x280>
    return;
 8009e6a:	bf00      	nop
 8009e6c:	e000      	b.n	8009e70 <HAL_UART_IRQHandler+0x280>
    return;
 8009e6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	04000120 	.word	0x04000120
 8009e7c:	0800a6c1 	.word	0x0800a6c1

08009e80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ea8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009eac:	b088      	sub	sp, #32
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	431a      	orrs	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	69db      	ldr	r3, [r3, #28]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4bac      	ldr	r3, [pc, #688]	; (800a188 <UART_SetConfig+0x2e0>)
 8009ed6:	4013      	ands	r3, r2
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	69f9      	ldr	r1, [r7, #28]
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	68da      	ldr	r2, [r3, #12]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	699b      	ldr	r3, [r3, #24]
 8009efc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4aa2      	ldr	r2, [pc, #648]	; (800a18c <UART_SetConfig+0x2e4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d004      	beq.n	8009f12 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	69fa      	ldr	r2, [r7, #28]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a99      	ldr	r2, [pc, #612]	; (800a190 <UART_SetConfig+0x2e8>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d121      	bne.n	8009f74 <UART_SetConfig+0xcc>
 8009f30:	4b98      	ldr	r3, [pc, #608]	; (800a194 <UART_SetConfig+0x2ec>)
 8009f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d816      	bhi.n	8009f6c <UART_SetConfig+0xc4>
 8009f3e:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <UART_SetConfig+0x9c>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f61 	.word	0x08009f61
 8009f4c:	08009f5b 	.word	0x08009f5b
 8009f50:	08009f67 	.word	0x08009f67
 8009f54:	2301      	movs	r3, #1
 8009f56:	76fb      	strb	r3, [r7, #27]
 8009f58:	e0e8      	b.n	800a12c <UART_SetConfig+0x284>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	76fb      	strb	r3, [r7, #27]
 8009f5e:	e0e5      	b.n	800a12c <UART_SetConfig+0x284>
 8009f60:	2304      	movs	r3, #4
 8009f62:	76fb      	strb	r3, [r7, #27]
 8009f64:	e0e2      	b.n	800a12c <UART_SetConfig+0x284>
 8009f66:	2308      	movs	r3, #8
 8009f68:	76fb      	strb	r3, [r7, #27]
 8009f6a:	e0df      	b.n	800a12c <UART_SetConfig+0x284>
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	76fb      	strb	r3, [r7, #27]
 8009f70:	bf00      	nop
 8009f72:	e0db      	b.n	800a12c <UART_SetConfig+0x284>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a87      	ldr	r2, [pc, #540]	; (800a198 <UART_SetConfig+0x2f0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d134      	bne.n	8009fe8 <UART_SetConfig+0x140>
 8009f7e:	4b85      	ldr	r3, [pc, #532]	; (800a194 <UART_SetConfig+0x2ec>)
 8009f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f84:	f003 030c 	and.w	r3, r3, #12
 8009f88:	2b0c      	cmp	r3, #12
 8009f8a:	d829      	bhi.n	8009fe0 <UART_SetConfig+0x138>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <UART_SetConfig+0xec>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	08009fe1 	.word	0x08009fe1
 8009f9c:	08009fe1 	.word	0x08009fe1
 8009fa0:	08009fe1 	.word	0x08009fe1
 8009fa4:	08009fd5 	.word	0x08009fd5
 8009fa8:	08009fe1 	.word	0x08009fe1
 8009fac:	08009fe1 	.word	0x08009fe1
 8009fb0:	08009fe1 	.word	0x08009fe1
 8009fb4:	08009fcf 	.word	0x08009fcf
 8009fb8:	08009fe1 	.word	0x08009fe1
 8009fbc:	08009fe1 	.word	0x08009fe1
 8009fc0:	08009fe1 	.word	0x08009fe1
 8009fc4:	08009fdb 	.word	0x08009fdb
 8009fc8:	2300      	movs	r3, #0
 8009fca:	76fb      	strb	r3, [r7, #27]
 8009fcc:	e0ae      	b.n	800a12c <UART_SetConfig+0x284>
 8009fce:	2302      	movs	r3, #2
 8009fd0:	76fb      	strb	r3, [r7, #27]
 8009fd2:	e0ab      	b.n	800a12c <UART_SetConfig+0x284>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	76fb      	strb	r3, [r7, #27]
 8009fd8:	e0a8      	b.n	800a12c <UART_SetConfig+0x284>
 8009fda:	2308      	movs	r3, #8
 8009fdc:	76fb      	strb	r3, [r7, #27]
 8009fde:	e0a5      	b.n	800a12c <UART_SetConfig+0x284>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	76fb      	strb	r3, [r7, #27]
 8009fe4:	bf00      	nop
 8009fe6:	e0a1      	b.n	800a12c <UART_SetConfig+0x284>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a6b      	ldr	r2, [pc, #428]	; (800a19c <UART_SetConfig+0x2f4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d120      	bne.n	800a034 <UART_SetConfig+0x18c>
 8009ff2:	4b68      	ldr	r3, [pc, #416]	; (800a194 <UART_SetConfig+0x2ec>)
 8009ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ffc:	2b10      	cmp	r3, #16
 8009ffe:	d00f      	beq.n	800a020 <UART_SetConfig+0x178>
 800a000:	2b10      	cmp	r3, #16
 800a002:	d802      	bhi.n	800a00a <UART_SetConfig+0x162>
 800a004:	2b00      	cmp	r3, #0
 800a006:	d005      	beq.n	800a014 <UART_SetConfig+0x16c>
 800a008:	e010      	b.n	800a02c <UART_SetConfig+0x184>
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	d005      	beq.n	800a01a <UART_SetConfig+0x172>
 800a00e:	2b30      	cmp	r3, #48	; 0x30
 800a010:	d009      	beq.n	800a026 <UART_SetConfig+0x17e>
 800a012:	e00b      	b.n	800a02c <UART_SetConfig+0x184>
 800a014:	2300      	movs	r3, #0
 800a016:	76fb      	strb	r3, [r7, #27]
 800a018:	e088      	b.n	800a12c <UART_SetConfig+0x284>
 800a01a:	2302      	movs	r3, #2
 800a01c:	76fb      	strb	r3, [r7, #27]
 800a01e:	e085      	b.n	800a12c <UART_SetConfig+0x284>
 800a020:	2304      	movs	r3, #4
 800a022:	76fb      	strb	r3, [r7, #27]
 800a024:	e082      	b.n	800a12c <UART_SetConfig+0x284>
 800a026:	2308      	movs	r3, #8
 800a028:	76fb      	strb	r3, [r7, #27]
 800a02a:	e07f      	b.n	800a12c <UART_SetConfig+0x284>
 800a02c:	2310      	movs	r3, #16
 800a02e:	76fb      	strb	r3, [r7, #27]
 800a030:	bf00      	nop
 800a032:	e07b      	b.n	800a12c <UART_SetConfig+0x284>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a59      	ldr	r2, [pc, #356]	; (800a1a0 <UART_SetConfig+0x2f8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d120      	bne.n	800a080 <UART_SetConfig+0x1d8>
 800a03e:	4b55      	ldr	r3, [pc, #340]	; (800a194 <UART_SetConfig+0x2ec>)
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a048:	2b40      	cmp	r3, #64	; 0x40
 800a04a:	d00f      	beq.n	800a06c <UART_SetConfig+0x1c4>
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d802      	bhi.n	800a056 <UART_SetConfig+0x1ae>
 800a050:	2b00      	cmp	r3, #0
 800a052:	d005      	beq.n	800a060 <UART_SetConfig+0x1b8>
 800a054:	e010      	b.n	800a078 <UART_SetConfig+0x1d0>
 800a056:	2b80      	cmp	r3, #128	; 0x80
 800a058:	d005      	beq.n	800a066 <UART_SetConfig+0x1be>
 800a05a:	2bc0      	cmp	r3, #192	; 0xc0
 800a05c:	d009      	beq.n	800a072 <UART_SetConfig+0x1ca>
 800a05e:	e00b      	b.n	800a078 <UART_SetConfig+0x1d0>
 800a060:	2300      	movs	r3, #0
 800a062:	76fb      	strb	r3, [r7, #27]
 800a064:	e062      	b.n	800a12c <UART_SetConfig+0x284>
 800a066:	2302      	movs	r3, #2
 800a068:	76fb      	strb	r3, [r7, #27]
 800a06a:	e05f      	b.n	800a12c <UART_SetConfig+0x284>
 800a06c:	2304      	movs	r3, #4
 800a06e:	76fb      	strb	r3, [r7, #27]
 800a070:	e05c      	b.n	800a12c <UART_SetConfig+0x284>
 800a072:	2308      	movs	r3, #8
 800a074:	76fb      	strb	r3, [r7, #27]
 800a076:	e059      	b.n	800a12c <UART_SetConfig+0x284>
 800a078:	2310      	movs	r3, #16
 800a07a:	76fb      	strb	r3, [r7, #27]
 800a07c:	bf00      	nop
 800a07e:	e055      	b.n	800a12c <UART_SetConfig+0x284>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a47      	ldr	r2, [pc, #284]	; (800a1a4 <UART_SetConfig+0x2fc>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d124      	bne.n	800a0d4 <UART_SetConfig+0x22c>
 800a08a:	4b42      	ldr	r3, [pc, #264]	; (800a194 <UART_SetConfig+0x2ec>)
 800a08c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a098:	d012      	beq.n	800a0c0 <UART_SetConfig+0x218>
 800a09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a09e:	d802      	bhi.n	800a0a6 <UART_SetConfig+0x1fe>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d007      	beq.n	800a0b4 <UART_SetConfig+0x20c>
 800a0a4:	e012      	b.n	800a0cc <UART_SetConfig+0x224>
 800a0a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0aa:	d006      	beq.n	800a0ba <UART_SetConfig+0x212>
 800a0ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b0:	d009      	beq.n	800a0c6 <UART_SetConfig+0x21e>
 800a0b2:	e00b      	b.n	800a0cc <UART_SetConfig+0x224>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	76fb      	strb	r3, [r7, #27]
 800a0b8:	e038      	b.n	800a12c <UART_SetConfig+0x284>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	76fb      	strb	r3, [r7, #27]
 800a0be:	e035      	b.n	800a12c <UART_SetConfig+0x284>
 800a0c0:	2304      	movs	r3, #4
 800a0c2:	76fb      	strb	r3, [r7, #27]
 800a0c4:	e032      	b.n	800a12c <UART_SetConfig+0x284>
 800a0c6:	2308      	movs	r3, #8
 800a0c8:	76fb      	strb	r3, [r7, #27]
 800a0ca:	e02f      	b.n	800a12c <UART_SetConfig+0x284>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	76fb      	strb	r3, [r7, #27]
 800a0d0:	bf00      	nop
 800a0d2:	e02b      	b.n	800a12c <UART_SetConfig+0x284>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a2c      	ldr	r2, [pc, #176]	; (800a18c <UART_SetConfig+0x2e4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d124      	bne.n	800a128 <UART_SetConfig+0x280>
 800a0de:	4b2d      	ldr	r3, [pc, #180]	; (800a194 <UART_SetConfig+0x2ec>)
 800a0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ec:	d012      	beq.n	800a114 <UART_SetConfig+0x26c>
 800a0ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0f2:	d802      	bhi.n	800a0fa <UART_SetConfig+0x252>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d007      	beq.n	800a108 <UART_SetConfig+0x260>
 800a0f8:	e012      	b.n	800a120 <UART_SetConfig+0x278>
 800a0fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0fe:	d006      	beq.n	800a10e <UART_SetConfig+0x266>
 800a100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a104:	d009      	beq.n	800a11a <UART_SetConfig+0x272>
 800a106:	e00b      	b.n	800a120 <UART_SetConfig+0x278>
 800a108:	2300      	movs	r3, #0
 800a10a:	76fb      	strb	r3, [r7, #27]
 800a10c:	e00e      	b.n	800a12c <UART_SetConfig+0x284>
 800a10e:	2302      	movs	r3, #2
 800a110:	76fb      	strb	r3, [r7, #27]
 800a112:	e00b      	b.n	800a12c <UART_SetConfig+0x284>
 800a114:	2304      	movs	r3, #4
 800a116:	76fb      	strb	r3, [r7, #27]
 800a118:	e008      	b.n	800a12c <UART_SetConfig+0x284>
 800a11a:	2308      	movs	r3, #8
 800a11c:	76fb      	strb	r3, [r7, #27]
 800a11e:	e005      	b.n	800a12c <UART_SetConfig+0x284>
 800a120:	2310      	movs	r3, #16
 800a122:	76fb      	strb	r3, [r7, #27]
 800a124:	bf00      	nop
 800a126:	e001      	b.n	800a12c <UART_SetConfig+0x284>
 800a128:	2310      	movs	r3, #16
 800a12a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a16      	ldr	r2, [pc, #88]	; (800a18c <UART_SetConfig+0x2e4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	f040 8087 	bne.w	800a246 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a138:	7efb      	ldrb	r3, [r7, #27]
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d836      	bhi.n	800a1ac <UART_SetConfig+0x304>
 800a13e:	a201      	add	r2, pc, #4	; (adr r2, 800a144 <UART_SetConfig+0x29c>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a169 	.word	0x0800a169
 800a148:	0800a1ad 	.word	0x0800a1ad
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a1ad 	.word	0x0800a1ad
 800a154:	0800a177 	.word	0x0800a177
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a1ad 	.word	0x0800a1ad
 800a160:	0800a1ad 	.word	0x0800a1ad
 800a164:	0800a17f 	.word	0x0800a17f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a168:	f7fd f9f4 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800a16c:	6178      	str	r0, [r7, #20]
        break;
 800a16e:	e022      	b.n	800a1b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <UART_SetConfig+0x300>)
 800a172:	617b      	str	r3, [r7, #20]
        break;
 800a174:	e01f      	b.n	800a1b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a176:	f7fd f957 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800a17a:	6178      	str	r0, [r7, #20]
        break;
 800a17c:	e01b      	b.n	800a1b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a17e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a182:	617b      	str	r3, [r7, #20]
        break;
 800a184:	e017      	b.n	800a1b6 <UART_SetConfig+0x30e>
 800a186:	bf00      	nop
 800a188:	efff69f3 	.word	0xefff69f3
 800a18c:	40008000 	.word	0x40008000
 800a190:	40013800 	.word	0x40013800
 800a194:	40021000 	.word	0x40021000
 800a198:	40004400 	.word	0x40004400
 800a19c:	40004800 	.word	0x40004800
 800a1a0:	40004c00 	.word	0x40004c00
 800a1a4:	40005000 	.word	0x40005000
 800a1a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	76bb      	strb	r3, [r7, #26]
        break;
 800a1b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 80f1 	beq.w	800a3a0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d305      	bcc.n	800a1da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d902      	bls.n	800a1e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	76bb      	strb	r3, [r7, #26]
 800a1de:	e0df      	b.n	800a3a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	f04f 0200 	mov.w	r2, #0
 800a1e8:	f04f 0300 	mov.w	r3, #0
 800a1ec:	f04f 0400 	mov.w	r4, #0
 800a1f0:	0214      	lsls	r4, r2, #8
 800a1f2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1f6:	020b      	lsls	r3, r1, #8
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6852      	ldr	r2, [r2, #4]
 800a1fc:	0852      	lsrs	r2, r2, #1
 800a1fe:	4611      	mov	r1, r2
 800a200:	f04f 0200 	mov.w	r2, #0
 800a204:	eb13 0b01 	adds.w	fp, r3, r1
 800a208:	eb44 0c02 	adc.w	ip, r4, r2
 800a20c:	4658      	mov	r0, fp
 800a20e:	4661      	mov	r1, ip
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f04f 0400 	mov.w	r4, #0
 800a218:	461a      	mov	r2, r3
 800a21a:	4623      	mov	r3, r4
 800a21c:	f7f6 fc6e 	bl	8000afc <__aeabi_uldivmod>
 800a220:	4603      	mov	r3, r0
 800a222:	460c      	mov	r4, r1
 800a224:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a22c:	d308      	bcc.n	800a240 <UART_SetConfig+0x398>
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a234:	d204      	bcs.n	800a240 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	60da      	str	r2, [r3, #12]
 800a23e:	e0af      	b.n	800a3a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	76bb      	strb	r3, [r7, #26]
 800a244:	e0ac      	b.n	800a3a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a24e:	d15b      	bne.n	800a308 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800a250:	7efb      	ldrb	r3, [r7, #27]
 800a252:	2b08      	cmp	r3, #8
 800a254:	d827      	bhi.n	800a2a6 <UART_SetConfig+0x3fe>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <UART_SetConfig+0x3b4>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a289 	.word	0x0800a289
 800a264:	0800a291 	.word	0x0800a291
 800a268:	0800a2a7 	.word	0x0800a2a7
 800a26c:	0800a297 	.word	0x0800a297
 800a270:	0800a2a7 	.word	0x0800a2a7
 800a274:	0800a2a7 	.word	0x0800a2a7
 800a278:	0800a2a7 	.word	0x0800a2a7
 800a27c:	0800a29f 	.word	0x0800a29f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a280:	f7fd f968 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800a284:	6178      	str	r0, [r7, #20]
        break;
 800a286:	e013      	b.n	800a2b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a288:	f7fd f97a 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 800a28c:	6178      	str	r0, [r7, #20]
        break;
 800a28e:	e00f      	b.n	800a2b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a290:	4b49      	ldr	r3, [pc, #292]	; (800a3b8 <UART_SetConfig+0x510>)
 800a292:	617b      	str	r3, [r7, #20]
        break;
 800a294:	e00c      	b.n	800a2b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a296:	f7fd f8c7 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800a29a:	6178      	str	r0, [r7, #20]
        break;
 800a29c:	e008      	b.n	800a2b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a29e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2a2:	617b      	str	r3, [r7, #20]
        break;
 800a2a4:	e004      	b.n	800a2b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	76bb      	strb	r3, [r7, #26]
        break;
 800a2ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d074      	beq.n	800a3a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	005a      	lsls	r2, r3, #1
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	441a      	add	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d916      	bls.n	800a302 <UART_SetConfig+0x45a>
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2da:	d212      	bcs.n	800a302 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	f023 030f 	bic.w	r3, r3, #15
 800a2e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	89fb      	ldrh	r3, [r7, #14]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	89fa      	ldrh	r2, [r7, #14]
 800a2fe:	60da      	str	r2, [r3, #12]
 800a300:	e04e      	b.n	800a3a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	76bb      	strb	r3, [r7, #26]
 800a306:	e04b      	b.n	800a3a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a308:	7efb      	ldrb	r3, [r7, #27]
 800a30a:	2b08      	cmp	r3, #8
 800a30c:	d827      	bhi.n	800a35e <UART_SetConfig+0x4b6>
 800a30e:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <UART_SetConfig+0x46c>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a341 	.word	0x0800a341
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	0800a35f 	.word	0x0800a35f
 800a324:	0800a34f 	.word	0x0800a34f
 800a328:	0800a35f 	.word	0x0800a35f
 800a32c:	0800a35f 	.word	0x0800a35f
 800a330:	0800a35f 	.word	0x0800a35f
 800a334:	0800a357 	.word	0x0800a357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a338:	f7fd f90c 	bl	8007554 <HAL_RCC_GetPCLK1Freq>
 800a33c:	6178      	str	r0, [r7, #20]
        break;
 800a33e:	e013      	b.n	800a368 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a340:	f7fd f91e 	bl	8007580 <HAL_RCC_GetPCLK2Freq>
 800a344:	6178      	str	r0, [r7, #20]
        break;
 800a346:	e00f      	b.n	800a368 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a348:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <UART_SetConfig+0x510>)
 800a34a:	617b      	str	r3, [r7, #20]
        break;
 800a34c:	e00c      	b.n	800a368 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a34e:	f7fd f86b 	bl	8007428 <HAL_RCC_GetSysClockFreq>
 800a352:	6178      	str	r0, [r7, #20]
        break;
 800a354:	e008      	b.n	800a368 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a35a:	617b      	str	r3, [r7, #20]
        break;
 800a35c:	e004      	b.n	800a368 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	76bb      	strb	r3, [r7, #26]
        break;
 800a366:	bf00      	nop
    }

    if (pclk != 0U)
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d018      	beq.n	800a3a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	085a      	lsrs	r2, r3, #1
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	441a      	add	r2, r3
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	b29b      	uxth	r3, r3
 800a382:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d908      	bls.n	800a39c <UART_SetConfig+0x4f4>
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a390:	d204      	bcs.n	800a39c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	60da      	str	r2, [r3, #12]
 800a39a:	e001      	b.n	800a3a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a3ac:	7ebb      	ldrb	r3, [r7, #26]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a3b8:	00f42400 	.word	0x00f42400

0800a3bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00a      	beq.n	800a3e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00a      	beq.n	800a408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	430a      	orrs	r2, r1
 800a406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	430a      	orrs	r2, r1
 800a44a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	f003 0310 	and.w	r3, r3, #16
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00a      	beq.n	800a46e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	430a      	orrs	r2, r1
 800a48e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ba:	d10a      	bne.n	800a4d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af02      	add	r7, sp, #8
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a50e:	f7f8 f8bb 	bl	8002688 <HAL_GetTick>
 800a512:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b08      	cmp	r3, #8
 800a520:	d10e      	bne.n	800a540 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a526:	9300      	str	r3, [sp, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f82a 	bl	800a58a <UART_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e020      	b.n	800a582 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d10e      	bne.n	800a56c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a54e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f814 	bl	800a58a <UART_WaitOnFlagUntilTimeout>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a568:	2303      	movs	r3, #3
 800a56a:	e00a      	b.n	800a582 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	4613      	mov	r3, r2
 800a598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a59a:	e05d      	b.n	800a658 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d059      	beq.n	800a658 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a4:	f7f8 f870 	bl	8002688 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d302      	bcc.n	800a5ba <UART_WaitOnFlagUntilTimeout+0x30>
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d11b      	bne.n	800a5f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5c8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e042      	b.n	800a678 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d02b      	beq.n	800a658 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a60a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a60e:	d123      	bne.n	800a658 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a618:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a628:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0201 	bic.w	r2, r2, #1
 800a638:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2220      	movs	r2, #32
 800a63e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2220      	movs	r2, #32
 800a644:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2220      	movs	r2, #32
 800a64a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e00f      	b.n	800a678 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69da      	ldr	r2, [r3, #28]
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	4013      	ands	r3, r2
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	bf0c      	ite	eq
 800a668:	2301      	moveq	r3, #1
 800a66a:	2300      	movne	r3, #0
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	461a      	mov	r2, r3
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	429a      	cmp	r2, r3
 800a674:	d092      	beq.n	800a59c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a696:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689a      	ldr	r2, [r3, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0201 	bic.w	r2, r2, #1
 800a6a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff fbd8 	bl	8009e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6e4:	bf00      	nop
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a702:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff fbb5 	bl	8009e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a732:	b084      	sub	sp, #16
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	f107 001c 	add.w	r0, r7, #28
 800a740:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	2b01      	cmp	r3, #1
 800a748:	d122      	bne.n	800a790 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a774:	2b01      	cmp	r3, #1
 800a776:	d105      	bne.n	800a784 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f937 	bl	800a9f8 <USB_CoreReset>
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
 800a78e:	e01a      	b.n	800a7c6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f92b 	bl	800a9f8 <USB_CoreReset>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	639a      	str	r2, [r3, #56]	; 0x38
 800a7b8:	e005      	b.n	800a7c6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7d2:	b004      	add	sp, #16
 800a7d4:	4770      	bx	lr

0800a7d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d6:	b480      	push	{r7}
 800a7d8:	b083      	sub	sp, #12
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	f043 0201 	orr.w	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f023 0201 	bic.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d106      	bne.n	800a846 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60da      	str	r2, [r3, #12]
 800a844:	e00b      	b.n	800a85e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a846:	78fb      	ldrb	r3, [r7, #3]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d106      	bne.n	800a85a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	60da      	str	r2, [r3, #12]
 800a858:	e001      	b.n	800a85e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e003      	b.n	800a866 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a85e:	2032      	movs	r0, #50	; 0x32
 800a860:	f7f7 ff1e 	bl	80026a0 <HAL_Delay>

  return HAL_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3708      	adds	r7, #8
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	019b      	lsls	r3, r3, #6
 800a882:	f043 0220 	orr.w	r2, r3, #32
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4a09      	ldr	r2, [pc, #36]	; (800a8b8 <USB_FlushTxFifo+0x48>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d901      	bls.n	800a89c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e006      	b.n	800a8aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	f003 0320 	and.w	r3, r3, #32
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d0f0      	beq.n	800a88a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	00030d40 	.word	0x00030d40

0800a8bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4a09      	ldr	r2, [pc, #36]	; (800a8fc <USB_FlushRxFifo+0x40>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d901      	bls.n	800a8e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e006      	b.n	800a8ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	f003 0310 	and.w	r3, r3, #16
 800a8e8:	2b10      	cmp	r3, #16
 800a8ea:	d0f0      	beq.n	800a8ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	00030d40 	.word	0x00030d40

0800a900 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800a900:	b480      	push	{r7}
 800a902:	b089      	sub	sp, #36	; 0x24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4611      	mov	r1, r2
 800a90c:	461a      	mov	r2, r3
 800a90e:	460b      	mov	r3, r1
 800a910:	71fb      	strb	r3, [r7, #7]
 800a912:	4613      	mov	r3, r2
 800a914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a91e:	88bb      	ldrh	r3, [r7, #4]
 800a920:	3303      	adds	r3, #3
 800a922:	089b      	lsrs	r3, r3, #2
 800a924:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a926:	2300      	movs	r3, #0
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	e00f      	b.n	800a94c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	031a      	lsls	r2, r3, #12
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	4413      	add	r3, r2
 800a934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a938:	461a      	mov	r2, r3
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	3304      	adds	r3, #4
 800a944:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	3301      	adds	r3, #1
 800a94a:	61bb      	str	r3, [r7, #24]
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	429a      	cmp	r2, r3
 800a952:	d3eb      	bcc.n	800a92c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3724      	adds	r7, #36	; 0x24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a962:	b480      	push	{r7}
 800a964:	b089      	sub	sp, #36	; 0x24
 800a966:	af00      	add	r7, sp, #0
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	4613      	mov	r3, r2
 800a96e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a978:	88fb      	ldrh	r3, [r7, #6]
 800a97a:	3303      	adds	r3, #3
 800a97c:	089b      	lsrs	r3, r3, #2
 800a97e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a980:	2300      	movs	r3, #0
 800a982:	61bb      	str	r3, [r7, #24]
 800a984:	e00b      	b.n	800a99e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	601a      	str	r2, [r3, #0]
    pDest++;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	3304      	adds	r3, #4
 800a996:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	3301      	adds	r3, #1
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d3ef      	bcc.n	800a986 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a9a6:	69fb      	ldr	r3, [r7, #28]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3724      	adds	r7, #36	; 0x24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	f003 0301 	and.w	r3, r3, #1
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3301      	adds	r3, #1
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4a13      	ldr	r2, [pc, #76]	; (800aa5c <USB_CoreReset+0x64>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d901      	bls.n	800aa16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e01b      	b.n	800aa4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	daf2      	bge.n	800aa04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f043 0201 	orr.w	r2, r3, #1
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <USB_CoreReset+0x64>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d901      	bls.n	800aa40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e006      	b.n	800aa4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d0f0      	beq.n	800aa2e <USB_CoreReset+0x36>

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	00030d40 	.word	0x00030d40

0800aa60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa60:	b084      	sub	sp, #16
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	f107 001c 	add.w	r0, r7, #28
 800aa6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aaa8:	f023 0304 	bic.w	r3, r3, #4
 800aaac:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800aaae:	2110      	movs	r1, #16
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fedd 	bl	800a870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f7ff ff00 	bl	800a8bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800aabc:	2300      	movs	r3, #0
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	e015      	b.n	800aaee <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aace:	461a      	mov	r2, r3
 800aad0:	f04f 33ff 	mov.w	r3, #4294967295
 800aad4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aae2:	461a      	mov	r2, r3
 800aae4:	2300      	movs	r3, #0
 800aae6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d3e5      	bcc.n	800aac2 <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f893 	bl	800ac24 <USB_DriveVbus>

  HAL_Delay(200U);
 800aafe:	20c8      	movs	r0, #200	; 0xc8
 800ab00:	f7f7 fdce 	bl	80026a0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab10:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2280      	movs	r2, #128	; 0x80
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a0d      	ldr	r2, [pc, #52]	; (800ab50 <USB_HostInit+0xf0>)
 800ab1c:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a0c      	ldr	r2, [pc, #48]	; (800ab54 <USB_HostInit+0xf4>)
 800ab22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	f043 0210 	orr.w	r2, r3, #16
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	699a      	ldr	r2, [r3, #24]
 800ab36:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <USB_HostInit+0xf8>)
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab4a:	b004      	add	sp, #16
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	00600080 	.word	0x00600080
 800ab54:	004000e0 	.word	0x004000e0
 800ab58:	a3200008 	.word	0xa3200008

0800ab5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	f003 0303 	and.w	r3, r3, #3
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab94:	4313      	orrs	r3, r2
 800ab96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d107      	bne.n	800abae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aba4:	461a      	mov	r2, r3
 800aba6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800abaa:	6053      	str	r3, [r2, #4]
 800abac:	e009      	b.n	800abc2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d106      	bne.n	800abc2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abba:	461a      	mov	r2, r3
 800abbc:	f241 7370 	movw	r3, #6000	; 0x1770
 800abc0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800abf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800abfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abfe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ac00:	2064      	movs	r0, #100	; 0x64
 800ac02:	f7f7 fd4d 	bl	80026a0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac12:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ac14:	200a      	movs	r0, #10
 800ac16:	f7f7 fd43 	bl	80026a0 <HAL_Delay>

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ac48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d109      	bne.n	800ac68 <USB_DriveVbus+0x44>
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d106      	bne.n	800ac68 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac66:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac72:	d109      	bne.n	800ac88 <USB_DriveVbus+0x64>
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac86:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b085      	sub	sp, #20
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	0c5b      	lsrs	r3, r3, #17
 800acb4:	f003 0303 	and.w	r3, r3, #3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	b29b      	uxth	r3, r3
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
	...

0800ace8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	4608      	mov	r0, r1
 800acf2:	4611      	mov	r1, r2
 800acf4:	461a      	mov	r2, r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	70fb      	strb	r3, [r7, #3]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70bb      	strb	r3, [r7, #2]
 800acfe:	4613      	mov	r3, r2
 800ad00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad16:	461a      	mov	r2, r3
 800ad18:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ad1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d867      	bhi.n	800adf6 <USB_HC_Init+0x10e>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <USB_HC_Init+0x44>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800ad3d 	.word	0x0800ad3d
 800ad30:	0800adb9 	.word	0x0800adb9
 800ad34:	0800ad3d 	.word	0x0800ad3d
 800ad38:	0800ad7b 	.word	0x0800ad7b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ad4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ad50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	da51      	bge.n	800adfc <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad58:	78fb      	ldrb	r3, [r7, #3]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	78fa      	ldrb	r2, [r7, #3]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad76:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ad78:	e040      	b.n	800adfc <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad7a:	78fb      	ldrb	r3, [r7, #3]
 800ad7c:	015a      	lsls	r2, r3, #5
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad86:	461a      	mov	r2, r3
 800ad88:	f240 639d 	movw	r3, #1693	; 0x69d
 800ad8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	da34      	bge.n	800ae00 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	78fa      	ldrb	r2, [r7, #3]
 800ada6:	0151      	lsls	r1, r2, #5
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	440a      	add	r2, r1
 800adac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb4:	60d3      	str	r3, [r2, #12]
      }

      break;
 800adb6:	e023      	b.n	800ae00 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc4:	461a      	mov	r2, r3
 800adc6:	f240 2325 	movw	r3, #549	; 0x225
 800adca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800adcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800add0:	2b00      	cmp	r3, #0
 800add2:	da17      	bge.n	800ae04 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4413      	add	r3, r2
 800addc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	78fa      	ldrb	r2, [r7, #3]
 800ade4:	0151      	lsls	r1, r2, #5
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	440a      	add	r2, r1
 800adea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adee:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800adf2:	60d3      	str	r3, [r2, #12]
      }
      break;
 800adf4:	e006      	b.n	800ae04 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	75fb      	strb	r3, [r7, #23]
      break;
 800adfa:	e004      	b.n	800ae06 <USB_HC_Init+0x11e>
      break;
 800adfc:	bf00      	nop
 800adfe:	e002      	b.n	800ae06 <USB_HC_Init+0x11e>
      break;
 800ae00:	bf00      	nop
 800ae02:	e000      	b.n	800ae06 <USB_HC_Init+0x11e>
      break;
 800ae04:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	78fb      	ldrb	r3, [r7, #3]
 800ae10:	f003 030f 	and.w	r3, r3, #15
 800ae14:	2101      	movs	r1, #1
 800ae16:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1a:	68b9      	ldr	r1, [r7, #8]
 800ae1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ae20:	4313      	orrs	r3, r2
 800ae22:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ae30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	da03      	bge.n	800ae40 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ae38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae3c:	613b      	str	r3, [r7, #16]
 800ae3e:	e001      	b.n	800ae44 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800ae40:	2300      	movs	r3, #0
 800ae42:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ae44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d103      	bne.n	800ae54 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ae4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e001      	b.n	800ae58 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae58:	787b      	ldrb	r3, [r7, #1]
 800ae5a:	059b      	lsls	r3, r3, #22
 800ae5c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae60:	78bb      	ldrb	r3, [r7, #2]
 800ae62:	02db      	lsls	r3, r3, #11
 800ae64:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae68:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae6e:	049b      	lsls	r3, r3, #18
 800ae70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae74:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae78:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae7c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae82:	78fb      	ldrb	r3, [r7, #3]
 800ae84:	0159      	lsls	r1, r3, #5
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	440b      	add	r3, r1
 800ae8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae8e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae94:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ae96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d10f      	bne.n	800aebe <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800ae9e:	78fb      	ldrb	r3, [r7, #3]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	78fa      	ldrb	r2, [r7, #3]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aeb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aebc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	371c      	adds	r7, #28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800aee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aee4:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	8912      	ldrh	r2, [r2, #8]
 800aef6:	4413      	add	r3, r2
 800aef8:	3b01      	subs	r3, #1
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	8912      	ldrh	r2, [r2, #8]
 800aefe:	fbb3 f3f2 	udiv	r3, r3, r2
 800af02:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800af04:	8bfa      	ldrh	r2, [r7, #30]
 800af06:	8a7b      	ldrh	r3, [r7, #18]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d90b      	bls.n	800af24 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800af0c:	8a7b      	ldrh	r3, [r7, #18]
 800af0e:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800af10:	8bfb      	ldrh	r3, [r7, #30]
 800af12:	683a      	ldr	r2, [r7, #0]
 800af14:	8912      	ldrh	r2, [r2, #8]
 800af16:	fb02 f203 	mul.w	r2, r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	611a      	str	r2, [r3, #16]
 800af1e:	e001      	b.n	800af24 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800af20:	2301      	movs	r3, #1
 800af22:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	78db      	ldrb	r3, [r3, #3]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800af2c:	8bfb      	ldrh	r3, [r7, #30]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	8912      	ldrh	r2, [r2, #8]
 800af32:	fb02 f203 	mul.w	r2, r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af42:	8bfb      	ldrh	r3, [r7, #30]
 800af44:	04d9      	lsls	r1, r3, #19
 800af46:	4b5f      	ldr	r3, [pc, #380]	; (800b0c4 <USB_HC_StartXfer+0x1f8>)
 800af48:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af4a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	7a9b      	ldrb	r3, [r3, #10]
 800af50:	075b      	lsls	r3, r3, #29
 800af52:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af56:	6979      	ldr	r1, [r7, #20]
 800af58:	0148      	lsls	r0, r1, #5
 800af5a:	69b9      	ldr	r1, [r7, #24]
 800af5c:	4401      	add	r1, r0
 800af5e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800af62:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800af64:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f003 0301 	and.w	r3, r3, #1
 800af72:	2b00      	cmp	r3, #0
 800af74:	bf0c      	ite	eq
 800af76:	2301      	moveq	r3, #1
 800af78:	2300      	movne	r3, #0
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	4413      	add	r3, r2
 800af86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	0151      	lsls	r1, r2, #5
 800af90:	69ba      	ldr	r2, [r7, #24]
 800af92:	440a      	add	r2, r1
 800af94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af98:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800af9c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	7c7b      	ldrb	r3, [r7, #17]
 800afae:	075b      	lsls	r3, r3, #29
 800afb0:	6979      	ldr	r1, [r7, #20]
 800afb2:	0148      	lsls	r0, r1, #5
 800afb4:	69b9      	ldr	r1, [r7, #24]
 800afb6:	4401      	add	r1, r0
 800afb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800afbc:	4313      	orrs	r3, r2
 800afbe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a3e      	ldr	r2, [pc, #248]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800afd0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800afd2:	4b3d      	ldr	r3, [pc, #244]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800afda:	4a3b      	ldr	r2, [pc, #236]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800afdc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	78db      	ldrb	r3, [r3, #3]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d006      	beq.n	800aff4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800afe6:	4b38      	ldr	r3, [pc, #224]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afee:	4a36      	ldr	r2, [pc, #216]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	e005      	b.n	800b000 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aff4:	4b34      	ldr	r3, [pc, #208]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800affc:	4a32      	ldr	r2, [pc, #200]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800affe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b000:	4b31      	ldr	r3, [pc, #196]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b008:	4a2f      	ldr	r2, [pc, #188]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800b00a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	015a      	lsls	r2, r3, #5
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	4413      	add	r3, r2
 800b014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b018:	461a      	mov	r2, r3
 800b01a:	4b2b      	ldr	r3, [pc, #172]	; (800b0c8 <USB_HC_StartXfer+0x1fc>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	78db      	ldrb	r3, [r3, #3]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d148      	bne.n	800b0ba <USB_HC_StartXfer+0x1ee>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d044      	beq.n	800b0ba <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	79db      	ldrb	r3, [r3, #7]
 800b034:	2b03      	cmp	r3, #3
 800b036:	d831      	bhi.n	800b09c <USB_HC_StartXfer+0x1d0>
 800b038:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <USB_HC_StartXfer+0x174>)
 800b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800b051 	.word	0x0800b051
 800b044:	0800b075 	.word	0x0800b075
 800b048:	0800b051 	.word	0x0800b051
 800b04c:	0800b075 	.word	0x0800b075
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	3303      	adds	r3, #3
 800b056:	089b      	lsrs	r3, r3, #2
 800b058:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b05a:	89fa      	ldrh	r2, [r7, #14]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b060:	b29b      	uxth	r3, r3
 800b062:	429a      	cmp	r2, r3
 800b064:	d91c      	bls.n	800b0a0 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	f043 0220 	orr.w	r2, r3, #32
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	619a      	str	r2, [r3, #24]
          }
          break;
 800b072:	e015      	b.n	800b0a0 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	3303      	adds	r3, #3
 800b07a:	089b      	lsrs	r3, r3, #2
 800b07c:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b07e:	89fa      	ldrh	r2, [r7, #14]
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d90a      	bls.n	800b0a4 <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	619a      	str	r2, [r3, #24]
          }
          break;
 800b09a:	e003      	b.n	800b0a4 <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800b09c:	bf00      	nop
 800b09e:	e002      	b.n	800b0a6 <USB_HC_StartXfer+0x1da>
          break;
 800b0a0:	bf00      	nop
 800b0a2:	e000      	b.n	800b0a6 <USB_HC_StartXfer+0x1da>
          break;
 800b0a4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68d9      	ldr	r1, [r3, #12]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	785a      	ldrb	r2, [r3, #1]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff fc23 	bl	800a900 <USB_WritePacket>
    }

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3720      	adds	r7, #32
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	1ff80000 	.word	0x1ff80000
 800b0c8:	200004c8 	.word	0x200004c8

0800b0cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	b29b      	uxth	r3, r3
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b087      	sub	sp, #28
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b0fe:	78fb      	ldrb	r3, [r7, #3]
 800b100:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	0c9b      	lsrs	r3, r3, #18
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <USB_HC_Halt+0x3a>
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b02      	cmp	r3, #2
 800b126:	d16c      	bne.n	800b202 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b146:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d143      	bne.n	800b1dc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	0151      	lsls	r1, r2, #5
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	440a      	add	r2, r1
 800b16a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b16e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b172:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	015a      	lsls	r2, r3, #5
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	4413      	add	r3, r2
 800b17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	0151      	lsls	r1, r2, #5
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	440a      	add	r2, r1
 800b18a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b18e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b192:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1b2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	617b      	str	r3, [r7, #20]
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1c0:	d81d      	bhi.n	800b1fe <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	015a      	lsls	r2, r3, #5
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1d8:	d0ec      	beq.n	800b1b4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b1da:	e080      	b.n	800b2de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	0151      	lsls	r1, r2, #5
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	440a      	add	r2, r1
 800b1f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1fa:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b1fc:	e06f      	b.n	800b2de <USB_HC_Halt+0x1f0>
          break;
 800b1fe:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b200:	e06d      	b.n	800b2de <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	440a      	add	r2, r1
 800b218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b21c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b220:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d143      	bne.n	800b2ba <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	0151      	lsls	r1, r2, #5
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	440a      	add	r2, r1
 800b248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b24c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b250:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	0151      	lsls	r1, r2, #5
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	440a      	add	r2, r1
 800b268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b26c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b270:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	0151      	lsls	r1, r2, #5
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	440a      	add	r2, r1
 800b288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b28c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b290:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	3301      	adds	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b29e:	d81d      	bhi.n	800b2dc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2b6:	d0ec      	beq.n	800b292 <USB_HC_Halt+0x1a4>
 800b2b8:	e011      	b.n	800b2de <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	015a      	lsls	r2, r3, #5
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	0151      	lsls	r1, r2, #5
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	440a      	add	r2, r1
 800b2d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	e000      	b.n	800b2de <USB_HC_Halt+0x1f0>
          break;
 800b2dc:	bf00      	nop
    }
  }

  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	371c      	adds	r7, #28
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7ff fa7b 	bl	800a7f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b302:	2110      	movs	r1, #16
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7ff fab3 	bl	800a870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fad6 	bl	800a8bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
 800b314:	e01f      	b.n	800b356 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b32c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b334:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b33c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b34a:	461a      	mov	r2, r3
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	3301      	adds	r3, #1
 800b354:	613b      	str	r3, [r7, #16]
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	2b0f      	cmp	r3, #15
 800b35a:	d9dc      	bls.n	800b316 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b35c:	2300      	movs	r3, #0
 800b35e:	613b      	str	r3, [r7, #16]
 800b360:	e034      	b.n	800b3cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b378:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b380:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b388:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	4413      	add	r3, r2
 800b392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b396:	461a      	mov	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3a8:	d80c      	bhi.n	800b3c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3c0:	d0ec      	beq.n	800b39c <USB_StopHost+0xb0>
 800b3c2:	e000      	b.n	800b3c6 <USB_StopHost+0xda>
        break;
 800b3c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	613b      	str	r3, [r7, #16]
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b0f      	cmp	r3, #15
 800b3d0:	d9c7      	bls.n	800b362 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3d8:	461a      	mov	r2, r3
 800b3da:	f04f 33ff 	mov.w	r3, #4294967295
 800b3de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff f9f4 	bl	800a7d6 <USB_EnableGlobalInt>

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b3f8:	b590      	push	{r4, r7, lr}
 800b3fa:	b089      	sub	sp, #36	; 0x24
 800b3fc:	af04      	add	r7, sp, #16
 800b3fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b400:	2301      	movs	r3, #1
 800b402:	2202      	movs	r2, #2
 800b404:	2102      	movs	r1, #2
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fc68 	bl	800bcdc <USBH_FindInterface>
 800b40c:	4603      	mov	r3, r0
 800b40e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	2bff      	cmp	r3, #255	; 0xff
 800b414:	d002      	beq.n	800b41c <USBH_CDC_InterfaceInit+0x24>
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d901      	bls.n	800b420 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b41c:	2302      	movs	r3, #2
 800b41e:	e13d      	b.n	800b69c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fc3d 	bl	800bca4 <USBH_SelectInterface>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b434:	2302      	movs	r3, #2
 800b436:	e131      	b.n	800b69c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b43e:	2050      	movs	r0, #80	; 0x50
 800b440:	f003 fa16 	bl	800e870 <malloc>
 800b444:	4603      	mov	r3, r0
 800b446:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b458:	2302      	movs	r3, #2
 800b45a:	e11f      	b.n	800b69c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b45c:	2250      	movs	r2, #80	; 0x50
 800b45e:	2100      	movs	r1, #0
 800b460:	68b8      	ldr	r0, [r7, #8]
 800b462:	f003 fa15 	bl	800e890 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	211a      	movs	r1, #26
 800b46c:	fb01 f303 	mul.w	r3, r1, r3
 800b470:	4413      	add	r3, r2
 800b472:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	b25b      	sxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	da15      	bge.n	800b4aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	211a      	movs	r1, #26
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	4413      	add	r3, r2
 800b48a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b48e:	781a      	ldrb	r2, [r3, #0]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	211a      	movs	r1, #26
 800b49a:	fb01 f303 	mul.w	r3, r1, r3
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 fe36 	bl	800d122 <USBH_AllocPipe>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	7819      	ldrb	r1, [r3, #0]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	7858      	ldrb	r0, [r3, #1]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	8952      	ldrh	r2, [r2, #10]
 800b4d6:	9202      	str	r2, [sp, #8]
 800b4d8:	2203      	movs	r2, #3
 800b4da:	9201      	str	r2, [sp, #4]
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	4623      	mov	r3, r4
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 fdee 	bl	800d0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f002 f8ff 	bl	800d6f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	210a      	movs	r1, #10
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fbed 	bl	800bcdc <USBH_FindInterface>
 800b502:	4603      	mov	r3, r0
 800b504:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b506:	7bfb      	ldrb	r3, [r7, #15]
 800b508:	2bff      	cmp	r3, #255	; 0xff
 800b50a:	d002      	beq.n	800b512 <USBH_CDC_InterfaceInit+0x11a>
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d901      	bls.n	800b516 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b512:	2302      	movs	r3, #2
 800b514:	e0c2      	b.n	800b69c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	211a      	movs	r1, #26
 800b51c:	fb01 f303 	mul.w	r3, r1, r3
 800b520:	4413      	add	r3, r2
 800b522:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b25b      	sxtb	r3, r3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	da16      	bge.n	800b55c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b52e:	7bfb      	ldrb	r3, [r7, #15]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	211a      	movs	r1, #26
 800b534:	fb01 f303 	mul.w	r3, r1, r3
 800b538:	4413      	add	r3, r2
 800b53a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	211a      	movs	r1, #26
 800b54a:	fb01 f303 	mul.w	r3, r1, r3
 800b54e:	4413      	add	r3, r2
 800b550:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b554:	881a      	ldrh	r2, [r3, #0]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	835a      	strh	r2, [r3, #26]
 800b55a:	e015      	b.n	800b588 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	211a      	movs	r1, #26
 800b562:	fb01 f303 	mul.w	r3, r1, r3
 800b566:	4413      	add	r3, r2
 800b568:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	211a      	movs	r1, #26
 800b578:	fb01 f303 	mul.w	r3, r1, r3
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b582:	881a      	ldrh	r2, [r3, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	211a      	movs	r1, #26
 800b58e:	fb01 f303 	mul.w	r3, r1, r3
 800b592:	4413      	add	r3, r2
 800b594:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	b25b      	sxtb	r3, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	da16      	bge.n	800b5ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	211a      	movs	r1, #26
 800b5a6:	fb01 f303 	mul.w	r3, r1, r3
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	211a      	movs	r1, #26
 800b5bc:	fb01 f303 	mul.w	r3, r1, r3
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b5c6:	881a      	ldrh	r2, [r3, #0]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	835a      	strh	r2, [r3, #26]
 800b5cc:	e015      	b.n	800b5fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	211a      	movs	r1, #26
 800b5d4:	fb01 f303 	mul.w	r3, r1, r3
 800b5d8:	4413      	add	r3, r2
 800b5da:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	211a      	movs	r1, #26
 800b5ea:	fb01 f303 	mul.w	r3, r1, r3
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b5f4:	881a      	ldrh	r2, [r3, #0]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	7b9b      	ldrb	r3, [r3, #14]
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 fd8e 	bl	800d122 <USBH_AllocPipe>
 800b606:	4603      	mov	r3, r0
 800b608:	461a      	mov	r2, r3
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	7bdb      	ldrb	r3, [r3, #15]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 fd84 	bl	800d122 <USBH_AllocPipe>
 800b61a:	4603      	mov	r3, r0
 800b61c:	461a      	mov	r2, r3
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	7b59      	ldrb	r1, [r3, #13]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	7b98      	ldrb	r0, [r3, #14]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	8b12      	ldrh	r2, [r2, #24]
 800b63a:	9202      	str	r2, [sp, #8]
 800b63c:	2202      	movs	r2, #2
 800b63e:	9201      	str	r2, [sp, #4]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	4623      	mov	r3, r4
 800b644:	4602      	mov	r2, r0
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f001 fd3c 	bl	800d0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	7b19      	ldrb	r1, [r3, #12]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	7bd8      	ldrb	r0, [r3, #15]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	8b52      	ldrh	r2, [r2, #26]
 800b664:	9202      	str	r2, [sp, #8]
 800b666:	2202      	movs	r2, #2
 800b668:	9201      	str	r2, [sp, #4]
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	4623      	mov	r3, r4
 800b66e:	4602      	mov	r2, r0
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fd27 	bl	800d0c4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	7b5b      	ldrb	r3, [r3, #13]
 800b682:	2200      	movs	r2, #0
 800b684:	4619      	mov	r1, r3
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f002 f834 	bl	800d6f4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	7b1b      	ldrb	r3, [r3, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f002 f82d 	bl	800d6f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd90      	pop	{r4, r7, pc}

0800b6a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00e      	beq.n	800b6dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 fd1c 	bl	800d102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f001 fd47 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	7b1b      	ldrb	r3, [r3, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00e      	beq.n	800b702 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	7b1b      	ldrb	r3, [r3, #12]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f001 fd09 	bl	800d102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	7b1b      	ldrb	r3, [r3, #12]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f001 fd34 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	7b5b      	ldrb	r3, [r3, #13]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00e      	beq.n	800b728 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	7b5b      	ldrb	r3, [r3, #13]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fcf6 	bl	800d102 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	7b5b      	ldrb	r3, [r3, #13]
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f001 fd21 	bl	800d164 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f003 f89f 	bl	800e880 <free>
    phost->pActiveClass->pData = 0U;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b748:	2200      	movs	r2, #0
 800b74a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b764:	69db      	ldr	r3, [r3, #28]
 800b766:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	3340      	adds	r3, #64	; 0x40
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f8b1 	bl	800b8d6 <GetLineCoding>
 800b774:	4603      	mov	r3, r0
 800b776:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b778:	7afb      	ldrb	r3, [r7, #11]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d105      	bne.n	800b78a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b784:	2102      	movs	r1, #2
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b78a:	7afb      	ldrb	r3, [r7, #11]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b79c:	2301      	movs	r3, #1
 800b79e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b7b4:	2b04      	cmp	r3, #4
 800b7b6:	d877      	bhi.n	800b8a8 <USBH_CDC_Process+0x114>
 800b7b8:	a201      	add	r2, pc, #4	; (adr r2, 800b7c0 <USBH_CDC_Process+0x2c>)
 800b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7be:	bf00      	nop
 800b7c0:	0800b7d5 	.word	0x0800b7d5
 800b7c4:	0800b7db 	.word	0x0800b7db
 800b7c8:	0800b80b 	.word	0x0800b80b
 800b7cc:	0800b87f 	.word	0x0800b87f
 800b7d0:	0800b88d 	.word	0x0800b88d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7d8:	e06d      	b.n	800b8b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f897 	bl	800b914 <SetLineCoding>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b7ea:	7bbb      	ldrb	r3, [r7, #14]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d104      	bne.n	800b7fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b7f8:	e058      	b.n	800b8ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d055      	beq.n	800b8ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2204      	movs	r2, #4
 800b804:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b808:	e050      	b.n	800b8ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3340      	adds	r3, #64	; 0x40
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f860 	bl	800b8d6 <GetLineCoding>
 800b816:	4603      	mov	r3, r0
 800b818:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d126      	bne.n	800b86e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b832:	791b      	ldrb	r3, [r3, #4]
 800b834:	429a      	cmp	r2, r3
 800b836:	d13b      	bne.n	800b8b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b842:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b844:	429a      	cmp	r2, r3
 800b846:	d133      	bne.n	800b8b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b852:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b854:	429a      	cmp	r2, r3
 800b856:	d12b      	bne.n	800b8b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b860:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b862:	429a      	cmp	r2, r3
 800b864:	d124      	bne.n	800b8b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f95a 	bl	800bb20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b86c:	e020      	b.n	800b8b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b86e:	7bbb      	ldrb	r3, [r7, #14]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d01d      	beq.n	800b8b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	2204      	movs	r2, #4
 800b878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b87c:	e018      	b.n	800b8b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f867 	bl	800b952 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f8dc 	bl	800ba42 <CDC_ProcessReception>
      break;
 800b88a:	e014      	b.n	800b8b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b88c:	2100      	movs	r1, #0
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 ffe5 	bl	800c85e <USBH_ClrFeature>
 800b894:	4603      	mov	r3, r0
 800b896:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b898:	7bbb      	ldrb	r3, [r7, #14]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10a      	bne.n	800b8b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b8a6:	e005      	b.n	800b8b4 <USBH_CDC_Process+0x120>

    default:
      break;
 800b8a8:	bf00      	nop
 800b8aa:	e004      	b.n	800b8b6 <USBH_CDC_Process+0x122>
      break;
 800b8ac:	bf00      	nop
 800b8ae:	e002      	b.n	800b8b6 <USBH_CDC_Process+0x122>
      break;
 800b8b0:	bf00      	nop
 800b8b2:	e000      	b.n	800b8b6 <USBH_CDC_Process+0x122>
      break;
 800b8b4:	bf00      	nop

  }

  return status;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b082      	sub	sp, #8
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	22a1      	movs	r2, #161	; 0xa1
 800b8e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2221      	movs	r2, #33	; 0x21
 800b8ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2207      	movs	r2, #7
 800b8fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2207      	movs	r2, #7
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 f98a 	bl	800cc1e <USBH_CtlReq>
 800b90a:	4603      	mov	r3, r0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2221      	movs	r2, #33	; 0x21
 800b922:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2220      	movs	r2, #32
 800b928:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2207      	movs	r2, #7
 800b93a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2207      	movs	r2, #7
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f001 f96b 	bl	800cc1e <USBH_CtlReq>
 800b948:	4603      	mov	r3, r0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b086      	sub	sp, #24
 800b956:	af02      	add	r7, sp, #8
 800b958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b964:	2300      	movs	r3, #0
 800b966:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d002      	beq.n	800b978 <CDC_ProcessTransmission+0x26>
 800b972:	2b02      	cmp	r3, #2
 800b974:	d025      	beq.n	800b9c2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800b976:	e060      	b.n	800ba3a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	8b12      	ldrh	r2, [r2, #24]
 800b980:	4293      	cmp	r3, r2
 800b982:	d90c      	bls.n	800b99e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	69d9      	ldr	r1, [r3, #28]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	8b1a      	ldrh	r2, [r3, #24]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	7b58      	ldrb	r0, [r3, #13]
 800b990:	2301      	movs	r3, #1
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4603      	mov	r3, r0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f001 fb51 	bl	800d03e <USBH_BulkSendData>
 800b99c:	e00c      	b.n	800b9b8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	7b58      	ldrb	r0, [r3, #13]
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 fb43 	bl	800d03e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b9c0:	e03b      	b.n	800ba3a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	7b5b      	ldrb	r3, [r3, #13]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 fe69 	bl	800d6a0 <USBH_LL_GetURBState>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b9d2:	7afb      	ldrb	r3, [r7, #11]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d128      	bne.n	800ba2a <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	8b12      	ldrh	r2, [r2, #24]
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	d90e      	bls.n	800ba02 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	8b12      	ldrh	r2, [r2, #24]
 800b9ec:	1a9a      	subs	r2, r3, r2
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	8b12      	ldrh	r2, [r2, #24]
 800b9fa:	441a      	add	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	61da      	str	r2, [r3, #28]
 800ba00:	e002      	b.n	800ba08 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba18:	e00e      	b.n	800ba38 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f868 	bl	800baf8 <USBH_CDC_TransmitCallback>
      break;
 800ba28:	e006      	b.n	800ba38 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800ba2a:	7afb      	ldrb	r3, [r7, #11]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d103      	bne.n	800ba38 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ba38:	bf00      	nop
  }
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b086      	sub	sp, #24
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ba54:	2300      	movs	r3, #0
 800ba56:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d002      	beq.n	800ba68 <CDC_ProcessReception+0x26>
 800ba62:	2b04      	cmp	r3, #4
 800ba64:	d00e      	beq.n	800ba84 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ba66:	e043      	b.n	800baf0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	6a19      	ldr	r1, [r3, #32]
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	8b5a      	ldrh	r2, [r3, #26]
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	7b1b      	ldrb	r3, [r3, #12]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 fb07 	bl	800d088 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2204      	movs	r2, #4
 800ba7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ba82:	e035      	b.n	800baf0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	7b1b      	ldrb	r3, [r3, #12]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 fe08 	bl	800d6a0 <USBH_LL_GetURBState>
 800ba90:	4603      	mov	r3, r0
 800ba92:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ba94:	7cfb      	ldrb	r3, [r7, #19]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d129      	bne.n	800baee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	7b1b      	ldrb	r3, [r3, #12]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f001 fd6b 	bl	800d57c <USBH_LL_GetLastXferSize>
 800baa6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d016      	beq.n	800bae0 <CDC_ProcessReception+0x9e>
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	8b5b      	ldrh	r3, [r3, #26]
 800bab6:	461a      	mov	r2, r3
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4293      	cmp	r3, r2
 800babc:	d910      	bls.n	800bae0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	1ad2      	subs	r2, r2, r3
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	6a1a      	ldr	r2, [r3, #32]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	441a      	add	r2, r3
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2203      	movs	r2, #3
 800bada:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bade:	e006      	b.n	800baee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f80f 	bl	800bb0c <USBH_CDC_ReceiveCallback>
      break;
 800baee:	bf00      	nop
  }
}
 800baf0:	bf00      	nop
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	4613      	mov	r3, r2
 800bb40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb48:	2302      	movs	r3, #2
 800bb4a:	e029      	b.n	800bba0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	79fa      	ldrb	r2, [r7, #7]
 800bb50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f000 f81f 	bl	800bba8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f001 fc3d 	bl	800d418 <USBH_LL_Init>

  return USBH_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e009      	b.n	800bbce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	33e0      	adds	r3, #224	; 0xe0
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b0e      	cmp	r3, #14
 800bbd2:	d9f2      	bls.n	800bbba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
 800bbd8:	e009      	b.n	800bbee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	3301      	adds	r3, #1
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf4:	d3f1      	bcc.n	800bbda <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2240      	movs	r2, #64	; 0x40
 800bc1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d016      	beq.n	800bc92 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10e      	bne.n	800bc8c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc74:	1c59      	adds	r1, r3, #1
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	33de      	adds	r3, #222	; 0xde
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
 800bc8a:	e004      	b.n	800bc96 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	73fb      	strb	r3, [r7, #15]
 800bc90:	e001      	b.n	800bc96 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bc92:	2302      	movs	r3, #2
 800bc94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bcba:	78fa      	ldrb	r2, [r7, #3]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d204      	bcs.n	800bcca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	78fa      	ldrb	r2, [r7, #3]
 800bcc4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bcc8:	e001      	b.n	800bcce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bcca:	2302      	movs	r3, #2
 800bccc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	4608      	mov	r0, r1
 800bce6:	4611      	mov	r1, r2
 800bce8:	461a      	mov	r2, r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	70fb      	strb	r3, [r7, #3]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70bb      	strb	r3, [r7, #2]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bd04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd06:	e025      	b.n	800bd54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bd08:	7dfb      	ldrb	r3, [r7, #23]
 800bd0a:	221a      	movs	r2, #26
 800bd0c:	fb02 f303 	mul.w	r3, r2, r3
 800bd10:	3308      	adds	r3, #8
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	4413      	add	r3, r2
 800bd16:	3302      	adds	r3, #2
 800bd18:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	795b      	ldrb	r3, [r3, #5]
 800bd1e:	78fa      	ldrb	r2, [r7, #3]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d002      	beq.n	800bd2a <USBH_FindInterface+0x4e>
 800bd24:	78fb      	ldrb	r3, [r7, #3]
 800bd26:	2bff      	cmp	r3, #255	; 0xff
 800bd28:	d111      	bne.n	800bd4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bd2e:	78ba      	ldrb	r2, [r7, #2]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d002      	beq.n	800bd3a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd34:	78bb      	ldrb	r3, [r7, #2]
 800bd36:	2bff      	cmp	r3, #255	; 0xff
 800bd38:	d109      	bne.n	800bd4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bd3e:	787a      	ldrb	r2, [r7, #1]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d002      	beq.n	800bd4a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd44:	787b      	ldrb	r3, [r7, #1]
 800bd46:	2bff      	cmp	r3, #255	; 0xff
 800bd48:	d101      	bne.n	800bd4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	e006      	b.n	800bd5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bd4e:	7dfb      	ldrb	r3, [r7, #23]
 800bd50:	3301      	adds	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d9d6      	bls.n	800bd08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bd5a:	23ff      	movs	r3, #255	; 0xff
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 fb8d 	bl	800d490 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800bd76:	2101      	movs	r1, #1
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f001 fca4 	bl	800d6c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b088      	sub	sp, #32
 800bd8c:	af04      	add	r7, sp, #16
 800bd8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bd90:	2302      	movs	r3, #2
 800bd92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d102      	bne.n	800bdaa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2203      	movs	r2, #3
 800bda8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b0b      	cmp	r3, #11
 800bdb2:	f200 81b3 	bhi.w	800c11c <USBH_Process+0x394>
 800bdb6:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBH_Process+0x34>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800bded 	.word	0x0800bded
 800bdc0:	0800be1f 	.word	0x0800be1f
 800bdc4:	0800be87 	.word	0x0800be87
 800bdc8:	0800c0b7 	.word	0x0800c0b7
 800bdcc:	0800c11d 	.word	0x0800c11d
 800bdd0:	0800bf2b 	.word	0x0800bf2b
 800bdd4:	0800c05d 	.word	0x0800c05d
 800bdd8:	0800bf61 	.word	0x0800bf61
 800bddc:	0800bf81 	.word	0x0800bf81
 800bde0:	0800bfa1 	.word	0x0800bfa1
 800bde4:	0800bfcf 	.word	0x0800bfcf
 800bde8:	0800c09f 	.word	0x0800c09f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8193 	beq.w	800c120 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800be00:	20c8      	movs	r0, #200	; 0xc8
 800be02:	f001 fcaa 	bl	800d75a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 fb9d 	bl	800d546 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800be1c:	e180      	b.n	800c120 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800be24:	2b01      	cmp	r3, #1
 800be26:	d107      	bne.n	800be38 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2202      	movs	r2, #2
 800be34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800be36:	e182      	b.n	800c13e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be42:	d914      	bls.n	800be6e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be4a:	3301      	adds	r3, #1
 800be4c:	b2da      	uxtb	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be5a:	2b03      	cmp	r3, #3
 800be5c:	d903      	bls.n	800be66 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	220d      	movs	r2, #13
 800be62:	701a      	strb	r2, [r3, #0]
      break;
 800be64:	e16b      	b.n	800c13e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
      break;
 800be6c:	e167      	b.n	800c13e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be74:	f103 020a 	add.w	r2, r3, #10
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800be7e:	200a      	movs	r0, #10
 800be80:	f001 fc6b 	bl	800d75a <USBH_Delay>
      break;
 800be84:	e15b      	b.n	800c13e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be96:	2104      	movs	r1, #4
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800be9c:	2064      	movs	r0, #100	; 0x64
 800be9e:	f001 fc5c 	bl	800d75a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f001 fb2a 	bl	800d4fc <USBH_LL_GetSpeed>
 800bea8:	4603      	mov	r3, r0
 800beaa:	461a      	mov	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2205      	movs	r2, #5
 800beb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800beb8:	2100      	movs	r1, #0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f001 f931 	bl	800d122 <USBH_AllocPipe>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bec8:	2180      	movs	r1, #128	; 0x80
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f001 f929 	bl	800d122 <USBH_AllocPipe>
 800bed0:	4603      	mov	r3, r0
 800bed2:	461a      	mov	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	7919      	ldrb	r1, [r3, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800beec:	b292      	uxth	r2, r2
 800beee:	9202      	str	r2, [sp, #8]
 800bef0:	2200      	movs	r2, #0
 800bef2:	9201      	str	r2, [sp, #4]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	4603      	mov	r3, r0
 800bef8:	2280      	movs	r2, #128	; 0x80
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 f8e2 	bl	800d0c4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7959      	ldrb	r1, [r3, #5]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bf14:	b292      	uxth	r2, r2
 800bf16:	9202      	str	r2, [sp, #8]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	9201      	str	r2, [sp, #4]
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2200      	movs	r2, #0
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 f8ce 	bl	800d0c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf28:	e109      	b.n	800c13e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f90c 	bl	800c148 <USBH_HandleEnum>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f040 80f3 	bne.w	800c124 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d103      	bne.n	800bf58 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2208      	movs	r2, #8
 800bf54:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800bf56:	e0e5      	b.n	800c124 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2207      	movs	r2, #7
 800bf5c:	701a      	strb	r2, [r3, #0]
      break;
 800bf5e:	e0e1      	b.n	800c124 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 80de 	beq.w	800c128 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf72:	2101      	movs	r1, #1
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bf7e:	e0d3      	b.n	800c128 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fc20 	bl	800c7d0 <USBH_SetCfg>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f040 80ca 	bne.w	800c12c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2209      	movs	r2, #9
 800bf9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf9e:	e0c5      	b.n	800c12c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800bfae:	2101      	movs	r1, #1
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 fc30 	bl	800c816 <USBH_SetFeature>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f040 80b9 	bne.w	800c130 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	220a      	movs	r2, #10
 800bfc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfc4:	e0b4      	b.n	800c130 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	220a      	movs	r2, #10
 800bfca:	701a      	strb	r2, [r3, #0]
      break;
 800bfcc:	e0b0      	b.n	800c130 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 80ad 	beq.w	800c134 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
 800bfe6:	e016      	b.n	800c016 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bfe8:	7bfa      	ldrb	r2, [r7, #15]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	32de      	adds	r2, #222	; 0xde
 800bfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff2:	791a      	ldrb	r2, [r3, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d108      	bne.n	800c010 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bffe:	7bfa      	ldrb	r2, [r7, #15]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	32de      	adds	r2, #222	; 0xde
 800c004:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c00e:	e005      	b.n	800c01c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c010:	7bfb      	ldrb	r3, [r7, #15]
 800c012:	3301      	adds	r3, #1
 800c014:	73fb      	strb	r3, [r7, #15]
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0e5      	beq.n	800bfe8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d016      	beq.n	800c054 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d109      	bne.n	800c04c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2206      	movs	r2, #6
 800c03c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c044:	2103      	movs	r1, #3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c04a:	e073      	b.n	800c134 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	220d      	movs	r2, #13
 800c050:	701a      	strb	r2, [r3, #0]
      break;
 800c052:	e06f      	b.n	800c134 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	220d      	movs	r2, #13
 800c058:	701a      	strb	r2, [r3, #0]
      break;
 800c05a:	e06b      	b.n	800c134 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d017      	beq.n	800c096 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	4798      	blx	r3
 800c072:	4603      	mov	r3, r0
 800c074:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d103      	bne.n	800c086 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	220b      	movs	r2, #11
 800c082:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c084:	e058      	b.n	800c138 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d154      	bne.n	800c138 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	220d      	movs	r2, #13
 800c092:	701a      	strb	r2, [r3, #0]
      break;
 800c094:	e050      	b.n	800c138 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	220d      	movs	r2, #13
 800c09a:	701a      	strb	r2, [r3, #0]
      break;
 800c09c:	e04c      	b.n	800c138 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d049      	beq.n	800c13c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	4798      	blx	r3
      }
      break;
 800c0b4:	e042      	b.n	800c13c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff fd72 	bl	800bba8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d009      	beq.n	800c0e2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0f2:	2105      	movs	r1, #5
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d107      	bne.n	800c114 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fe2b 	bl	800bd68 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c112:	e014      	b.n	800c13e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f001 f9bb 	bl	800d490 <USBH_LL_Start>
      break;
 800c11a:	e010      	b.n	800c13e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800c11c:	bf00      	nop
 800c11e:	e00e      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c120:	bf00      	nop
 800c122:	e00c      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c124:	bf00      	nop
 800c126:	e00a      	b.n	800c13e <USBH_Process+0x3b6>
    break;
 800c128:	bf00      	nop
 800c12a:	e008      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c12c:	bf00      	nop
 800c12e:	e006      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c130:	bf00      	nop
 800c132:	e004      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c134:	bf00      	nop
 800c136:	e002      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c138:	bf00      	nop
 800c13a:	e000      	b.n	800c13e <USBH_Process+0x3b6>
      break;
 800c13c:	bf00      	nop
  }
  return USBH_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af04      	add	r7, sp, #16
 800c14e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c150:	2301      	movs	r3, #1
 800c152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c154:	2301      	movs	r3, #1
 800c156:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	2b07      	cmp	r3, #7
 800c15e:	f200 81c1 	bhi.w	800c4e4 <USBH_HandleEnum+0x39c>
 800c162:	a201      	add	r2, pc, #4	; (adr r2, 800c168 <USBH_HandleEnum+0x20>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c189 	.word	0x0800c189
 800c16c:	0800c247 	.word	0x0800c247
 800c170:	0800c2b1 	.word	0x0800c2b1
 800c174:	0800c33f 	.word	0x0800c33f
 800c178:	0800c3a9 	.word	0x0800c3a9
 800c17c:	0800c419 	.word	0x0800c419
 800c180:	0800c45f 	.word	0x0800c45f
 800c184:	0800c4a5 	.word	0x0800c4a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c188:	2108      	movs	r1, #8
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fa50 	bl	800c630 <USBH_Get_DevDesc>
 800c190:	4603      	mov	r3, r0
 800c192:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d130      	bne.n	800c1fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7919      	ldrb	r1, [r3, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	9202      	str	r2, [sp, #8]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	9201      	str	r2, [sp, #4]
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2280      	movs	r2, #128	; 0x80
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 ff79 	bl	800d0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	7959      	ldrb	r1, [r3, #5]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	9202      	str	r2, [sp, #8]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	9201      	str	r2, [sp, #4]
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 ff65 	bl	800d0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1fa:	e175      	b.n	800c4e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	f040 8172 	bne.w	800c4e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c20a:	3301      	adds	r3, #1
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d903      	bls.n	800c226 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	220d      	movs	r2, #13
 800c222:	701a      	strb	r2, [r3, #0]
      break;
 800c224:	e160      	b.n	800c4e8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	795b      	ldrb	r3, [r3, #5]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 ff99 	bl	800d164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	791b      	ldrb	r3, [r3, #4]
 800c236:	4619      	mov	r1, r3
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 ff93 	bl	800d164 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2200      	movs	r2, #0
 800c242:	701a      	strb	r2, [r3, #0]
      break;
 800c244:	e150      	b.n	800c4e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c246:	2112      	movs	r1, #18
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f9f1 	bl	800c630 <USBH_Get_DevDesc>
 800c24e:	4603      	mov	r3, r0
 800c250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c25e:	e145      	b.n	800c4ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	2b03      	cmp	r3, #3
 800c264:	f040 8142 	bne.w	800c4ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c26e:	3301      	adds	r3, #1
 800c270:	b2da      	uxtb	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d903      	bls.n	800c28a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	220d      	movs	r2, #13
 800c286:	701a      	strb	r2, [r3, #0]
      break;
 800c288:	e130      	b.n	800c4ec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	795b      	ldrb	r3, [r3, #5]
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 ff67 	bl	800d164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	791b      	ldrb	r3, [r3, #4]
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 ff61 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	701a      	strb	r2, [r3, #0]
      break;
 800c2ae:	e11d      	b.n	800c4ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c2b0:	2101      	movs	r1, #1
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fa68 	bl	800c788 <USBH_SetAddress>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d132      	bne.n	800c328 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c2c2:	2002      	movs	r0, #2
 800c2c4:	f001 fa49 	bl	800d75a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	7919      	ldrb	r1, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2ea:	b292      	uxth	r2, r2
 800c2ec:	9202      	str	r2, [sp, #8]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	9201      	str	r2, [sp, #4]
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2280      	movs	r2, #128	; 0x80
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fee3 	bl	800d0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	7959      	ldrb	r1, [r3, #5]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c312:	b292      	uxth	r2, r2
 800c314:	9202      	str	r2, [sp, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	9201      	str	r2, [sp, #4]
 800c31a:	9300      	str	r3, [sp, #0]
 800c31c:	4603      	mov	r3, r0
 800c31e:	2200      	movs	r2, #0
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 fecf 	bl	800d0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c326:	e0e3      	b.n	800c4f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c328:	7bbb      	ldrb	r3, [r7, #14]
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	f040 80e0 	bne.w	800c4f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	220d      	movs	r2, #13
 800c334:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	705a      	strb	r2, [r3, #1]
      break;
 800c33c:	e0d8      	b.n	800c4f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c33e:	2109      	movs	r1, #9
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 f99d 	bl	800c680 <USBH_Get_CfgDesc>
 800c346:	4603      	mov	r3, r0
 800c348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d103      	bne.n	800c358 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2204      	movs	r2, #4
 800c354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c356:	e0cd      	b.n	800c4f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	f040 80ca 	bne.w	800c4f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c366:	3301      	adds	r3, #1
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c376:	2b03      	cmp	r3, #3
 800c378:	d903      	bls.n	800c382 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	220d      	movs	r2, #13
 800c37e:	701a      	strb	r2, [r3, #0]
      break;
 800c380:	e0b8      	b.n	800c4f4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	795b      	ldrb	r3, [r3, #5]
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 feeb 	bl	800d164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	791b      	ldrb	r3, [r3, #4]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 fee5 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	701a      	strb	r2, [r3, #0]
      break;
 800c3a6:	e0a5      	b.n	800c4f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f965 	bl	800c680 <USBH_Get_CfgDesc>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d103      	bne.n	800c3c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2205      	movs	r2, #5
 800c3c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c3c6:	e097      	b.n	800c4f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c3c8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ca:	2b03      	cmp	r3, #3
 800c3cc:	f040 8094 	bne.w	800c4f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d903      	bls.n	800c3f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	220d      	movs	r2, #13
 800c3ee:	701a      	strb	r2, [r3, #0]
      break;
 800c3f0:	e082      	b.n	800c4f8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	795b      	ldrb	r3, [r3, #5]
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 feb3 	bl	800d164 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	791b      	ldrb	r3, [r3, #4]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fead 	bl	800d164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	701a      	strb	r2, [r3, #0]
      break;
 800c416:	e06f      	b.n	800c4f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d019      	beq.n	800c456 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c42e:	23ff      	movs	r3, #255	; 0xff
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f949 	bl	800c6c8 <USBH_Get_StringDesc>
 800c436:	4603      	mov	r3, r0
 800c438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c43a:	7bbb      	ldrb	r3, [r7, #14]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2206      	movs	r2, #6
 800c444:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c446:	e059      	b.n	800c4fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2b03      	cmp	r3, #3
 800c44c:	d156      	bne.n	800c4fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2206      	movs	r2, #6
 800c452:	705a      	strb	r2, [r3, #1]
      break;
 800c454:	e052      	b.n	800c4fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2206      	movs	r2, #6
 800c45a:	705a      	strb	r2, [r3, #1]
      break;
 800c45c:	e04e      	b.n	800c4fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c464:	2b00      	cmp	r3, #0
 800c466:	d019      	beq.n	800c49c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c474:	23ff      	movs	r3, #255	; 0xff
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f926 	bl	800c6c8 <USBH_Get_StringDesc>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d103      	bne.n	800c48e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2207      	movs	r2, #7
 800c48a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c48c:	e038      	b.n	800c500 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c48e:	7bbb      	ldrb	r3, [r7, #14]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d135      	bne.n	800c500 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2207      	movs	r2, #7
 800c498:	705a      	strb	r2, [r3, #1]
      break;
 800c49a:	e031      	b.n	800c500 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2207      	movs	r2, #7
 800c4a0:	705a      	strb	r2, [r3, #1]
      break;
 800c4a2:	e02d      	b.n	800c500 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d017      	beq.n	800c4de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c4ba:	23ff      	movs	r3, #255	; 0xff
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f903 	bl	800c6c8 <USBH_Get_StringDesc>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c4d0:	e018      	b.n	800c504 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d115      	bne.n	800c504 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	73fb      	strb	r3, [r7, #15]
      break;
 800c4dc:	e012      	b.n	800c504 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e2:	e00f      	b.n	800c504 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c4e4:	bf00      	nop
 800c4e6:	e00e      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4e8:	bf00      	nop
 800c4ea:	e00c      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4ec:	bf00      	nop
 800c4ee:	e00a      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4f0:	bf00      	nop
 800c4f2:	e008      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4f4:	bf00      	nop
 800c4f6:	e006      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4f8:	bf00      	nop
 800c4fa:	e004      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c4fc:	bf00      	nop
 800c4fe:	e002      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c500:	bf00      	nop
 800c502:	e000      	b.n	800c506 <USBH_HandleEnum+0x3be>
      break;
 800c504:	bf00      	nop
  }
  return Status;
 800c506:	7bfb      	ldrb	r3, [r7, #15]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f804 	bl	800c552 <USBH_HandleSof>
}
 800c54a:	bf00      	nop
 800c54c:	3708      	adds	r7, #8
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b082      	sub	sp, #8
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b0b      	cmp	r3, #11
 800c562:	d10a      	bne.n	800c57a <USBH_HandleSof+0x28>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d005      	beq.n	800c57a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	4798      	blx	r3
  }
}
 800c57a:	bf00      	nop
 800c57c:	3708      	adds	r7, #8
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}

0800c582 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c582:	b480      	push	{r7}
 800c584:	b083      	sub	sp, #12
 800c586:	af00      	add	r7, sp, #0
 800c588:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800c592:	bf00      	nop
}
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr

0800c59e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b083      	sub	sp, #12
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c5ae:	bf00      	nop
}
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 ff5c 	bl	800d4c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	791b      	ldrb	r3, [r3, #4]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fda5 	bl	800d164 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	795b      	ldrb	r3, [r3, #5]
 800c61e:	4619      	mov	r1, r3
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fd9f 	bl	800d164 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af02      	add	r7, sp, #8
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	460b      	mov	r3, r1
 800c63a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c642:	78fb      	ldrb	r3, [r7, #3]
 800c644:	b29b      	uxth	r3, r3
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4613      	mov	r3, r2
 800c64a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c64e:	2100      	movs	r1, #0
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f864 	bl	800c71e <USBH_GetDescriptor>
 800c656:	4603      	mov	r3, r0
 800c658:	73fb      	strb	r3, [r7, #15]
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d10a      	bne.n	800c676 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c66c:	78fa      	ldrb	r2, [r7, #3]
 800c66e:	b292      	uxth	r2, r2
 800c670:	4619      	mov	r1, r3
 800c672:	f000 f918 	bl	800c8a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af02      	add	r7, sp, #8
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	460b      	mov	r3, r1
 800c68a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	331c      	adds	r3, #28
 800c690:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c692:	887b      	ldrh	r3, [r7, #2]
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c69c:	2100      	movs	r1, #0
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f83d 	bl	800c71e <USBH_GetDescriptor>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	72fb      	strb	r3, [r7, #11]
 800c6a8:	7afb      	ldrb	r3, [r7, #11]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d107      	bne.n	800c6be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c6b4:	887a      	ldrh	r2, [r7, #2]
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 f964 	bl	800c986 <USBH_ParseCfgDesc>
  }

  return status;
 800c6be:	7afb      	ldrb	r3, [r7, #11]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af02      	add	r7, sp, #8
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	72fb      	strb	r3, [r7, #11]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c6dc:	7afb      	ldrb	r3, [r7, #11]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c6e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c6ec:	893b      	ldrh	r3, [r7, #8]
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 f812 	bl	800c71e <USBH_GetDescriptor>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	75fb      	strb	r3, [r7, #23]
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d107      	bne.n	800c714 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c70a:	893a      	ldrh	r2, [r7, #8]
 800c70c:	6879      	ldr	r1, [r7, #4]
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 fa37 	bl	800cb82 <USBH_ParseStringDesc>
  }

  return status;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b084      	sub	sp, #16
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	607b      	str	r3, [r7, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	72fb      	strb	r3, [r7, #11]
 800c72c:	4613      	mov	r3, r2
 800c72e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	789b      	ldrb	r3, [r3, #2]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d11c      	bne.n	800c772 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2206      	movs	r2, #6
 800c748:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	893a      	ldrh	r2, [r7, #8]
 800c74e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c750:	893b      	ldrh	r3, [r7, #8]
 800c752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c75a:	d104      	bne.n	800c766 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f240 4209 	movw	r2, #1033	; 0x409
 800c762:	829a      	strh	r2, [r3, #20]
 800c764:	e002      	b.n	800c76c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	8b3a      	ldrh	r2, [r7, #24]
 800c770:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c772:	8b3b      	ldrh	r3, [r7, #24]
 800c774:	461a      	mov	r2, r3
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 fa50 	bl	800cc1e <USBH_CtlReq>
 800c77e:	4603      	mov	r3, r0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	460b      	mov	r3, r1
 800c792:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	789b      	ldrb	r3, [r3, #2]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d10f      	bne.n	800c7bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2205      	movs	r2, #5
 800c7a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c7a8:	78fb      	ldrb	r3, [r7, #3]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2100      	movs	r1, #0
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fa2c 	bl	800cc1e <USBH_CtlReq>
 800c7c6:	4603      	mov	r3, r0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	789b      	ldrb	r3, [r3, #2]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d10e      	bne.n	800c802 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2209      	movs	r2, #9
 800c7ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	887a      	ldrh	r2, [r7, #2]
 800c7f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c802:	2200      	movs	r2, #0
 800c804:	2100      	movs	r1, #0
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fa09 	bl	800cc1e <USBH_CtlReq>
 800c80c:	4603      	mov	r3, r0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	789b      	ldrb	r3, [r3, #2]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d10f      	bne.n	800c84a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2203      	movs	r2, #3
 800c834:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c836:	78fb      	ldrb	r3, [r7, #3]
 800c838:	b29a      	uxth	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c84a:	2200      	movs	r2, #0
 800c84c:	2100      	movs	r1, #0
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f9e5 	bl	800cc1e <USBH_CtlReq>
 800c854:	4603      	mov	r3, r0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b082      	sub	sp, #8
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	789b      	ldrb	r3, [r3, #2]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d10f      	bne.n	800c892 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2200      	movs	r2, #0
 800c882:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	b29a      	uxth	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9c1 	bl	800cc1e <USBH_CtlReq>
 800c89c:	4603      	mov	r3, r0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	781a      	ldrb	r2, [r3, #0]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	785a      	ldrb	r2, [r3, #1]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	3302      	adds	r3, #2
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	3303      	adds	r3, #3
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	791a      	ldrb	r2, [r3, #4]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	795a      	ldrb	r2, [r3, #5]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	799a      	ldrb	r2, [r3, #6]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	79da      	ldrb	r2, [r3, #7]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	2b08      	cmp	r3, #8
 800c904:	d939      	bls.n	800c97a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	3308      	adds	r3, #8
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	3309      	adds	r3, #9
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	b29b      	uxth	r3, r3
 800c916:	021b      	lsls	r3, r3, #8
 800c918:	b29b      	uxth	r3, r3
 800c91a:	4313      	orrs	r3, r2
 800c91c:	b29a      	uxth	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	330a      	adds	r3, #10
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	330b      	adds	r3, #11
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	021b      	lsls	r3, r3, #8
 800c934:	b29b      	uxth	r3, r3
 800c936:	4313      	orrs	r3, r2
 800c938:	b29a      	uxth	r2, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	330c      	adds	r3, #12
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	b29a      	uxth	r2, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	330d      	adds	r3, #13
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	b29b      	uxth	r3, r3
 800c952:	4313      	orrs	r3, r2
 800c954:	b29a      	uxth	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	7b9a      	ldrb	r2, [r3, #14]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	7bda      	ldrb	r2, [r3, #15]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	7c1a      	ldrb	r2, [r3, #16]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	7c5a      	ldrb	r2, [r3, #17]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	745a      	strb	r2, [r3, #17]
  }
}
 800c97a:	bf00      	nop
 800c97c:	3714      	adds	r7, #20
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b08a      	sub	sp, #40	; 0x28
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	60f8      	str	r0, [r7, #12]
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	4613      	mov	r3, r2
 800c992:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	781a      	ldrb	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	785a      	ldrb	r2, [r3, #1]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	3302      	adds	r3, #2
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3303      	adds	r3, #3
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	791a      	ldrb	r2, [r3, #4]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	795a      	ldrb	r2, [r3, #5]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	799a      	ldrb	r2, [r3, #6]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	79da      	ldrb	r2, [r3, #7]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	7a1a      	ldrb	r2, [r3, #8]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c9fc:	88fb      	ldrh	r3, [r7, #6]
 800c9fe:	2b09      	cmp	r3, #9
 800ca00:	d95f      	bls.n	800cac2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca02:	2309      	movs	r3, #9
 800ca04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca0a:	e051      	b.n	800cab0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca0c:	f107 0316 	add.w	r3, r7, #22
 800ca10:	4619      	mov	r1, r3
 800ca12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca14:	f000 f8e8 	bl	800cbe8 <USBH_GetNextDesc>
 800ca18:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	785b      	ldrb	r3, [r3, #1]
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d146      	bne.n	800cab0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca26:	221a      	movs	r2, #26
 800ca28:	fb02 f303 	mul.w	r3, r2, r3
 800ca2c:	3308      	adds	r3, #8
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4413      	add	r3, r2
 800ca32:	3302      	adds	r3, #2
 800ca34:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ca36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca38:	69f8      	ldr	r0, [r7, #28]
 800ca3a:	f000 f846 	bl	800caca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca48:	e022      	b.n	800ca90 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca4a:	f107 0316 	add.w	r3, r7, #22
 800ca4e:	4619      	mov	r1, r3
 800ca50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca52:	f000 f8c9 	bl	800cbe8 <USBH_GetNextDesc>
 800ca56:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	785b      	ldrb	r3, [r3, #1]
 800ca5c:	2b05      	cmp	r3, #5
 800ca5e:	d117      	bne.n	800ca90 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ca60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca68:	3201      	adds	r2, #1
 800ca6a:	00d2      	lsls	r2, r2, #3
 800ca6c:	211a      	movs	r1, #26
 800ca6e:	fb01 f303 	mul.w	r3, r1, r3
 800ca72:	4413      	add	r3, r2
 800ca74:	3308      	adds	r3, #8
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	4413      	add	r3, r2
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ca7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca80:	69b8      	ldr	r0, [r7, #24]
 800ca82:	f000 f851 	bl	800cb28 <USBH_ParseEPDesc>
            ep_ix++;
 800ca86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d204      	bcs.n	800caa6 <USBH_ParseCfgDesc+0x120>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	885a      	ldrh	r2, [r3, #2]
 800caa0:	8afb      	ldrh	r3, [r7, #22]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d8d1      	bhi.n	800ca4a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800caa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800caaa:	3301      	adds	r3, #1
 800caac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d804      	bhi.n	800cac2 <USBH_ParseCfgDesc+0x13c>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	885a      	ldrh	r2, [r3, #2]
 800cabc:	8afb      	ldrh	r3, [r7, #22]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d8a4      	bhi.n	800ca0c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800cac2:	bf00      	nop
 800cac4:	3728      	adds	r7, #40	; 0x28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781a      	ldrb	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	785a      	ldrb	r2, [r3, #1]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	789a      	ldrb	r2, [r3, #2]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	78da      	ldrb	r2, [r3, #3]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	791a      	ldrb	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	795a      	ldrb	r2, [r3, #5]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	799a      	ldrb	r2, [r3, #6]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	79da      	ldrb	r2, [r3, #7]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	7a1a      	ldrb	r2, [r3, #8]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	721a      	strb	r2, [r3, #8]
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	781a      	ldrb	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	785a      	ldrb	r2, [r3, #1]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	789a      	ldrb	r2, [r3, #2]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	78da      	ldrb	r2, [r3, #3]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	3304      	adds	r3, #4
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	3305      	adds	r3, #5
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	b29b      	uxth	r3, r3
 800cb66:	4313      	orrs	r3, r2
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	799a      	ldrb	r2, [r3, #6]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	719a      	strb	r2, [r3, #6]
}
 800cb76:	bf00      	nop
 800cb78:	370c      	adds	r7, #12
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b087      	sub	sp, #28
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	3301      	adds	r3, #1
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b03      	cmp	r3, #3
 800cb98:	d120      	bne.n	800cbdc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	1e9a      	subs	r2, r3, #2
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	bf28      	it	cs
 800cba6:	4613      	movcs	r3, r2
 800cba8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3302      	adds	r3, #2
 800cbae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	82fb      	strh	r3, [r7, #22]
 800cbb4:	e00b      	b.n	800cbce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cbb6:	8afb      	ldrh	r3, [r7, #22]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	4413      	add	r3, r2
 800cbbc:	781a      	ldrb	r2, [r3, #0]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cbc8:	8afb      	ldrh	r3, [r7, #22]
 800cbca:	3302      	adds	r3, #2
 800cbcc:	82fb      	strh	r3, [r7, #22]
 800cbce:	8afa      	ldrh	r2, [r7, #22]
 800cbd0:	8abb      	ldrh	r3, [r7, #20]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d3ef      	bcc.n	800cbb6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	701a      	strb	r2, [r3, #0]
  }
}
 800cbdc:	bf00      	nop
 800cbde:	371c      	adds	r7, #28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	881a      	ldrh	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	4413      	add	r3, r2
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	60f8      	str	r0, [r7, #12]
 800cc26:	60b9      	str	r1, [r7, #8]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	789b      	ldrb	r3, [r3, #2]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d002      	beq.n	800cc3e <USBH_CtlReq+0x20>
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	d00f      	beq.n	800cc5c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cc3c:	e027      	b.n	800cc8e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	88fa      	ldrh	r2, [r7, #6]
 800cc48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2202      	movs	r2, #2
 800cc54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cc56:	2301      	movs	r3, #1
 800cc58:	75fb      	strb	r3, [r7, #23]
      break;
 800cc5a:	e018      	b.n	800cc8e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 f81b 	bl	800cc98 <USBH_HandleControl>
 800cc62:	4603      	mov	r3, r0
 800cc64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cc66:	7dfb      	ldrb	r3, [r7, #23]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d002      	beq.n	800cc72 <USBH_CtlReq+0x54>
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	2b03      	cmp	r3, #3
 800cc70:	d106      	bne.n	800cc80 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2201      	movs	r2, #1
 800cc76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	761a      	strb	r2, [r3, #24]
      break;
 800cc7e:	e005      	b.n	800cc8c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b02      	cmp	r3, #2
 800cc84:	d102      	bne.n	800cc8c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	709a      	strb	r2, [r3, #2]
      break;
 800cc8c:	bf00      	nop
  }
  return status;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af02      	add	r7, sp, #8
 800cc9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cca0:	2301      	movs	r3, #1
 800cca2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	7e1b      	ldrb	r3, [r3, #24]
 800ccac:	3b01      	subs	r3, #1
 800ccae:	2b0a      	cmp	r3, #10
 800ccb0:	f200 8158 	bhi.w	800cf64 <USBH_HandleControl+0x2cc>
 800ccb4:	a201      	add	r2, pc, #4	; (adr r2, 800ccbc <USBH_HandleControl+0x24>)
 800ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccba:	bf00      	nop
 800ccbc:	0800cce9 	.word	0x0800cce9
 800ccc0:	0800cd03 	.word	0x0800cd03
 800ccc4:	0800cd6d 	.word	0x0800cd6d
 800ccc8:	0800cd93 	.word	0x0800cd93
 800cccc:	0800cdcb 	.word	0x0800cdcb
 800ccd0:	0800cdf7 	.word	0x0800cdf7
 800ccd4:	0800ce49 	.word	0x0800ce49
 800ccd8:	0800ce6b 	.word	0x0800ce6b
 800ccdc:	0800cea7 	.word	0x0800cea7
 800cce0:	0800cecf 	.word	0x0800cecf
 800cce4:	0800cf0d 	.word	0x0800cf0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f103 0110 	add.w	r1, r3, #16
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	795b      	ldrb	r3, [r3, #5]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f945 	bl	800cf84 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	761a      	strb	r2, [r3, #24]
      break;
 800cd00:	e13b      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	795b      	ldrb	r3, [r3, #5]
 800cd06:	4619      	mov	r1, r3
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fcc9 	bl	800d6a0 <USBH_LL_GetURBState>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d11e      	bne.n	800cd56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7c1b      	ldrb	r3, [r3, #16]
 800cd1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	8adb      	ldrh	r3, [r3, #22]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00a      	beq.n	800cd40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cd2a:	7b7b      	ldrb	r3, [r7, #13]
 800cd2c:	2b80      	cmp	r3, #128	; 0x80
 800cd2e:	d103      	bne.n	800cd38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2203      	movs	r2, #3
 800cd34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cd36:	e117      	b.n	800cf68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2205      	movs	r2, #5
 800cd3c:	761a      	strb	r2, [r3, #24]
      break;
 800cd3e:	e113      	b.n	800cf68 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800cd40:	7b7b      	ldrb	r3, [r7, #13]
 800cd42:	2b80      	cmp	r3, #128	; 0x80
 800cd44:	d103      	bne.n	800cd4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2209      	movs	r2, #9
 800cd4a:	761a      	strb	r2, [r3, #24]
      break;
 800cd4c:	e10c      	b.n	800cf68 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2207      	movs	r2, #7
 800cd52:	761a      	strb	r2, [r3, #24]
      break;
 800cd54:	e108      	b.n	800cf68 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cd56:	7bbb      	ldrb	r3, [r7, #14]
 800cd58:	2b04      	cmp	r3, #4
 800cd5a:	d003      	beq.n	800cd64 <USBH_HandleControl+0xcc>
 800cd5c:	7bbb      	ldrb	r3, [r7, #14]
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	f040 8102 	bne.w	800cf68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	220b      	movs	r2, #11
 800cd68:	761a      	strb	r2, [r3, #24]
      break;
 800cd6a:	e0fd      	b.n	800cf68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6899      	ldr	r1, [r3, #8]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	899a      	ldrh	r2, [r3, #12]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	791b      	ldrb	r3, [r3, #4]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 f93c 	bl	800d002 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2204      	movs	r2, #4
 800cd8e:	761a      	strb	r2, [r3, #24]
      break;
 800cd90:	e0f3      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	791b      	ldrb	r3, [r3, #4]
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f000 fc81 	bl	800d6a0 <USBH_LL_GetURBState>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d102      	bne.n	800cdae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2209      	movs	r2, #9
 800cdac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	2b05      	cmp	r3, #5
 800cdb2:	d102      	bne.n	800cdba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800cdb8:	e0d8      	b.n	800cf6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
 800cdbc:	2b04      	cmp	r3, #4
 800cdbe:	f040 80d5 	bne.w	800cf6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	220b      	movs	r2, #11
 800cdc6:	761a      	strb	r2, [r3, #24]
      break;
 800cdc8:	e0d0      	b.n	800cf6c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6899      	ldr	r1, [r3, #8]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	899a      	ldrh	r2, [r3, #12]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7958      	ldrb	r0, [r3, #5]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	4603      	mov	r3, r0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f8eb 	bl	800cfb8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2206      	movs	r2, #6
 800cdf2:	761a      	strb	r2, [r3, #24]
      break;
 800cdf4:	e0c1      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	795b      	ldrb	r3, [r3, #5]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 fc4f 	bl	800d6a0 <USBH_LL_GetURBState>
 800ce02:	4603      	mov	r3, r0
 800ce04:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d103      	bne.n	800ce14 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2207      	movs	r2, #7
 800ce10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce12:	e0ad      	b.n	800cf70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	d105      	bne.n	800ce26 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	220c      	movs	r2, #12
 800ce1e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ce20:	2303      	movs	r3, #3
 800ce22:	73fb      	strb	r3, [r7, #15]
      break;
 800ce24:	e0a4      	b.n	800cf70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d103      	bne.n	800ce34 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2205      	movs	r2, #5
 800ce30:	761a      	strb	r2, [r3, #24]
      break;
 800ce32:	e09d      	b.n	800cf70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b04      	cmp	r3, #4
 800ce38:	f040 809a 	bne.w	800cf70 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	220b      	movs	r2, #11
 800ce40:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ce42:	2302      	movs	r3, #2
 800ce44:	73fb      	strb	r3, [r7, #15]
      break;
 800ce46:	e093      	b.n	800cf70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	791b      	ldrb	r3, [r3, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2100      	movs	r1, #0
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f8d6 	bl	800d002 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2208      	movs	r2, #8
 800ce66:	761a      	strb	r2, [r3, #24]

      break;
 800ce68:	e087      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	791b      	ldrb	r3, [r3, #4]
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fc15 	bl	800d6a0 <USBH_LL_GetURBState>
 800ce76:	4603      	mov	r3, r0
 800ce78:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d105      	bne.n	800ce8c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	220d      	movs	r2, #13
 800ce84:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ce8a:	e073      	b.n	800cf74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800ce8c:	7bbb      	ldrb	r3, [r7, #14]
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d103      	bne.n	800ce9a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	220b      	movs	r2, #11
 800ce96:	761a      	strb	r2, [r3, #24]
      break;
 800ce98:	e06c      	b.n	800cf74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800ce9a:	7bbb      	ldrb	r3, [r7, #14]
 800ce9c:	2b05      	cmp	r3, #5
 800ce9e:	d169      	bne.n	800cf74 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
      break;
 800cea4:	e066      	b.n	800cf74 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	795a      	ldrb	r2, [r3, #5]
 800ceaa:	2301      	movs	r3, #1
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 f87f 	bl	800cfb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cec0:	b29a      	uxth	r2, r3
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	220a      	movs	r2, #10
 800ceca:	761a      	strb	r2, [r3, #24]
      break;
 800cecc:	e055      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	795b      	ldrb	r3, [r3, #5]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fbe3 	bl	800d6a0 <USBH_LL_GetURBState>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800cede:	7bbb      	ldrb	r3, [r7, #14]
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d105      	bne.n	800cef0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	220d      	movs	r2, #13
 800ceec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ceee:	e043      	b.n	800cf78 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d103      	bne.n	800cefe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2209      	movs	r2, #9
 800cefa:	761a      	strb	r2, [r3, #24]
      break;
 800cefc:	e03c      	b.n	800cf78 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800cefe:	7bbb      	ldrb	r3, [r7, #14]
 800cf00:	2b04      	cmp	r3, #4
 800cf02:	d139      	bne.n	800cf78 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	220b      	movs	r2, #11
 800cf08:	761a      	strb	r2, [r3, #24]
      break;
 800cf0a:	e035      	b.n	800cf78 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7e5b      	ldrb	r3, [r3, #25]
 800cf10:	3301      	adds	r3, #1
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	765a      	strb	r2, [r3, #25]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	7e5b      	ldrb	r3, [r3, #25]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d806      	bhi.n	800cf2e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf2c:	e025      	b.n	800cf7a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf34:	2106      	movs	r1, #6
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	795b      	ldrb	r3, [r3, #5]
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 f90c 	bl	800d164 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	791b      	ldrb	r3, [r3, #4]
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f906 	bl	800d164 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cf5e:	2302      	movs	r3, #2
 800cf60:	73fb      	strb	r3, [r7, #15]
      break;
 800cf62:	e00a      	b.n	800cf7a <USBH_HandleControl+0x2e2>

    default:
      break;
 800cf64:	bf00      	nop
 800cf66:	e008      	b.n	800cf7a <USBH_HandleControl+0x2e2>
      break;
 800cf68:	bf00      	nop
 800cf6a:	e006      	b.n	800cf7a <USBH_HandleControl+0x2e2>
      break;
 800cf6c:	bf00      	nop
 800cf6e:	e004      	b.n	800cf7a <USBH_HandleControl+0x2e2>
      break;
 800cf70:	bf00      	nop
 800cf72:	e002      	b.n	800cf7a <USBH_HandleControl+0x2e2>
      break;
 800cf74:	bf00      	nop
 800cf76:	e000      	b.n	800cf7a <USBH_HandleControl+0x2e2>
      break;
 800cf78:	bf00      	nop
  }

  return status;
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b088      	sub	sp, #32
 800cf88:	af04      	add	r7, sp, #16
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cf92:	79f9      	ldrb	r1, [r7, #7]
 800cf94:	2300      	movs	r3, #0
 800cf96:	9303      	str	r3, [sp, #12]
 800cf98:	2308      	movs	r3, #8
 800cf9a:	9302      	str	r3, [sp, #8]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	9301      	str	r3, [sp, #4]
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	9300      	str	r3, [sp, #0]
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 fb48 	bl	800d63e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3710      	adds	r7, #16
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af04      	add	r7, sp, #16
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	80fb      	strh	r3, [r7, #6]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cfdc:	7979      	ldrb	r1, [r7, #5]
 800cfde:	7e3b      	ldrb	r3, [r7, #24]
 800cfe0:	9303      	str	r3, [sp, #12]
 800cfe2:	88fb      	ldrh	r3, [r7, #6]
 800cfe4:	9302      	str	r3, [sp, #8]
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	2301      	movs	r3, #1
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	2300      	movs	r3, #0
 800cff0:	2200      	movs	r2, #0
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f000 fb23 	bl	800d63e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b088      	sub	sp, #32
 800d006:	af04      	add	r7, sp, #16
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	4611      	mov	r1, r2
 800d00e:	461a      	mov	r2, r3
 800d010:	460b      	mov	r3, r1
 800d012:	80fb      	strh	r3, [r7, #6]
 800d014:	4613      	mov	r3, r2
 800d016:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d018:	7979      	ldrb	r1, [r7, #5]
 800d01a:	2300      	movs	r3, #0
 800d01c:	9303      	str	r3, [sp, #12]
 800d01e:	88fb      	ldrh	r3, [r7, #6]
 800d020:	9302      	str	r3, [sp, #8]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	9301      	str	r3, [sp, #4]
 800d026:	2301      	movs	r3, #1
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	2300      	movs	r3, #0
 800d02c:	2201      	movs	r2, #1
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 fb05 	bl	800d63e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d034:	2300      	movs	r3, #0

}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b088      	sub	sp, #32
 800d042:	af04      	add	r7, sp, #16
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	4611      	mov	r1, r2
 800d04a:	461a      	mov	r2, r3
 800d04c:	460b      	mov	r3, r1
 800d04e:	80fb      	strh	r3, [r7, #6]
 800d050:	4613      	mov	r3, r2
 800d052:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d05e:	2300      	movs	r3, #0
 800d060:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d062:	7979      	ldrb	r1, [r7, #5]
 800d064:	7e3b      	ldrb	r3, [r7, #24]
 800d066:	9303      	str	r3, [sp, #12]
 800d068:	88fb      	ldrh	r3, [r7, #6]
 800d06a:	9302      	str	r3, [sp, #8]
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	2301      	movs	r3, #1
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	2302      	movs	r3, #2
 800d076:	2200      	movs	r2, #0
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 fae0 	bl	800d63e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af04      	add	r7, sp, #16
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	4611      	mov	r1, r2
 800d094:	461a      	mov	r2, r3
 800d096:	460b      	mov	r3, r1
 800d098:	80fb      	strh	r3, [r7, #6]
 800d09a:	4613      	mov	r3, r2
 800d09c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d09e:	7979      	ldrb	r1, [r7, #5]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	88fb      	ldrh	r3, [r7, #6]
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	9301      	str	r3, [sp, #4]
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	2302      	movs	r3, #2
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 fac2 	bl	800d63e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	70fb      	strb	r3, [r7, #3]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70bb      	strb	r3, [r7, #2]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d0de:	7878      	ldrb	r0, [r7, #1]
 800d0e0:	78ba      	ldrb	r2, [r7, #2]
 800d0e2:	78f9      	ldrb	r1, [r7, #3]
 800d0e4:	8b3b      	ldrh	r3, [r7, #24]
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	7d3b      	ldrb	r3, [r7, #20]
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	7c3b      	ldrb	r3, [r7, #16]
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fa55 	bl	800d5a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b082      	sub	sp, #8
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	460b      	mov	r3, r1
 800d10c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d10e:	78fb      	ldrb	r3, [r7, #3]
 800d110:	4619      	mov	r1, r3
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa74 	bl	800d600 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
 800d12a:	460b      	mov	r3, r1
 800d12c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f836 	bl	800d1a0 <USBH_GetFreePipe>
 800d134:	4603      	mov	r3, r0
 800d136:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d138:	89fb      	ldrh	r3, [r7, #14]
 800d13a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d13e:	4293      	cmp	r3, r2
 800d140:	d00a      	beq.n	800d158 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	89fb      	ldrh	r3, [r7, #14]
 800d146:	f003 030f 	and.w	r3, r3, #15
 800d14a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d14e:	6879      	ldr	r1, [r7, #4]
 800d150:	33e0      	adds	r3, #224	; 0xe0
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d158:	89fb      	ldrh	r3, [r7, #14]
 800d15a:	b2db      	uxtb	r3, r3
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	2b0a      	cmp	r3, #10
 800d174:	d80d      	bhi.n	800d192 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d176:	78fb      	ldrb	r3, [r7, #3]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	33e0      	adds	r3, #224	; 0xe0
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	78fb      	ldrb	r3, [r7, #3]
 800d184:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	33e0      	adds	r3, #224	; 0xe0
 800d18c:	009b      	lsls	r3, r3, #2
 800d18e:	440b      	add	r3, r1
 800d190:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	370c      	adds	r7, #12
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
 800d1b0:	e00f      	b.n	800d1d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	33e0      	adds	r3, #224	; 0xe0
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d102      	bne.n	800d1cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	e007      	b.n	800d1dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	2b0a      	cmp	r3, #10
 800d1d6:	d9ec      	bls.n	800d1b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d1d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	490e      	ldr	r1, [pc, #56]	; (800d228 <MX_USB_HOST_Init+0x40>)
 800d1f0:	480e      	ldr	r0, [pc, #56]	; (800d22c <MX_USB_HOST_Init+0x44>)
 800d1f2:	f7fe fc9f 	bl	800bb34 <USBH_Init>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d1fc:	f7f4 fbfa 	bl	80019f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d200:	490b      	ldr	r1, [pc, #44]	; (800d230 <MX_USB_HOST_Init+0x48>)
 800d202:	480a      	ldr	r0, [pc, #40]	; (800d22c <MX_USB_HOST_Init+0x44>)
 800d204:	f7fe fd24 	bl	800bc50 <USBH_RegisterClass>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d20e:	f7f4 fbf1 	bl	80019f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d212:	4806      	ldr	r0, [pc, #24]	; (800d22c <MX_USB_HOST_Init+0x44>)
 800d214:	f7fe fda8 	bl	800bd68 <USBH_Start>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d001      	beq.n	800d222 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d21e:	f7f4 fbe9 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d222:	bf00      	nop
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	0800d249 	.word	0x0800d249
 800d22c:	200056b4 	.word	0x200056b4
 800d230:	20000014 	.word	0x20000014

0800d234 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d238:	4802      	ldr	r0, [pc, #8]	; (800d244 <MX_USB_HOST_Process+0x10>)
 800d23a:	f7fe fda5 	bl	800bd88 <USBH_Process>
}
 800d23e:	bf00      	nop
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200056b4 	.word	0x200056b4

0800d248 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	3b01      	subs	r3, #1
 800d258:	2b04      	cmp	r3, #4
 800d25a:	d819      	bhi.n	800d290 <USBH_UserProcess+0x48>
 800d25c:	a201      	add	r2, pc, #4	; (adr r2, 800d264 <USBH_UserProcess+0x1c>)
 800d25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d262:	bf00      	nop
 800d264:	0800d291 	.word	0x0800d291
 800d268:	0800d281 	.word	0x0800d281
 800d26c:	0800d291 	.word	0x0800d291
 800d270:	0800d289 	.word	0x0800d289
 800d274:	0800d279 	.word	0x0800d279
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d278:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <USBH_UserProcess+0x58>)
 800d27a:	2203      	movs	r2, #3
 800d27c:	701a      	strb	r2, [r3, #0]
  break;
 800d27e:	e008      	b.n	800d292 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d280:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <USBH_UserProcess+0x58>)
 800d282:	2202      	movs	r2, #2
 800d284:	701a      	strb	r2, [r3, #0]
  break;
 800d286:	e004      	b.n	800d292 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d288:	4b05      	ldr	r3, [pc, #20]	; (800d2a0 <USBH_UserProcess+0x58>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	701a      	strb	r2, [r3, #0]
  break;
 800d28e:	e000      	b.n	800d292 <USBH_UserProcess+0x4a>

  default:
  break;
 800d290:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d292:	bf00      	nop
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	200004cc 	.word	0x200004cc

0800d2a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08a      	sub	sp, #40	; 0x28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2ac:	f107 0314 	add.w	r3, r7, #20
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	609a      	str	r2, [r3, #8]
 800d2b8:	60da      	str	r2, [r3, #12]
 800d2ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2c4:	d14e      	bne.n	800d364 <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d2c6:	4b29      	ldr	r3, [pc, #164]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2ca:	4a28      	ldr	r2, [pc, #160]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d2cc:	f043 0301 	orr.w	r3, r3, #1
 800d2d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d2d2:	4b26      	ldr	r3, [pc, #152]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d2d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	613b      	str	r3, [r7, #16]
 800d2dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d2de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d2e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e4:	2302      	movs	r3, #2
 800d2e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d2f0:	230a      	movs	r3, #10
 800d2f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2f4:	f107 0314 	add.w	r3, r7, #20
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d2fe:	f7f7 f969 	bl	80045d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d302:	4b1a      	ldr	r3, [pc, #104]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d306:	4a19      	ldr	r2, [pc, #100]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d30c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d30e:	4b17      	ldr	r3, [pc, #92]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d316:	60fb      	str	r3, [r7, #12]
 800d318:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d31a:	4b14      	ldr	r3, [pc, #80]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d31e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d322:	2b00      	cmp	r3, #0
 800d324:	d114      	bne.n	800d350 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d326:	4b11      	ldr	r3, [pc, #68]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d32a:	4a10      	ldr	r2, [pc, #64]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d32c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d330:	6593      	str	r3, [r2, #88]	; 0x58
 800d332:	4b0e      	ldr	r3, [pc, #56]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d33a:	60bb      	str	r3, [r7, #8]
 800d33c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800d33e:	f7f9 fadf 	bl	8006900 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d342:	4b0a      	ldr	r3, [pc, #40]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d346:	4a09      	ldr	r2, [pc, #36]	; (800d36c <HAL_HCD_MspInit+0xc8>)
 800d348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d34c:	6593      	str	r3, [r2, #88]	; 0x58
 800d34e:	e001      	b.n	800d354 <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d350:	f7f9 fad6 	bl	8006900 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d354:	2200      	movs	r2, #0
 800d356:	2100      	movs	r1, #0
 800d358:	2043      	movs	r0, #67	; 0x43
 800d35a:	f7f7 f8c4 	bl	80044e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d35e:	2043      	movs	r0, #67	; 0x43
 800d360:	f7f7 f8dd 	bl	800451e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d364:	bf00      	nop
 800d366:	3728      	adds	r7, #40	; 0x28
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	40021000 	.word	0x40021000

0800d370 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff f8d5 	bl	800c52e <USBH_LL_IncTimer>
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff f90d 	bl	800c5ba <USBH_LL_Connect>
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff f916 	bl	800c5e8 <USBH_LL_Disconnect>
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d3d4:	bf00      	nop
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7ff f8c7 	bl	800c582 <USBH_LL_PortEnabled>
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff f8c7 	bl	800c59e <USBH_LL_PortDisabled>
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d426:	2b01      	cmp	r3, #1
 800d428:	d12a      	bne.n	800d480 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d42a:	4a18      	ldr	r2, [pc, #96]	; (800d48c <USBH_LL_Init+0x74>)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a15      	ldr	r2, [pc, #84]	; (800d48c <USBH_LL_Init+0x74>)
 800d436:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d43a:	4b14      	ldr	r3, [pc, #80]	; (800d48c <USBH_LL_Init+0x74>)
 800d43c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d440:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d442:	4b12      	ldr	r3, [pc, #72]	; (800d48c <USBH_LL_Init+0x74>)
 800d444:	2208      	movs	r2, #8
 800d446:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d448:	4b10      	ldr	r3, [pc, #64]	; (800d48c <USBH_LL_Init+0x74>)
 800d44a:	2201      	movs	r2, #1
 800d44c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d44e:	4b0f      	ldr	r3, [pc, #60]	; (800d48c <USBH_LL_Init+0x74>)
 800d450:	2200      	movs	r2, #0
 800d452:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <USBH_LL_Init+0x74>)
 800d456:	2202      	movs	r2, #2
 800d458:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d45a:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <USBH_LL_Init+0x74>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d460:	480a      	ldr	r0, [pc, #40]	; (800d48c <USBH_LL_Init+0x74>)
 800d462:	f7f7 faa9 	bl	80049b8 <HAL_HCD_Init>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d46c:	f7f4 fac2 	bl	80019f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d470:	4806      	ldr	r0, [pc, #24]	; (800d48c <USBH_LL_Init+0x74>)
 800d472:	f7f7 fea9 	bl	80051c8 <HAL_HCD_GetCurrentFrame>
 800d476:	4603      	mov	r3, r0
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7ff f848 	bl	800c510 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d480:	2300      	movs	r3, #0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20005a8c 	.word	0x20005a8c

0800d490 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f7 fe16 	bl	80050d8 <HAL_HCD_Start>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 f95c 	bl	800d770 <USBH_Get_USB_Status>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7f7 fe1e 	bl	800511e <HAL_HCD_Stop>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f000 f941 	bl	800d770 <USBH_Get_USB_Status>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d504:	2301      	movs	r3, #1
 800d506:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d50e:	4618      	mov	r0, r3
 800d510:	f7f7 fe68 	bl	80051e4 <HAL_HCD_GetCurrentSpeed>
 800d514:	4603      	mov	r3, r0
 800d516:	2b01      	cmp	r3, #1
 800d518:	d007      	beq.n	800d52a <USBH_LL_GetSpeed+0x2e>
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d302      	bcc.n	800d524 <USBH_LL_GetSpeed+0x28>
 800d51e:	2b02      	cmp	r3, #2
 800d520:	d006      	beq.n	800d530 <USBH_LL_GetSpeed+0x34>
 800d522:	e008      	b.n	800d536 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d524:	2300      	movs	r3, #0
 800d526:	73fb      	strb	r3, [r7, #15]
    break;
 800d528:	e008      	b.n	800d53c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d52a:	2301      	movs	r3, #1
 800d52c:	73fb      	strb	r3, [r7, #15]
    break;
 800d52e:	e005      	b.n	800d53c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d530:	2302      	movs	r3, #2
 800d532:	73fb      	strb	r3, [r7, #15]
    break;
 800d534:	e002      	b.n	800d53c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800d536:	2301      	movs	r3, #1
 800d538:	73fb      	strb	r3, [r7, #15]
    break;
 800d53a:	bf00      	nop
  }
  return  speed;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7f7 fdfb 	bl	8005158 <HAL_HCD_ResetPort>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d566:	7bfb      	ldrb	r3, [r7, #15]
 800d568:	4618      	mov	r0, r3
 800d56a:	f000 f901 	bl	800d770 <USBH_Get_USB_Status>
 800d56e:	4603      	mov	r3, r0
 800d570:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d572:	7bbb      	ldrb	r3, [r7, #14]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d58e:	78fa      	ldrb	r2, [r7, #3]
 800d590:	4611      	mov	r1, r2
 800d592:	4618      	mov	r0, r3
 800d594:	f7f7 fe03 	bl	800519e <HAL_HCD_HC_GetXferCount>
 800d598:	4603      	mov	r3, r0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d5a2:	b590      	push	{r4, r7, lr}
 800d5a4:	b089      	sub	sp, #36	; 0x24
 800d5a6:	af04      	add	r7, sp, #16
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	70fb      	strb	r3, [r7, #3]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	70bb      	strb	r3, [r7, #2]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d5ca:	787c      	ldrb	r4, [r7, #1]
 800d5cc:	78ba      	ldrb	r2, [r7, #2]
 800d5ce:	78f9      	ldrb	r1, [r7, #3]
 800d5d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5d2:	9302      	str	r3, [sp, #8]
 800d5d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	4623      	mov	r3, r4
 800d5e2:	f7f7 fa4b 	bl	8004a7c <HAL_HCD_HC_Init>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f000 f8bf 	bl	800d770 <USBH_Get_USB_Status>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd90      	pop	{r4, r7, pc}

0800d600 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d610:	2300      	movs	r3, #0
 800d612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d61a:	78fa      	ldrb	r2, [r7, #3]
 800d61c:	4611      	mov	r1, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	f7f7 fac4 	bl	8004bac <HAL_HCD_HC_Halt>
 800d624:	4603      	mov	r3, r0
 800d626:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 f8a0 	bl	800d770 <USBH_Get_USB_Status>
 800d630:	4603      	mov	r3, r0
 800d632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d634:	7bbb      	ldrb	r3, [r7, #14]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d63e:	b590      	push	{r4, r7, lr}
 800d640:	b089      	sub	sp, #36	; 0x24
 800d642:	af04      	add	r7, sp, #16
 800d644:	6078      	str	r0, [r7, #4]
 800d646:	4608      	mov	r0, r1
 800d648:	4611      	mov	r1, r2
 800d64a:	461a      	mov	r2, r3
 800d64c:	4603      	mov	r3, r0
 800d64e:	70fb      	strb	r3, [r7, #3]
 800d650:	460b      	mov	r3, r1
 800d652:	70bb      	strb	r3, [r7, #2]
 800d654:	4613      	mov	r3, r2
 800d656:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d666:	787c      	ldrb	r4, [r7, #1]
 800d668:	78ba      	ldrb	r2, [r7, #2]
 800d66a:	78f9      	ldrb	r1, [r7, #3]
 800d66c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d670:	9303      	str	r3, [sp, #12]
 800d672:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d674:	9302      	str	r3, [sp, #8]
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	4623      	mov	r3, r4
 800d682:	f7f7 fab7 	bl	8004bf4 <HAL_HCD_HC_SubmitRequest>
 800d686:	4603      	mov	r3, r0
 800d688:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f86f 	bl	800d770 <USBH_Get_USB_Status>
 800d692:	4603      	mov	r3, r0
 800d694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d696:	7bbb      	ldrb	r3, [r7, #14]
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3714      	adds	r7, #20
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}

0800d6a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6b2:	78fa      	ldrb	r2, [r7, #3]
 800d6b4:	4611      	mov	r1, r2
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7f7 fd5c 	bl	8005174 <HAL_HCD_HC_GetURBState>
 800d6bc:	4603      	mov	r3, r0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d103      	bne.n	800d6e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d6dc:	78fb      	ldrb	r3, [r7, #3]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f872 	bl	800d7c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d6e4:	20c8      	movs	r0, #200	; 0xc8
 800d6e6:	f7f4 ffdb 	bl	80026a0 <HAL_Delay>
  return USBH_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
 800d700:	4613      	mov	r3, r2
 800d702:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d70a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d70c:	78fa      	ldrb	r2, [r7, #3]
 800d70e:	68f9      	ldr	r1, [r7, #12]
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	00db      	lsls	r3, r3, #3
 800d718:	440b      	add	r3, r1
 800d71a:	333b      	adds	r3, #59	; 0x3b
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00a      	beq.n	800d738 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d722:	78fa      	ldrb	r2, [r7, #3]
 800d724:	68f9      	ldr	r1, [r7, #12]
 800d726:	4613      	mov	r3, r2
 800d728:	009b      	lsls	r3, r3, #2
 800d72a:	4413      	add	r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	440b      	add	r3, r1
 800d730:	3350      	adds	r3, #80	; 0x50
 800d732:	78ba      	ldrb	r2, [r7, #2]
 800d734:	701a      	strb	r2, [r3, #0]
 800d736:	e009      	b.n	800d74c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d738:	78fa      	ldrb	r2, [r7, #3]
 800d73a:	68f9      	ldr	r1, [r7, #12]
 800d73c:	4613      	mov	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	00db      	lsls	r3, r3, #3
 800d744:	440b      	add	r3, r1
 800d746:	3351      	adds	r3, #81	; 0x51
 800d748:	78ba      	ldrb	r2, [r7, #2]
 800d74a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr

0800d75a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7f4 ff9c 	bl	80026a0 <HAL_Delay>
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	4603      	mov	r3, r0
 800d778:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d77e:	79fb      	ldrb	r3, [r7, #7]
 800d780:	2b03      	cmp	r3, #3
 800d782:	d817      	bhi.n	800d7b4 <USBH_Get_USB_Status+0x44>
 800d784:	a201      	add	r2, pc, #4	; (adr r2, 800d78c <USBH_Get_USB_Status+0x1c>)
 800d786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d78a:	bf00      	nop
 800d78c:	0800d79d 	.word	0x0800d79d
 800d790:	0800d7a3 	.word	0x0800d7a3
 800d794:	0800d7a9 	.word	0x0800d7a9
 800d798:	0800d7af 	.word	0x0800d7af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	e00b      	b.n	800d7ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d7a2:	2302      	movs	r3, #2
 800d7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a6:	e008      	b.n	800d7ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d7ac:	e005      	b.n	800d7ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d7ae:	2302      	movs	r3, #2
 800d7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b2:	e002      	b.n	800d7ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b8:	bf00      	nop
  }
  return usb_status;
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr

0800d7c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d7d2:	79fb      	ldrb	r3, [r7, #7]
 800d7d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d102      	bne.n	800d7e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	73fb      	strb	r3, [r7, #15]
 800d7e0:	e001      	b.n	800d7e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800d7e6:	7bfb      	ldrb	r3, [r7, #15]
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7ee:	4803      	ldr	r0, [pc, #12]	; (800d7fc <MX_DriverVbusFS+0x34>)
 800d7f0:	f7f7 f898 	bl	8004924 <HAL_GPIO_WritePin>
}
 800d7f4:	bf00      	nop
 800d7f6:	3710      	adds	r7, #16
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	48000800 	.word	0x48000800

0800d800 <arm_max_f32>:
 800d800:	f101 3cff 	add.w	ip, r1, #4294967295
 800d804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d806:	4607      	mov	r7, r0
 800d808:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800d80c:	ecf7 7a01 	vldmia	r7!, {s15}
 800d810:	d060      	beq.n	800d8d4 <arm_max_f32+0xd4>
 800d812:	2400      	movs	r4, #0
 800d814:	3014      	adds	r0, #20
 800d816:	4625      	mov	r5, r4
 800d818:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800d81c:	ed10 7a04 	vldr	s14, [r0, #-16]
 800d820:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d828:	bf48      	it	mi
 800d82a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d82e:	ed10 7a03 	vldr	s14, [r0, #-12]
 800d832:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d836:	bf48      	it	mi
 800d838:	1c65      	addmi	r5, r4, #1
 800d83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83e:	bf48      	it	mi
 800d840:	eef0 7a47 	vmovmi.f32	s15, s14
 800d844:	ed10 7a02 	vldr	s14, [r0, #-8]
 800d848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d84c:	bf48      	it	mi
 800d84e:	1ca5      	addmi	r5, r4, #2
 800d850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d854:	bf48      	it	mi
 800d856:	eef0 7a47 	vmovmi.f32	s15, s14
 800d85a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800d85e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d862:	bf48      	it	mi
 800d864:	1ce5      	addmi	r5, r4, #3
 800d866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86a:	f104 0404 	add.w	r4, r4, #4
 800d86e:	bf44      	itt	mi
 800d870:	eef0 7a47 	vmovmi.f32	s15, s14
 800d874:	4625      	movmi	r5, r4
 800d876:	42a6      	cmp	r6, r4
 800d878:	f100 0010 	add.w	r0, r0, #16
 800d87c:	d1ce      	bne.n	800d81c <arm_max_f32+0x1c>
 800d87e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800d882:	f01c 0003 	ands.w	r0, ip, #3
 800d886:	d021      	beq.n	800d8cc <arm_max_f32+0xcc>
 800d888:	ed97 7a00 	vldr	s14, [r7]
 800d88c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d894:	bfc4      	itt	gt
 800d896:	eef0 7a47 	vmovgt.f32	s15, s14
 800d89a:	1a0d      	subgt	r5, r1, r0
 800d89c:	3801      	subs	r0, #1
 800d89e:	d015      	beq.n	800d8cc <arm_max_f32+0xcc>
 800d8a0:	ed97 7a01 	vldr	s14, [r7, #4]
 800d8a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ac:	bf44      	itt	mi
 800d8ae:	eef0 7a47 	vmovmi.f32	s15, s14
 800d8b2:	1a0d      	submi	r5, r1, r0
 800d8b4:	2801      	cmp	r0, #1
 800d8b6:	d009      	beq.n	800d8cc <arm_max_f32+0xcc>
 800d8b8:	ed97 7a02 	vldr	s14, [r7, #8]
 800d8bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c4:	bfc4      	itt	gt
 800d8c6:	eef0 7a47 	vmovgt.f32	s15, s14
 800d8ca:	4665      	movgt	r5, ip
 800d8cc:	edc2 7a00 	vstr	s15, [r2]
 800d8d0:	601d      	str	r5, [r3, #0]
 800d8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d4:	4675      	mov	r5, lr
 800d8d6:	e7d4      	b.n	800d882 <arm_max_f32+0x82>

0800d8d8 <arm_cfft_radix8by2_f32>:
 800d8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8dc:	ed2d 8b08 	vpush	{d8-d11}
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	4608      	mov	r0, r1
 800d8e4:	f8b7 c000 	ldrh.w	ip, [r7]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800d8ee:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800d8f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800d8f6:	f000 80b0 	beq.w	800da5a <arm_cfft_radix8by2_f32+0x182>
 800d8fa:	008c      	lsls	r4, r1, #2
 800d8fc:	3410      	adds	r4, #16
 800d8fe:	f100 0310 	add.w	r3, r0, #16
 800d902:	1906      	adds	r6, r0, r4
 800d904:	3210      	adds	r2, #16
 800d906:	4444      	add	r4, r8
 800d908:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800d90c:	f108 0510 	add.w	r5, r8, #16
 800d910:	ed15 2a04 	vldr	s4, [r5, #-16]
 800d914:	ed55 2a03 	vldr	s5, [r5, #-12]
 800d918:	ed54 4a04 	vldr	s9, [r4, #-16]
 800d91c:	ed14 4a03 	vldr	s8, [r4, #-12]
 800d920:	ed14 6a02 	vldr	s12, [r4, #-8]
 800d924:	ed54 5a01 	vldr	s11, [r4, #-4]
 800d928:	ed53 3a04 	vldr	s7, [r3, #-16]
 800d92c:	ed15 0a02 	vldr	s0, [r5, #-8]
 800d930:	ed55 0a01 	vldr	s1, [r5, #-4]
 800d934:	ed56 6a04 	vldr	s13, [r6, #-16]
 800d938:	ed16 3a03 	vldr	s6, [r6, #-12]
 800d93c:	ed13 7a03 	vldr	s14, [r3, #-12]
 800d940:	ed13 5a02 	vldr	s10, [r3, #-8]
 800d944:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d948:	ed16 1a02 	vldr	s2, [r6, #-8]
 800d94c:	ed56 1a01 	vldr	s3, [r6, #-4]
 800d950:	ee73 ba82 	vadd.f32	s23, s7, s4
 800d954:	ee37 ba22 	vadd.f32	s22, s14, s5
 800d958:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800d95c:	ee33 9a04 	vadd.f32	s18, s6, s8
 800d960:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800d964:	ee75 aa00 	vadd.f32	s21, s10, s0
 800d968:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800d96c:	ee71 8a06 	vadd.f32	s17, s2, s12
 800d970:	ed43 ba04 	vstr	s23, [r3, #-16]
 800d974:	ed03 ba03 	vstr	s22, [r3, #-12]
 800d978:	ed43 aa02 	vstr	s21, [r3, #-8]
 800d97c:	ed03 aa01 	vstr	s20, [r3, #-4]
 800d980:	ed06 8a01 	vstr	s16, [r6, #-4]
 800d984:	ed46 9a04 	vstr	s19, [r6, #-16]
 800d988:	ed06 9a03 	vstr	s18, [r6, #-12]
 800d98c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800d990:	ee37 7a62 	vsub.f32	s14, s14, s5
 800d994:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800d998:	ee34 4a43 	vsub.f32	s8, s8, s6
 800d99c:	ed52 6a03 	vldr	s13, [r2, #-12]
 800d9a0:	ed12 3a04 	vldr	s6, [r2, #-16]
 800d9a4:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800d9a8:	ee27 8a26 	vmul.f32	s16, s14, s13
 800d9ac:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800d9b0:	ee23 2a83 	vmul.f32	s4, s7, s6
 800d9b4:	ee64 4a83 	vmul.f32	s9, s9, s6
 800d9b8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800d9bc:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d9c0:	ee64 6a26 	vmul.f32	s13, s8, s13
 800d9c4:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d9c8:	ee37 7a63 	vsub.f32	s14, s14, s7
 800d9cc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800d9d0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800d9d4:	ee32 3a08 	vadd.f32	s6, s4, s16
 800d9d8:	ed05 7a03 	vstr	s14, [r5, #-12]
 800d9dc:	ed05 3a04 	vstr	s6, [r5, #-16]
 800d9e0:	ed04 4a04 	vstr	s8, [r4, #-16]
 800d9e4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800d9e8:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d9ec:	ee76 6a41 	vsub.f32	s13, s12, s2
 800d9f0:	ee35 5a40 	vsub.f32	s10, s10, s0
 800d9f4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800d9f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d9fc:	ed52 5a02 	vldr	s11, [r2, #-8]
 800da00:	ee67 3a87 	vmul.f32	s7, s15, s14
 800da04:	ee66 4a87 	vmul.f32	s9, s13, s14
 800da08:	ee25 4a25 	vmul.f32	s8, s10, s11
 800da0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800da10:	ee25 5a07 	vmul.f32	s10, s10, s14
 800da14:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800da18:	ee26 7a07 	vmul.f32	s14, s12, s14
 800da1c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800da20:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800da24:	ee74 5a23 	vadd.f32	s11, s8, s7
 800da28:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800da2c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800da30:	3310      	adds	r3, #16
 800da32:	4563      	cmp	r3, ip
 800da34:	ed45 5a02 	vstr	s11, [r5, #-8]
 800da38:	f106 0610 	add.w	r6, r6, #16
 800da3c:	ed45 7a01 	vstr	s15, [r5, #-4]
 800da40:	f102 0210 	add.w	r2, r2, #16
 800da44:	ed04 6a02 	vstr	s12, [r4, #-8]
 800da48:	ed04 7a01 	vstr	s14, [r4, #-4]
 800da4c:	f105 0510 	add.w	r5, r5, #16
 800da50:	f104 0410 	add.w	r4, r4, #16
 800da54:	f47f af5c 	bne.w	800d910 <arm_cfft_radix8by2_f32+0x38>
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	b28c      	uxth	r4, r1
 800da5c:	4621      	mov	r1, r4
 800da5e:	2302      	movs	r3, #2
 800da60:	f000 fc1c 	bl	800e29c <arm_radix8_butterfly_f32>
 800da64:	ecbd 8b08 	vpop	{d8-d11}
 800da68:	4621      	mov	r1, r4
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	4640      	mov	r0, r8
 800da6e:	2302      	movs	r3, #2
 800da70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da74:	f000 bc12 	b.w	800e29c <arm_radix8_butterfly_f32>

0800da78 <arm_cfft_radix8by4_f32>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	ed2d 8b0a 	vpush	{d8-d12}
 800da80:	b08d      	sub	sp, #52	; 0x34
 800da82:	460d      	mov	r5, r1
 800da84:	910b      	str	r1, [sp, #44]	; 0x2c
 800da86:	8801      	ldrh	r1, [r0, #0]
 800da88:	6842      	ldr	r2, [r0, #4]
 800da8a:	900a      	str	r0, [sp, #40]	; 0x28
 800da8c:	0849      	lsrs	r1, r1, #1
 800da8e:	008b      	lsls	r3, r1, #2
 800da90:	18ee      	adds	r6, r5, r3
 800da92:	18f0      	adds	r0, r6, r3
 800da94:	edd0 5a00 	vldr	s11, [r0]
 800da98:	edd5 7a00 	vldr	s15, [r5]
 800da9c:	ed96 7a00 	vldr	s14, [r6]
 800daa0:	edd0 3a01 	vldr	s7, [r0, #4]
 800daa4:	ed96 4a01 	vldr	s8, [r6, #4]
 800daa8:	ed95 5a01 	vldr	s10, [r5, #4]
 800daac:	9008      	str	r0, [sp, #32]
 800daae:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800dab2:	18c7      	adds	r7, r0, r3
 800dab4:	edd7 4a00 	vldr	s9, [r7]
 800dab8:	ed97 3a01 	vldr	s6, [r7, #4]
 800dabc:	9701      	str	r7, [sp, #4]
 800dabe:	ee77 6a06 	vadd.f32	s13, s14, s12
 800dac2:	462c      	mov	r4, r5
 800dac4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dac8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800dacc:	ee16 ca90 	vmov	ip, s13
 800dad0:	f844 cb08 	str.w	ip, [r4], #8
 800dad4:	ee75 6a23 	vadd.f32	s13, s10, s7
 800dad8:	edd6 5a01 	vldr	s11, [r6, #4]
 800dadc:	edd7 2a01 	vldr	s5, [r7, #4]
 800dae0:	9404      	str	r4, [sp, #16]
 800dae2:	ee35 5a63 	vsub.f32	s10, s10, s7
 800dae6:	ee74 3a27 	vadd.f32	s7, s8, s15
 800daea:	ee36 6a47 	vsub.f32	s12, s12, s14
 800daee:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800daf2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800daf6:	0849      	lsrs	r1, r1, #1
 800daf8:	f102 0e08 	add.w	lr, r2, #8
 800dafc:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800db00:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800db04:	9109      	str	r1, [sp, #36]	; 0x24
 800db06:	ee35 4a47 	vsub.f32	s8, s10, s14
 800db0a:	f1a1 0902 	sub.w	r9, r1, #2
 800db0e:	f8cd e00c 	str.w	lr, [sp, #12]
 800db12:	4631      	mov	r1, r6
 800db14:	ee13 ea90 	vmov	lr, s7
 800db18:	ee36 6a64 	vsub.f32	s12, s12, s9
 800db1c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800db20:	4604      	mov	r4, r0
 800db22:	edc5 5a01 	vstr	s11, [r5, #4]
 800db26:	ee37 7a05 	vadd.f32	s14, s14, s10
 800db2a:	f841 eb08 	str.w	lr, [r1], #8
 800db2e:	ee34 5a24 	vadd.f32	s10, s8, s9
 800db32:	ee16 ea10 	vmov	lr, s12
 800db36:	ed86 5a01 	vstr	s10, [r6, #4]
 800db3a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800db3e:	f844 eb08 	str.w	lr, [r4], #8
 800db42:	ee77 7a83 	vadd.f32	s15, s15, s6
 800db46:	edc0 6a01 	vstr	s13, [r0, #4]
 800db4a:	9405      	str	r4, [sp, #20]
 800db4c:	4604      	mov	r4, r0
 800db4e:	ee17 0a90 	vmov	r0, s15
 800db52:	9106      	str	r1, [sp, #24]
 800db54:	ee37 7a64 	vsub.f32	s14, s14, s9
 800db58:	f102 0110 	add.w	r1, r2, #16
 800db5c:	46bc      	mov	ip, r7
 800db5e:	9100      	str	r1, [sp, #0]
 800db60:	f847 0b08 	str.w	r0, [r7], #8
 800db64:	f102 0118 	add.w	r1, r2, #24
 800db68:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800db6c:	9102      	str	r1, [sp, #8]
 800db6e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800db72:	9007      	str	r0, [sp, #28]
 800db74:	f000 8134 	beq.w	800dde0 <arm_cfft_radix8by4_f32+0x368>
 800db78:	f102 0920 	add.w	r9, r2, #32
 800db7c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800db80:	9a01      	ldr	r2, [sp, #4]
 800db82:	f8dd a000 	ldr.w	sl, [sp]
 800db86:	3b0c      	subs	r3, #12
 800db88:	4683      	mov	fp, r0
 800db8a:	4463      	add	r3, ip
 800db8c:	f105 0e10 	add.w	lr, r5, #16
 800db90:	f1a4 010c 	sub.w	r1, r4, #12
 800db94:	f104 0510 	add.w	r5, r4, #16
 800db98:	f1a6 0c0c 	sub.w	ip, r6, #12
 800db9c:	f1a2 040c 	sub.w	r4, r2, #12
 800dba0:	f106 0010 	add.w	r0, r6, #16
 800dba4:	3210      	adds	r2, #16
 800dba6:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800dbaa:	ed55 5a02 	vldr	s11, [r5, #-8]
 800dbae:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dbb2:	ed52 1a02 	vldr	s3, [r2, #-8]
 800dbb6:	ed55 6a01 	vldr	s13, [r5, #-4]
 800dbba:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800dbbe:	ed12 1a01 	vldr	s2, [r2, #-4]
 800dbc2:	ed10 8a01 	vldr	s16, [r0, #-4]
 800dbc6:	ee35 4a25 	vadd.f32	s8, s10, s11
 800dbca:	ee30 6a26 	vadd.f32	s12, s0, s13
 800dbce:	ee37 7a84 	vadd.f32	s14, s15, s8
 800dbd2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800dbd6:	ee37 7a21 	vadd.f32	s14, s14, s3
 800dbda:	ee75 5a65 	vsub.f32	s11, s10, s11
 800dbde:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800dbe2:	ed10 7a01 	vldr	s14, [r0, #-4]
 800dbe6:	ed52 6a01 	vldr	s13, [r2, #-4]
 800dbea:	ee36 7a07 	vadd.f32	s14, s12, s14
 800dbee:	ee78 aa25 	vadd.f32	s21, s16, s11
 800dbf2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800dbf6:	ee70 3a67 	vsub.f32	s7, s0, s15
 800dbfa:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800dbfe:	ed94 7a02 	vldr	s14, [r4, #8]
 800dc02:	ed9c 2a02 	vldr	s4, [ip, #8]
 800dc06:	ed91 ba02 	vldr	s22, [r1, #8]
 800dc0a:	edd3 9a02 	vldr	s19, [r3, #8]
 800dc0e:	edd4 2a01 	vldr	s5, [r4, #4]
 800dc12:	ed9c 9a01 	vldr	s18, [ip, #4]
 800dc16:	ed93 5a01 	vldr	s10, [r3, #4]
 800dc1a:	edd1 0a01 	vldr	s1, [r1, #4]
 800dc1e:	ee72 6a07 	vadd.f32	s13, s4, s14
 800dc22:	ee32 2a47 	vsub.f32	s4, s4, s14
 800dc26:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800dc2a:	ee79 4a22 	vadd.f32	s9, s18, s5
 800dc2e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800dc32:	ee79 2a62 	vsub.f32	s5, s18, s5
 800dc36:	ed8c 7a02 	vstr	s14, [ip, #8]
 800dc3a:	ed91 7a01 	vldr	s14, [r1, #4]
 800dc3e:	edd3 8a01 	vldr	s17, [r3, #4]
 800dc42:	ee34 7a87 	vadd.f32	s14, s9, s14
 800dc46:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800dc4a:	ee37 7a28 	vadd.f32	s14, s14, s17
 800dc4e:	ee32 9a60 	vsub.f32	s18, s4, s1
 800dc52:	ed8c 7a01 	vstr	s14, [ip, #4]
 800dc56:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800dc5a:	ed1a aa02 	vldr	s20, [sl, #-8]
 800dc5e:	ee73 8a22 	vadd.f32	s17, s6, s5
 800dc62:	ee39 9a05 	vadd.f32	s18, s18, s10
 800dc66:	ee7a aac1 	vsub.f32	s21, s21, s2
 800dc6a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800dc6e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800dc72:	ee69 ba07 	vmul.f32	s23, s18, s14
 800dc76:	ee6a aa87 	vmul.f32	s21, s21, s14
 800dc7a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800dc7e:	ee63 ca87 	vmul.f32	s25, s7, s14
 800dc82:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800dc86:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800dc8a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800dc8e:	ee73 3aea 	vsub.f32	s7, s7, s21
 800dc92:	ee78 8a89 	vadd.f32	s17, s17, s18
 800dc96:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800dc9a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800dc9e:	ee34 4a67 	vsub.f32	s8, s8, s15
 800dca2:	ee76 6acb 	vsub.f32	s13, s13, s22
 800dca6:	ee36 6a48 	vsub.f32	s12, s12, s16
 800dcaa:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800dcae:	ed00 7a02 	vstr	s14, [r0, #-8]
 800dcb2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800dcb6:	edc1 8a01 	vstr	s17, [r1, #4]
 800dcba:	ed81 aa02 	vstr	s20, [r1, #8]
 800dcbe:	ed59 3a04 	vldr	s7, [r9, #-16]
 800dcc2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800dcc6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800dcca:	ed59 6a03 	vldr	s13, [r9, #-12]
 800dcce:	ee34 4a61 	vsub.f32	s8, s8, s3
 800dcd2:	ee36 6a41 	vsub.f32	s12, s12, s2
 800dcd6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800dcda:	ee66 9a26 	vmul.f32	s19, s12, s13
 800dcde:	ee24 9a23 	vmul.f32	s18, s8, s7
 800dce2:	ee26 6a23 	vmul.f32	s12, s12, s7
 800dce6:	ee24 4a26 	vmul.f32	s8, s8, s13
 800dcea:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dcee:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800dcf2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800dcf6:	ee36 6a44 	vsub.f32	s12, s12, s8
 800dcfa:	ee37 7a64 	vsub.f32	s14, s14, s9
 800dcfe:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800dd02:	ee79 3a29 	vadd.f32	s7, s18, s19
 800dd06:	ee75 6a60 	vsub.f32	s13, s10, s1
 800dd0a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800dd0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dd12:	ed45 3a02 	vstr	s7, [r5, #-8]
 800dd16:	ed05 6a01 	vstr	s12, [r5, #-4]
 800dd1a:	ed84 7a01 	vstr	s14, [r4, #4]
 800dd1e:	ed84 4a02 	vstr	s8, [r4, #8]
 800dd22:	ee35 6a81 	vadd.f32	s12, s11, s2
 800dd26:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800dd2a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800dd2e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800dd32:	ee33 3a62 	vsub.f32	s6, s6, s5
 800dd36:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800dd3a:	ee67 2a26 	vmul.f32	s5, s14, s13
 800dd3e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800dd42:	ee26 5a25 	vmul.f32	s10, s12, s11
 800dd46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800dd4a:	ee26 6a26 	vmul.f32	s12, s12, s13
 800dd4e:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dd52:	ee63 6a26 	vmul.f32	s13, s6, s13
 800dd56:	ee23 3a25 	vmul.f32	s6, s6, s11
 800dd5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dd5e:	ee75 5a24 	vadd.f32	s11, s10, s9
 800dd62:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800dd66:	ee36 7a87 	vadd.f32	s14, s13, s14
 800dd6a:	f1bb 0b01 	subs.w	fp, fp, #1
 800dd6e:	ed42 5a02 	vstr	s11, [r2, #-8]
 800dd72:	ed42 7a01 	vstr	s15, [r2, #-4]
 800dd76:	f10e 0e08 	add.w	lr, lr, #8
 800dd7a:	ed83 3a02 	vstr	s6, [r3, #8]
 800dd7e:	ed83 7a01 	vstr	s14, [r3, #4]
 800dd82:	f1ac 0c08 	sub.w	ip, ip, #8
 800dd86:	f10a 0a08 	add.w	sl, sl, #8
 800dd8a:	f100 0008 	add.w	r0, r0, #8
 800dd8e:	f1a1 0108 	sub.w	r1, r1, #8
 800dd92:	f109 0910 	add.w	r9, r9, #16
 800dd96:	f105 0508 	add.w	r5, r5, #8
 800dd9a:	f1a4 0408 	sub.w	r4, r4, #8
 800dd9e:	f108 0818 	add.w	r8, r8, #24
 800dda2:	f102 0208 	add.w	r2, r2, #8
 800dda6:	f1a3 0308 	sub.w	r3, r3, #8
 800ddaa:	f47f aefc 	bne.w	800dba6 <arm_cfft_radix8by4_f32+0x12e>
 800ddae:	9907      	ldr	r1, [sp, #28]
 800ddb0:	9800      	ldr	r0, [sp, #0]
 800ddb2:	00cb      	lsls	r3, r1, #3
 800ddb4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ddb8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ddbc:	9100      	str	r1, [sp, #0]
 800ddbe:	9904      	ldr	r1, [sp, #16]
 800ddc0:	4419      	add	r1, r3
 800ddc2:	9104      	str	r1, [sp, #16]
 800ddc4:	9903      	ldr	r1, [sp, #12]
 800ddc6:	4419      	add	r1, r3
 800ddc8:	9103      	str	r1, [sp, #12]
 800ddca:	9906      	ldr	r1, [sp, #24]
 800ddcc:	4419      	add	r1, r3
 800ddce:	9106      	str	r1, [sp, #24]
 800ddd0:	9905      	ldr	r1, [sp, #20]
 800ddd2:	441f      	add	r7, r3
 800ddd4:	4419      	add	r1, r3
 800ddd6:	9b02      	ldr	r3, [sp, #8]
 800ddd8:	9105      	str	r1, [sp, #20]
 800ddda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddde:	9302      	str	r3, [sp, #8]
 800dde0:	9904      	ldr	r1, [sp, #16]
 800dde2:	9805      	ldr	r0, [sp, #20]
 800dde4:	ed91 4a00 	vldr	s8, [r1]
 800dde8:	edd0 6a00 	vldr	s13, [r0]
 800ddec:	9b06      	ldr	r3, [sp, #24]
 800ddee:	ed97 3a00 	vldr	s6, [r7]
 800ddf2:	edd3 7a00 	vldr	s15, [r3]
 800ddf6:	edd0 4a01 	vldr	s9, [r0, #4]
 800ddfa:	edd1 3a01 	vldr	s7, [r1, #4]
 800ddfe:	ed97 2a01 	vldr	s4, [r7, #4]
 800de02:	ed93 7a01 	vldr	s14, [r3, #4]
 800de06:	9a03      	ldr	r2, [sp, #12]
 800de08:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800de0c:	ee34 6a26 	vadd.f32	s12, s8, s13
 800de10:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800de14:	ee37 5a86 	vadd.f32	s10, s15, s12
 800de18:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800de1c:	ee35 5a03 	vadd.f32	s10, s10, s6
 800de20:	ee74 6a66 	vsub.f32	s13, s8, s13
 800de24:	ed81 5a00 	vstr	s10, [r1]
 800de28:	ed93 5a01 	vldr	s10, [r3, #4]
 800de2c:	edd7 4a01 	vldr	s9, [r7, #4]
 800de30:	ee35 5a85 	vadd.f32	s10, s11, s10
 800de34:	ee37 4a26 	vadd.f32	s8, s14, s13
 800de38:	ee35 5a24 	vadd.f32	s10, s10, s9
 800de3c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800de40:	ed81 5a01 	vstr	s10, [r1, #4]
 800de44:	edd2 1a00 	vldr	s3, [r2]
 800de48:	edd2 2a01 	vldr	s5, [r2, #4]
 800de4c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800de50:	ee34 4a42 	vsub.f32	s8, s8, s4
 800de54:	ee36 6a67 	vsub.f32	s12, s12, s15
 800de58:	ee64 4a21 	vmul.f32	s9, s8, s3
 800de5c:	ee24 4a22 	vmul.f32	s8, s8, s5
 800de60:	ee65 2a22 	vmul.f32	s5, s10, s5
 800de64:	ee25 5a21 	vmul.f32	s10, s10, s3
 800de68:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800de6c:	ee35 5a44 	vsub.f32	s10, s10, s8
 800de70:	edc3 2a00 	vstr	s5, [r3]
 800de74:	ed83 5a01 	vstr	s10, [r3, #4]
 800de78:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800de7c:	9b00      	ldr	r3, [sp, #0]
 800de7e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800de82:	ed93 4a01 	vldr	s8, [r3, #4]
 800de86:	ed93 5a00 	vldr	s10, [r3]
 800de8a:	9b02      	ldr	r3, [sp, #8]
 800de8c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800de90:	ee66 4a05 	vmul.f32	s9, s12, s10
 800de94:	ee25 5a85 	vmul.f32	s10, s11, s10
 800de98:	ee26 6a04 	vmul.f32	s12, s12, s8
 800de9c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800dea0:	ee35 6a46 	vsub.f32	s12, s10, s12
 800dea4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800dea8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800deac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800deb0:	ed80 6a01 	vstr	s12, [r0, #4]
 800deb4:	edc0 5a00 	vstr	s11, [r0]
 800deb8:	edd3 5a01 	vldr	s11, [r3, #4]
 800debc:	edd3 6a00 	vldr	s13, [r3]
 800dec0:	ee37 7a02 	vadd.f32	s14, s14, s4
 800dec4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800dec8:	ee27 6a26 	vmul.f32	s12, s14, s13
 800decc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ded0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ded4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ded8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800dedc:	ee76 7a27 	vadd.f32	s15, s12, s15
 800dee0:	ed87 7a01 	vstr	s14, [r7, #4]
 800dee4:	edc7 7a00 	vstr	s15, [r7]
 800dee8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800deec:	4621      	mov	r1, r4
 800deee:	686a      	ldr	r2, [r5, #4]
 800def0:	2304      	movs	r3, #4
 800def2:	f000 f9d3 	bl	800e29c <arm_radix8_butterfly_f32>
 800def6:	4630      	mov	r0, r6
 800def8:	4621      	mov	r1, r4
 800defa:	686a      	ldr	r2, [r5, #4]
 800defc:	2304      	movs	r3, #4
 800defe:	f000 f9cd 	bl	800e29c <arm_radix8_butterfly_f32>
 800df02:	9808      	ldr	r0, [sp, #32]
 800df04:	686a      	ldr	r2, [r5, #4]
 800df06:	4621      	mov	r1, r4
 800df08:	2304      	movs	r3, #4
 800df0a:	f000 f9c7 	bl	800e29c <arm_radix8_butterfly_f32>
 800df0e:	686a      	ldr	r2, [r5, #4]
 800df10:	9801      	ldr	r0, [sp, #4]
 800df12:	4621      	mov	r1, r4
 800df14:	2304      	movs	r3, #4
 800df16:	b00d      	add	sp, #52	; 0x34
 800df18:	ecbd 8b0a 	vpop	{d8-d12}
 800df1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df20:	f000 b9bc 	b.w	800e29c <arm_radix8_butterfly_f32>

0800df24 <arm_cfft_f32>:
 800df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df28:	2a01      	cmp	r2, #1
 800df2a:	4606      	mov	r6, r0
 800df2c:	4617      	mov	r7, r2
 800df2e:	460c      	mov	r4, r1
 800df30:	4698      	mov	r8, r3
 800df32:	8805      	ldrh	r5, [r0, #0]
 800df34:	d056      	beq.n	800dfe4 <arm_cfft_f32+0xc0>
 800df36:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800df3a:	d063      	beq.n	800e004 <arm_cfft_f32+0xe0>
 800df3c:	d916      	bls.n	800df6c <arm_cfft_f32+0x48>
 800df3e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800df42:	d01a      	beq.n	800df7a <arm_cfft_f32+0x56>
 800df44:	d947      	bls.n	800dfd6 <arm_cfft_f32+0xb2>
 800df46:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800df4a:	d05b      	beq.n	800e004 <arm_cfft_f32+0xe0>
 800df4c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800df50:	d105      	bne.n	800df5e <arm_cfft_f32+0x3a>
 800df52:	2301      	movs	r3, #1
 800df54:	6872      	ldr	r2, [r6, #4]
 800df56:	4629      	mov	r1, r5
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 f99f 	bl	800e29c <arm_radix8_butterfly_f32>
 800df5e:	f1b8 0f00 	cmp.w	r8, #0
 800df62:	d111      	bne.n	800df88 <arm_cfft_f32+0x64>
 800df64:	2f01      	cmp	r7, #1
 800df66:	d016      	beq.n	800df96 <arm_cfft_f32+0x72>
 800df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6c:	2d20      	cmp	r5, #32
 800df6e:	d049      	beq.n	800e004 <arm_cfft_f32+0xe0>
 800df70:	d935      	bls.n	800dfde <arm_cfft_f32+0xba>
 800df72:	2d40      	cmp	r5, #64	; 0x40
 800df74:	d0ed      	beq.n	800df52 <arm_cfft_f32+0x2e>
 800df76:	2d80      	cmp	r5, #128	; 0x80
 800df78:	d1f1      	bne.n	800df5e <arm_cfft_f32+0x3a>
 800df7a:	4621      	mov	r1, r4
 800df7c:	4630      	mov	r0, r6
 800df7e:	f7ff fcab 	bl	800d8d8 <arm_cfft_radix8by2_f32>
 800df82:	f1b8 0f00 	cmp.w	r8, #0
 800df86:	d0ed      	beq.n	800df64 <arm_cfft_f32+0x40>
 800df88:	68b2      	ldr	r2, [r6, #8]
 800df8a:	89b1      	ldrh	r1, [r6, #12]
 800df8c:	4620      	mov	r0, r4
 800df8e:	f000 f841 	bl	800e014 <arm_bitreversal_32>
 800df92:	2f01      	cmp	r7, #1
 800df94:	d1e8      	bne.n	800df68 <arm_cfft_f32+0x44>
 800df96:	ee07 5a90 	vmov	s15, r5
 800df9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfa2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800dfa6:	2d00      	cmp	r5, #0
 800dfa8:	d0de      	beq.n	800df68 <arm_cfft_f32+0x44>
 800dfaa:	f104 0108 	add.w	r1, r4, #8
 800dfae:	2300      	movs	r3, #0
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	429d      	cmp	r5, r3
 800dfb4:	f101 0108 	add.w	r1, r1, #8
 800dfb8:	ed11 7a04 	vldr	s14, [r1, #-16]
 800dfbc:	ed51 7a03 	vldr	s15, [r1, #-12]
 800dfc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dfc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dfc8:	ed01 7a04 	vstr	s14, [r1, #-16]
 800dfcc:	ed41 7a03 	vstr	s15, [r1, #-12]
 800dfd0:	d1ee      	bne.n	800dfb0 <arm_cfft_f32+0x8c>
 800dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800dfda:	d0ba      	beq.n	800df52 <arm_cfft_f32+0x2e>
 800dfdc:	e7bf      	b.n	800df5e <arm_cfft_f32+0x3a>
 800dfde:	2d10      	cmp	r5, #16
 800dfe0:	d0cb      	beq.n	800df7a <arm_cfft_f32+0x56>
 800dfe2:	e7bc      	b.n	800df5e <arm_cfft_f32+0x3a>
 800dfe4:	b19d      	cbz	r5, 800e00e <arm_cfft_f32+0xea>
 800dfe6:	f101 030c 	add.w	r3, r1, #12
 800dfea:	2200      	movs	r2, #0
 800dfec:	ed53 7a02 	vldr	s15, [r3, #-8]
 800dff0:	3201      	adds	r2, #1
 800dff2:	eef1 7a67 	vneg.f32	s15, s15
 800dff6:	4295      	cmp	r5, r2
 800dff8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800dffc:	f103 0308 	add.w	r3, r3, #8
 800e000:	d1f4      	bne.n	800dfec <arm_cfft_f32+0xc8>
 800e002:	e798      	b.n	800df36 <arm_cfft_f32+0x12>
 800e004:	4621      	mov	r1, r4
 800e006:	4630      	mov	r0, r6
 800e008:	f7ff fd36 	bl	800da78 <arm_cfft_radix8by4_f32>
 800e00c:	e7a7      	b.n	800df5e <arm_cfft_f32+0x3a>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0aa      	beq.n	800df68 <arm_cfft_f32+0x44>
 800e012:	e7b9      	b.n	800df88 <arm_cfft_f32+0x64>

0800e014 <arm_bitreversal_32>:
 800e014:	b1e9      	cbz	r1, 800e052 <arm_bitreversal_32+0x3e>
 800e016:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e018:	2500      	movs	r5, #0
 800e01a:	f102 0e02 	add.w	lr, r2, #2
 800e01e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800e022:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800e026:	08a4      	lsrs	r4, r4, #2
 800e028:	089b      	lsrs	r3, r3, #2
 800e02a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800e02e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800e032:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800e036:	00a6      	lsls	r6, r4, #2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800e03e:	3304      	adds	r3, #4
 800e040:	1d34      	adds	r4, r6, #4
 800e042:	3502      	adds	r5, #2
 800e044:	58c6      	ldr	r6, [r0, r3]
 800e046:	5907      	ldr	r7, [r0, r4]
 800e048:	50c7      	str	r7, [r0, r3]
 800e04a:	428d      	cmp	r5, r1
 800e04c:	5106      	str	r6, [r0, r4]
 800e04e:	d3e6      	bcc.n	800e01e <arm_bitreversal_32+0xa>
 800e050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e052:	4770      	bx	lr

0800e054 <arm_cmplx_mag_f32>:
 800e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e058:	ed2d 8b02 	vpush	{d8}
 800e05c:	0897      	lsrs	r7, r2, #2
 800e05e:	b084      	sub	sp, #16
 800e060:	d077      	beq.n	800e152 <arm_cmplx_mag_f32+0xfe>
 800e062:	f04f 0800 	mov.w	r8, #0
 800e066:	f100 0420 	add.w	r4, r0, #32
 800e06a:	f101 0510 	add.w	r5, r1, #16
 800e06e:	463e      	mov	r6, r7
 800e070:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800e074:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800e078:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e07c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e080:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e084:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e08c:	f2c0 80c5 	blt.w	800e21a <arm_cmplx_mag_f32+0x1c6>
 800e090:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e09c:	f100 80cb 	bmi.w	800e236 <arm_cmplx_mag_f32+0x1e2>
 800e0a0:	ed05 8a04 	vstr	s16, [r5, #-16]
 800e0a4:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800e0a8:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800e0ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e0b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e0b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e0b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c0:	f2c0 80a8 	blt.w	800e214 <arm_cmplx_mag_f32+0x1c0>
 800e0c4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0cc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e0d0:	f100 80a8 	bmi.w	800e224 <arm_cmplx_mag_f32+0x1d0>
 800e0d4:	ed05 8a03 	vstr	s16, [r5, #-12]
 800e0d8:	ed14 0a04 	vldr	s0, [r4, #-16]
 800e0dc:	ed54 7a03 	vldr	s15, [r4, #-12]
 800e0e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e0e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e0e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e0ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f4:	f2c0 808b 	blt.w	800e20e <arm_cmplx_mag_f32+0x1ba>
 800e0f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e100:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e104:	f100 80a9 	bmi.w	800e25a <arm_cmplx_mag_f32+0x206>
 800e108:	ed05 8a02 	vstr	s16, [r5, #-8]
 800e10c:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e110:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e114:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e11c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e120:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	db6e      	blt.n	800e208 <arm_cmplx_mag_f32+0x1b4>
 800e12a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e132:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e136:	f100 8087 	bmi.w	800e248 <arm_cmplx_mag_f32+0x1f4>
 800e13a:	ed05 8a01 	vstr	s16, [r5, #-4]
 800e13e:	3e01      	subs	r6, #1
 800e140:	f104 0420 	add.w	r4, r4, #32
 800e144:	f105 0510 	add.w	r5, r5, #16
 800e148:	d192      	bne.n	800e070 <arm_cmplx_mag_f32+0x1c>
 800e14a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800e14e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800e152:	f012 0203 	ands.w	r2, r2, #3
 800e156:	d052      	beq.n	800e1fe <arm_cmplx_mag_f32+0x1aa>
 800e158:	ed90 0a00 	vldr	s0, [r0]
 800e15c:	edd0 7a01 	vldr	s15, [r0, #4]
 800e160:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e164:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e168:	2300      	movs	r3, #0
 800e16a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e16e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e176:	bfb8      	it	lt
 800e178:	600b      	strlt	r3, [r1, #0]
 800e17a:	db08      	blt.n	800e18e <arm_cmplx_mag_f32+0x13a>
 800e17c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e184:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e188:	d479      	bmi.n	800e27e <arm_cmplx_mag_f32+0x22a>
 800e18a:	ed81 8a00 	vstr	s16, [r1]
 800e18e:	3a01      	subs	r2, #1
 800e190:	d035      	beq.n	800e1fe <arm_cmplx_mag_f32+0x1aa>
 800e192:	ed90 0a02 	vldr	s0, [r0, #8]
 800e196:	edd0 7a03 	vldr	s15, [r0, #12]
 800e19a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e19e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e1a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b0:	bfb8      	it	lt
 800e1b2:	604b      	strlt	r3, [r1, #4]
 800e1b4:	db08      	blt.n	800e1c8 <arm_cmplx_mag_f32+0x174>
 800e1b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1be:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e1c2:	d453      	bmi.n	800e26c <arm_cmplx_mag_f32+0x218>
 800e1c4:	ed81 8a01 	vstr	s16, [r1, #4]
 800e1c8:	2a01      	cmp	r2, #1
 800e1ca:	d018      	beq.n	800e1fe <arm_cmplx_mag_f32+0x1aa>
 800e1cc:	ed90 0a04 	vldr	s0, [r0, #16]
 800e1d0:	edd0 7a05 	vldr	s15, [r0, #20]
 800e1d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e1d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e1dc:	2300      	movs	r3, #0
 800e1de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ea:	db19      	blt.n	800e220 <arm_cmplx_mag_f32+0x1cc>
 800e1ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800e1f8:	d44a      	bmi.n	800e290 <arm_cmplx_mag_f32+0x23c>
 800e1fa:	ed81 8a02 	vstr	s16, [r1, #8]
 800e1fe:	b004      	add	sp, #16
 800e200:	ecbd 8b02 	vpop	{d8}
 800e204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e208:	f845 8c04 	str.w	r8, [r5, #-4]
 800e20c:	e797      	b.n	800e13e <arm_cmplx_mag_f32+0xea>
 800e20e:	f845 8c08 	str.w	r8, [r5, #-8]
 800e212:	e77b      	b.n	800e10c <arm_cmplx_mag_f32+0xb8>
 800e214:	f845 8c0c 	str.w	r8, [r5, #-12]
 800e218:	e75e      	b.n	800e0d8 <arm_cmplx_mag_f32+0x84>
 800e21a:	f845 8c10 	str.w	r8, [r5, #-16]
 800e21e:	e741      	b.n	800e0a4 <arm_cmplx_mag_f32+0x50>
 800e220:	608b      	str	r3, [r1, #8]
 800e222:	e7ec      	b.n	800e1fe <arm_cmplx_mag_f32+0x1aa>
 800e224:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e228:	9001      	str	r0, [sp, #4]
 800e22a:	f001 fa1d 	bl	800f668 <sqrtf>
 800e22e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e232:	9801      	ldr	r0, [sp, #4]
 800e234:	e74e      	b.n	800e0d4 <arm_cmplx_mag_f32+0x80>
 800e236:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e23a:	9001      	str	r0, [sp, #4]
 800e23c:	f001 fa14 	bl	800f668 <sqrtf>
 800e240:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e244:	9801      	ldr	r0, [sp, #4]
 800e246:	e72b      	b.n	800e0a0 <arm_cmplx_mag_f32+0x4c>
 800e248:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e24c:	9001      	str	r0, [sp, #4]
 800e24e:	f001 fa0b 	bl	800f668 <sqrtf>
 800e252:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e256:	9801      	ldr	r0, [sp, #4]
 800e258:	e76f      	b.n	800e13a <arm_cmplx_mag_f32+0xe6>
 800e25a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e25e:	9001      	str	r0, [sp, #4]
 800e260:	f001 fa02 	bl	800f668 <sqrtf>
 800e264:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e268:	9801      	ldr	r0, [sp, #4]
 800e26a:	e74d      	b.n	800e108 <arm_cmplx_mag_f32+0xb4>
 800e26c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e270:	9201      	str	r2, [sp, #4]
 800e272:	f001 f9f9 	bl	800f668 <sqrtf>
 800e276:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800e27a:	9903      	ldr	r1, [sp, #12]
 800e27c:	e7a2      	b.n	800e1c4 <arm_cmplx_mag_f32+0x170>
 800e27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e282:	9201      	str	r2, [sp, #4]
 800e284:	f001 f9f0 	bl	800f668 <sqrtf>
 800e288:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800e28c:	9903      	ldr	r1, [sp, #12]
 800e28e:	e77c      	b.n	800e18a <arm_cmplx_mag_f32+0x136>
 800e290:	9101      	str	r1, [sp, #4]
 800e292:	f001 f9e9 	bl	800f668 <sqrtf>
 800e296:	9901      	ldr	r1, [sp, #4]
 800e298:	e7af      	b.n	800e1fa <arm_cmplx_mag_f32+0x1a6>
 800e29a:	bf00      	nop

0800e29c <arm_radix8_butterfly_f32>:
 800e29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a0:	ed2d 8b10 	vpush	{d8-d15}
 800e2a4:	b095      	sub	sp, #84	; 0x54
 800e2a6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	ed9f bab9 	vldr	s22, [pc, #740]	; 800e594 <arm_radix8_butterfly_f32+0x2f8>
 800e2b2:	9012      	str	r0, [sp, #72]	; 0x48
 800e2b4:	468b      	mov	fp, r1
 800e2b6:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2b8:	4689      	mov	r9, r1
 800e2ba:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800e2be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2c0:	960f      	str	r6, [sp, #60]	; 0x3c
 800e2c2:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800e2c6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800e2ca:	eb03 0508 	add.w	r5, r3, r8
 800e2ce:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e2d2:	eb05 040e 	add.w	r4, r5, lr
 800e2d6:	0137      	lsls	r7, r6, #4
 800e2d8:	eba6 030a 	sub.w	r3, r6, sl
 800e2dc:	eb04 000e 	add.w	r0, r4, lr
 800e2e0:	44b2      	add	sl, r6
 800e2e2:	1d3a      	adds	r2, r7, #4
 800e2e4:	9702      	str	r7, [sp, #8]
 800e2e6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e2ea:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800e2ee:	ebae 0c06 	sub.w	ip, lr, r6
 800e2f2:	9703      	str	r7, [sp, #12]
 800e2f4:	eb03 0708 	add.w	r7, r3, r8
 800e2f8:	9701      	str	r7, [sp, #4]
 800e2fa:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800e2fe:	9706      	str	r7, [sp, #24]
 800e300:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800e302:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e306:	f10e 0104 	add.w	r1, lr, #4
 800e30a:	4439      	add	r1, r7
 800e30c:	443a      	add	r2, r7
 800e30e:	0137      	lsls	r7, r6, #4
 800e310:	00f6      	lsls	r6, r6, #3
 800e312:	9704      	str	r7, [sp, #16]
 800e314:	9605      	str	r6, [sp, #20]
 800e316:	9f01      	ldr	r7, [sp, #4]
 800e318:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800e31a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800e31e:	f04f 0c00 	mov.w	ip, #0
 800e322:	edd4 6a00 	vldr	s13, [r4]
 800e326:	edd7 1a00 	vldr	s3, [r7]
 800e32a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800e32e:	edd5 5a00 	vldr	s11, [r5]
 800e332:	ed52 9a01 	vldr	s19, [r2, #-4]
 800e336:	ed90 6a00 	vldr	s12, [r0]
 800e33a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800e33e:	ed93 3a00 	vldr	s6, [r3]
 800e342:	ee39 0a86 	vadd.f32	s0, s19, s12
 800e346:	ee33 2a21 	vadd.f32	s4, s6, s3
 800e34a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800e34e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800e352:	ee35 7a02 	vadd.f32	s14, s10, s4
 800e356:	ee34 4a80 	vadd.f32	s8, s9, s0
 800e35a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e35e:	ee74 6a07 	vadd.f32	s13, s8, s14
 800e362:	ee34 4a47 	vsub.f32	s8, s8, s14
 800e366:	ed46 6a01 	vstr	s13, [r6, #-4]
 800e36a:	ed85 4a00 	vstr	s8, [r5]
 800e36e:	edd1 6a00 	vldr	s13, [r1]
 800e372:	ed94 9a01 	vldr	s18, [r4, #4]
 800e376:	edd3 2a01 	vldr	s5, [r3, #4]
 800e37a:	edd7 8a01 	vldr	s17, [r7, #4]
 800e37e:	edd6 0a00 	vldr	s1, [r6]
 800e382:	edd5 3a01 	vldr	s7, [r5, #4]
 800e386:	ed90 8a01 	vldr	s16, [r0, #4]
 800e38a:	ed92 7a00 	vldr	s14, [r2]
 800e38e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e392:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800e396:	ee72 aae8 	vsub.f32	s21, s5, s17
 800e39a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800e39e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800e3a2:	ee77 7a83 	vadd.f32	s15, s15, s6
 800e3a6:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800e3aa:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800e3ae:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800e3b2:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800e3b6:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800e3ba:	ee77 0a08 	vadd.f32	s1, s14, s16
 800e3be:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800e3c2:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e3c6:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800e3ca:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800e3ce:	ee76 6a89 	vadd.f32	s13, s13, s18
 800e3d2:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800e3d6:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800e3da:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e3de:	ee35 5a42 	vsub.f32	s10, s10, s4
 800e3e2:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800e3e6:	ee33 2a20 	vadd.f32	s4, s6, s1
 800e3ea:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800e3ee:	ee33 3a60 	vsub.f32	s6, s6, s1
 800e3f2:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800e3f6:	ee77 0a01 	vadd.f32	s1, s14, s2
 800e3fa:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800e3fe:	ee37 7a41 	vsub.f32	s14, s14, s2
 800e402:	ee73 1a84 	vadd.f32	s3, s7, s8
 800e406:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800e40a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800e40e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e412:	ee32 8a00 	vadd.f32	s16, s4, s0
 800e416:	ee33 1a45 	vsub.f32	s2, s6, s10
 800e41a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800e41e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e422:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800e426:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800e42a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800e42e:	ee34 6a67 	vsub.f32	s12, s8, s15
 800e432:	ee75 4a87 	vadd.f32	s9, s11, s14
 800e436:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800e43a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800e43e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e442:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800e446:	44dc      	add	ip, fp
 800e448:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800e44c:	45e1      	cmp	r9, ip
 800e44e:	ed86 8a00 	vstr	s16, [r6]
 800e452:	ed85 2a01 	vstr	s4, [r5, #4]
 800e456:	4456      	add	r6, sl
 800e458:	ed02 0a01 	vstr	s0, [r2, #-4]
 800e45c:	4455      	add	r5, sl
 800e45e:	edc0 6a00 	vstr	s13, [r0]
 800e462:	ed82 1a00 	vstr	s2, [r2]
 800e466:	ed80 5a01 	vstr	s10, [r0, #4]
 800e46a:	4452      	add	r2, sl
 800e46c:	ed01 3a01 	vstr	s6, [r1, #-4]
 800e470:	4450      	add	r0, sl
 800e472:	edc7 2a00 	vstr	s5, [r7]
 800e476:	edc4 4a00 	vstr	s9, [r4]
 800e47a:	ed83 7a00 	vstr	s14, [r3]
 800e47e:	edc1 5a00 	vstr	s11, [r1]
 800e482:	edc7 3a01 	vstr	s7, [r7, #4]
 800e486:	4451      	add	r1, sl
 800e488:	ed84 6a01 	vstr	s12, [r4, #4]
 800e48c:	4457      	add	r7, sl
 800e48e:	edc3 7a01 	vstr	s15, [r3, #4]
 800e492:	4454      	add	r4, sl
 800e494:	4453      	add	r3, sl
 800e496:	f63f af44 	bhi.w	800e322 <arm_radix8_butterfly_f32+0x86>
 800e49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e49c:	2b07      	cmp	r3, #7
 800e49e:	f240 81b7 	bls.w	800e810 <arm_radix8_butterfly_f32+0x574>
 800e4a2:	9b06      	ldr	r3, [sp, #24]
 800e4a4:	9903      	ldr	r1, [sp, #12]
 800e4a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e4a8:	9e05      	ldr	r6, [sp, #20]
 800e4aa:	9a04      	ldr	r2, [sp, #16]
 800e4ac:	f103 0c08 	add.w	ip, r3, #8
 800e4b0:	9b02      	ldr	r3, [sp, #8]
 800e4b2:	3108      	adds	r1, #8
 800e4b4:	f108 0808 	add.w	r8, r8, #8
 800e4b8:	1841      	adds	r1, r0, r1
 800e4ba:	3608      	adds	r6, #8
 800e4bc:	330c      	adds	r3, #12
 800e4be:	4604      	mov	r4, r0
 800e4c0:	4444      	add	r4, r8
 800e4c2:	18c3      	adds	r3, r0, r3
 800e4c4:	9109      	str	r1, [sp, #36]	; 0x24
 800e4c6:	1981      	adds	r1, r0, r6
 800e4c8:	f10e 0e08 	add.w	lr, lr, #8
 800e4cc:	3208      	adds	r2, #8
 800e4ce:	940b      	str	r4, [sp, #44]	; 0x2c
 800e4d0:	9107      	str	r1, [sp, #28]
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4601      	mov	r1, r0
 800e4d6:	9304      	str	r3, [sp, #16]
 800e4d8:	f100 030c 	add.w	r3, r0, #12
 800e4dc:	4474      	add	r4, lr
 800e4de:	f04f 0801 	mov.w	r8, #1
 800e4e2:	1882      	adds	r2, r0, r2
 800e4e4:	4461      	add	r1, ip
 800e4e6:	9305      	str	r3, [sp, #20]
 800e4e8:	464b      	mov	r3, r9
 800e4ea:	940a      	str	r4, [sp, #40]	; 0x28
 800e4ec:	46c1      	mov	r9, r8
 800e4ee:	9208      	str	r2, [sp, #32]
 800e4f0:	46d8      	mov	r8, fp
 800e4f2:	9106      	str	r1, [sp, #24]
 800e4f4:	f04f 0e00 	mov.w	lr, #0
 800e4f8:	469b      	mov	fp, r3
 800e4fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4fe:	449e      	add	lr, r3
 800e500:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800e504:	441a      	add	r2, r3
 800e506:	920e      	str	r2, [sp, #56]	; 0x38
 800e508:	441a      	add	r2, r3
 800e50a:	18d4      	adds	r4, r2, r3
 800e50c:	18e5      	adds	r5, r4, r3
 800e50e:	18ee      	adds	r6, r5, r3
 800e510:	18f7      	adds	r7, r6, r3
 800e512:	eb07 0c03 	add.w	ip, r7, r3
 800e516:	920d      	str	r2, [sp, #52]	; 0x34
 800e518:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800e51c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800e520:	910c      	str	r1, [sp, #48]	; 0x30
 800e522:	4419      	add	r1, r3
 800e524:	9103      	str	r1, [sp, #12]
 800e526:	4419      	add	r1, r3
 800e528:	18ca      	adds	r2, r1, r3
 800e52a:	9202      	str	r2, [sp, #8]
 800e52c:	441a      	add	r2, r3
 800e52e:	18d0      	adds	r0, r2, r3
 800e530:	ed92 ea01 	vldr	s28, [r2, #4]
 800e534:	9a02      	ldr	r2, [sp, #8]
 800e536:	edd4 7a00 	vldr	s15, [r4]
 800e53a:	edd2 da01 	vldr	s27, [r2, #4]
 800e53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e540:	ed91 da01 	vldr	s26, [r1, #4]
 800e544:	ed92 ca01 	vldr	s24, [r2, #4]
 800e548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e54a:	9903      	ldr	r1, [sp, #12]
 800e54c:	edcd 7a03 	vstr	s15, [sp, #12]
 800e550:	edd2 7a00 	vldr	s15, [r2]
 800e554:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e556:	edcd 7a02 	vstr	s15, [sp, #8]
 800e55a:	edd2 7a00 	vldr	s15, [r2]
 800e55e:	edd0 ea01 	vldr	s29, [r0, #4]
 800e562:	edd1 ca01 	vldr	s25, [r1, #4]
 800e566:	eddc ba00 	vldr	s23, [ip]
 800e56a:	edd7 aa00 	vldr	s21, [r7]
 800e56e:	ed96 aa00 	vldr	s20, [r6]
 800e572:	edd5 9a00 	vldr	s19, [r5]
 800e576:	edcd 7a01 	vstr	s15, [sp, #4]
 800e57a:	4403      	add	r3, r0
 800e57c:	ed93 fa01 	vldr	s30, [r3, #4]
 800e580:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800e584:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800e588:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e58c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e590:	46cc      	mov	ip, r9
 800e592:	e001      	b.n	800e598 <arm_radix8_butterfly_f32+0x2fc>
 800e594:	3f3504f3 	.word	0x3f3504f3
 800e598:	ed91 6a00 	vldr	s12, [r1]
 800e59c:	ed93 5a00 	vldr	s10, [r3]
 800e5a0:	edd0 fa00 	vldr	s31, [r0]
 800e5a4:	edd4 7a00 	vldr	s15, [r4]
 800e5a8:	ed95 7a00 	vldr	s14, [r5]
 800e5ac:	ed56 3a01 	vldr	s7, [r6, #-4]
 800e5b0:	ed17 3a01 	vldr	s6, [r7, #-4]
 800e5b4:	ed92 2a00 	vldr	s4, [r2]
 800e5b8:	ed96 0a00 	vldr	s0, [r6]
 800e5bc:	ee33 8a85 	vadd.f32	s16, s7, s10
 800e5c0:	ee32 1a06 	vadd.f32	s2, s4, s12
 800e5c4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800e5c8:	ee77 4a87 	vadd.f32	s9, s15, s14
 800e5cc:	ee78 1a04 	vadd.f32	s3, s16, s8
 800e5d0:	ee71 6a24 	vadd.f32	s13, s2, s9
 800e5d4:	ee32 2a46 	vsub.f32	s4, s4, s12
 800e5d8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800e5dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5e0:	ed06 6a01 	vstr	s12, [r6, #-4]
 800e5e4:	edd4 8a01 	vldr	s17, [r4, #4]
 800e5e8:	ed92 9a01 	vldr	s18, [r2, #4]
 800e5ec:	edd7 0a00 	vldr	s1, [r7]
 800e5f0:	edd1 2a01 	vldr	s5, [r1, #4]
 800e5f4:	ed95 7a01 	vldr	s14, [r5, #4]
 800e5f8:	ed93 6a01 	vldr	s12, [r3, #4]
 800e5fc:	edd0 5a01 	vldr	s11, [r0, #4]
 800e600:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800e604:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800e608:	ee39 5a62 	vsub.f32	s10, s18, s5
 800e60c:	ee78 fac7 	vsub.f32	s31, s17, s14
 800e610:	ee38 4a44 	vsub.f32	s8, s16, s8
 800e614:	ee38 7a87 	vadd.f32	s14, s17, s14
 800e618:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800e61c:	ee79 2a22 	vadd.f32	s5, s18, s5
 800e620:	ee32 9a27 	vadd.f32	s18, s4, s15
 800e624:	ee72 7a67 	vsub.f32	s15, s4, s15
 800e628:	ee30 2a06 	vadd.f32	s4, s0, s12
 800e62c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800e630:	ee71 4a64 	vsub.f32	s9, s2, s9
 800e634:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800e638:	ee32 1a08 	vadd.f32	s2, s4, s16
 800e63c:	ee72 fa87 	vadd.f32	s31, s5, s14
 800e640:	ee32 2a48 	vsub.f32	s4, s4, s16
 800e644:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800e648:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800e64c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800e650:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800e654:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800e658:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800e65c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800e660:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800e664:	ee30 6a46 	vsub.f32	s12, s0, s12
 800e668:	ee74 0a22 	vadd.f32	s1, s8, s5
 800e66c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800e670:	ee74 2a62 	vsub.f32	s5, s8, s5
 800e674:	ee36 6a68 	vsub.f32	s12, s12, s17
 800e678:	ee32 4a64 	vsub.f32	s8, s4, s9
 800e67c:	ee73 8a09 	vadd.f32	s17, s6, s18
 800e680:	ee74 4a82 	vadd.f32	s9, s9, s4
 800e684:	ee33 9a49 	vsub.f32	s18, s6, s18
 800e688:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800e68c:	ee35 3a85 	vadd.f32	s6, s11, s10
 800e690:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800e694:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800e698:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800e69c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800e6a0:	ee30 7a68 	vsub.f32	s14, s0, s17
 800e6a4:	ee35 8a03 	vadd.f32	s16, s10, s6
 800e6a8:	ee38 0a80 	vadd.f32	s0, s17, s0
 800e6ac:	ee73 3a82 	vadd.f32	s7, s7, s4
 800e6b0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800e6b4:	ed9d 2a01 	vldr	s4, [sp, #4]
 800e6b8:	eddd 1a02 	vldr	s3, [sp, #8]
 800e6bc:	ee35 5a43 	vsub.f32	s10, s10, s6
 800e6c0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800e6c4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800e6c8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800e6cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800e6d0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800e6d4:	ee76 5a49 	vsub.f32	s11, s12, s18
 800e6d8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800e6dc:	ee39 6a06 	vadd.f32	s12, s18, s12
 800e6e0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800e6e4:	ee21 4a84 	vmul.f32	s8, s3, s8
 800e6e8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800e6ec:	ee22 7a07 	vmul.f32	s14, s4, s14
 800e6f0:	ee22 2a08 	vmul.f32	s4, s4, s16
 800e6f4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800e6f8:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800e6fc:	ee31 1a09 	vadd.f32	s2, s2, s18
 800e700:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800e704:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800e708:	ee74 0a60 	vsub.f32	s1, s8, s1
 800e70c:	ee37 7a48 	vsub.f32	s14, s14, s16
 800e710:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800e714:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800e718:	ee72 1a21 	vadd.f32	s3, s4, s3
 800e71c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800e720:	ee38 2a89 	vadd.f32	s4, s17, s18
 800e724:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800e728:	ee38 8a04 	vadd.f32	s16, s16, s8
 800e72c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800e730:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800e734:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800e738:	eddd 5a03 	vldr	s11, [sp, #12]
 800e73c:	edc6 fa00 	vstr	s31, [r6]
 800e740:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800e744:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800e748:	ee30 0a45 	vsub.f32	s0, s0, s10
 800e74c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800e750:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800e754:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800e758:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800e75c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800e760:	ee25 6a86 	vmul.f32	s12, s11, s12
 800e764:	ee74 4a89 	vadd.f32	s9, s9, s18
 800e768:	ee34 3a43 	vsub.f32	s6, s8, s6
 800e76c:	ee78 8a85 	vadd.f32	s17, s17, s10
 800e770:	ee36 6a67 	vsub.f32	s12, s12, s15
 800e774:	44c4      	add	ip, r8
 800e776:	45e3      	cmp	fp, ip
 800e778:	edc3 3a00 	vstr	s7, [r3]
 800e77c:	edc3 6a01 	vstr	s13, [r3, #4]
 800e780:	4456      	add	r6, sl
 800e782:	ed07 1a01 	vstr	s2, [r7, #-4]
 800e786:	edc7 0a00 	vstr	s1, [r7]
 800e78a:	4453      	add	r3, sl
 800e78c:	ed80 2a00 	vstr	s4, [r0]
 800e790:	edc0 2a01 	vstr	s5, [r0, #4]
 800e794:	4457      	add	r7, sl
 800e796:	edc2 1a00 	vstr	s3, [r2]
 800e79a:	ed82 7a01 	vstr	s14, [r2, #4]
 800e79e:	4450      	add	r0, sl
 800e7a0:	ed85 8a00 	vstr	s16, [r5]
 800e7a4:	ed85 0a01 	vstr	s0, [r5, #4]
 800e7a8:	4452      	add	r2, sl
 800e7aa:	edc1 4a00 	vstr	s9, [r1]
 800e7ae:	4455      	add	r5, sl
 800e7b0:	ed81 3a01 	vstr	s6, [r1, #4]
 800e7b4:	edc4 8a00 	vstr	s17, [r4]
 800e7b8:	ed84 6a01 	vstr	s12, [r4, #4]
 800e7bc:	4451      	add	r1, sl
 800e7be:	4454      	add	r4, sl
 800e7c0:	f63f aeea 	bhi.w	800e598 <arm_radix8_butterfly_f32+0x2fc>
 800e7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7c6:	3308      	adds	r3, #8
 800e7c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7cc:	3308      	adds	r3, #8
 800e7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d6:	9b08      	ldr	r3, [sp, #32]
 800e7d8:	3308      	adds	r3, #8
 800e7da:	9308      	str	r3, [sp, #32]
 800e7dc:	9b07      	ldr	r3, [sp, #28]
 800e7de:	3308      	adds	r3, #8
 800e7e0:	9307      	str	r3, [sp, #28]
 800e7e2:	9b06      	ldr	r3, [sp, #24]
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	9306      	str	r3, [sp, #24]
 800e7e8:	9b05      	ldr	r3, [sp, #20]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	9305      	str	r3, [sp, #20]
 800e7ee:	9b04      	ldr	r3, [sp, #16]
 800e7f0:	3308      	adds	r3, #8
 800e7f2:	9304      	str	r3, [sp, #16]
 800e7f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e7f6:	f109 0901 	add.w	r9, r9, #1
 800e7fa:	454b      	cmp	r3, r9
 800e7fc:	f47f ae7d 	bne.w	800e4fa <arm_radix8_butterfly_f32+0x25e>
 800e800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e802:	00db      	lsls	r3, r3, #3
 800e804:	b29b      	uxth	r3, r3
 800e806:	46d9      	mov	r9, fp
 800e808:	9310      	str	r3, [sp, #64]	; 0x40
 800e80a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800e80e:	e554      	b.n	800e2ba <arm_radix8_butterfly_f32+0x1e>
 800e810:	b015      	add	sp, #84	; 0x54
 800e812:	ecbd 8b10 	vpop	{d8-d15}
 800e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81a:	bf00      	nop

0800e81c <__errno>:
 800e81c:	4b01      	ldr	r3, [pc, #4]	; (800e824 <__errno+0x8>)
 800e81e:	6818      	ldr	r0, [r3, #0]
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	20000034 	.word	0x20000034

0800e828 <__libc_init_array>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	4e0d      	ldr	r6, [pc, #52]	; (800e860 <__libc_init_array+0x38>)
 800e82c:	4c0d      	ldr	r4, [pc, #52]	; (800e864 <__libc_init_array+0x3c>)
 800e82e:	1ba4      	subs	r4, r4, r6
 800e830:	10a4      	asrs	r4, r4, #2
 800e832:	2500      	movs	r5, #0
 800e834:	42a5      	cmp	r5, r4
 800e836:	d109      	bne.n	800e84c <__libc_init_array+0x24>
 800e838:	4e0b      	ldr	r6, [pc, #44]	; (800e868 <__libc_init_array+0x40>)
 800e83a:	4c0c      	ldr	r4, [pc, #48]	; (800e86c <__libc_init_array+0x44>)
 800e83c:	f000 ff6a 	bl	800f714 <_init>
 800e840:	1ba4      	subs	r4, r4, r6
 800e842:	10a4      	asrs	r4, r4, #2
 800e844:	2500      	movs	r5, #0
 800e846:	42a5      	cmp	r5, r4
 800e848:	d105      	bne.n	800e856 <__libc_init_array+0x2e>
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
 800e84c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e850:	4798      	blx	r3
 800e852:	3501      	adds	r5, #1
 800e854:	e7ee      	b.n	800e834 <__libc_init_array+0xc>
 800e856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e85a:	4798      	blx	r3
 800e85c:	3501      	adds	r5, #1
 800e85e:	e7f2      	b.n	800e846 <__libc_init_array+0x1e>
 800e860:	080197d4 	.word	0x080197d4
 800e864:	080197d4 	.word	0x080197d4
 800e868:	080197d4 	.word	0x080197d4
 800e86c:	080197d8 	.word	0x080197d8

0800e870 <malloc>:
 800e870:	4b02      	ldr	r3, [pc, #8]	; (800e87c <malloc+0xc>)
 800e872:	4601      	mov	r1, r0
 800e874:	6818      	ldr	r0, [r3, #0]
 800e876:	f000 b861 	b.w	800e93c <_malloc_r>
 800e87a:	bf00      	nop
 800e87c:	20000034 	.word	0x20000034

0800e880 <free>:
 800e880:	4b02      	ldr	r3, [pc, #8]	; (800e88c <free+0xc>)
 800e882:	4601      	mov	r1, r0
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	f000 b80b 	b.w	800e8a0 <_free_r>
 800e88a:	bf00      	nop
 800e88c:	20000034 	.word	0x20000034

0800e890 <memset>:
 800e890:	4402      	add	r2, r0
 800e892:	4603      	mov	r3, r0
 800e894:	4293      	cmp	r3, r2
 800e896:	d100      	bne.n	800e89a <memset+0xa>
 800e898:	4770      	bx	lr
 800e89a:	f803 1b01 	strb.w	r1, [r3], #1
 800e89e:	e7f9      	b.n	800e894 <memset+0x4>

0800e8a0 <_free_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	2900      	cmp	r1, #0
 800e8a6:	d045      	beq.n	800e934 <_free_r+0x94>
 800e8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ac:	1f0c      	subs	r4, r1, #4
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	bfb8      	it	lt
 800e8b2:	18e4      	addlt	r4, r4, r3
 800e8b4:	f000 fb62 	bl	800ef7c <__malloc_lock>
 800e8b8:	4a1f      	ldr	r2, [pc, #124]	; (800e938 <_free_r+0x98>)
 800e8ba:	6813      	ldr	r3, [r2, #0]
 800e8bc:	4610      	mov	r0, r2
 800e8be:	b933      	cbnz	r3, 800e8ce <_free_r+0x2e>
 800e8c0:	6063      	str	r3, [r4, #4]
 800e8c2:	6014      	str	r4, [r2, #0]
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ca:	f000 bb58 	b.w	800ef7e <__malloc_unlock>
 800e8ce:	42a3      	cmp	r3, r4
 800e8d0:	d90c      	bls.n	800e8ec <_free_r+0x4c>
 800e8d2:	6821      	ldr	r1, [r4, #0]
 800e8d4:	1862      	adds	r2, r4, r1
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	bf04      	itt	eq
 800e8da:	681a      	ldreq	r2, [r3, #0]
 800e8dc:	685b      	ldreq	r3, [r3, #4]
 800e8de:	6063      	str	r3, [r4, #4]
 800e8e0:	bf04      	itt	eq
 800e8e2:	1852      	addeq	r2, r2, r1
 800e8e4:	6022      	streq	r2, [r4, #0]
 800e8e6:	6004      	str	r4, [r0, #0]
 800e8e8:	e7ec      	b.n	800e8c4 <_free_r+0x24>
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	b10a      	cbz	r2, 800e8f4 <_free_r+0x54>
 800e8f0:	42a2      	cmp	r2, r4
 800e8f2:	d9fa      	bls.n	800e8ea <_free_r+0x4a>
 800e8f4:	6819      	ldr	r1, [r3, #0]
 800e8f6:	1858      	adds	r0, r3, r1
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d10b      	bne.n	800e914 <_free_r+0x74>
 800e8fc:	6820      	ldr	r0, [r4, #0]
 800e8fe:	4401      	add	r1, r0
 800e900:	1858      	adds	r0, r3, r1
 800e902:	4282      	cmp	r2, r0
 800e904:	6019      	str	r1, [r3, #0]
 800e906:	d1dd      	bne.n	800e8c4 <_free_r+0x24>
 800e908:	6810      	ldr	r0, [r2, #0]
 800e90a:	6852      	ldr	r2, [r2, #4]
 800e90c:	605a      	str	r2, [r3, #4]
 800e90e:	4401      	add	r1, r0
 800e910:	6019      	str	r1, [r3, #0]
 800e912:	e7d7      	b.n	800e8c4 <_free_r+0x24>
 800e914:	d902      	bls.n	800e91c <_free_r+0x7c>
 800e916:	230c      	movs	r3, #12
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	e7d3      	b.n	800e8c4 <_free_r+0x24>
 800e91c:	6820      	ldr	r0, [r4, #0]
 800e91e:	1821      	adds	r1, r4, r0
 800e920:	428a      	cmp	r2, r1
 800e922:	bf04      	itt	eq
 800e924:	6811      	ldreq	r1, [r2, #0]
 800e926:	6852      	ldreq	r2, [r2, #4]
 800e928:	6062      	str	r2, [r4, #4]
 800e92a:	bf04      	itt	eq
 800e92c:	1809      	addeq	r1, r1, r0
 800e92e:	6021      	streq	r1, [r4, #0]
 800e930:	605c      	str	r4, [r3, #4]
 800e932:	e7c7      	b.n	800e8c4 <_free_r+0x24>
 800e934:	bd38      	pop	{r3, r4, r5, pc}
 800e936:	bf00      	nop
 800e938:	200004d0 	.word	0x200004d0

0800e93c <_malloc_r>:
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	1ccd      	adds	r5, r1, #3
 800e940:	f025 0503 	bic.w	r5, r5, #3
 800e944:	3508      	adds	r5, #8
 800e946:	2d0c      	cmp	r5, #12
 800e948:	bf38      	it	cc
 800e94a:	250c      	movcc	r5, #12
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	4606      	mov	r6, r0
 800e950:	db01      	blt.n	800e956 <_malloc_r+0x1a>
 800e952:	42a9      	cmp	r1, r5
 800e954:	d903      	bls.n	800e95e <_malloc_r+0x22>
 800e956:	230c      	movs	r3, #12
 800e958:	6033      	str	r3, [r6, #0]
 800e95a:	2000      	movs	r0, #0
 800e95c:	bd70      	pop	{r4, r5, r6, pc}
 800e95e:	f000 fb0d 	bl	800ef7c <__malloc_lock>
 800e962:	4a21      	ldr	r2, [pc, #132]	; (800e9e8 <_malloc_r+0xac>)
 800e964:	6814      	ldr	r4, [r2, #0]
 800e966:	4621      	mov	r1, r4
 800e968:	b991      	cbnz	r1, 800e990 <_malloc_r+0x54>
 800e96a:	4c20      	ldr	r4, [pc, #128]	; (800e9ec <_malloc_r+0xb0>)
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	b91b      	cbnz	r3, 800e978 <_malloc_r+0x3c>
 800e970:	4630      	mov	r0, r6
 800e972:	f000 f855 	bl	800ea20 <_sbrk_r>
 800e976:	6020      	str	r0, [r4, #0]
 800e978:	4629      	mov	r1, r5
 800e97a:	4630      	mov	r0, r6
 800e97c:	f000 f850 	bl	800ea20 <_sbrk_r>
 800e980:	1c43      	adds	r3, r0, #1
 800e982:	d124      	bne.n	800e9ce <_malloc_r+0x92>
 800e984:	230c      	movs	r3, #12
 800e986:	6033      	str	r3, [r6, #0]
 800e988:	4630      	mov	r0, r6
 800e98a:	f000 faf8 	bl	800ef7e <__malloc_unlock>
 800e98e:	e7e4      	b.n	800e95a <_malloc_r+0x1e>
 800e990:	680b      	ldr	r3, [r1, #0]
 800e992:	1b5b      	subs	r3, r3, r5
 800e994:	d418      	bmi.n	800e9c8 <_malloc_r+0x8c>
 800e996:	2b0b      	cmp	r3, #11
 800e998:	d90f      	bls.n	800e9ba <_malloc_r+0x7e>
 800e99a:	600b      	str	r3, [r1, #0]
 800e99c:	50cd      	str	r5, [r1, r3]
 800e99e:	18cc      	adds	r4, r1, r3
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f000 faec 	bl	800ef7e <__malloc_unlock>
 800e9a6:	f104 000b 	add.w	r0, r4, #11
 800e9aa:	1d23      	adds	r3, r4, #4
 800e9ac:	f020 0007 	bic.w	r0, r0, #7
 800e9b0:	1ac3      	subs	r3, r0, r3
 800e9b2:	d0d3      	beq.n	800e95c <_malloc_r+0x20>
 800e9b4:	425a      	negs	r2, r3
 800e9b6:	50e2      	str	r2, [r4, r3]
 800e9b8:	e7d0      	b.n	800e95c <_malloc_r+0x20>
 800e9ba:	428c      	cmp	r4, r1
 800e9bc:	684b      	ldr	r3, [r1, #4]
 800e9be:	bf16      	itet	ne
 800e9c0:	6063      	strne	r3, [r4, #4]
 800e9c2:	6013      	streq	r3, [r2, #0]
 800e9c4:	460c      	movne	r4, r1
 800e9c6:	e7eb      	b.n	800e9a0 <_malloc_r+0x64>
 800e9c8:	460c      	mov	r4, r1
 800e9ca:	6849      	ldr	r1, [r1, #4]
 800e9cc:	e7cc      	b.n	800e968 <_malloc_r+0x2c>
 800e9ce:	1cc4      	adds	r4, r0, #3
 800e9d0:	f024 0403 	bic.w	r4, r4, #3
 800e9d4:	42a0      	cmp	r0, r4
 800e9d6:	d005      	beq.n	800e9e4 <_malloc_r+0xa8>
 800e9d8:	1a21      	subs	r1, r4, r0
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 f820 	bl	800ea20 <_sbrk_r>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d0cf      	beq.n	800e984 <_malloc_r+0x48>
 800e9e4:	6025      	str	r5, [r4, #0]
 800e9e6:	e7db      	b.n	800e9a0 <_malloc_r+0x64>
 800e9e8:	200004d0 	.word	0x200004d0
 800e9ec:	200004d4 	.word	0x200004d4

0800e9f0 <iprintf>:
 800e9f0:	b40f      	push	{r0, r1, r2, r3}
 800e9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <iprintf+0x2c>)
 800e9f4:	b513      	push	{r0, r1, r4, lr}
 800e9f6:	681c      	ldr	r4, [r3, #0]
 800e9f8:	b124      	cbz	r4, 800ea04 <iprintf+0x14>
 800e9fa:	69a3      	ldr	r3, [r4, #24]
 800e9fc:	b913      	cbnz	r3, 800ea04 <iprintf+0x14>
 800e9fe:	4620      	mov	r0, r4
 800ea00:	f000 f9ce 	bl	800eda0 <__sinit>
 800ea04:	ab05      	add	r3, sp, #20
 800ea06:	9a04      	ldr	r2, [sp, #16]
 800ea08:	68a1      	ldr	r1, [r4, #8]
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f000 fae1 	bl	800efd4 <_vfiprintf_r>
 800ea12:	b002      	add	sp, #8
 800ea14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea18:	b004      	add	sp, #16
 800ea1a:	4770      	bx	lr
 800ea1c:	20000034 	.word	0x20000034

0800ea20 <_sbrk_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4c06      	ldr	r4, [pc, #24]	; (800ea3c <_sbrk_r+0x1c>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4605      	mov	r5, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	f7f3 fc22 	bl	8002274 <_sbrk>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_sbrk_r+0x1a>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_sbrk_r+0x1a>
 800ea38:	602b      	str	r3, [r5, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	20005d50 	.word	0x20005d50

0800ea40 <__swbuf_r>:
 800ea40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea42:	460e      	mov	r6, r1
 800ea44:	4614      	mov	r4, r2
 800ea46:	4605      	mov	r5, r0
 800ea48:	b118      	cbz	r0, 800ea52 <__swbuf_r+0x12>
 800ea4a:	6983      	ldr	r3, [r0, #24]
 800ea4c:	b90b      	cbnz	r3, 800ea52 <__swbuf_r+0x12>
 800ea4e:	f000 f9a7 	bl	800eda0 <__sinit>
 800ea52:	4b21      	ldr	r3, [pc, #132]	; (800ead8 <__swbuf_r+0x98>)
 800ea54:	429c      	cmp	r4, r3
 800ea56:	d12a      	bne.n	800eaae <__swbuf_r+0x6e>
 800ea58:	686c      	ldr	r4, [r5, #4]
 800ea5a:	69a3      	ldr	r3, [r4, #24]
 800ea5c:	60a3      	str	r3, [r4, #8]
 800ea5e:	89a3      	ldrh	r3, [r4, #12]
 800ea60:	071a      	lsls	r2, r3, #28
 800ea62:	d52e      	bpl.n	800eac2 <__swbuf_r+0x82>
 800ea64:	6923      	ldr	r3, [r4, #16]
 800ea66:	b363      	cbz	r3, 800eac2 <__swbuf_r+0x82>
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	6820      	ldr	r0, [r4, #0]
 800ea6c:	1ac0      	subs	r0, r0, r3
 800ea6e:	6963      	ldr	r3, [r4, #20]
 800ea70:	b2f6      	uxtb	r6, r6
 800ea72:	4283      	cmp	r3, r0
 800ea74:	4637      	mov	r7, r6
 800ea76:	dc04      	bgt.n	800ea82 <__swbuf_r+0x42>
 800ea78:	4621      	mov	r1, r4
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	f000 f926 	bl	800eccc <_fflush_r>
 800ea80:	bb28      	cbnz	r0, 800eace <__swbuf_r+0x8e>
 800ea82:	68a3      	ldr	r3, [r4, #8]
 800ea84:	3b01      	subs	r3, #1
 800ea86:	60a3      	str	r3, [r4, #8]
 800ea88:	6823      	ldr	r3, [r4, #0]
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	6022      	str	r2, [r4, #0]
 800ea8e:	701e      	strb	r6, [r3, #0]
 800ea90:	6963      	ldr	r3, [r4, #20]
 800ea92:	3001      	adds	r0, #1
 800ea94:	4283      	cmp	r3, r0
 800ea96:	d004      	beq.n	800eaa2 <__swbuf_r+0x62>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	07db      	lsls	r3, r3, #31
 800ea9c:	d519      	bpl.n	800ead2 <__swbuf_r+0x92>
 800ea9e:	2e0a      	cmp	r6, #10
 800eaa0:	d117      	bne.n	800ead2 <__swbuf_r+0x92>
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	f000 f911 	bl	800eccc <_fflush_r>
 800eaaa:	b190      	cbz	r0, 800ead2 <__swbuf_r+0x92>
 800eaac:	e00f      	b.n	800eace <__swbuf_r+0x8e>
 800eaae:	4b0b      	ldr	r3, [pc, #44]	; (800eadc <__swbuf_r+0x9c>)
 800eab0:	429c      	cmp	r4, r3
 800eab2:	d101      	bne.n	800eab8 <__swbuf_r+0x78>
 800eab4:	68ac      	ldr	r4, [r5, #8]
 800eab6:	e7d0      	b.n	800ea5a <__swbuf_r+0x1a>
 800eab8:	4b09      	ldr	r3, [pc, #36]	; (800eae0 <__swbuf_r+0xa0>)
 800eaba:	429c      	cmp	r4, r3
 800eabc:	bf08      	it	eq
 800eabe:	68ec      	ldreq	r4, [r5, #12]
 800eac0:	e7cb      	b.n	800ea5a <__swbuf_r+0x1a>
 800eac2:	4621      	mov	r1, r4
 800eac4:	4628      	mov	r0, r5
 800eac6:	f000 f80d 	bl	800eae4 <__swsetup_r>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d0cc      	beq.n	800ea68 <__swbuf_r+0x28>
 800eace:	f04f 37ff 	mov.w	r7, #4294967295
 800ead2:	4638      	mov	r0, r7
 800ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ead6:	bf00      	nop
 800ead8:	08019750 	.word	0x08019750
 800eadc:	08019770 	.word	0x08019770
 800eae0:	08019730 	.word	0x08019730

0800eae4 <__swsetup_r>:
 800eae4:	4b32      	ldr	r3, [pc, #200]	; (800ebb0 <__swsetup_r+0xcc>)
 800eae6:	b570      	push	{r4, r5, r6, lr}
 800eae8:	681d      	ldr	r5, [r3, #0]
 800eaea:	4606      	mov	r6, r0
 800eaec:	460c      	mov	r4, r1
 800eaee:	b125      	cbz	r5, 800eafa <__swsetup_r+0x16>
 800eaf0:	69ab      	ldr	r3, [r5, #24]
 800eaf2:	b913      	cbnz	r3, 800eafa <__swsetup_r+0x16>
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f000 f953 	bl	800eda0 <__sinit>
 800eafa:	4b2e      	ldr	r3, [pc, #184]	; (800ebb4 <__swsetup_r+0xd0>)
 800eafc:	429c      	cmp	r4, r3
 800eafe:	d10f      	bne.n	800eb20 <__swsetup_r+0x3c>
 800eb00:	686c      	ldr	r4, [r5, #4]
 800eb02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	0715      	lsls	r5, r2, #28
 800eb0a:	d42c      	bmi.n	800eb66 <__swsetup_r+0x82>
 800eb0c:	06d0      	lsls	r0, r2, #27
 800eb0e:	d411      	bmi.n	800eb34 <__swsetup_r+0x50>
 800eb10:	2209      	movs	r2, #9
 800eb12:	6032      	str	r2, [r6, #0]
 800eb14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb18:	81a3      	strh	r3, [r4, #12]
 800eb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb1e:	e03e      	b.n	800eb9e <__swsetup_r+0xba>
 800eb20:	4b25      	ldr	r3, [pc, #148]	; (800ebb8 <__swsetup_r+0xd4>)
 800eb22:	429c      	cmp	r4, r3
 800eb24:	d101      	bne.n	800eb2a <__swsetup_r+0x46>
 800eb26:	68ac      	ldr	r4, [r5, #8]
 800eb28:	e7eb      	b.n	800eb02 <__swsetup_r+0x1e>
 800eb2a:	4b24      	ldr	r3, [pc, #144]	; (800ebbc <__swsetup_r+0xd8>)
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	bf08      	it	eq
 800eb30:	68ec      	ldreq	r4, [r5, #12]
 800eb32:	e7e6      	b.n	800eb02 <__swsetup_r+0x1e>
 800eb34:	0751      	lsls	r1, r2, #29
 800eb36:	d512      	bpl.n	800eb5e <__swsetup_r+0x7a>
 800eb38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb3a:	b141      	cbz	r1, 800eb4e <__swsetup_r+0x6a>
 800eb3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb40:	4299      	cmp	r1, r3
 800eb42:	d002      	beq.n	800eb4a <__swsetup_r+0x66>
 800eb44:	4630      	mov	r0, r6
 800eb46:	f7ff feab 	bl	800e8a0 <_free_r>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6363      	str	r3, [r4, #52]	; 0x34
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb54:	81a3      	strh	r3, [r4, #12]
 800eb56:	2300      	movs	r3, #0
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	89a3      	ldrh	r3, [r4, #12]
 800eb60:	f043 0308 	orr.w	r3, r3, #8
 800eb64:	81a3      	strh	r3, [r4, #12]
 800eb66:	6923      	ldr	r3, [r4, #16]
 800eb68:	b94b      	cbnz	r3, 800eb7e <__swsetup_r+0x9a>
 800eb6a:	89a3      	ldrh	r3, [r4, #12]
 800eb6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb74:	d003      	beq.n	800eb7e <__swsetup_r+0x9a>
 800eb76:	4621      	mov	r1, r4
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f000 f9bf 	bl	800eefc <__smakebuf_r>
 800eb7e:	89a2      	ldrh	r2, [r4, #12]
 800eb80:	f012 0301 	ands.w	r3, r2, #1
 800eb84:	d00c      	beq.n	800eba0 <__swsetup_r+0xbc>
 800eb86:	2300      	movs	r3, #0
 800eb88:	60a3      	str	r3, [r4, #8]
 800eb8a:	6963      	ldr	r3, [r4, #20]
 800eb8c:	425b      	negs	r3, r3
 800eb8e:	61a3      	str	r3, [r4, #24]
 800eb90:	6923      	ldr	r3, [r4, #16]
 800eb92:	b953      	cbnz	r3, 800ebaa <__swsetup_r+0xc6>
 800eb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800eb9c:	d1ba      	bne.n	800eb14 <__swsetup_r+0x30>
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	0792      	lsls	r2, r2, #30
 800eba2:	bf58      	it	pl
 800eba4:	6963      	ldrpl	r3, [r4, #20]
 800eba6:	60a3      	str	r3, [r4, #8]
 800eba8:	e7f2      	b.n	800eb90 <__swsetup_r+0xac>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e7f7      	b.n	800eb9e <__swsetup_r+0xba>
 800ebae:	bf00      	nop
 800ebb0:	20000034 	.word	0x20000034
 800ebb4:	08019750 	.word	0x08019750
 800ebb8:	08019770 	.word	0x08019770
 800ebbc:	08019730 	.word	0x08019730

0800ebc0 <__sflush_r>:
 800ebc0:	898a      	ldrh	r2, [r1, #12]
 800ebc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	0710      	lsls	r0, r2, #28
 800ebca:	460c      	mov	r4, r1
 800ebcc:	d458      	bmi.n	800ec80 <__sflush_r+0xc0>
 800ebce:	684b      	ldr	r3, [r1, #4]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	dc05      	bgt.n	800ebe0 <__sflush_r+0x20>
 800ebd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	dc02      	bgt.n	800ebe0 <__sflush_r+0x20>
 800ebda:	2000      	movs	r0, #0
 800ebdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebe2:	2e00      	cmp	r6, #0
 800ebe4:	d0f9      	beq.n	800ebda <__sflush_r+0x1a>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebec:	682f      	ldr	r7, [r5, #0]
 800ebee:	6a21      	ldr	r1, [r4, #32]
 800ebf0:	602b      	str	r3, [r5, #0]
 800ebf2:	d032      	beq.n	800ec5a <__sflush_r+0x9a>
 800ebf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	075a      	lsls	r2, r3, #29
 800ebfa:	d505      	bpl.n	800ec08 <__sflush_r+0x48>
 800ebfc:	6863      	ldr	r3, [r4, #4]
 800ebfe:	1ac0      	subs	r0, r0, r3
 800ec00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec02:	b10b      	cbz	r3, 800ec08 <__sflush_r+0x48>
 800ec04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec06:	1ac0      	subs	r0, r0, r3
 800ec08:	2300      	movs	r3, #0
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec0e:	6a21      	ldr	r1, [r4, #32]
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b0      	blx	r6
 800ec14:	1c43      	adds	r3, r0, #1
 800ec16:	89a3      	ldrh	r3, [r4, #12]
 800ec18:	d106      	bne.n	800ec28 <__sflush_r+0x68>
 800ec1a:	6829      	ldr	r1, [r5, #0]
 800ec1c:	291d      	cmp	r1, #29
 800ec1e:	d848      	bhi.n	800ecb2 <__sflush_r+0xf2>
 800ec20:	4a29      	ldr	r2, [pc, #164]	; (800ecc8 <__sflush_r+0x108>)
 800ec22:	40ca      	lsrs	r2, r1
 800ec24:	07d6      	lsls	r6, r2, #31
 800ec26:	d544      	bpl.n	800ecb2 <__sflush_r+0xf2>
 800ec28:	2200      	movs	r2, #0
 800ec2a:	6062      	str	r2, [r4, #4]
 800ec2c:	04d9      	lsls	r1, r3, #19
 800ec2e:	6922      	ldr	r2, [r4, #16]
 800ec30:	6022      	str	r2, [r4, #0]
 800ec32:	d504      	bpl.n	800ec3e <__sflush_r+0x7e>
 800ec34:	1c42      	adds	r2, r0, #1
 800ec36:	d101      	bne.n	800ec3c <__sflush_r+0x7c>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	b903      	cbnz	r3, 800ec3e <__sflush_r+0x7e>
 800ec3c:	6560      	str	r0, [r4, #84]	; 0x54
 800ec3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec40:	602f      	str	r7, [r5, #0]
 800ec42:	2900      	cmp	r1, #0
 800ec44:	d0c9      	beq.n	800ebda <__sflush_r+0x1a>
 800ec46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec4a:	4299      	cmp	r1, r3
 800ec4c:	d002      	beq.n	800ec54 <__sflush_r+0x94>
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f7ff fe26 	bl	800e8a0 <_free_r>
 800ec54:	2000      	movs	r0, #0
 800ec56:	6360      	str	r0, [r4, #52]	; 0x34
 800ec58:	e7c0      	b.n	800ebdc <__sflush_r+0x1c>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b0      	blx	r6
 800ec60:	1c41      	adds	r1, r0, #1
 800ec62:	d1c8      	bne.n	800ebf6 <__sflush_r+0x36>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0c5      	beq.n	800ebf6 <__sflush_r+0x36>
 800ec6a:	2b1d      	cmp	r3, #29
 800ec6c:	d001      	beq.n	800ec72 <__sflush_r+0xb2>
 800ec6e:	2b16      	cmp	r3, #22
 800ec70:	d101      	bne.n	800ec76 <__sflush_r+0xb6>
 800ec72:	602f      	str	r7, [r5, #0]
 800ec74:	e7b1      	b.n	800ebda <__sflush_r+0x1a>
 800ec76:	89a3      	ldrh	r3, [r4, #12]
 800ec78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec7c:	81a3      	strh	r3, [r4, #12]
 800ec7e:	e7ad      	b.n	800ebdc <__sflush_r+0x1c>
 800ec80:	690f      	ldr	r7, [r1, #16]
 800ec82:	2f00      	cmp	r7, #0
 800ec84:	d0a9      	beq.n	800ebda <__sflush_r+0x1a>
 800ec86:	0793      	lsls	r3, r2, #30
 800ec88:	680e      	ldr	r6, [r1, #0]
 800ec8a:	bf08      	it	eq
 800ec8c:	694b      	ldreq	r3, [r1, #20]
 800ec8e:	600f      	str	r7, [r1, #0]
 800ec90:	bf18      	it	ne
 800ec92:	2300      	movne	r3, #0
 800ec94:	eba6 0807 	sub.w	r8, r6, r7
 800ec98:	608b      	str	r3, [r1, #8]
 800ec9a:	f1b8 0f00 	cmp.w	r8, #0
 800ec9e:	dd9c      	ble.n	800ebda <__sflush_r+0x1a>
 800eca0:	4643      	mov	r3, r8
 800eca2:	463a      	mov	r2, r7
 800eca4:	6a21      	ldr	r1, [r4, #32]
 800eca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eca8:	4628      	mov	r0, r5
 800ecaa:	47b0      	blx	r6
 800ecac:	2800      	cmp	r0, #0
 800ecae:	dc06      	bgt.n	800ecbe <__sflush_r+0xfe>
 800ecb0:	89a3      	ldrh	r3, [r4, #12]
 800ecb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb6:	81a3      	strh	r3, [r4, #12]
 800ecb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbc:	e78e      	b.n	800ebdc <__sflush_r+0x1c>
 800ecbe:	4407      	add	r7, r0
 800ecc0:	eba8 0800 	sub.w	r8, r8, r0
 800ecc4:	e7e9      	b.n	800ec9a <__sflush_r+0xda>
 800ecc6:	bf00      	nop
 800ecc8:	20400001 	.word	0x20400001

0800eccc <_fflush_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	690b      	ldr	r3, [r1, #16]
 800ecd0:	4605      	mov	r5, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	b1db      	cbz	r3, 800ed0e <_fflush_r+0x42>
 800ecd6:	b118      	cbz	r0, 800ece0 <_fflush_r+0x14>
 800ecd8:	6983      	ldr	r3, [r0, #24]
 800ecda:	b90b      	cbnz	r3, 800ece0 <_fflush_r+0x14>
 800ecdc:	f000 f860 	bl	800eda0 <__sinit>
 800ece0:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <_fflush_r+0x48>)
 800ece2:	429c      	cmp	r4, r3
 800ece4:	d109      	bne.n	800ecfa <_fflush_r+0x2e>
 800ece6:	686c      	ldr	r4, [r5, #4]
 800ece8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecec:	b17b      	cbz	r3, 800ed0e <_fflush_r+0x42>
 800ecee:	4621      	mov	r1, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecf6:	f7ff bf63 	b.w	800ebc0 <__sflush_r>
 800ecfa:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <_fflush_r+0x4c>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	d101      	bne.n	800ed04 <_fflush_r+0x38>
 800ed00:	68ac      	ldr	r4, [r5, #8]
 800ed02:	e7f1      	b.n	800ece8 <_fflush_r+0x1c>
 800ed04:	4b05      	ldr	r3, [pc, #20]	; (800ed1c <_fflush_r+0x50>)
 800ed06:	429c      	cmp	r4, r3
 800ed08:	bf08      	it	eq
 800ed0a:	68ec      	ldreq	r4, [r5, #12]
 800ed0c:	e7ec      	b.n	800ece8 <_fflush_r+0x1c>
 800ed0e:	2000      	movs	r0, #0
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop
 800ed14:	08019750 	.word	0x08019750
 800ed18:	08019770 	.word	0x08019770
 800ed1c:	08019730 	.word	0x08019730

0800ed20 <std>:
 800ed20:	2300      	movs	r3, #0
 800ed22:	b510      	push	{r4, lr}
 800ed24:	4604      	mov	r4, r0
 800ed26:	e9c0 3300 	strd	r3, r3, [r0]
 800ed2a:	6083      	str	r3, [r0, #8]
 800ed2c:	8181      	strh	r1, [r0, #12]
 800ed2e:	6643      	str	r3, [r0, #100]	; 0x64
 800ed30:	81c2      	strh	r2, [r0, #14]
 800ed32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed36:	6183      	str	r3, [r0, #24]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	2208      	movs	r2, #8
 800ed3c:	305c      	adds	r0, #92	; 0x5c
 800ed3e:	f7ff fda7 	bl	800e890 <memset>
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x38>)
 800ed44:	6263      	str	r3, [r4, #36]	; 0x24
 800ed46:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <std+0x3c>)
 800ed48:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed4a:	4b05      	ldr	r3, [pc, #20]	; (800ed60 <std+0x40>)
 800ed4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed4e:	4b05      	ldr	r3, [pc, #20]	; (800ed64 <std+0x44>)
 800ed50:	6224      	str	r4, [r4, #32]
 800ed52:	6323      	str	r3, [r4, #48]	; 0x30
 800ed54:	bd10      	pop	{r4, pc}
 800ed56:	bf00      	nop
 800ed58:	0800f511 	.word	0x0800f511
 800ed5c:	0800f533 	.word	0x0800f533
 800ed60:	0800f56b 	.word	0x0800f56b
 800ed64:	0800f58f 	.word	0x0800f58f

0800ed68 <_cleanup_r>:
 800ed68:	4901      	ldr	r1, [pc, #4]	; (800ed70 <_cleanup_r+0x8>)
 800ed6a:	f000 b885 	b.w	800ee78 <_fwalk_reent>
 800ed6e:	bf00      	nop
 800ed70:	0800eccd 	.word	0x0800eccd

0800ed74 <__sfmoreglue>:
 800ed74:	b570      	push	{r4, r5, r6, lr}
 800ed76:	1e4a      	subs	r2, r1, #1
 800ed78:	2568      	movs	r5, #104	; 0x68
 800ed7a:	4355      	muls	r5, r2
 800ed7c:	460e      	mov	r6, r1
 800ed7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed82:	f7ff fddb 	bl	800e93c <_malloc_r>
 800ed86:	4604      	mov	r4, r0
 800ed88:	b140      	cbz	r0, 800ed9c <__sfmoreglue+0x28>
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed90:	300c      	adds	r0, #12
 800ed92:	60a0      	str	r0, [r4, #8]
 800ed94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed98:	f7ff fd7a 	bl	800e890 <memset>
 800ed9c:	4620      	mov	r0, r4
 800ed9e:	bd70      	pop	{r4, r5, r6, pc}

0800eda0 <__sinit>:
 800eda0:	6983      	ldr	r3, [r0, #24]
 800eda2:	b510      	push	{r4, lr}
 800eda4:	4604      	mov	r4, r0
 800eda6:	bb33      	cbnz	r3, 800edf6 <__sinit+0x56>
 800eda8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800edac:	6503      	str	r3, [r0, #80]	; 0x50
 800edae:	4b12      	ldr	r3, [pc, #72]	; (800edf8 <__sinit+0x58>)
 800edb0:	4a12      	ldr	r2, [pc, #72]	; (800edfc <__sinit+0x5c>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	6282      	str	r2, [r0, #40]	; 0x28
 800edb6:	4298      	cmp	r0, r3
 800edb8:	bf04      	itt	eq
 800edba:	2301      	moveq	r3, #1
 800edbc:	6183      	streq	r3, [r0, #24]
 800edbe:	f000 f81f 	bl	800ee00 <__sfp>
 800edc2:	6060      	str	r0, [r4, #4]
 800edc4:	4620      	mov	r0, r4
 800edc6:	f000 f81b 	bl	800ee00 <__sfp>
 800edca:	60a0      	str	r0, [r4, #8]
 800edcc:	4620      	mov	r0, r4
 800edce:	f000 f817 	bl	800ee00 <__sfp>
 800edd2:	2200      	movs	r2, #0
 800edd4:	60e0      	str	r0, [r4, #12]
 800edd6:	2104      	movs	r1, #4
 800edd8:	6860      	ldr	r0, [r4, #4]
 800edda:	f7ff ffa1 	bl	800ed20 <std>
 800edde:	2201      	movs	r2, #1
 800ede0:	2109      	movs	r1, #9
 800ede2:	68a0      	ldr	r0, [r4, #8]
 800ede4:	f7ff ff9c 	bl	800ed20 <std>
 800ede8:	2202      	movs	r2, #2
 800edea:	2112      	movs	r1, #18
 800edec:	68e0      	ldr	r0, [r4, #12]
 800edee:	f7ff ff97 	bl	800ed20 <std>
 800edf2:	2301      	movs	r3, #1
 800edf4:	61a3      	str	r3, [r4, #24]
 800edf6:	bd10      	pop	{r4, pc}
 800edf8:	0801972c 	.word	0x0801972c
 800edfc:	0800ed69 	.word	0x0800ed69

0800ee00 <__sfp>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	4b1b      	ldr	r3, [pc, #108]	; (800ee70 <__sfp+0x70>)
 800ee04:	681e      	ldr	r6, [r3, #0]
 800ee06:	69b3      	ldr	r3, [r6, #24]
 800ee08:	4607      	mov	r7, r0
 800ee0a:	b913      	cbnz	r3, 800ee12 <__sfp+0x12>
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	f7ff ffc7 	bl	800eda0 <__sinit>
 800ee12:	3648      	adds	r6, #72	; 0x48
 800ee14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	d503      	bpl.n	800ee24 <__sfp+0x24>
 800ee1c:	6833      	ldr	r3, [r6, #0]
 800ee1e:	b133      	cbz	r3, 800ee2e <__sfp+0x2e>
 800ee20:	6836      	ldr	r6, [r6, #0]
 800ee22:	e7f7      	b.n	800ee14 <__sfp+0x14>
 800ee24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee28:	b16d      	cbz	r5, 800ee46 <__sfp+0x46>
 800ee2a:	3468      	adds	r4, #104	; 0x68
 800ee2c:	e7f4      	b.n	800ee18 <__sfp+0x18>
 800ee2e:	2104      	movs	r1, #4
 800ee30:	4638      	mov	r0, r7
 800ee32:	f7ff ff9f 	bl	800ed74 <__sfmoreglue>
 800ee36:	6030      	str	r0, [r6, #0]
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d1f1      	bne.n	800ee20 <__sfp+0x20>
 800ee3c:	230c      	movs	r3, #12
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	4604      	mov	r4, r0
 800ee42:	4620      	mov	r0, r4
 800ee44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee46:	4b0b      	ldr	r3, [pc, #44]	; (800ee74 <__sfp+0x74>)
 800ee48:	6665      	str	r5, [r4, #100]	; 0x64
 800ee4a:	e9c4 5500 	strd	r5, r5, [r4]
 800ee4e:	60a5      	str	r5, [r4, #8]
 800ee50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ee58:	2208      	movs	r2, #8
 800ee5a:	4629      	mov	r1, r5
 800ee5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee60:	f7ff fd16 	bl	800e890 <memset>
 800ee64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee6c:	e7e9      	b.n	800ee42 <__sfp+0x42>
 800ee6e:	bf00      	nop
 800ee70:	0801972c 	.word	0x0801972c
 800ee74:	ffff0001 	.word	0xffff0001

0800ee78 <_fwalk_reent>:
 800ee78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee7c:	4680      	mov	r8, r0
 800ee7e:	4689      	mov	r9, r1
 800ee80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee84:	2600      	movs	r6, #0
 800ee86:	b914      	cbnz	r4, 800ee8e <_fwalk_reent+0x16>
 800ee88:	4630      	mov	r0, r6
 800ee8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ee92:	3f01      	subs	r7, #1
 800ee94:	d501      	bpl.n	800ee9a <_fwalk_reent+0x22>
 800ee96:	6824      	ldr	r4, [r4, #0]
 800ee98:	e7f5      	b.n	800ee86 <_fwalk_reent+0xe>
 800ee9a:	89ab      	ldrh	r3, [r5, #12]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d907      	bls.n	800eeb0 <_fwalk_reent+0x38>
 800eea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eea4:	3301      	adds	r3, #1
 800eea6:	d003      	beq.n	800eeb0 <_fwalk_reent+0x38>
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4640      	mov	r0, r8
 800eeac:	47c8      	blx	r9
 800eeae:	4306      	orrs	r6, r0
 800eeb0:	3568      	adds	r5, #104	; 0x68
 800eeb2:	e7ee      	b.n	800ee92 <_fwalk_reent+0x1a>

0800eeb4 <__swhatbuf_r>:
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	460e      	mov	r6, r1
 800eeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eebc:	2900      	cmp	r1, #0
 800eebe:	b096      	sub	sp, #88	; 0x58
 800eec0:	4614      	mov	r4, r2
 800eec2:	461d      	mov	r5, r3
 800eec4:	da07      	bge.n	800eed6 <__swhatbuf_r+0x22>
 800eec6:	2300      	movs	r3, #0
 800eec8:	602b      	str	r3, [r5, #0]
 800eeca:	89b3      	ldrh	r3, [r6, #12]
 800eecc:	061a      	lsls	r2, r3, #24
 800eece:	d410      	bmi.n	800eef2 <__swhatbuf_r+0x3e>
 800eed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eed4:	e00e      	b.n	800eef4 <__swhatbuf_r+0x40>
 800eed6:	466a      	mov	r2, sp
 800eed8:	f000 fb80 	bl	800f5dc <_fstat_r>
 800eedc:	2800      	cmp	r0, #0
 800eede:	dbf2      	blt.n	800eec6 <__swhatbuf_r+0x12>
 800eee0:	9a01      	ldr	r2, [sp, #4]
 800eee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eeea:	425a      	negs	r2, r3
 800eeec:	415a      	adcs	r2, r3
 800eeee:	602a      	str	r2, [r5, #0]
 800eef0:	e7ee      	b.n	800eed0 <__swhatbuf_r+0x1c>
 800eef2:	2340      	movs	r3, #64	; 0x40
 800eef4:	2000      	movs	r0, #0
 800eef6:	6023      	str	r3, [r4, #0]
 800eef8:	b016      	add	sp, #88	; 0x58
 800eefa:	bd70      	pop	{r4, r5, r6, pc}

0800eefc <__smakebuf_r>:
 800eefc:	898b      	ldrh	r3, [r1, #12]
 800eefe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef00:	079d      	lsls	r5, r3, #30
 800ef02:	4606      	mov	r6, r0
 800ef04:	460c      	mov	r4, r1
 800ef06:	d507      	bpl.n	800ef18 <__smakebuf_r+0x1c>
 800ef08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef0c:	6023      	str	r3, [r4, #0]
 800ef0e:	6123      	str	r3, [r4, #16]
 800ef10:	2301      	movs	r3, #1
 800ef12:	6163      	str	r3, [r4, #20]
 800ef14:	b002      	add	sp, #8
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
 800ef18:	ab01      	add	r3, sp, #4
 800ef1a:	466a      	mov	r2, sp
 800ef1c:	f7ff ffca 	bl	800eeb4 <__swhatbuf_r>
 800ef20:	9900      	ldr	r1, [sp, #0]
 800ef22:	4605      	mov	r5, r0
 800ef24:	4630      	mov	r0, r6
 800ef26:	f7ff fd09 	bl	800e93c <_malloc_r>
 800ef2a:	b948      	cbnz	r0, 800ef40 <__smakebuf_r+0x44>
 800ef2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef30:	059a      	lsls	r2, r3, #22
 800ef32:	d4ef      	bmi.n	800ef14 <__smakebuf_r+0x18>
 800ef34:	f023 0303 	bic.w	r3, r3, #3
 800ef38:	f043 0302 	orr.w	r3, r3, #2
 800ef3c:	81a3      	strh	r3, [r4, #12]
 800ef3e:	e7e3      	b.n	800ef08 <__smakebuf_r+0xc>
 800ef40:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <__smakebuf_r+0x7c>)
 800ef42:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	6020      	str	r0, [r4, #0]
 800ef48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	9b00      	ldr	r3, [sp, #0]
 800ef50:	6163      	str	r3, [r4, #20]
 800ef52:	9b01      	ldr	r3, [sp, #4]
 800ef54:	6120      	str	r0, [r4, #16]
 800ef56:	b15b      	cbz	r3, 800ef70 <__smakebuf_r+0x74>
 800ef58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f000 fb4f 	bl	800f600 <_isatty_r>
 800ef62:	b128      	cbz	r0, 800ef70 <__smakebuf_r+0x74>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	f023 0303 	bic.w	r3, r3, #3
 800ef6a:	f043 0301 	orr.w	r3, r3, #1
 800ef6e:	81a3      	strh	r3, [r4, #12]
 800ef70:	89a3      	ldrh	r3, [r4, #12]
 800ef72:	431d      	orrs	r5, r3
 800ef74:	81a5      	strh	r5, [r4, #12]
 800ef76:	e7cd      	b.n	800ef14 <__smakebuf_r+0x18>
 800ef78:	0800ed69 	.word	0x0800ed69

0800ef7c <__malloc_lock>:
 800ef7c:	4770      	bx	lr

0800ef7e <__malloc_unlock>:
 800ef7e:	4770      	bx	lr

0800ef80 <__sfputc_r>:
 800ef80:	6893      	ldr	r3, [r2, #8]
 800ef82:	3b01      	subs	r3, #1
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	b410      	push	{r4}
 800ef88:	6093      	str	r3, [r2, #8]
 800ef8a:	da08      	bge.n	800ef9e <__sfputc_r+0x1e>
 800ef8c:	6994      	ldr	r4, [r2, #24]
 800ef8e:	42a3      	cmp	r3, r4
 800ef90:	db01      	blt.n	800ef96 <__sfputc_r+0x16>
 800ef92:	290a      	cmp	r1, #10
 800ef94:	d103      	bne.n	800ef9e <__sfputc_r+0x1e>
 800ef96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef9a:	f7ff bd51 	b.w	800ea40 <__swbuf_r>
 800ef9e:	6813      	ldr	r3, [r2, #0]
 800efa0:	1c58      	adds	r0, r3, #1
 800efa2:	6010      	str	r0, [r2, #0]
 800efa4:	7019      	strb	r1, [r3, #0]
 800efa6:	4608      	mov	r0, r1
 800efa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efac:	4770      	bx	lr

0800efae <__sfputs_r>:
 800efae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb0:	4606      	mov	r6, r0
 800efb2:	460f      	mov	r7, r1
 800efb4:	4614      	mov	r4, r2
 800efb6:	18d5      	adds	r5, r2, r3
 800efb8:	42ac      	cmp	r4, r5
 800efba:	d101      	bne.n	800efc0 <__sfputs_r+0x12>
 800efbc:	2000      	movs	r0, #0
 800efbe:	e007      	b.n	800efd0 <__sfputs_r+0x22>
 800efc0:	463a      	mov	r2, r7
 800efc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efc6:	4630      	mov	r0, r6
 800efc8:	f7ff ffda 	bl	800ef80 <__sfputc_r>
 800efcc:	1c43      	adds	r3, r0, #1
 800efce:	d1f3      	bne.n	800efb8 <__sfputs_r+0xa>
 800efd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efd4 <_vfiprintf_r>:
 800efd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd8:	460c      	mov	r4, r1
 800efda:	b09d      	sub	sp, #116	; 0x74
 800efdc:	4617      	mov	r7, r2
 800efde:	461d      	mov	r5, r3
 800efe0:	4606      	mov	r6, r0
 800efe2:	b118      	cbz	r0, 800efec <_vfiprintf_r+0x18>
 800efe4:	6983      	ldr	r3, [r0, #24]
 800efe6:	b90b      	cbnz	r3, 800efec <_vfiprintf_r+0x18>
 800efe8:	f7ff feda 	bl	800eda0 <__sinit>
 800efec:	4b7c      	ldr	r3, [pc, #496]	; (800f1e0 <_vfiprintf_r+0x20c>)
 800efee:	429c      	cmp	r4, r3
 800eff0:	d158      	bne.n	800f0a4 <_vfiprintf_r+0xd0>
 800eff2:	6874      	ldr	r4, [r6, #4]
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	0718      	lsls	r0, r3, #28
 800eff8:	d55e      	bpl.n	800f0b8 <_vfiprintf_r+0xe4>
 800effa:	6923      	ldr	r3, [r4, #16]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d05b      	beq.n	800f0b8 <_vfiprintf_r+0xe4>
 800f000:	2300      	movs	r3, #0
 800f002:	9309      	str	r3, [sp, #36]	; 0x24
 800f004:	2320      	movs	r3, #32
 800f006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f00a:	2330      	movs	r3, #48	; 0x30
 800f00c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f010:	9503      	str	r5, [sp, #12]
 800f012:	f04f 0b01 	mov.w	fp, #1
 800f016:	46b8      	mov	r8, r7
 800f018:	4645      	mov	r5, r8
 800f01a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f01e:	b10b      	cbz	r3, 800f024 <_vfiprintf_r+0x50>
 800f020:	2b25      	cmp	r3, #37	; 0x25
 800f022:	d154      	bne.n	800f0ce <_vfiprintf_r+0xfa>
 800f024:	ebb8 0a07 	subs.w	sl, r8, r7
 800f028:	d00b      	beq.n	800f042 <_vfiprintf_r+0x6e>
 800f02a:	4653      	mov	r3, sl
 800f02c:	463a      	mov	r2, r7
 800f02e:	4621      	mov	r1, r4
 800f030:	4630      	mov	r0, r6
 800f032:	f7ff ffbc 	bl	800efae <__sfputs_r>
 800f036:	3001      	adds	r0, #1
 800f038:	f000 80c2 	beq.w	800f1c0 <_vfiprintf_r+0x1ec>
 800f03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f03e:	4453      	add	r3, sl
 800f040:	9309      	str	r3, [sp, #36]	; 0x24
 800f042:	f898 3000 	ldrb.w	r3, [r8]
 800f046:	2b00      	cmp	r3, #0
 800f048:	f000 80ba 	beq.w	800f1c0 <_vfiprintf_r+0x1ec>
 800f04c:	2300      	movs	r3, #0
 800f04e:	f04f 32ff 	mov.w	r2, #4294967295
 800f052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	9307      	str	r3, [sp, #28]
 800f05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f05e:	931a      	str	r3, [sp, #104]	; 0x68
 800f060:	46a8      	mov	r8, r5
 800f062:	2205      	movs	r2, #5
 800f064:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f068:	485e      	ldr	r0, [pc, #376]	; (800f1e4 <_vfiprintf_r+0x210>)
 800f06a:	f7f1 f8b1 	bl	80001d0 <memchr>
 800f06e:	9b04      	ldr	r3, [sp, #16]
 800f070:	bb78      	cbnz	r0, 800f0d2 <_vfiprintf_r+0xfe>
 800f072:	06d9      	lsls	r1, r3, #27
 800f074:	bf44      	itt	mi
 800f076:	2220      	movmi	r2, #32
 800f078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f07c:	071a      	lsls	r2, r3, #28
 800f07e:	bf44      	itt	mi
 800f080:	222b      	movmi	r2, #43	; 0x2b
 800f082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f086:	782a      	ldrb	r2, [r5, #0]
 800f088:	2a2a      	cmp	r2, #42	; 0x2a
 800f08a:	d02a      	beq.n	800f0e2 <_vfiprintf_r+0x10e>
 800f08c:	9a07      	ldr	r2, [sp, #28]
 800f08e:	46a8      	mov	r8, r5
 800f090:	2000      	movs	r0, #0
 800f092:	250a      	movs	r5, #10
 800f094:	4641      	mov	r1, r8
 800f096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f09a:	3b30      	subs	r3, #48	; 0x30
 800f09c:	2b09      	cmp	r3, #9
 800f09e:	d969      	bls.n	800f174 <_vfiprintf_r+0x1a0>
 800f0a0:	b360      	cbz	r0, 800f0fc <_vfiprintf_r+0x128>
 800f0a2:	e024      	b.n	800f0ee <_vfiprintf_r+0x11a>
 800f0a4:	4b50      	ldr	r3, [pc, #320]	; (800f1e8 <_vfiprintf_r+0x214>)
 800f0a6:	429c      	cmp	r4, r3
 800f0a8:	d101      	bne.n	800f0ae <_vfiprintf_r+0xda>
 800f0aa:	68b4      	ldr	r4, [r6, #8]
 800f0ac:	e7a2      	b.n	800eff4 <_vfiprintf_r+0x20>
 800f0ae:	4b4f      	ldr	r3, [pc, #316]	; (800f1ec <_vfiprintf_r+0x218>)
 800f0b0:	429c      	cmp	r4, r3
 800f0b2:	bf08      	it	eq
 800f0b4:	68f4      	ldreq	r4, [r6, #12]
 800f0b6:	e79d      	b.n	800eff4 <_vfiprintf_r+0x20>
 800f0b8:	4621      	mov	r1, r4
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	f7ff fd12 	bl	800eae4 <__swsetup_r>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d09d      	beq.n	800f000 <_vfiprintf_r+0x2c>
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	b01d      	add	sp, #116	; 0x74
 800f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ce:	46a8      	mov	r8, r5
 800f0d0:	e7a2      	b.n	800f018 <_vfiprintf_r+0x44>
 800f0d2:	4a44      	ldr	r2, [pc, #272]	; (800f1e4 <_vfiprintf_r+0x210>)
 800f0d4:	1a80      	subs	r0, r0, r2
 800f0d6:	fa0b f000 	lsl.w	r0, fp, r0
 800f0da:	4318      	orrs	r0, r3
 800f0dc:	9004      	str	r0, [sp, #16]
 800f0de:	4645      	mov	r5, r8
 800f0e0:	e7be      	b.n	800f060 <_vfiprintf_r+0x8c>
 800f0e2:	9a03      	ldr	r2, [sp, #12]
 800f0e4:	1d11      	adds	r1, r2, #4
 800f0e6:	6812      	ldr	r2, [r2, #0]
 800f0e8:	9103      	str	r1, [sp, #12]
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	db01      	blt.n	800f0f2 <_vfiprintf_r+0x11e>
 800f0ee:	9207      	str	r2, [sp, #28]
 800f0f0:	e004      	b.n	800f0fc <_vfiprintf_r+0x128>
 800f0f2:	4252      	negs	r2, r2
 800f0f4:	f043 0302 	orr.w	r3, r3, #2
 800f0f8:	9207      	str	r2, [sp, #28]
 800f0fa:	9304      	str	r3, [sp, #16]
 800f0fc:	f898 3000 	ldrb.w	r3, [r8]
 800f100:	2b2e      	cmp	r3, #46	; 0x2e
 800f102:	d10e      	bne.n	800f122 <_vfiprintf_r+0x14e>
 800f104:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f108:	2b2a      	cmp	r3, #42	; 0x2a
 800f10a:	d138      	bne.n	800f17e <_vfiprintf_r+0x1aa>
 800f10c:	9b03      	ldr	r3, [sp, #12]
 800f10e:	1d1a      	adds	r2, r3, #4
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	9203      	str	r2, [sp, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	bfb8      	it	lt
 800f118:	f04f 33ff 	movlt.w	r3, #4294967295
 800f11c:	f108 0802 	add.w	r8, r8, #2
 800f120:	9305      	str	r3, [sp, #20]
 800f122:	4d33      	ldr	r5, [pc, #204]	; (800f1f0 <_vfiprintf_r+0x21c>)
 800f124:	f898 1000 	ldrb.w	r1, [r8]
 800f128:	2203      	movs	r2, #3
 800f12a:	4628      	mov	r0, r5
 800f12c:	f7f1 f850 	bl	80001d0 <memchr>
 800f130:	b140      	cbz	r0, 800f144 <_vfiprintf_r+0x170>
 800f132:	2340      	movs	r3, #64	; 0x40
 800f134:	1b40      	subs	r0, r0, r5
 800f136:	fa03 f000 	lsl.w	r0, r3, r0
 800f13a:	9b04      	ldr	r3, [sp, #16]
 800f13c:	4303      	orrs	r3, r0
 800f13e:	f108 0801 	add.w	r8, r8, #1
 800f142:	9304      	str	r3, [sp, #16]
 800f144:	f898 1000 	ldrb.w	r1, [r8]
 800f148:	482a      	ldr	r0, [pc, #168]	; (800f1f4 <_vfiprintf_r+0x220>)
 800f14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f14e:	2206      	movs	r2, #6
 800f150:	f108 0701 	add.w	r7, r8, #1
 800f154:	f7f1 f83c 	bl	80001d0 <memchr>
 800f158:	2800      	cmp	r0, #0
 800f15a:	d037      	beq.n	800f1cc <_vfiprintf_r+0x1f8>
 800f15c:	4b26      	ldr	r3, [pc, #152]	; (800f1f8 <_vfiprintf_r+0x224>)
 800f15e:	bb1b      	cbnz	r3, 800f1a8 <_vfiprintf_r+0x1d4>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	3307      	adds	r3, #7
 800f164:	f023 0307 	bic.w	r3, r3, #7
 800f168:	3308      	adds	r3, #8
 800f16a:	9303      	str	r3, [sp, #12]
 800f16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16e:	444b      	add	r3, r9
 800f170:	9309      	str	r3, [sp, #36]	; 0x24
 800f172:	e750      	b.n	800f016 <_vfiprintf_r+0x42>
 800f174:	fb05 3202 	mla	r2, r5, r2, r3
 800f178:	2001      	movs	r0, #1
 800f17a:	4688      	mov	r8, r1
 800f17c:	e78a      	b.n	800f094 <_vfiprintf_r+0xc0>
 800f17e:	2300      	movs	r3, #0
 800f180:	f108 0801 	add.w	r8, r8, #1
 800f184:	9305      	str	r3, [sp, #20]
 800f186:	4619      	mov	r1, r3
 800f188:	250a      	movs	r5, #10
 800f18a:	4640      	mov	r0, r8
 800f18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f190:	3a30      	subs	r2, #48	; 0x30
 800f192:	2a09      	cmp	r2, #9
 800f194:	d903      	bls.n	800f19e <_vfiprintf_r+0x1ca>
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0c3      	beq.n	800f122 <_vfiprintf_r+0x14e>
 800f19a:	9105      	str	r1, [sp, #20]
 800f19c:	e7c1      	b.n	800f122 <_vfiprintf_r+0x14e>
 800f19e:	fb05 2101 	mla	r1, r5, r1, r2
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	4680      	mov	r8, r0
 800f1a6:	e7f0      	b.n	800f18a <_vfiprintf_r+0x1b6>
 800f1a8:	ab03      	add	r3, sp, #12
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <_vfiprintf_r+0x228>)
 800f1b0:	a904      	add	r1, sp, #16
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f1bc:	4681      	mov	r9, r0
 800f1be:	d1d5      	bne.n	800f16c <_vfiprintf_r+0x198>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	065b      	lsls	r3, r3, #25
 800f1c4:	f53f af7e 	bmi.w	800f0c4 <_vfiprintf_r+0xf0>
 800f1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1ca:	e77d      	b.n	800f0c8 <_vfiprintf_r+0xf4>
 800f1cc:	ab03      	add	r3, sp, #12
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	4622      	mov	r2, r4
 800f1d2:	4b0a      	ldr	r3, [pc, #40]	; (800f1fc <_vfiprintf_r+0x228>)
 800f1d4:	a904      	add	r1, sp, #16
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	f000 f888 	bl	800f2ec <_printf_i>
 800f1dc:	e7ec      	b.n	800f1b8 <_vfiprintf_r+0x1e4>
 800f1de:	bf00      	nop
 800f1e0:	08019750 	.word	0x08019750
 800f1e4:	08019790 	.word	0x08019790
 800f1e8:	08019770 	.word	0x08019770
 800f1ec:	08019730 	.word	0x08019730
 800f1f0:	08019796 	.word	0x08019796
 800f1f4:	0801979a 	.word	0x0801979a
 800f1f8:	00000000 	.word	0x00000000
 800f1fc:	0800efaf 	.word	0x0800efaf

0800f200 <_printf_common>:
 800f200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f204:	4691      	mov	r9, r2
 800f206:	461f      	mov	r7, r3
 800f208:	688a      	ldr	r2, [r1, #8]
 800f20a:	690b      	ldr	r3, [r1, #16]
 800f20c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f210:	4293      	cmp	r3, r2
 800f212:	bfb8      	it	lt
 800f214:	4613      	movlt	r3, r2
 800f216:	f8c9 3000 	str.w	r3, [r9]
 800f21a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f21e:	4606      	mov	r6, r0
 800f220:	460c      	mov	r4, r1
 800f222:	b112      	cbz	r2, 800f22a <_printf_common+0x2a>
 800f224:	3301      	adds	r3, #1
 800f226:	f8c9 3000 	str.w	r3, [r9]
 800f22a:	6823      	ldr	r3, [r4, #0]
 800f22c:	0699      	lsls	r1, r3, #26
 800f22e:	bf42      	ittt	mi
 800f230:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f234:	3302      	addmi	r3, #2
 800f236:	f8c9 3000 	strmi.w	r3, [r9]
 800f23a:	6825      	ldr	r5, [r4, #0]
 800f23c:	f015 0506 	ands.w	r5, r5, #6
 800f240:	d107      	bne.n	800f252 <_printf_common+0x52>
 800f242:	f104 0a19 	add.w	sl, r4, #25
 800f246:	68e3      	ldr	r3, [r4, #12]
 800f248:	f8d9 2000 	ldr.w	r2, [r9]
 800f24c:	1a9b      	subs	r3, r3, r2
 800f24e:	42ab      	cmp	r3, r5
 800f250:	dc28      	bgt.n	800f2a4 <_printf_common+0xa4>
 800f252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f256:	6822      	ldr	r2, [r4, #0]
 800f258:	3300      	adds	r3, #0
 800f25a:	bf18      	it	ne
 800f25c:	2301      	movne	r3, #1
 800f25e:	0692      	lsls	r2, r2, #26
 800f260:	d42d      	bmi.n	800f2be <_printf_common+0xbe>
 800f262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f266:	4639      	mov	r1, r7
 800f268:	4630      	mov	r0, r6
 800f26a:	47c0      	blx	r8
 800f26c:	3001      	adds	r0, #1
 800f26e:	d020      	beq.n	800f2b2 <_printf_common+0xb2>
 800f270:	6823      	ldr	r3, [r4, #0]
 800f272:	68e5      	ldr	r5, [r4, #12]
 800f274:	f8d9 2000 	ldr.w	r2, [r9]
 800f278:	f003 0306 	and.w	r3, r3, #6
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	bf08      	it	eq
 800f280:	1aad      	subeq	r5, r5, r2
 800f282:	68a3      	ldr	r3, [r4, #8]
 800f284:	6922      	ldr	r2, [r4, #16]
 800f286:	bf0c      	ite	eq
 800f288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f28c:	2500      	movne	r5, #0
 800f28e:	4293      	cmp	r3, r2
 800f290:	bfc4      	itt	gt
 800f292:	1a9b      	subgt	r3, r3, r2
 800f294:	18ed      	addgt	r5, r5, r3
 800f296:	f04f 0900 	mov.w	r9, #0
 800f29a:	341a      	adds	r4, #26
 800f29c:	454d      	cmp	r5, r9
 800f29e:	d11a      	bne.n	800f2d6 <_printf_common+0xd6>
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	e008      	b.n	800f2b6 <_printf_common+0xb6>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	4652      	mov	r2, sl
 800f2a8:	4639      	mov	r1, r7
 800f2aa:	4630      	mov	r0, r6
 800f2ac:	47c0      	blx	r8
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	d103      	bne.n	800f2ba <_printf_common+0xba>
 800f2b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ba:	3501      	adds	r5, #1
 800f2bc:	e7c3      	b.n	800f246 <_printf_common+0x46>
 800f2be:	18e1      	adds	r1, r4, r3
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	2030      	movs	r0, #48	; 0x30
 800f2c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2c8:	4422      	add	r2, r4
 800f2ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2d2:	3302      	adds	r3, #2
 800f2d4:	e7c5      	b.n	800f262 <_printf_common+0x62>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	4622      	mov	r2, r4
 800f2da:	4639      	mov	r1, r7
 800f2dc:	4630      	mov	r0, r6
 800f2de:	47c0      	blx	r8
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d0e6      	beq.n	800f2b2 <_printf_common+0xb2>
 800f2e4:	f109 0901 	add.w	r9, r9, #1
 800f2e8:	e7d8      	b.n	800f29c <_printf_common+0x9c>
	...

0800f2ec <_printf_i>:
 800f2ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	7e09      	ldrb	r1, [r1, #24]
 800f2f8:	b085      	sub	sp, #20
 800f2fa:	296e      	cmp	r1, #110	; 0x6e
 800f2fc:	4617      	mov	r7, r2
 800f2fe:	4606      	mov	r6, r0
 800f300:	4698      	mov	r8, r3
 800f302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f304:	f000 80b3 	beq.w	800f46e <_printf_i+0x182>
 800f308:	d822      	bhi.n	800f350 <_printf_i+0x64>
 800f30a:	2963      	cmp	r1, #99	; 0x63
 800f30c:	d036      	beq.n	800f37c <_printf_i+0x90>
 800f30e:	d80a      	bhi.n	800f326 <_printf_i+0x3a>
 800f310:	2900      	cmp	r1, #0
 800f312:	f000 80b9 	beq.w	800f488 <_printf_i+0x19c>
 800f316:	2958      	cmp	r1, #88	; 0x58
 800f318:	f000 8083 	beq.w	800f422 <_printf_i+0x136>
 800f31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f324:	e032      	b.n	800f38c <_printf_i+0xa0>
 800f326:	2964      	cmp	r1, #100	; 0x64
 800f328:	d001      	beq.n	800f32e <_printf_i+0x42>
 800f32a:	2969      	cmp	r1, #105	; 0x69
 800f32c:	d1f6      	bne.n	800f31c <_printf_i+0x30>
 800f32e:	6820      	ldr	r0, [r4, #0]
 800f330:	6813      	ldr	r3, [r2, #0]
 800f332:	0605      	lsls	r5, r0, #24
 800f334:	f103 0104 	add.w	r1, r3, #4
 800f338:	d52a      	bpl.n	800f390 <_printf_i+0xa4>
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6011      	str	r1, [r2, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	da03      	bge.n	800f34a <_printf_i+0x5e>
 800f342:	222d      	movs	r2, #45	; 0x2d
 800f344:	425b      	negs	r3, r3
 800f346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f34a:	486f      	ldr	r0, [pc, #444]	; (800f508 <_printf_i+0x21c>)
 800f34c:	220a      	movs	r2, #10
 800f34e:	e039      	b.n	800f3c4 <_printf_i+0xd8>
 800f350:	2973      	cmp	r1, #115	; 0x73
 800f352:	f000 809d 	beq.w	800f490 <_printf_i+0x1a4>
 800f356:	d808      	bhi.n	800f36a <_printf_i+0x7e>
 800f358:	296f      	cmp	r1, #111	; 0x6f
 800f35a:	d020      	beq.n	800f39e <_printf_i+0xb2>
 800f35c:	2970      	cmp	r1, #112	; 0x70
 800f35e:	d1dd      	bne.n	800f31c <_printf_i+0x30>
 800f360:	6823      	ldr	r3, [r4, #0]
 800f362:	f043 0320 	orr.w	r3, r3, #32
 800f366:	6023      	str	r3, [r4, #0]
 800f368:	e003      	b.n	800f372 <_printf_i+0x86>
 800f36a:	2975      	cmp	r1, #117	; 0x75
 800f36c:	d017      	beq.n	800f39e <_printf_i+0xb2>
 800f36e:	2978      	cmp	r1, #120	; 0x78
 800f370:	d1d4      	bne.n	800f31c <_printf_i+0x30>
 800f372:	2378      	movs	r3, #120	; 0x78
 800f374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f378:	4864      	ldr	r0, [pc, #400]	; (800f50c <_printf_i+0x220>)
 800f37a:	e055      	b.n	800f428 <_printf_i+0x13c>
 800f37c:	6813      	ldr	r3, [r2, #0]
 800f37e:	1d19      	adds	r1, r3, #4
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	6011      	str	r1, [r2, #0]
 800f384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f38c:	2301      	movs	r3, #1
 800f38e:	e08c      	b.n	800f4aa <_printf_i+0x1be>
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	6011      	str	r1, [r2, #0]
 800f394:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f398:	bf18      	it	ne
 800f39a:	b21b      	sxthne	r3, r3
 800f39c:	e7cf      	b.n	800f33e <_printf_i+0x52>
 800f39e:	6813      	ldr	r3, [r2, #0]
 800f3a0:	6825      	ldr	r5, [r4, #0]
 800f3a2:	1d18      	adds	r0, r3, #4
 800f3a4:	6010      	str	r0, [r2, #0]
 800f3a6:	0628      	lsls	r0, r5, #24
 800f3a8:	d501      	bpl.n	800f3ae <_printf_i+0xc2>
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	e002      	b.n	800f3b4 <_printf_i+0xc8>
 800f3ae:	0668      	lsls	r0, r5, #25
 800f3b0:	d5fb      	bpl.n	800f3aa <_printf_i+0xbe>
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	4854      	ldr	r0, [pc, #336]	; (800f508 <_printf_i+0x21c>)
 800f3b6:	296f      	cmp	r1, #111	; 0x6f
 800f3b8:	bf14      	ite	ne
 800f3ba:	220a      	movne	r2, #10
 800f3bc:	2208      	moveq	r2, #8
 800f3be:	2100      	movs	r1, #0
 800f3c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3c4:	6865      	ldr	r5, [r4, #4]
 800f3c6:	60a5      	str	r5, [r4, #8]
 800f3c8:	2d00      	cmp	r5, #0
 800f3ca:	f2c0 8095 	blt.w	800f4f8 <_printf_i+0x20c>
 800f3ce:	6821      	ldr	r1, [r4, #0]
 800f3d0:	f021 0104 	bic.w	r1, r1, #4
 800f3d4:	6021      	str	r1, [r4, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d13d      	bne.n	800f456 <_printf_i+0x16a>
 800f3da:	2d00      	cmp	r5, #0
 800f3dc:	f040 808e 	bne.w	800f4fc <_printf_i+0x210>
 800f3e0:	4665      	mov	r5, ip
 800f3e2:	2a08      	cmp	r2, #8
 800f3e4:	d10b      	bne.n	800f3fe <_printf_i+0x112>
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	07db      	lsls	r3, r3, #31
 800f3ea:	d508      	bpl.n	800f3fe <_printf_i+0x112>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	6862      	ldr	r2, [r4, #4]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	bfde      	ittt	le
 800f3f4:	2330      	movle	r3, #48	; 0x30
 800f3f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3fe:	ebac 0305 	sub.w	r3, ip, r5
 800f402:	6123      	str	r3, [r4, #16]
 800f404:	f8cd 8000 	str.w	r8, [sp]
 800f408:	463b      	mov	r3, r7
 800f40a:	aa03      	add	r2, sp, #12
 800f40c:	4621      	mov	r1, r4
 800f40e:	4630      	mov	r0, r6
 800f410:	f7ff fef6 	bl	800f200 <_printf_common>
 800f414:	3001      	adds	r0, #1
 800f416:	d14d      	bne.n	800f4b4 <_printf_i+0x1c8>
 800f418:	f04f 30ff 	mov.w	r0, #4294967295
 800f41c:	b005      	add	sp, #20
 800f41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f422:	4839      	ldr	r0, [pc, #228]	; (800f508 <_printf_i+0x21c>)
 800f424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f428:	6813      	ldr	r3, [r2, #0]
 800f42a:	6821      	ldr	r1, [r4, #0]
 800f42c:	1d1d      	adds	r5, r3, #4
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6015      	str	r5, [r2, #0]
 800f432:	060a      	lsls	r2, r1, #24
 800f434:	d50b      	bpl.n	800f44e <_printf_i+0x162>
 800f436:	07ca      	lsls	r2, r1, #31
 800f438:	bf44      	itt	mi
 800f43a:	f041 0120 	orrmi.w	r1, r1, #32
 800f43e:	6021      	strmi	r1, [r4, #0]
 800f440:	b91b      	cbnz	r3, 800f44a <_printf_i+0x15e>
 800f442:	6822      	ldr	r2, [r4, #0]
 800f444:	f022 0220 	bic.w	r2, r2, #32
 800f448:	6022      	str	r2, [r4, #0]
 800f44a:	2210      	movs	r2, #16
 800f44c:	e7b7      	b.n	800f3be <_printf_i+0xd2>
 800f44e:	064d      	lsls	r5, r1, #25
 800f450:	bf48      	it	mi
 800f452:	b29b      	uxthmi	r3, r3
 800f454:	e7ef      	b.n	800f436 <_printf_i+0x14a>
 800f456:	4665      	mov	r5, ip
 800f458:	fbb3 f1f2 	udiv	r1, r3, r2
 800f45c:	fb02 3311 	mls	r3, r2, r1, r3
 800f460:	5cc3      	ldrb	r3, [r0, r3]
 800f462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f466:	460b      	mov	r3, r1
 800f468:	2900      	cmp	r1, #0
 800f46a:	d1f5      	bne.n	800f458 <_printf_i+0x16c>
 800f46c:	e7b9      	b.n	800f3e2 <_printf_i+0xf6>
 800f46e:	6813      	ldr	r3, [r2, #0]
 800f470:	6825      	ldr	r5, [r4, #0]
 800f472:	6961      	ldr	r1, [r4, #20]
 800f474:	1d18      	adds	r0, r3, #4
 800f476:	6010      	str	r0, [r2, #0]
 800f478:	0628      	lsls	r0, r5, #24
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	d501      	bpl.n	800f482 <_printf_i+0x196>
 800f47e:	6019      	str	r1, [r3, #0]
 800f480:	e002      	b.n	800f488 <_printf_i+0x19c>
 800f482:	066a      	lsls	r2, r5, #25
 800f484:	d5fb      	bpl.n	800f47e <_printf_i+0x192>
 800f486:	8019      	strh	r1, [r3, #0]
 800f488:	2300      	movs	r3, #0
 800f48a:	6123      	str	r3, [r4, #16]
 800f48c:	4665      	mov	r5, ip
 800f48e:	e7b9      	b.n	800f404 <_printf_i+0x118>
 800f490:	6813      	ldr	r3, [r2, #0]
 800f492:	1d19      	adds	r1, r3, #4
 800f494:	6011      	str	r1, [r2, #0]
 800f496:	681d      	ldr	r5, [r3, #0]
 800f498:	6862      	ldr	r2, [r4, #4]
 800f49a:	2100      	movs	r1, #0
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7f0 fe97 	bl	80001d0 <memchr>
 800f4a2:	b108      	cbz	r0, 800f4a8 <_printf_i+0x1bc>
 800f4a4:	1b40      	subs	r0, r0, r5
 800f4a6:	6060      	str	r0, [r4, #4]
 800f4a8:	6863      	ldr	r3, [r4, #4]
 800f4aa:	6123      	str	r3, [r4, #16]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4b2:	e7a7      	b.n	800f404 <_printf_i+0x118>
 800f4b4:	6923      	ldr	r3, [r4, #16]
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	4639      	mov	r1, r7
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	47c0      	blx	r8
 800f4be:	3001      	adds	r0, #1
 800f4c0:	d0aa      	beq.n	800f418 <_printf_i+0x12c>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	079b      	lsls	r3, r3, #30
 800f4c6:	d413      	bmi.n	800f4f0 <_printf_i+0x204>
 800f4c8:	68e0      	ldr	r0, [r4, #12]
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	4298      	cmp	r0, r3
 800f4ce:	bfb8      	it	lt
 800f4d0:	4618      	movlt	r0, r3
 800f4d2:	e7a3      	b.n	800f41c <_printf_i+0x130>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	464a      	mov	r2, r9
 800f4d8:	4639      	mov	r1, r7
 800f4da:	4630      	mov	r0, r6
 800f4dc:	47c0      	blx	r8
 800f4de:	3001      	adds	r0, #1
 800f4e0:	d09a      	beq.n	800f418 <_printf_i+0x12c>
 800f4e2:	3501      	adds	r5, #1
 800f4e4:	68e3      	ldr	r3, [r4, #12]
 800f4e6:	9a03      	ldr	r2, [sp, #12]
 800f4e8:	1a9b      	subs	r3, r3, r2
 800f4ea:	42ab      	cmp	r3, r5
 800f4ec:	dcf2      	bgt.n	800f4d4 <_printf_i+0x1e8>
 800f4ee:	e7eb      	b.n	800f4c8 <_printf_i+0x1dc>
 800f4f0:	2500      	movs	r5, #0
 800f4f2:	f104 0919 	add.w	r9, r4, #25
 800f4f6:	e7f5      	b.n	800f4e4 <_printf_i+0x1f8>
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1ac      	bne.n	800f456 <_printf_i+0x16a>
 800f4fc:	7803      	ldrb	r3, [r0, #0]
 800f4fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f506:	e76c      	b.n	800f3e2 <_printf_i+0xf6>
 800f508:	080197a1 	.word	0x080197a1
 800f50c:	080197b2 	.word	0x080197b2

0800f510 <__sread>:
 800f510:	b510      	push	{r4, lr}
 800f512:	460c      	mov	r4, r1
 800f514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f518:	f000 f894 	bl	800f644 <_read_r>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	bfab      	itete	ge
 800f520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f522:	89a3      	ldrhlt	r3, [r4, #12]
 800f524:	181b      	addge	r3, r3, r0
 800f526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f52a:	bfac      	ite	ge
 800f52c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f52e:	81a3      	strhlt	r3, [r4, #12]
 800f530:	bd10      	pop	{r4, pc}

0800f532 <__swrite>:
 800f532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f536:	461f      	mov	r7, r3
 800f538:	898b      	ldrh	r3, [r1, #12]
 800f53a:	05db      	lsls	r3, r3, #23
 800f53c:	4605      	mov	r5, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	4616      	mov	r6, r2
 800f542:	d505      	bpl.n	800f550 <__swrite+0x1e>
 800f544:	2302      	movs	r3, #2
 800f546:	2200      	movs	r2, #0
 800f548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54c:	f000 f868 	bl	800f620 <_lseek_r>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	4632      	mov	r2, r6
 800f55e:	463b      	mov	r3, r7
 800f560:	4628      	mov	r0, r5
 800f562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f566:	f000 b817 	b.w	800f598 <_write_r>

0800f56a <__sseek>:
 800f56a:	b510      	push	{r4, lr}
 800f56c:	460c      	mov	r4, r1
 800f56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f572:	f000 f855 	bl	800f620 <_lseek_r>
 800f576:	1c43      	adds	r3, r0, #1
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	bf15      	itete	ne
 800f57c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f57e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f586:	81a3      	strheq	r3, [r4, #12]
 800f588:	bf18      	it	ne
 800f58a:	81a3      	strhne	r3, [r4, #12]
 800f58c:	bd10      	pop	{r4, pc}

0800f58e <__sclose>:
 800f58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f592:	f000 b813 	b.w	800f5bc <_close_r>
	...

0800f598 <_write_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4c07      	ldr	r4, [pc, #28]	; (800f5b8 <_write_r+0x20>)
 800f59c:	4605      	mov	r5, r0
 800f59e:	4608      	mov	r0, r1
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	6022      	str	r2, [r4, #0]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	f7f2 fe13 	bl	80021d2 <_write>
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	d102      	bne.n	800f5b6 <_write_r+0x1e>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	b103      	cbz	r3, 800f5b6 <_write_r+0x1e>
 800f5b4:	602b      	str	r3, [r5, #0]
 800f5b6:	bd38      	pop	{r3, r4, r5, pc}
 800f5b8:	20005d50 	.word	0x20005d50

0800f5bc <_close_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4c06      	ldr	r4, [pc, #24]	; (800f5d8 <_close_r+0x1c>)
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	4608      	mov	r0, r1
 800f5c6:	6023      	str	r3, [r4, #0]
 800f5c8:	f7f2 fe1f 	bl	800220a <_close>
 800f5cc:	1c43      	adds	r3, r0, #1
 800f5ce:	d102      	bne.n	800f5d6 <_close_r+0x1a>
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	b103      	cbz	r3, 800f5d6 <_close_r+0x1a>
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	bd38      	pop	{r3, r4, r5, pc}
 800f5d8:	20005d50 	.word	0x20005d50

0800f5dc <_fstat_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4c07      	ldr	r4, [pc, #28]	; (800f5fc <_fstat_r+0x20>)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	f7f2 fe1a 	bl	8002222 <_fstat>
 800f5ee:	1c43      	adds	r3, r0, #1
 800f5f0:	d102      	bne.n	800f5f8 <_fstat_r+0x1c>
 800f5f2:	6823      	ldr	r3, [r4, #0]
 800f5f4:	b103      	cbz	r3, 800f5f8 <_fstat_r+0x1c>
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	bd38      	pop	{r3, r4, r5, pc}
 800f5fa:	bf00      	nop
 800f5fc:	20005d50 	.word	0x20005d50

0800f600 <_isatty_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4c06      	ldr	r4, [pc, #24]	; (800f61c <_isatty_r+0x1c>)
 800f604:	2300      	movs	r3, #0
 800f606:	4605      	mov	r5, r0
 800f608:	4608      	mov	r0, r1
 800f60a:	6023      	str	r3, [r4, #0]
 800f60c:	f7f2 fe19 	bl	8002242 <_isatty>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d102      	bne.n	800f61a <_isatty_r+0x1a>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	b103      	cbz	r3, 800f61a <_isatty_r+0x1a>
 800f618:	602b      	str	r3, [r5, #0]
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	20005d50 	.word	0x20005d50

0800f620 <_lseek_r>:
 800f620:	b538      	push	{r3, r4, r5, lr}
 800f622:	4c07      	ldr	r4, [pc, #28]	; (800f640 <_lseek_r+0x20>)
 800f624:	4605      	mov	r5, r0
 800f626:	4608      	mov	r0, r1
 800f628:	4611      	mov	r1, r2
 800f62a:	2200      	movs	r2, #0
 800f62c:	6022      	str	r2, [r4, #0]
 800f62e:	461a      	mov	r2, r3
 800f630:	f7f2 fe12 	bl	8002258 <_lseek>
 800f634:	1c43      	adds	r3, r0, #1
 800f636:	d102      	bne.n	800f63e <_lseek_r+0x1e>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	b103      	cbz	r3, 800f63e <_lseek_r+0x1e>
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	20005d50 	.word	0x20005d50

0800f644 <_read_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4c07      	ldr	r4, [pc, #28]	; (800f664 <_read_r+0x20>)
 800f648:	4605      	mov	r5, r0
 800f64a:	4608      	mov	r0, r1
 800f64c:	4611      	mov	r1, r2
 800f64e:	2200      	movs	r2, #0
 800f650:	6022      	str	r2, [r4, #0]
 800f652:	461a      	mov	r2, r3
 800f654:	f7f2 fda0 	bl	8002198 <_read>
 800f658:	1c43      	adds	r3, r0, #1
 800f65a:	d102      	bne.n	800f662 <_read_r+0x1e>
 800f65c:	6823      	ldr	r3, [r4, #0]
 800f65e:	b103      	cbz	r3, 800f662 <_read_r+0x1e>
 800f660:	602b      	str	r3, [r5, #0]
 800f662:	bd38      	pop	{r3, r4, r5, pc}
 800f664:	20005d50 	.word	0x20005d50

0800f668 <sqrtf>:
 800f668:	b510      	push	{r4, lr}
 800f66a:	ed2d 8b02 	vpush	{d8}
 800f66e:	b08a      	sub	sp, #40	; 0x28
 800f670:	eeb0 8a40 	vmov.f32	s16, s0
 800f674:	f000 f848 	bl	800f708 <__ieee754_sqrtf>
 800f678:	4b21      	ldr	r3, [pc, #132]	; (800f700 <sqrtf+0x98>)
 800f67a:	f993 4000 	ldrsb.w	r4, [r3]
 800f67e:	1c63      	adds	r3, r4, #1
 800f680:	d02c      	beq.n	800f6dc <sqrtf+0x74>
 800f682:	eeb4 8a48 	vcmp.f32	s16, s16
 800f686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68a:	d627      	bvs.n	800f6dc <sqrtf+0x74>
 800f68c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f694:	d522      	bpl.n	800f6dc <sqrtf+0x74>
 800f696:	2301      	movs	r3, #1
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4b1a      	ldr	r3, [pc, #104]	; (800f704 <sqrtf+0x9c>)
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	ee18 0a10 	vmov	r0, s16
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9308      	str	r3, [sp, #32]
 800f6a6:	f7f0 ff47 	bl	8000538 <__aeabi_f2d>
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f6b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	b9ac      	cbnz	r4, 800f6e4 <sqrtf+0x7c>
 800f6b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f6bc:	4668      	mov	r0, sp
 800f6be:	f000 f826 	bl	800f70e <matherr>
 800f6c2:	b1b8      	cbz	r0, 800f6f4 <sqrtf+0x8c>
 800f6c4:	9b08      	ldr	r3, [sp, #32]
 800f6c6:	b11b      	cbz	r3, 800f6d0 <sqrtf+0x68>
 800f6c8:	f7ff f8a8 	bl	800e81c <__errno>
 800f6cc:	9b08      	ldr	r3, [sp, #32]
 800f6ce:	6003      	str	r3, [r0, #0]
 800f6d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6d4:	f7f1 f9c2 	bl	8000a5c <__aeabi_d2f>
 800f6d8:	ee00 0a10 	vmov	s0, r0
 800f6dc:	b00a      	add	sp, #40	; 0x28
 800f6de:	ecbd 8b02 	vpop	{d8}
 800f6e2:	bd10      	pop	{r4, pc}
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	f7f1 f8a8 	bl	800083c <__aeabi_ddiv>
 800f6ec:	2c02      	cmp	r4, #2
 800f6ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6f2:	d1e3      	bne.n	800f6bc <sqrtf+0x54>
 800f6f4:	f7ff f892 	bl	800e81c <__errno>
 800f6f8:	2321      	movs	r3, #33	; 0x21
 800f6fa:	6003      	str	r3, [r0, #0]
 800f6fc:	e7e2      	b.n	800f6c4 <sqrtf+0x5c>
 800f6fe:	bf00      	nop
 800f700:	20000098 	.word	0x20000098
 800f704:	080197c3 	.word	0x080197c3

0800f708 <__ieee754_sqrtf>:
 800f708:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f70c:	4770      	bx	lr

0800f70e <matherr>:
 800f70e:	2000      	movs	r0, #0
 800f710:	4770      	bx	lr
	...

0800f714 <_init>:
 800f714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f716:	bf00      	nop
 800f718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f71a:	bc08      	pop	{r3}
 800f71c:	469e      	mov	lr, r3
 800f71e:	4770      	bx	lr

0800f720 <_fini>:
 800f720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f722:	bf00      	nop
 800f724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f726:	bc08      	pop	{r3}
 800f728:	469e      	mov	lr, r3
 800f72a:	4770      	bx	lr
