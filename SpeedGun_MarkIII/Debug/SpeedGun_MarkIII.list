
SpeedGun_MarkIII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000defc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e190  0800e190  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800e190  0800e190  0001e190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e198  0800e198  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e19c  0800e19c  0001e19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800e1a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea4  20000098  0800e238  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  0800e238  00022f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033a3d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005f06  00000000  00000000  00053b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002400  00000000  00000000  00059a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002130  00000000  00000000  0005be10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031c5f  00000000  00000000  0005df40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000239bd  00000000  00000000  0008fb9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011cdd8  00000000  00000000  000b355c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d0334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fa4  00000000  00000000  001d03b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e074 	.word	0x0800e074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800e074 	.word	0x0800e074

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b972 	b.w	8000d58 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	4688      	mov	r8, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14b      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4615      	mov	r5, r2
 8000a9e:	d967      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0720 	rsb	r7, r2, #32
 8000aaa:	fa01 f302 	lsl.w	r3, r1, r2
 8000aae:	fa20 f707 	lsr.w	r7, r0, r7
 8000ab2:	4095      	lsls	r5, r2
 8000ab4:	ea47 0803 	orr.w	r8, r7, r3
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ac4:	fa1f fc85 	uxth.w	ip, r5
 8000ac8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000acc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18eb      	adds	r3, r5, r3
 8000ada:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ade:	f080 811b 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8118 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000ae8:	3f02      	subs	r7, #2
 8000aea:	442b      	add	r3, r5
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b00:	45a4      	cmp	ip, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	192c      	adds	r4, r5, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8107 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000b0e:	45a4      	cmp	ip, r4
 8000b10:	f240 8104 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000b14:	3802      	subs	r0, #2
 8000b16:	442c      	add	r4, r5
 8000b18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b1c:	eba4 040c 	sub.w	r4, r4, ip
 8000b20:	2700      	movs	r7, #0
 8000b22:	b11e      	cbz	r6, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2c:	4639      	mov	r1, r7
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0xbe>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80eb 	beq.w	8000d12 <__udivmoddi4+0x286>
 8000b3c:	2700      	movs	r7, #0
 8000b3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b42:	4638      	mov	r0, r7
 8000b44:	4639      	mov	r1, r7
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	fab3 f783 	clz	r7, r3
 8000b4e:	2f00      	cmp	r7, #0
 8000b50:	d147      	bne.n	8000be2 <__udivmoddi4+0x156>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d302      	bcc.n	8000b5c <__udivmoddi4+0xd0>
 8000b56:	4282      	cmp	r2, r0
 8000b58:	f200 80fa 	bhi.w	8000d50 <__udivmoddi4+0x2c4>
 8000b5c:	1a84      	subs	r4, r0, r2
 8000b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	4698      	mov	r8, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d0e0      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000b6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b6e:	e7dd      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000b70:	b902      	cbnz	r2, 8000b74 <__udivmoddi4+0xe8>
 8000b72:	deff      	udf	#255	; 0xff
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f040 808f 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7e:	1b49      	subs	r1, r1, r5
 8000b80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b84:	fa1f f885 	uxth.w	r8, r5
 8000b88:	2701      	movs	r7, #1
 8000b8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b98:	fb08 f10c 	mul.w	r1, r8, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x14c>
 8000bc8:	192c      	adds	r4, r5, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x14a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80b6 	bhi.w	8000d42 <__udivmoddi4+0x2b6>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e79f      	b.n	8000b22 <__udivmoddi4+0x96>
 8000be2:	f1c7 0c20 	rsb	ip, r7, #32
 8000be6:	40bb      	lsls	r3, r7
 8000be8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c00:	4325      	orrs	r5, r4
 8000c02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c06:	0c2c      	lsrs	r4, r5, #16
 8000c08:	fb08 3319 	mls	r3, r8, r9, r3
 8000c0c:	fa1f fa8e 	uxth.w	sl, lr
 8000c10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c14:	fb09 f40a 	mul.w	r4, r9, sl
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1e 0303 	adds.w	r3, lr, r3
 8000c28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c2c:	f080 8087 	bcs.w	8000d3e <__udivmoddi4+0x2b2>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f240 8084 	bls.w	8000d3e <__udivmoddi4+0x2b2>
 8000c36:	f1a9 0902 	sub.w	r9, r9, #2
 8000c3a:	4473      	add	r3, lr
 8000c3c:	1b1b      	subs	r3, r3, r4
 8000c3e:	b2ad      	uxth	r5, r5
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c50:	45a2      	cmp	sl, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1e 0404 	adds.w	r4, lr, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	d26b      	bcs.n	8000d36 <__udivmoddi4+0x2aa>
 8000c5e:	45a2      	cmp	sl, r4
 8000c60:	d969      	bls.n	8000d36 <__udivmoddi4+0x2aa>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4474      	add	r4, lr
 8000c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c6e:	eba4 040a 	sub.w	r4, r4, sl
 8000c72:	454c      	cmp	r4, r9
 8000c74:	46c2      	mov	sl, r8
 8000c76:	464b      	mov	r3, r9
 8000c78:	d354      	bcc.n	8000d24 <__udivmoddi4+0x298>
 8000c7a:	d051      	beq.n	8000d20 <__udivmoddi4+0x294>
 8000c7c:	2e00      	cmp	r6, #0
 8000c7e:	d069      	beq.n	8000d54 <__udivmoddi4+0x2c8>
 8000c80:	ebb1 050a 	subs.w	r5, r1, sl
 8000c84:	eb64 0403 	sbc.w	r4, r4, r3
 8000c88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c8c:	40fd      	lsrs	r5, r7
 8000c8e:	40fc      	lsrs	r4, r7
 8000c90:	ea4c 0505 	orr.w	r5, ip, r5
 8000c94:	e9c6 5400 	strd	r5, r4, [r6]
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e747      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000c9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ca0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ca4:	4095      	lsls	r5, r2
 8000ca6:	fa01 f002 	lsl.w	r0, r1, r2
 8000caa:	fa21 f303 	lsr.w	r3, r1, r3
 8000cae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cb2:	4338      	orrs	r0, r7
 8000cb4:	0c01      	lsrs	r1, r0, #16
 8000cb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cba:	fa1f f885 	uxth.w	r8, r5
 8000cbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc6:	fb07 f308 	mul.w	r3, r7, r8
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x256>
 8000cd2:	1869      	adds	r1, r5, r1
 8000cd4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd8:	d22f      	bcs.n	8000d3a <__udivmoddi4+0x2ae>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d92d      	bls.n	8000d3a <__udivmoddi4+0x2ae>
 8000cde:	3f02      	subs	r7, #2
 8000ce0:	4429      	add	r1, r5
 8000ce2:	1acb      	subs	r3, r1, r3
 8000ce4:	b281      	uxth	r1, r0
 8000ce6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf2:	fb00 f308 	mul.w	r3, r0, r8
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x27e>
 8000cfa:	1869      	adds	r1, r5, r1
 8000cfc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d00:	d217      	bcs.n	8000d32 <__udivmoddi4+0x2a6>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d915      	bls.n	8000d32 <__udivmoddi4+0x2a6>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4429      	add	r1, r5
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d10:	e73b      	b.n	8000b8a <__udivmoddi4+0xfe>
 8000d12:	4637      	mov	r7, r6
 8000d14:	4630      	mov	r0, r6
 8000d16:	e709      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d18:	4607      	mov	r7, r0
 8000d1a:	e6e7      	b.n	8000aec <__udivmoddi4+0x60>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6fb      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d20:	4541      	cmp	r1, r8
 8000d22:	d2ab      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d28:	eb69 020e 	sbc.w	r2, r9, lr
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	4613      	mov	r3, r2
 8000d30:	e7a4      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d32:	4660      	mov	r0, ip
 8000d34:	e7e9      	b.n	8000d0a <__udivmoddi4+0x27e>
 8000d36:	4618      	mov	r0, r3
 8000d38:	e795      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3a:	4667      	mov	r7, ip
 8000d3c:	e7d1      	b.n	8000ce2 <__udivmoddi4+0x256>
 8000d3e:	4681      	mov	r9, r0
 8000d40:	e77c      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d42:	3802      	subs	r0, #2
 8000d44:	442c      	add	r4, r5
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0x14c>
 8000d48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d4c:	442b      	add	r3, r5
 8000d4e:	e72f      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d50:	4638      	mov	r0, r7
 8000d52:	e708      	b.n	8000b66 <__udivmoddi4+0xda>
 8000d54:	4637      	mov	r7, r6
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0xa0>

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d7e:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d80:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <MX_ADC1_Init+0xe4>)
 8000d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dde:	4817      	ldr	r0, [pc, #92]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000de0:	f001 fd64 	bl	80028ac <HAL_ADC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000dea:	f000 fccd 	bl	8001788 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000dfa:	f002 ff01 	bl	8003c00 <HAL_ADCEx_MultiModeConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e04:	f000 fcc0 	bl	8001788 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_ADC1_Init+0xe8>)
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000e10:	2303      	movs	r3, #3
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e14:	237f      	movs	r3, #127	; 0x7f
 8000e16:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_ADC1_Init+0xe0>)
 8000e26:	f002 f90b 	bl	8003040 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e30:	f000 fcaa 	bl	8001788 <Error_Handler>
  }

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200004e0 	.word	0x200004e0
 8000e40:	50040000 	.word	0x50040000
 8000e44:	1d500080 	.word	0x1d500080

08000e48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_ADC_MspInit+0xb4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d144      	bne.n	8000ef4 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <HAL_ADC_MspInit+0xb8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480f      	ldr	r0, [pc, #60]	; (8000f04 <HAL_ADC_MspInit+0xbc>)
 8000ec6:	f003 f899 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f003 f88c 	bl	8003ffc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 2);
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f003 f810 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000eee:	2012      	movs	r0, #18
 8000ef0:	f003 f829 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	50040000 	.word	0x50040000
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000800 	.word	0x48000800

08000f08 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 8000f10:	4825      	ldr	r0, [pc, #148]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f12:	f001 fe1f 	bl	8002b54 <HAL_ADC_Stop_IT>
	int AD_Value = HAL_ADC_GetValue(&hadc1);
 8000f16:	4824      	ldr	r0, [pc, #144]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f18:	f001 fe57 	bl	8002bca <HAL_ADC_GetValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60fb      	str	r3, [r7, #12]
	Value_1 = (int) (AD_Value * 3.3 * 1000 / 4096);
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f7ff faf7 	bl	8000514 <__aeabi_i2d>
 8000f26:	a31e      	add	r3, pc, #120	; (adr r3, 8000fa0 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	f7ff fb5c 	bl	80005e8 <__aeabi_dmul>
 8000f30:	4603      	mov	r3, r0
 8000f32:	460c      	mov	r4, r1
 8000f34:	4618      	mov	r0, r3
 8000f36:	4621      	mov	r1, r4
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f3e:	f7ff fb53 	bl	80005e8 <__aeabi_dmul>
 8000f42:	4603      	mov	r3, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	4618      	mov	r0, r3
 8000f48:	4621      	mov	r1, r4
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f50:	f7ff fc74 	bl	800083c <__aeabi_ddiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	f7ff fd56 	bl	8000a0c <__aeabi_d2iz>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f64:	601a      	str	r2, [r3, #0]
	Value_2[counter_adc++] = Value_1;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	4912      	ldr	r1, [pc, #72]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f6e:	600a      	str	r2, [r1, #0]
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	4911      	ldr	r1, [pc, #68]	; (8000fbc <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (counter_adc >= 1024) {
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f82:	db05      	blt.n	8000f90 <HAL_ADC_ConvCpltCallback+0x88>
		counter_adc = 0;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
		flag_adc = 0;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000f90:	2104      	movs	r1, #4
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f94:	f003 f9f2 	bl	800437c <HAL_GPIO_TogglePin>
	return;
 8000f98:	bf00      	nop
}
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	66666666 	.word	0x66666666
 8000fa4:	400a6666 	.word	0x400a6666
 8000fa8:	200004e0 	.word	0x200004e0
 8000fac:	408f4000 	.word	0x408f4000
 8000fb0:	40b00000 	.word	0x40b00000
 8000fb4:	200025cc 	.word	0x200025cc
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200005cc 	.word	0x200005cc
 8000fc0:	200000b4 	.word	0x200000b4
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fd0:	1d39      	adds	r1, r7, #4
 8000fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <__io_putchar+0x20>)
 8000fda:	f008 f9bd 	bl	8009358 <HAL_UART_Transmit>
    return ch;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20002818 	.word	0x20002818

08000fec <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB7   ------> COMP2_INM
*/
void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4bac      	ldr	r3, [pc, #688]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4aab      	ldr	r2, [pc, #684]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4ba9      	ldr	r3, [pc, #676]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4ba6      	ldr	r3, [pc, #664]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4aa5      	ldr	r2, [pc, #660]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4ba3      	ldr	r3, [pc, #652]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	4ba0      	ldr	r3, [pc, #640]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a9f      	ldr	r2, [pc, #636]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b9d      	ldr	r3, [pc, #628]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b9a      	ldr	r3, [pc, #616]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a99      	ldr	r2, [pc, #612]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b97      	ldr	r3, [pc, #604]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b94      	ldr	r3, [pc, #592]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a93      	ldr	r2, [pc, #588]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b91      	ldr	r3, [pc, #580]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	4b8e      	ldr	r3, [pc, #568]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a8d      	ldr	r2, [pc, #564]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b8b      	ldr	r3, [pc, #556]	; (80012b4 <MX_GPIO_Init+0x2c8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LED_GREEN_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f240 1109 	movw	r1, #265	; 0x109
 8001098:	4887      	ldr	r0, [pc, #540]	; (80012b8 <MX_GPIO_Init+0x2cc>)
 800109a:	f003 f957 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	210c      	movs	r1, #12
 80010a2:	4886      	ldr	r0, [pc, #536]	; (80012bc <MX_GPIO_Init+0x2d0>)
 80010a4:	f003 f952 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4884      	ldr	r0, [pc, #528]	; (80012c0 <MX_GPIO_Init+0x2d4>)
 80010b0:	f003 f94c 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ba:	4881      	ldr	r0, [pc, #516]	; (80012c0 <MX_GPIO_Init+0x2d4>)
 80010bc:	f003 f946 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	487f      	ldr	r0, [pc, #508]	; (80012c4 <MX_GPIO_Init+0x2d8>)
 80010c6:	f003 f941 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 80010ca:	2308      	movs	r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	4875      	ldr	r0, [pc, #468]	; (80012b8 <MX_GPIO_Init+0x2cc>)
 80010e2:	f002 ff8b 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 80010e6:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80010ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ec:	4b76      	ldr	r3, [pc, #472]	; (80012c8 <MX_GPIO_Init+0x2dc>)
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4871      	ldr	r0, [pc, #452]	; (80012c0 <MX_GPIO_Init+0x2d4>)
 80010fc:	f002 ff7e 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_INT_Pin|MAG_DRDY_Pin;
 8001100:	2306      	movs	r3, #6
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	4619      	mov	r1, r3
 8001112:	486b      	ldr	r0, [pc, #428]	; (80012c0 <MX_GPIO_Init+0x2d4>)
 8001114:	f002 ff72 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_CENTRE_Pin;
 8001118:	2301      	movs	r3, #1
 800111a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <MX_GPIO_Init+0x2e0>)
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_CENTRE_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f002 ff65 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin|JOY_UP_Pin|JOY_DOWN_Pin;
 8001132:	232a      	movs	r3, #42	; 0x2a
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800113a:	2302      	movs	r3, #2
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001148:	f002 ff58 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800114c:	2310      	movs	r3, #16
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001150:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <MX_GPIO_Init+0x2dc>)
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f002 ff4b 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001166:	2304      	movs	r3, #4
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	484f      	ldr	r0, [pc, #316]	; (80012bc <MX_GPIO_Init+0x2d0>)
 800117e:	f002 ff3d 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4847      	ldr	r0, [pc, #284]	; (80012b8 <MX_GPIO_Init+0x2cc>)
 800119c:	f002 ff2e 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 80011a0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4841      	ldr	r0, [pc, #260]	; (80012c0 <MX_GPIO_Init+0x2d4>)
 80011ba:	f002 ff1f 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT1_Pin;
 80011be:	2304      	movs	r3, #4
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <MX_GPIO_Init+0x2dc>)
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT1_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	483c      	ldr	r0, [pc, #240]	; (80012c4 <MX_GPIO_Init+0x2d8>)
 80011d2:	f002 ff13 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4835      	ldr	r0, [pc, #212]	; (80012c4 <MX_GPIO_Init+0x2d8>)
 80011ee:	f002 ff05 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80011f2:	2308      	movs	r3, #8
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	482c      	ldr	r0, [pc, #176]	; (80012bc <MX_GPIO_Init+0x2d0>)
 800120a:	f002 fef7 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COMP_Pin;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_GPIO_Init+0x2e0>)
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COMP_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4826      	ldr	r0, [pc, #152]	; (80012bc <MX_GPIO_Init+0x2d0>)
 8001222:	f002 feeb 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4820      	ldr	r0, [pc, #128]	; (80012bc <MX_GPIO_Init+0x2d0>)
 800123a:	f002 fedf 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_GPIO_Init+0x2dc>)
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	481a      	ldr	r0, [pc, #104]	; (80012bc <MX_GPIO_Init+0x2d0>)
 8001254:	f002 fed2 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	4812      	ldr	r0, [pc, #72]	; (80012b8 <MX_GPIO_Init+0x2cc>)
 8001270:	f002 fec4 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_GPIO_Init+0x2dc>)
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_GPIO_Init+0x2cc>)
 8001288:	f002 feb8 	bl	8003ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2102      	movs	r1, #2
 8001290:	2006      	movs	r0, #6
 8001292:	f002 fe3c 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001296:	2006      	movs	r0, #6
 8001298:	f002 fe55 	bl	8003f46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	2017      	movs	r0, #23
 80012a2:	f002 fe34 	bl	8003f0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a6:	2017      	movs	r0, #23
 80012a8:	f002 fe4d 	bl	8003f46 <HAL_NVIC_EnableIRQ>

}
 80012ac:	bf00      	nop
 80012ae:	3730      	adds	r7, #48	; 0x30
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48001000 	.word	0x48001000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00
 80012c8:	10120000 	.word	0x10120000
 80012cc:	10110000 	.word	0x10110000

080012d0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_I2C2_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	; (8001348 <MX_I2C2_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_I2C2_Init+0x74>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_I2C2_Init+0x7c>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_I2C2_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_I2C2_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_I2C2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_I2C2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <MX_I2C2_Init+0x74>)
 800130c:	f004 fd11 	bl	8005d32 <HAL_I2C_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001316:	f000 fa37 	bl	8001788 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <MX_I2C2_Init+0x74>)
 800131e:	f004 fd97 	bl	8005e50 <HAL_I2CEx_ConfigAnalogFilter>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 fa2e 	bl	8001788 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_I2C2_Init+0x74>)
 8001330:	f004 fdd9 	bl	8005ee6 <HAL_I2CEx_ConfigDigitalFilter>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 fa25 	bl	8001788 <Error_Handler>
  }

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000544 	.word	0x20000544
 8001348:	40005800 	.word	0x40005800
 800134c:	10909cec 	.word	0x10909cec

08001350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_I2C_MspInit+0x7c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d128      	bne.n	80013c4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 800138a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <HAL_I2C_MspInit+0x84>)
 80013a8:	f002 fe28 	bl	8003ffc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 80013b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b6:	6593      	str	r3, [r2, #88]	; 0x58
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_I2C_MspInit+0x80>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	; 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40005800 	.word	0x40005800
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48000400 	.word	0x48000400

080013d8 <MX_LCD_Init>:

LCD_HandleTypeDef hlcd;

/* LCD init function */
void MX_LCD_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  hlcd.Instance = LCD;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_LCD_Init+0x68>)
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <MX_LCD_Init+0x6c>)
 80013e0:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_LCD_Init+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_LCD_Init+0x68>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_LCD_Init+0x68>)
 80013f0:	220c      	movs	r2, #12
 80013f2:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_LCD_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_LCD_Init+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_LCD_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_LCD_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_LCD_Init+0x68>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_LCD_Init+0x68>)
 8001414:	2200      	movs	r2, #0
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_LCD_Init+0x68>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_LCD_Init+0x68>)
 8001420:	2200      	movs	r2, #0
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_LCD_Init+0x68>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_LCD_Init+0x68>)
 800142c:	f004 fda8 	bl	8005f80 <HAL_LCD_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8001436:	f000 f9a7 	bl	8001788 <Error_Handler>
  }

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000590 	.word	0x20000590
 8001444:	40002400 	.word	0x40002400

08001448 <HAL_LCD_MspInit>:

void HAL_LCD_MspInit(LCD_HandleTypeDef* lcdHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(lcdHandle->Instance==LCD)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <HAL_LCD_MspInit+0x130>)
 8001466:	4293      	cmp	r3, r2
 8001468:	f040 8081 	bne.w	800156e <HAL_LCD_MspInit+0x126>
  {
  /* USER CODE BEGIN LCD_MspInit 0 */

  /* USER CODE END LCD_MspInit 0 */
    /* LCD clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_LCD_MspInit+0x134>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_LCD_MspInit+0x134>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6593      	str	r3, [r2, #88]	; 0x58
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_LCD_MspInit+0x134>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_LCD_MspInit+0x134>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_LCD_MspInit+0x134>)
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_LCD_MspInit+0x134>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_LCD_MspInit+0x134>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	4a36      	ldr	r2, [pc, #216]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	4a2a      	ldr	r2, [pc, #168]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_LCD_MspInit+0x134>)
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 80014e4:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014e8:	61fb      	str	r3, [r7, #28]
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80014f6:	230b      	movs	r3, #11
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	481f      	ldr	r0, [pc, #124]	; (8001580 <HAL_LCD_MspInit+0x138>)
 8001502:	f002 fd7b 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8001506:	f248 73c0 	movw	r3, #34752	; 0x87c0
 800150a:	61fb      	str	r3, [r7, #28]
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001518:	230b      	movs	r3, #11
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f002 fd69 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 800152a:	f24f 2333 	movw	r3, #62003	; 0xf233
 800152e:	61fb      	str	r3, [r7, #28]
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800153c:	230b      	movs	r3, #11
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	480f      	ldr	r0, [pc, #60]	; (8001584 <HAL_LCD_MspInit+0x13c>)
 8001548:	f002 fd58 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 800154c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001550:	61fb      	str	r3, [r7, #28]
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 800155e:	230b      	movs	r3, #11
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <HAL_LCD_MspInit+0x140>)
 800156a:	f002 fd47 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN LCD_MspInit 1 */

  /* USER CODE END LCD_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40002400 	.word	0x40002400
 800157c:	40021000 	.word	0x40021000
 8001580:	48000800 	.word	0x48000800
 8001584:	48000400 	.word	0x48000400
 8001588:	48000c00 	.word	0x48000c00

0800158c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001590:	f000 fed9 	bl	8002346 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001594:	f000 f82e 	bl	80015f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001598:	f7ff fd28 	bl	8000fec <MX_GPIO_Init>
	MX_I2C2_Init();
 800159c:	f7ff fe98 	bl	80012d0 <MX_I2C2_Init>
	MX_LCD_Init();
 80015a0:	f7ff ff1a 	bl	80013d8 <MX_LCD_Init>
	MX_QUADSPI_Init();
 80015a4:	f000 f8f8 	bl	8001798 <MX_QUADSPI_Init>
	MX_SAI1_Init();
 80015a8:	f000 f960 	bl	800186c <MX_SAI1_Init>
	MX_SPI2_Init();
 80015ac:	f000 fa7e 	bl	8001aac <MX_SPI2_Init>
	MX_USART2_UART_Init();
 80015b0:	f000 fe1c 	bl	80021ec <MX_USART2_UART_Init>
	MX_USB_HOST_Init();
 80015b4:	f00b fb2c 	bl	800cc10 <MX_USB_HOST_Init>
	MX_TIM3_Init();
 80015b8:	f000 fd92 	bl	80020e0 <MX_TIM3_Init>
	MX_ADC1_Init();
 80015bc:	f7ff fbce 	bl	8000d5c <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //adc calibration
 80015c0:	217f      	movs	r1, #127	; 0x7f
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <main+0x58>)
 80015c4:	f002 fa89 	bl	8003ada <HAL_ADCEx_Calibration_Start>
	BSP_LCD_GLASS_Init();
 80015c8:	f000 faf2 	bl	8001bb0 <BSP_LCD_GLASS_Init>
	HAL_TIM_Base_Start_IT(&htim3);
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <main+0x5c>)
 80015ce:	f007 fa2b 	bl	8008a28 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80015d2:	f00b fb43 	bl	800cc5c <MX_USB_HOST_Process>
//			for (int i = 0; i < 1024; i++)
//				printf("%d\n", Value_2[i]);
//			flag_adc = 1;
//		}
		//comp
		printf("freq:%dHz speed:\n", freq_comp);
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <main+0x60>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4619      	mov	r1, r3
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <main+0x64>)
 80015de:	f00b ff0d 	bl	800d3fc <iprintf>
		MX_USB_HOST_Process();
 80015e2:	e7f6      	b.n	80015d2 <main+0x46>
 80015e4:	200004e0 	.word	0x200004e0
 80015e8:	200027cc 	.word	0x200027cc
 80015ec:	200000c0 	.word	0x200000c0
 80015f0:	0800e08c 	.word	0x0800e08c

080015f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0b8      	sub	sp, #224	; 0xe0
 80015f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015fe:	2244      	movs	r2, #68	; 0x44
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00b fe4a 	bl	800d29c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001608:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001618:	463b      	mov	r3, r7
 800161a:	2288      	movs	r2, #136	; 0x88
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00b fe3c 	bl	800d29c <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001624:	2318      	movs	r3, #24
 8001626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001648:	2301      	movs	r3, #1
 800164a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001654:	2328      	movs	r3, #40	; 0x28
 8001656:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800165a:	2307      	movs	r3, #7
 800165c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800166c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001670:	4618      	mov	r0, r3
 8001672:	f004 ff25 	bl	80064c0 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x8c>
		Error_Handler();
 800167c:	f000 f884 	bl	8001788 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800169e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016a2:	2104      	movs	r1, #4
 80016a4:	4618      	mov	r0, r3
 80016a6:	f005 faf1 	bl	8006c8c <HAL_RCC_ClockConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0xc0>
		Error_Handler();
 80016b0:	f000 f86a 	bl	8001788 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <SystemClock_Config+0x12c>)
 80016b6:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_I2C2
			| RCC_PERIPHCLK_USB | RCC_PERIPHCLK_ADC;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80016c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016c8:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016d6:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016d8:	2301      	movs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016e0:	2318      	movs	r3, #24
 80016e2:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80016ec:	2308      	movs	r3, #8
 80016ee:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <SystemClock_Config+0x130>)
 80016f2:	61fb      	str	r3, [r7, #28]
			| RCC_PLLSAI1_48M2CLK | RCC_PLLSAI1_ADC1CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80016f4:	463b      	mov	r3, r7
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 fccc 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x112>
		Error_Handler();
 8001702:	f000 f841 	bl	8001788 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001706:	f44f 7000 	mov.w	r0, #512	; 0x200
 800170a:	f004 fdb7 	bl	800627c <HAL_PWREx_ControlVoltageScaling>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x124>
			!= HAL_OK) {
		Error_Handler();
 8001714:	f000 f838 	bl	8001788 <Error_Handler>
	}
}
 8001718:	bf00      	nop
 800171a:	37e0      	adds	r7, #224	; 0xe0
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	00026882 	.word	0x00026882
 8001724:	01110000 	.word	0x01110000

08001728 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
	if (COMP_Pin == GPIO_Pin) {
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d11a      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0x46>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <HAL_GPIO_EXTI_Callback+0x50>)
 800173e:	f002 fe1d 	bl	800437c <HAL_GPIO_TogglePin>
		counter_comp++;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 800174a:	6013      	str	r3, [r2, #0]
		if (counter_timer >= 20010) {
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_GPIO_EXTI_Callback+0x58>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f644 6229 	movw	r2, #20009	; 0x4e29
 8001754:	4293      	cmp	r3, r2
 8001756:	dd0a      	ble.n	800176e <HAL_GPIO_EXTI_Callback+0x46>
			freq_comp = counter_comp / 1;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <HAL_GPIO_EXTI_Callback+0x5c>)
 800175e:	6013      	str	r3, [r2, #0]
			counter_comp = 0;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_GPIO_EXTI_Callback+0x54>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
			counter_timer = 0;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_GPIO_EXTI_Callback+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
		}
	}
	return;
 800176c:	bf00      	nop
 800176e:	bf00      	nop
}
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	48001000 	.word	0x48001000
 800177c:	200000bc 	.word	0x200000bc
 8001780:	200000b8 	.word	0x200000b8
 8001784:	200000c0 	.word	0x200000c0

08001788 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <MX_QUADSPI_Init+0x44>)
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <MX_QUADSPI_Init+0x48>)
 80017a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	; (80017dc <MX_QUADSPI_Init+0x44>)
 80017c8:	f004 fdbe 	bl	8006348 <HAL_QSPI_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80017d2:	f7ff ffd9 	bl	8001788 <Error_Handler>
  }

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200025d0 	.word	0x200025d0
 80017e0:	a0001000 	.word	0xa0001000

080017e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_QSPI_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d128      	bne.n	8001858 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	4a16      	ldr	r2, [pc, #88]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6513      	str	r3, [r2, #80]	; 0x50
 8001812:	4b14      	ldr	r3, [pc, #80]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_QSPI_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001836:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800183a:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001848:	230a      	movs	r3, #10
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_QSPI_MspInit+0x84>)
 8001854:	f002 fbd2 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	a0001000 	.word	0xa0001000
 8001864:	40021000 	.word	0x40021000
 8001868:	48001000 	.word	0x48001000

0800186c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001870:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001872:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <MX_SAI1_Init+0x140>)
 8001874:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001878:	2200      	movs	r2, #0
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800187c:	4b4a      	ldr	r3, [pc, #296]	; (80019a8 <MX_SAI1_Init+0x13c>)
 800187e:	2200      	movs	r2, #0
 8001880:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001884:	2240      	movs	r2, #64	; 0x40
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001888:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <MX_SAI1_Init+0x13c>)
 800188a:	2200      	movs	r2, #0
 800188c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001894:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <MX_SAI1_Init+0x13c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80018ac:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018ae:	4a40      	ldr	r2, [pc, #256]	; (80019b0 <MX_SAI1_Init+0x144>)
 80018b0:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80018b8:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80018be:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018cc:	2208      	movs	r2, #8
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_SAI1_Init+0x13c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001900:	4829      	ldr	r0, [pc, #164]	; (80019a8 <MX_SAI1_Init+0x13c>)
 8001902:	f006 fded 	bl	80084e0 <HAL_SAI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800190c:	f7ff ff3c 	bl	8001788 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <MX_SAI1_Init+0x14c>)
 8001914:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <MX_SAI1_Init+0x148>)
 800191e:	2203      	movs	r2, #3
 8001920:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001924:	2240      	movs	r2, #64	; 0x40
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <MX_SAI1_Init+0x148>)
 800192a:	2200      	movs	r2, #0
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800192e:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001930:	2200      	movs	r2, #0
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001936:	2201      	movs	r2, #1
 8001938:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <MX_SAI1_Init+0x148>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <MX_SAI1_Init+0x148>)
 800194e:	2200      	movs	r2, #0
 8001950:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001954:	2200      	movs	r2, #0
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <MX_SAI1_Init+0x148>)
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001960:	2208      	movs	r2, #8
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001966:	2201      	movs	r2, #1
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_SAI1_Init+0x148>)
 800196c:	2200      	movs	r2, #0
 800196e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001972:	2200      	movs	r2, #0
 8001974:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001978:	2200      	movs	r2, #0
 800197a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_SAI1_Init+0x148>)
 800197e:	2200      	movs	r2, #0
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001984:	2200      	movs	r2, #0
 8001986:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_SAI1_Init+0x148>)
 800198a:	2201      	movs	r2, #1
 800198c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001990:	2200      	movs	r2, #0
 8001992:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001994:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_SAI1_Init+0x148>)
 8001996:	f006 fda3 	bl	80084e0 <HAL_SAI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 80019a0:	f7ff fef2 	bl	8001788 <Error_Handler>
  }

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20002698 	.word	0x20002698
 80019ac:	40015404 	.word	0x40015404
 80019b0:	0002ee00 	.word	0x0002ee00
 80019b4:	20002614 	.word	0x20002614
 80019b8:	40015424 	.word	0x40015424

080019bc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a33      	ldr	r2, [pc, #204]	; (8001a98 <HAL_SAI_MspInit+0xdc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d135      	bne.n	8001a3a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10b      	bne.n	80019ee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 80019d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019da:	4a31      	ldr	r2, [pc, #196]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e0:	6613      	str	r3, [r2, #96]	; 0x60
 80019e2:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 80019e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	4a29      	ldr	r2, [pc, #164]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 80019f6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80019f8:	2374      	movs	r3, #116	; 0x74
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a08:	230d      	movs	r3, #13
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	4619      	mov	r1, r3
 8001a12:	4824      	ldr	r0, [pc, #144]	; (8001aa4 <HAL_SAI_MspInit+0xe8>)
 8001a14:	f002 faf2 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a2a:	230d      	movs	r3, #13
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <HAL_SAI_MspInit+0xe8>)
 8001a36:	f002 fae1 	bl	8003ffc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1a      	ldr	r2, [pc, #104]	; (8001aa8 <HAL_SAI_MspInit+0xec>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d124      	bne.n	8001a8e <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 8001a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a56:	6613      	str	r3, [r2, #96]	; 0x60
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_SAI_MspInit+0xe4>)
 8001a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001a64:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_SAI_MspInit+0xe0>)
 8001a6c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001a7e:	230d      	movs	r3, #13
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <HAL_SAI_MspInit+0xe8>)
 8001a8a:	f002 fab7 	bl	8003ffc <HAL_GPIO_Init>

    }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40015404 	.word	0x40015404
 8001a9c:	200000c4 	.word	0x200000c4
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	48001000 	.word	0x48001000
 8001aa8:	40015424 	.word	0x40015424

08001aac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <MX_SPI2_Init+0x78>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001abc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ac6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001aca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ade:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001afa:	2207      	movs	r2, #7
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b06:	2208      	movs	r2, #8
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_SPI2_Init+0x74>)
 8001b0c:	f006 fe92 	bl	8008834 <HAL_SPI_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b16:	f7ff fe37 	bl	8001788 <Error_Handler>
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000271c 	.word	0x2000271c
 8001b24:	40003800 	.word	0x40003800

08001b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_SPI_MspInit+0x7c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d127      	bne.n	8001b9a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_SPI_MspInit+0x80>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001b7a:	231a      	movs	r3, #26
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_SPI_MspInit+0x84>)
 8001b96:	f002 fa31 	bl	8003ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40003800 	.word	0x40003800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000c00 	.word	0x48000c00

08001bb0 <BSP_LCD_GLASS_Init>:
/**
  * @brief  Initialize the LCD GLASS relative GPIO port IOs and LCD peripheral.
  * @retval None
  */
void BSP_LCD_GLASS_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  LCDHandle.Instance              = LCD;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <BSP_LCD_GLASS_Init+0x70>)
 8001bb8:	601a      	str	r2, [r3, #0]
  LCDHandle.Init.Prescaler        = LCD_PRESCALER_1;
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  LCDHandle.Init.Divider          = LCD_DIVIDER_31;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bc2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bc6:	609a      	str	r2, [r3, #8]
#if defined (USE_STM32L476G_DISCO_REVC) || defined (USE_STM32L476G_DISCO_REVB)
  LCDHandle.Init.Duty             = LCD_DUTY_1_4;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	60da      	str	r2, [r3, #12]
#elif defined (USE_STM32L476G_DISCO_REVA)
  LCDHandle.Init.Duty             = LCD_DUTY_1_8;
#endif
  LCDHandle.Init.Bias             = LCD_BIAS_1_3;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	611a      	str	r2, [r3, #16]
  LCDHandle.Init.VoltageSource    = LCD_VOLTAGESOURCE_INTERNAL;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  LCDHandle.Init.Contrast         = LCD_CONTRASTLEVEL_5;
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bdc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001be0:	619a      	str	r2, [r3, #24]
  LCDHandle.Init.DeadTime         = LCD_DEADTIME_0;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
  LCDHandle.Init.PulseOnDuration  = LCD_PULSEONDURATION_4;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	621a      	str	r2, [r3, #32]
  LCDHandle.Init.HighDrive        = LCD_HIGHDRIVE_DISABLE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
  LCDHandle.Init.BlinkMode        = LCD_BLINKMODE_OFF;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
  LCDHandle.Init.BlinkFrequency   = LCD_BLINKFREQUENCY_DIV32;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  LCDHandle.Init.MuxSegment       = LCD_MUXSEGMENT_DISABLE;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the LCD */
  LCD_MspInit(&LCDHandle);
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001c0a:	f000 f815 	bl	8001c38 <LCD_MspInit>
  HAL_LCD_Init(&LCDHandle);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <BSP_LCD_GLASS_Init+0x6c>)
 8001c10:	f004 f9b6 	bl	8005f80 <HAL_LCD_Init>

  BSP_LCD_GLASS_Clear();
 8001c14:	f000 f806 	bl	8001c24 <BSP_LCD_GLASS_Clear>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20002790 	.word	0x20002790
 8001c20:	40002400 	.word	0x40002400

08001c24 <BSP_LCD_GLASS_Clear>:
/**
  * @brief  Clear the whole LCD RAM buffer.
  * @retval None
  */
void BSP_LCD_GLASS_Clear(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  HAL_LCD_Clear(&LCDHandle);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <BSP_LCD_GLASS_Clear+0x10>)
 8001c2a:	f004 fa69 	bl	8006100 <HAL_LCD_Clear>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20002790 	.word	0x20002790

08001c38 <LCD_MspInit>:
  * @brief  Initialize the LCD MSP.
  * @param  hlcd: LCD handle
  * @retval None
  */
static void LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0c0      	sub	sp, #256	; 0x100
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001c40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_OscInitTypeDef oscinitstruct = {0};
 8001c50:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c54:	2244      	movs	r2, #68	; 0x44
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00b fb1f 	bl	800d29c <memset>
  RCC_PeriphCLKInitTypeDef periphclkstruct = {0};
 8001c5e:	f107 0320 	add.w	r3, r7, #32
 8001c62:	2288      	movs	r2, #136	; 0x88
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b fb18 	bl	800d29c <memset>

  /*##-1- Enable PWR  peripheral Clock #######################################*/
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <LCD_MspInit+0x17c>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <LCD_MspInit+0x17c>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b4e      	ldr	r3, [pc, #312]	; (8001db4 <LCD_MspInit+0x17c>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]

  /*##-2- Configure LSE as RTC clock soucre ###################################*/
  oscinitstruct.OscillatorType  = RCC_OSCILLATORTYPE_LSE;
 8001c84:	2304      	movs	r3, #4
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  oscinitstruct.PLL.PLLState    = RCC_PLL_NONE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  oscinitstruct.LSEState        = RCC_LSE_ON;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK)
 8001c96:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fc10 	bl	80064c0 <HAL_RCC_OscConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d000      	beq.n	8001ca8 <LCD_MspInit+0x70>
  {
    while (1);
 8001ca6:	e7fe      	b.n	8001ca6 <LCD_MspInit+0x6e>
  }

  /*##-3- Select LSE as RTC clock source.##########################*/
  /* Backup domain management is done in RCC function */
  periphclkstruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cac:	623b      	str	r3, [r7, #32]
  periphclkstruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&periphclkstruct);
 8001cb6:	f107 0320 	add.w	r3, r7, #32
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f005 f9ea 	bl	8007094 <HAL_RCCEx_PeriphCLKConfig>

  /*##-4- Enable LCD GPIO Clocks #############################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a35      	ldr	r2, [pc, #212]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cde:	f043 0302 	orr.w	r3, r3, #2
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <LCD_MspInit+0x17c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf0:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <LCD_MspInit+0x17c>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d08:	4b2a      	ldr	r3, [pc, #168]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a29      	ldr	r2, [pc, #164]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]


  /*##-5- Configure peripheral GPIO ##########################################*/
  /* Configure Output for LCD */
  /* Port A */
  gpioinitstruct.Pin        = LCD_GPIO_BANKA_PINS;
 8001d20:	f248 73c0 	movw	r3, #34752	; 0x87c0
 8001d24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  gpioinitstruct.Mode       = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  gpioinitstruct.Pull       = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  gpioinitstruct.Speed      = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  gpioinitstruct.Alternate  = GPIO_AF11_LCD;
 8001d3a:	230b      	movs	r3, #11
 8001d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  HAL_GPIO_Init(GPIOA, &gpioinitstruct);
 8001d40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4a:	f002 f957 	bl	8003ffc <HAL_GPIO_Init>

  /* Port B */
  gpioinitstruct.Pin        = LCD_GPIO_BANKB_PINS;
 8001d4e:	f24f 2333 	movw	r3, #62003	; 0xf233
 8001d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8001d56:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <LCD_MspInit+0x180>)
 8001d5e:	f002 f94d 	bl	8003ffc <HAL_GPIO_Init>

  /* Port C*/
  gpioinitstruct.Pin        = LCD_GPIO_BANKC_PINS;
 8001d62:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001d66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOC, &gpioinitstruct);
 8001d6a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4812      	ldr	r0, [pc, #72]	; (8001dbc <LCD_MspInit+0x184>)
 8001d72:	f002 f943 	bl	8003ffc <HAL_GPIO_Init>

  /* Port D */
  gpioinitstruct.Pin        = LCD_GPIO_BANKD_PINS;
 8001d76:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001d7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  HAL_GPIO_Init(GPIOD, &gpioinitstruct);
 8001d7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d82:	4619      	mov	r1, r3
 8001d84:	480e      	ldr	r0, [pc, #56]	; (8001dc0 <LCD_MspInit+0x188>)
 8001d86:	f002 f939 	bl	8003ffc <HAL_GPIO_Init>

  /* Wait for the external capacitor Cext which is connected to the VLCD pin is charged
  (approximately 2ms for Cext=1uF) */
  HAL_Delay(2);
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f000 fb50 	bl	8002430 <HAL_Delay>

  /*##-6- Enable LCD peripheral Clock ########################################*/
  __HAL_RCC_LCD_CLK_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <LCD_MspInit+0x17c>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
}
 8001da8:	bf00      	nop
 8001daa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00

08001dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_MspInit+0x44>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a0e      	ldr	r2, [pc, #56]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_MspInit+0x44>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_MspInit+0x44>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6593      	str	r3, [r2, #88]	; 0x58
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_MspInit+0x44>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f002 f87c 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e60:	f000 fac6 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f002 fa9f 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <ADC1_2_IRQHandler+0x10>)
 8001e7e:	f000 feb1 	bl	8002be4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200004e0 	.word	0x200004e0

08001e8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e90:	2040      	movs	r0, #64	; 0x40
 8001e92:	f002 fa8d 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM3_IRQHandler+0x10>)
 8001ea2:	f006 fe31 	bl	8008b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200027cc 	.word	0x200027cc

08001eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	static unsigned char uRx_Data[1024] = { 0 };
	static unsigned char *pRx_Data = uRx_Data;
	static unsigned char uLength = 0;

	//rx
	HAL_UART_Receive(&huart2, pRx_Data, 1, 1000);
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <USART2_IRQHandler+0x54>)
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <USART2_IRQHandler+0x58>)
 8001ec0:	f007 fadd 	bl	800947e <HAL_UART_Receive>
	if (*pRx_Data == '\n') {
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <USART2_IRQHandler+0x54>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d10a      	bne.n	8001ee4 <USART2_IRQHandler+0x34>
		printf("Msg Rx: %s", uRx_Data);
 8001ece:	490f      	ldr	r1, [pc, #60]	; (8001f0c <USART2_IRQHandler+0x5c>)
 8001ed0:	480f      	ldr	r0, [pc, #60]	; (8001f10 <USART2_IRQHandler+0x60>)
 8001ed2:	f00b fa93 	bl	800d3fc <iprintf>
		pRx_Data = uRx_Data;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <USART2_IRQHandler+0x54>)
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <USART2_IRQHandler+0x5c>)
 8001eda:	601a      	str	r2, [r3, #0]
		uLength = 0;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <USART2_IRQHandler+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	e00a      	b.n	8001efa <USART2_IRQHandler+0x4a>
	} else {
		pRx_Data++;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <USART2_IRQHandler+0x54>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <USART2_IRQHandler+0x54>)
 8001eec:	6013      	str	r3, [r2, #0]
		uLength++;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <USART2_IRQHandler+0x64>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <USART2_IRQHandler+0x64>)
 8001ef8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <USART2_IRQHandler+0x58>)
 8001efc:	f007 fb8c 	bl	8009618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000004 	.word	0x20000004
 8001f08:	20002818 	.word	0x20002818
 8001f0c:	200000c8 	.word	0x200000c8
 8001f10:	0800e0a0 	.word	0x0800e0a0
 8001f14:	200004c8 	.word	0x200004c8

08001f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <OTG_FS_IRQHandler+0x10>)
 8001f1e:	f002 fceb 	bl	80048f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20002c74 	.word	0x20002c74

08001f2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
	}

return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	60ba      	str	r2, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f821 	bl	8000fc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf1      	blt.n	8001f78 <_write+0x12>
	}
	return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_close>:

int _close(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f00b f8f6 	bl	800d228 <__errno>
 800203c:	4602      	mov	r2, r0
 800203e:	230c      	movs	r3, #12
 8002040:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20018000 	.word	0x20018000
 8002068:	00000400 	.word	0x00000400
 800206c:	200004cc 	.word	0x200004cc
 8002070:	20002f40 	.word	0x20002f40

08002074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <SystemInit+0x64>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <SystemInit+0x64>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002088:	4b14      	ldr	r3, [pc, #80]	; (80020dc <SystemInit+0x68>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a13      	ldr	r2, [pc, #76]	; (80020dc <SystemInit+0x68>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <SystemInit+0x68>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <SystemInit+0x68>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <SystemInit+0x68>)
 80020a0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020a4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <SystemInit+0x68>)
 80020ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <SystemInit+0x68>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <SystemInit+0x68>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <SystemInit+0x68>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SystemInit+0x64>)
 80020c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ca:	609a      	str	r2, [r3, #8]
#endif
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00
 80020dc:	40021000 	.word	0x40021000

080020e0 <MX_TIM3_Init>:
/* USER CODE END 0 */

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

	htim3.Instance = TIM3;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_TIM3_Init+0x94>)
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <MX_TIM3_Init+0x98>)
 8002102:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 39;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_TIM3_Init+0x94>)
 8002106:	2227      	movs	r2, #39	; 0x27
 8002108:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_TIM3_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 99;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_TIM3_Init+0x94>)
 8002112:	2263      	movs	r2, #99	; 0x63
 8002114:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_TIM3_Init+0x94>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_TIM3_Init+0x94>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002122:	4814      	ldr	r0, [pc, #80]	; (8002174 <MX_TIM3_Init+0x94>)
 8002124:	f006 fc29 	bl	800897a <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x52>
		Error_Handler();
 800212e:	f7ff fb2b 	bl	8001788 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4619      	mov	r1, r3
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_TIM3_Init+0x94>)
 8002140:	f006 fe01 	bl	8008d46 <HAL_TIM_ConfigClockSource>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM3_Init+0x6e>
		Error_Handler();
 800214a:	f7ff fb1d 	bl	8001788 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800214e:	2320      	movs	r3, #32
 8002150:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <MX_TIM3_Init+0x94>)
 800215c:	f007 f808 	bl	8009170 <HAL_TIMEx_MasterConfigSynchronization>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8002166:	f7ff fb0f 	bl	8001788 <Error_Handler>
	}

}
 800216a:	bf00      	nop
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200027cc 	.word	0x200027cc
 8002178:	40000400 	.word	0x40000400

0800217c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM3) {
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_TIM_Base_MspInit+0x44>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d113      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x3a>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* TIM3 clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_TIM_Base_MspInit+0x48>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

		/* TIM3 interrupt Init */
		HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	201d      	movs	r0, #29
 80021ac:	f001 feaf 	bl	8003f0e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021b0:	201d      	movs	r0, #29
 80021b2:	f001 fec8 	bl	8003f46 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_TIM_PeriodElapsedCallback>:
		/* USER CODE END TIM3_MspDeInit 1 */
	}
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	//adc
//	if (flag_adc)
//		HAL_ADC_Start_IT(&hadc1);
//	return;
	//comp
	counter_timer++;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	3301      	adds	r3, #1
 80021d6:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021d8:	6013      	str	r3, [r2, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200000b8 	.word	0x200000b8

080021ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_USART2_UART_Init+0x54>)
 80021f2:	4a14      	ldr	r2, [pc, #80]	; (8002244 <MX_USART2_UART_Init+0x58>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <MX_USART2_UART_Init+0x54>)
 80021f8:	4a13      	ldr	r2, [pc, #76]	; (8002248 <MX_USART2_UART_Init+0x5c>)
 80021fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x54>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_USART2_UART_Init+0x54>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <MX_USART2_UART_Init+0x54>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x54>)
 8002210:	220c      	movs	r2, #12
 8002212:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_USART2_UART_Init+0x54>)
 8002216:	2200      	movs	r2, #0
 8002218:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x54>)
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_USART2_UART_Init+0x54>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x54>)
 8002228:	2200      	movs	r2, #0
 800222a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_USART2_UART_Init+0x54>)
 800222e:	f007 f845 	bl	80092bc <HAL_UART_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8002238:	f7ff faa6 	bl	8001788 <Error_Handler>
  }

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20002818 	.word	0x20002818
 8002244:	40004400 	.word	0x40004400
 8002248:	001e8480 	.word	0x001e8480

0800224c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_UART_MspInit+0x9c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d137      	bne.n	80022de <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <HAL_UART_MspInit+0xa0>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_UART_MspInit+0xa0>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
 800227a:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_UART_MspInit+0xa0>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <HAL_UART_MspInit+0xa0>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_UART_MspInit+0xa0>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b16      	ldr	r3, [pc, #88]	; (80022ec <HAL_UART_MspInit+0xa0>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800229e:	2360      	movs	r3, #96	; 0x60
 80022a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ae:	2307      	movs	r3, #7
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	480d      	ldr	r0, [pc, #52]	; (80022f0 <HAL_UART_MspInit+0xa4>)
 80022ba:	f001 fe9f 	bl	8003ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2102      	movs	r1, #2
 80022c2:	2026      	movs	r0, #38	; 0x26
 80022c4:	f001 fe23 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c8:	2026      	movs	r0, #38	; 0x26
 80022ca:	f001 fe3c 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
		__HAL_UART_ENABLE_IT(uartHandle, UART_IT_RXNE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40004400 	.word	0x40004400
 80022ec:	40021000 	.word	0x40021000
 80022f0:	48000c00 	.word	0x48000c00

080022f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800232c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022f8:	f7ff febc 	bl	8002074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022fe:	e003      	b.n	8002308 <LoopCopyDataInit>

08002300 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002302:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002304:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002306:	3104      	adds	r1, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <LoopForever+0xa>)
	ldr	r3, =_edata
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <LoopForever+0xe>)
	adds	r2, r0, r1
 800230c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800230e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002310:	d3f6      	bcc.n	8002300 <CopyDataInit>
	ldr	r2, =_sbss
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002314:	e002      	b.n	800231c <LoopFillZerobss>

08002316 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002316:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002318:	f842 3b04 	str.w	r3, [r2], #4

0800231c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <LoopForever+0x16>)
	cmp	r2, r3
 800231e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002320:	d3f9      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002322:	f00a ff87 	bl	800d234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002326:	f7ff f931 	bl	800158c <main>

0800232a <LoopForever>:

LoopForever:
    b LoopForever
 800232a:	e7fe      	b.n	800232a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800232c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002330:	0800e1a0 	.word	0x0800e1a0
	ldr	r0, =_sdata
 8002334:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002338:	20000098 	.word	0x20000098
	ldr	r2, =_sbss
 800233c:	20000098 	.word	0x20000098
	ldr	r3, = _ebss
 8002340:	20002f3c 	.word	0x20002f3c

08002344 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002344:	e7fe      	b.n	8002344 <ADC3_IRQHandler>

08002346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002350:	2003      	movs	r0, #3
 8002352:	f001 fdd1 	bl	8003ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002356:	2000      	movs	r0, #0
 8002358:	f000 f80e 	bl	8002378 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	e001      	b.n	800236c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002368:	f7ff fd2c 	bl	8001dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800236c:	79fb      	ldrb	r3, [r7, #7]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_InitTick+0x6c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d023      	beq.n	80023d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800238c:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_InitTick+0x70>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_InitTick+0x6c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 fddd 	bl	8003f62 <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d809      	bhi.n	80023c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f001 fda7 	bl	8003f0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_InitTick+0x74>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e007      	b.n	80023d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e004      	b.n	80023d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e001      	b.n	80023d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000010 	.word	0x20000010
 80023e8:	20000008 	.word	0x20000008
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000010 	.word	0x20000010
 8002414:	20002898 	.word	0x20002898

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20002898 	.word	0x20002898

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_Delay+0x40>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000010 	.word	0x20000010

08002474 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	461a      	mov	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <LL_ADC_SetOffset+0x44>)
 80024fe:	4013      	ands	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	4313      	orrs	r3, r2
 800250c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	03fff000 	.word	0x03fff000

08002524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3360      	adds	r3, #96	; 0x60
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	431a      	orrs	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3330      	adds	r3, #48	; 0x30
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	4413      	add	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	211f      	movs	r1, #31
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0e9b      	lsrs	r3, r3, #26
 80025e4:	f003 011f 	and.w	r1, r3, #31
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	431a      	orrs	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3314      	adds	r3, #20
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	0e5b      	lsrs	r3, r3, #25
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0d1b      	lsrs	r3, r3, #20
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2107      	movs	r1, #7
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	0d1b      	lsrs	r3, r3, #20
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002674:	bf00      	nop
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0318 	and.w	r3, r3, #24
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a4:	40d9      	lsrs	r1, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	400b      	ands	r3, r1
 80026aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ae:	431a      	orrs	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	0007ffff 	.word	0x0007ffff

080026c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 031f 	and.w	r3, r3, #31
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6093      	str	r3, [r2, #8]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002738:	d101      	bne.n	800273e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800275c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002760:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002788:	d101      	bne.n	800278e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b0:	f043 0202 	orr.w	r2, r3, #2
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <LL_ADC_IsEnabled+0x18>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <LL_ADC_IsEnabled+0x1a>
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d101      	bne.n	8002802 <LL_ADC_IsDisableOngoing+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_IsDisableOngoing+0x1a>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002824:	f043 0210 	orr.w	r2, r3, #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d101      	bne.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800286e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d101      	bne.n	800289e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e134      	b.n	8002b30 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7fe fab7 	bl	8000e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff19 	bl	8002724 <LL_ADC_IsDeepPowerDownEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff feff 	bl	8002700 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff34 	bl	8002774 <LL_ADC_IsInternalRegulatorEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d113      	bne.n	800293a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff18 	bl	800274c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800291c:	4b86      	ldr	r3, [pc, #536]	; (8002b38 <HAL_ADC_Init+0x28c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	4a86      	ldr	r2, [pc, #536]	; (8002b3c <HAL_ADC_Init+0x290>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800292c:	e002      	b.n	8002934 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f9      	bne.n	800292e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff18 	bl	8002774 <LL_ADC_IsInternalRegulatorEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	f043 0210 	orr.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff64 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002970:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 80cf 	bne.w	8002b1e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 80cb 	bne.w	8002b1e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002990:	f043 0202 	orr.w	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff11 	bl	80027c4 <LL_ADC_IsEnabled>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d115      	bne.n	80029d4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029a8:	4865      	ldr	r0, [pc, #404]	; (8002b40 <HAL_ADC_Init+0x294>)
 80029aa:	f7ff ff0b 	bl	80027c4 <LL_ADC_IsEnabled>
 80029ae:	4604      	mov	r4, r0
 80029b0:	4864      	ldr	r0, [pc, #400]	; (8002b44 <HAL_ADC_Init+0x298>)
 80029b2:	f7ff ff07 	bl	80027c4 <LL_ADC_IsEnabled>
 80029b6:	4603      	mov	r3, r0
 80029b8:	431c      	orrs	r4, r3
 80029ba:	4863      	ldr	r0, [pc, #396]	; (8002b48 <HAL_ADC_Init+0x29c>)
 80029bc:	f7ff ff02 	bl	80027c4 <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	4323      	orrs	r3, r4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4619      	mov	r1, r3
 80029ce:	485f      	ldr	r0, [pc, #380]	; (8002b4c <HAL_ADC_Init+0x2a0>)
 80029d0:	f7ff fd50 	bl	8002474 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7e5b      	ldrb	r3, [r3, #25]
 80029d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80029e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80029ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	3b01      	subs	r3, #1
 8002a08:	045b      	lsls	r3, r3, #17
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_ADC_Init+0x2a4>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fef7 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002a4a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff18 	bl	8002886 <LL_ADC_INJ_IsConversionOngoing>
 8002a56:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d13d      	bne.n	8002ada <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13a      	bne.n	8002ada <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a70:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d118      	bne.n	8002aca <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aba:	430a      	orrs	r2, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	611a      	str	r2, [r3, #16]
 8002ac8:	e007      	b.n	8002ada <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10c      	bne.n	8002afc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f023 010f 	bic.w	r1, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
 8002afa:	e007      	b.n	8002b0c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020f 	bic.w	r2, r2, #15
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f023 0303 	bic.w	r3, r3, #3
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b1c:	e007      	b.n	8002b2e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	053e2d63 	.word	0x053e2d63
 8002b40:	50040000 	.word	0x50040000
 8002b44:	50040100 	.word	0x50040100
 8002b48:	50040200 	.word	0x50040200
 8002b4c:	50040300 	.word	0x50040300
 8002b50:	fff0c007 	.word	0xfff0c007

08002b54 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_Stop_IT+0x16>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e02b      	b.n	8002bc2 <HAL_ADC_Stop_IT+0x6e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002b72:	2103      	movs	r1, #3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fe51 	bl	800381c <ADC_ConversionStop>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d119      	bne.n	8002bb8 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 021c 	bic.w	r2, r2, #28
 8002b92:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fef5 	bl	8003984 <ADC_Disable>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c00:	4882      	ldr	r0, [pc, #520]	; (8002e0c <HAL_ADC_IRQHandler+0x228>)
 8002c02:	f7ff fd61 	bl	80026c8 <LL_ADC_GetMultimode>
 8002c06:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x5e>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 ffd8 	bl	8003bea <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_ADC_IRQHandler+0x72>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8083 	beq.w	8002d68 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d07d      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fc7c 	bl	8002586 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d062      	beq.n	8002d5a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_ADC_IRQHandler+0x22c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_ADC_IRQHandler+0xc0>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_IRQHandler+0xc2>
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <HAL_ADC_IRQHandler+0x230>)
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d008      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b09      	cmp	r3, #9
 8002cbe:	d104      	bne.n	8002cca <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	e00c      	b.n	8002ce4 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <HAL_ADC_IRQHandler+0x22c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d002      	beq.n	8002cda <HAL_ADC_IRQHandler+0xf6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	e000      	b.n	8002cdc <HAL_ADC_IRQHandler+0xf8>
 8002cda:	4b4e      	ldr	r3, [pc, #312]	; (8002e14 <HAL_ADC_IRQHandler+0x230>)
 8002cdc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d135      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d12e      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fd99 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11a      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020c 	bic.w	r2, r2, #12
 8002d1a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d112      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002d40:	e00b      	b.n	8002d5a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f043 0210 	orr.w	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f8d4 	bl	8000f08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	220c      	movs	r2, #12
 8002d66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d004      	beq.n	8002d7c <HAL_ADC_IRQHandler+0x198>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 809f 	beq.w	8002ec6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8099 	beq.w	8002ec6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc27 	bl	8002604 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002db6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fbe2 	bl	8002586 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dc2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a11      	ldr	r2, [pc, #68]	; (8002e10 <HAL_ADC_IRQHandler+0x22c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d002      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x1f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADC_IRQHandler+0x1f2>
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_ADC_IRQHandler+0x230>)
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d008      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d002      	beq.n	8002df0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d104      	bne.n	8002dfa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	623b      	str	r3, [r7, #32]
 8002df8:	e013      	b.n	8002e22 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a04      	ldr	r2, [pc, #16]	; (8002e10 <HAL_ADC_IRQHandler+0x22c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x234>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e007      	b.n	8002e1a <HAL_ADC_IRQHandler+0x236>
 8002e0a:	bf00      	nop
 8002e0c:	50040300 	.word	0x50040300
 8002e10:	50040100 	.word	0x50040100
 8002e14:	50040000 	.word	0x50040000
 8002e18:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <HAL_ADC_IRQHandler+0x42c>)
 8002e1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10c      	bne.n	8002e42 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d142      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03f      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13a      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d133      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d12e      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fd11 	bl	8002886 <LL_ADC_INJ_IsConversionOngoing>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11a      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e78:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d112      	bne.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
 8002e9e:	e00b      	b.n	8002eb8 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fe6e 	bl	8003b9a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2260      	movs	r2, #96	; 0x60
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d011      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x310>
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f896 	bl	8003018 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d012      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x340>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fe54 	bl	8003bc2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x370>
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fe46 	bl	8003bd6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d036      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3e8>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d031      	beq.n	8002fcc <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e014      	b.n	8002fa0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f7c:	4825      	ldr	r0, [pc, #148]	; (8003014 <HAL_ADC_IRQHandler+0x430>)
 8002f7e:	f7ff fbb1 	bl	80026e4 <LL_ADC_GetMultiDMATransfer>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e008      	b.n	8002fa0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	f043 0202 	orr.w	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f834 	bl	800302c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d018      	beq.n	8003008 <HAL_ADC_IRQHandler+0x424>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f043 0208 	orr.w	r2, r3, #8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003000:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fdd3 	bl	8003bae <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	50040000 	.word	0x50040000
 8003014:	50040300 	.word	0x50040300

08003018 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0b6      	sub	sp, #216	; 0xd8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x22>
 800305e:	2302      	movs	r3, #2
 8003060:	e3c6      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x7b0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fbe2 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 83a7 	bne.w	80037ca <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b05      	cmp	r3, #5
 8003082:	d824      	bhi.n	80030ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	3b02      	subs	r3, #2
 800308a:	2b03      	cmp	r3, #3
 800308c:	d81b      	bhi.n	80030c6 <HAL_ADC_ConfigChannel+0x86>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <HAL_ADC_ConfigChannel+0x54>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030ad 	.word	0x080030ad
 800309c:	080030b5 	.word	0x080030b5
 80030a0:	080030bd 	.word	0x080030bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	220c      	movs	r2, #12
 80030a8:	605a      	str	r2, [r3, #4]
          break;
 80030aa:	e011      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2212      	movs	r2, #18
 80030b0:	605a      	str	r2, [r3, #4]
          break;
 80030b2:	e00d      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2218      	movs	r2, #24
 80030b8:	605a      	str	r2, [r3, #4]
          break;
 80030ba:	e009      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c2:	605a      	str	r2, [r3, #4]
          break;
 80030c4:	e004      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2206      	movs	r2, #6
 80030ca:	605a      	str	r2, [r3, #4]
          break;
 80030cc:	e000      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80030ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	f7ff fa65 	bl	80025ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fba6 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 80030ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fbc6 	bl	8002886 <LL_ADC_INJ_IsConversionOngoing>
 80030fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 81a6 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 81a1 	bne.w	8003454 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	461a      	mov	r2, r3
 8003120:	f7ff fa83 	bl	800262a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	08db      	lsrs	r3, r3, #3
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00a      	beq.n	800315c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6919      	ldr	r1, [r3, #16]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003156:	f7ff f9c1 	bl	80024dc <LL_ADC_SetOffset>
 800315a:	e17b      	b.n	8003454 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f9de 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003168:	4603      	mov	r3, r0
 800316a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x148>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff f9d3 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800317e:	4603      	mov	r3, r0
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	f003 021f 	and.w	r2, r3, #31
 8003186:	e01e      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x186>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff f9c8 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e004      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80031ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_ADC_ConfigChannel+0x19e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	e018      	b.n	8003210 <HAL_ADC_ConfigChannel+0x1d0>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003202:	2320      	movs	r3, #32
 8003204:	e004      	b.n	8003210 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003210:	429a      	cmp	r2, r3
 8003212:	d106      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff f997 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2101      	movs	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f97b 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800322e:	4603      	mov	r3, r0
 8003230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10a      	bne.n	800324e <HAL_ADC_ConfigChannel+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2101      	movs	r1, #1
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff f970 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003244:	4603      	mov	r3, r0
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	e01e      	b.n	800328c <HAL_ADC_ConfigChannel+0x24c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2101      	movs	r1, #1
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f965 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800326c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800327c:	2320      	movs	r3, #32
 800327e:	e004      	b.n	800328a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003280:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x264>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	f003 031f 	and.w	r3, r3, #31
 80032a2:	e018      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x296>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032b0:	fa93 f3a3 	rbit	r3, r3
 80032b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80032c8:	2320      	movs	r3, #32
 80032ca:	e004      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80032cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032d0:	fab3 f383 	clz	r3, r3
 80032d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2200      	movs	r2, #0
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff f934 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f918 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x2d4>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f90d 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 021f 	and.w	r2, r3, #31
 8003312:	e01e      	b.n	8003352 <HAL_ADC_ConfigChannel+0x312>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2102      	movs	r1, #2
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f902 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800333a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003342:	2320      	movs	r3, #32
 8003344:	e004      	b.n	8003350 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ADC_ConfigChannel+0x32a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0e9b      	lsrs	r3, r3, #26
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	e016      	b.n	8003398 <HAL_ADC_ConfigChannel+0x358>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800337c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800337e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800338a:	2320      	movs	r3, #32
 800338c:	e004      	b.n	8003398 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800338e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003398:	429a      	cmp	r2, r3
 800339a:	d106      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2102      	movs	r1, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f8d3 	bl	8002550 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2103      	movs	r1, #3
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f8b7 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10a      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x396>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2103      	movs	r1, #3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f8ac 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	e017      	b.n	8003406 <HAL_ADC_ConfigChannel+0x3c6>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2103      	movs	r1, #3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff f8a1 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e003      	b.n	8003404 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80033fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_ADC_ConfigChannel+0x3de>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	0e9b      	lsrs	r3, r3, #26
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	e011      	b.n	8003442 <HAL_ADC_ConfigChannel+0x402>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800342c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800342e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800343a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003442:	429a      	cmp	r2, r3
 8003444:	d106      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	2103      	movs	r1, #3
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff f87e 	bl	8002550 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f9b3 	bl	80027c4 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 813f 	bne.w	80036e4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6819      	ldr	r1, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f7ff f904 	bl	8002680 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a8e      	ldr	r2, [pc, #568]	; (80036b8 <HAL_ADC_ConfigChannel+0x678>)
 800347e:	4293      	cmp	r3, r2
 8003480:	f040 8130 	bne.w	80036e4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x46c>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	bf94      	ite	ls
 80034a4:	2301      	movls	r3, #1
 80034a6:	2300      	movhi	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e019      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x4a0>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2b09      	cmp	r3, #9
 80034d8:	bf94      	ite	ls
 80034da:	2301      	movls	r3, #1
 80034dc:	2300      	movhi	r3, #0
 80034de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d079      	beq.n	80035d8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x4c0>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e9b      	lsrs	r3, r3, #26
 80034f6:	3301      	adds	r3, #1
 80034f8:	069b      	lsls	r3, r3, #26
 80034fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034fe:	e015      	b.n	800352c <HAL_ADC_ConfigChannel+0x4ec>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	069b      	lsls	r3, r3, #26
 8003528:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_ADC_ConfigChannel+0x50c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	e017      	b.n	800357c <HAL_ADC_ConfigChannel+0x53c>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800355a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800355e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e003      	b.n	8003570 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	ea42 0103 	orr.w	r1, r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x562>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	3301      	adds	r3, #1
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	051b      	lsls	r3, r3, #20
 80035a0:	e018      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x594>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	e003      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80035be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	3301      	adds	r3, #1
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d4:	430b      	orrs	r3, r1
 80035d6:	e080      	b.n	80036da <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x5b4>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	3301      	adds	r3, #1
 80035ec:	069b      	lsls	r3, r3, #26
 80035ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035f2:	e015      	b.n	8003620 <HAL_ADC_ConfigChannel+0x5e0>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	069b      	lsls	r3, r3, #26
 800361c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x600>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	e017      	b.n	8003670 <HAL_ADC_ConfigChannel+0x630>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	61fb      	str	r3, [r7, #28]
  return result;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003658:	2320      	movs	r3, #32
 800365a:	e003      	b.n	8003664 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2101      	movs	r1, #1
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	ea42 0103 	orr.w	r1, r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_ADC_ConfigChannel+0x65c>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	3301      	adds	r3, #1
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	3b1e      	subs	r3, #30
 8003694:	051b      	lsls	r3, r3, #20
 8003696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800369a:	e01d      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x698>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	613b      	str	r3, [r7, #16]
  return result;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e005      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x684>
 80036b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	3b1e      	subs	r3, #30
 80036d2:	051b      	lsls	r3, r3, #20
 80036d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d8:	430b      	orrs	r3, r1
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6892      	ldr	r2, [r2, #8]
 80036de:	4619      	mov	r1, r3
 80036e0:	f7fe ffa3 	bl	800262a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b43      	ldr	r3, [pc, #268]	; (80037f8 <HAL_ADC_ConfigChannel+0x7b8>)
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d079      	beq.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036f0:	4842      	ldr	r0, [pc, #264]	; (80037fc <HAL_ADC_ConfigChannel+0x7bc>)
 80036f2:	f7fe fee5 	bl	80024c0 <LL_ADC_GetCommonPathInternalCh>
 80036f6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <HAL_ADC_ConfigChannel+0x7c0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d12b      	bne.n	800375c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d125      	bne.n	800375c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_ADC_ConfigChannel+0x7c4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x6e4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_ADC_ConfigChannel+0x7c8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d15c      	bne.n	80037de <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800372c:	4619      	mov	r1, r3
 800372e:	4833      	ldr	r0, [pc, #204]	; (80037fc <HAL_ADC_ConfigChannel+0x7bc>)
 8003730:	f7fe feb3 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003734:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_ADC_ConfigChannel+0x7cc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_ADC_ConfigChannel+0x7d0>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099a      	lsrs	r2, r3, #6
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800374c:	e002      	b.n	8003754 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3b01      	subs	r3, #1
 8003752:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800375a:	e040      	b.n	80037de <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	; (8003814 <HAL_ADC_ConfigChannel+0x7d4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d118      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x758>
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d112      	bne.n	8003798 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a23      	ldr	r2, [pc, #140]	; (8003804 <HAL_ADC_ConfigChannel+0x7c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x746>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_ADC_ConfigChannel+0x7c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12d      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378e:	4619      	mov	r1, r3
 8003790:	481a      	ldr	r0, [pc, #104]	; (80037fc <HAL_ADC_ConfigChannel+0x7bc>)
 8003792:	f7fe fe82 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003796:	e024      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_ADC_ConfigChannel+0x7d8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d120      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11a      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_ADC_ConfigChannel+0x7c4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d115      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037c0:	4619      	mov	r1, r3
 80037c2:	480e      	ldr	r0, [pc, #56]	; (80037fc <HAL_ADC_ConfigChannel+0x7bc>)
 80037c4:	f7fe fe69 	bl	800249a <LL_ADC_SetCommonPathInternalCh>
 80037c8:	e00c      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037dc:	e002      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	37d8      	adds	r7, #216	; 0xd8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	80080000 	.word	0x80080000
 80037fc:	50040300 	.word	0x50040300
 8003800:	c7520000 	.word	0xc7520000
 8003804:	50040000 	.word	0x50040000
 8003808:	50040200 	.word	0x50040200
 800380c:	20000008 	.word	0x20000008
 8003810:	053e2d63 	.word	0x053e2d63
 8003814:	cb840000 	.word	0xcb840000
 8003818:	80000001 	.word	0x80000001

0800381c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f800 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8003838:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f821 	bl	8002886 <LL_ADC_INJ_IsConversionOngoing>
 8003844:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8090 	beq.w	8003974 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d02a      	beq.n	80038b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7e5b      	ldrb	r3, [r3, #25]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d126      	bne.n	80038b8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7e1b      	ldrb	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d122      	bne.n	80038b8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003876:	e014      	b.n	80038a2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4a41      	ldr	r2, [pc, #260]	; (8003980 <ADC_ConversionStop+0x164>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d90d      	bls.n	800389c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	f043 0210 	orr.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e06c      	b.n	8003976 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	3301      	adds	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d1e3      	bne.n	8003878 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2240      	movs	r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d014      	beq.n	80038e8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe ffb8 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe ff89 	bl	80027ea <LL_ADC_IsDisableOngoing>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe ff94 	bl	8002810 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d014      	beq.n	8003918 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe ffc7 	bl	8002886 <LL_ADC_INJ_IsConversionOngoing>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe ff71 	bl	80027ea <LL_ADC_IsDisableOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe ffa3 	bl	800285e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d004      	beq.n	8003928 <ADC_ConversionStop+0x10c>
 800391e:	2b03      	cmp	r3, #3
 8003920:	d105      	bne.n	800392e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003922:	230c      	movs	r3, #12
 8003924:	617b      	str	r3, [r7, #20]
        break;
 8003926:	e005      	b.n	8003934 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003928:	2308      	movs	r3, #8
 800392a:	617b      	str	r3, [r7, #20]
        break;
 800392c:	e002      	b.n	8003934 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800392e:	2304      	movs	r3, #4
 8003930:	617b      	str	r3, [r7, #20]
        break;
 8003932:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003934:	f7fe fd70 	bl	8002418 <HAL_GetTick>
 8003938:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800393a:	e014      	b.n	8003966 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800393c:	f7fe fd6c 	bl	8002418 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b05      	cmp	r3, #5
 8003948:	d90d      	bls.n	8003966 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e007      	b.n	8003976 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e3      	bne.n	800393c <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	a33fffff 	.word	0xa33fffff

08003984 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe ff2a 	bl	80027ea <LL_ADC_IsDisableOngoing>
 8003996:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe ff11 	bl	80027c4 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d040      	beq.n	8003a2a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d13d      	bne.n	8003a2a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030d 	and.w	r3, r3, #13
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10c      	bne.n	80039d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7fe feeb 	bl	800279c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2203      	movs	r2, #3
 80039cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ce:	f7fe fd23 	bl	8002418 <HAL_GetTick>
 80039d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	e022      	b.n	8003a1c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f043 0210 	orr.w	r2, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01c      	b.n	8003a2c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039f2:	f7fe fd11 	bl	8002418 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d90d      	bls.n	8003a1c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	f043 0210 	orr.w	r2, r3, #16
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e007      	b.n	8003a2c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e3      	bne.n	80039f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <LL_ADC_IsEnabled>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <LL_ADC_IsEnabled+0x18>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <LL_ADC_IsEnabled+0x1a>
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_ADC_StartCalibration>:
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_IsCalibrationOnGoing>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aa0:	d101      	bne.n	8003aa6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d101      	bne.n	8003acc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_ADCEx_Calibration_Start+0x1c>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e04d      	b.n	8003b92 <HAL_ADCEx_Calibration_Start+0xb8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff40 	bl	8003984 <ADC_Disable>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d136      	bne.n	8003b7c <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b16:	f023 0302 	bic.w	r3, r3, #2
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff96 	bl	8003a5a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b2e:	e014      	b.n	8003b5a <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003b3c:	d30d      	bcc.n	8003b5a <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f023 0312 	bic.w	r3, r3, #18
 8003b46:	f043 0210 	orr.w	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e01b      	b.n	8003b92 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff94 	bl	8003a8c <LL_ADC_IsCalibrationOnGoing>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e2      	bne.n	8003b30 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
 8003b7a:	e005      	b.n	8003b88 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b09f      	sub	sp, #124	; 0x7c
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e08f      	b.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a47      	ldr	r2, [pc, #284]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d102      	bne.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003c30:	4b46      	ldr	r3, [pc, #280]	; (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	e001      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e072      	b.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ff2a 	bl	8003ab4 <LL_ADC_REG_IsConversionOngoing>
 8003c60:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff ff24 	bl	8003ab4 <LL_ADC_REG_IsConversionOngoing>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d154      	bne.n	8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d151      	bne.n	8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c78:	4b35      	ldr	r3, [pc, #212]	; (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003c7a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d02c      	beq.n	8003cde <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c96:	035b      	lsls	r3, r3, #13
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ca0:	4829      	ldr	r0, [pc, #164]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003ca2:	f7ff fec7 	bl	8003a34 <LL_ADC_IsEnabled>
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	4828      	ldr	r0, [pc, #160]	; (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003caa:	f7ff fec3 	bl	8003a34 <LL_ADC_IsEnabled>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	431c      	orrs	r4, r3
 8003cb2:	4828      	ldr	r0, [pc, #160]	; (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cb4:	f7ff febe 	bl	8003a34 <LL_ADC_IsEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4323      	orrs	r3, r4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d137      	bne.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cc8:	f023 030f 	bic.w	r3, r3, #15
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	6811      	ldr	r1, [r2, #0]
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	6892      	ldr	r2, [r2, #8]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cdc:	e028      	b.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cea:	4817      	ldr	r0, [pc, #92]	; (8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003cec:	f7ff fea2 	bl	8003a34 <LL_ADC_IsEnabled>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	4816      	ldr	r0, [pc, #88]	; (8003d4c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003cf4:	f7ff fe9e 	bl	8003a34 <LL_ADC_IsEnabled>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	431c      	orrs	r4, r3
 8003cfc:	4815      	ldr	r0, [pc, #84]	; (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cfe:	f7ff fe99 	bl	8003a34 <LL_ADC_IsEnabled>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4323      	orrs	r3, r4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d112      	bne.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d12:	f023 030f 	bic.w	r3, r3, #15
 8003d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d18:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d1a:	e009      	b.n	8003d30 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003d2e:	e000      	b.n	8003d32 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	377c      	adds	r7, #124	; 0x7c
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd90      	pop	{r4, r7, pc}
 8003d46:	bf00      	nop
 8003d48:	50040000 	.word	0x50040000
 8003d4c:	50040100 	.word	0x50040100
 8003d50:	50040300 	.word	0x50040300
 8003d54:	50040200 	.word	0x50040200

08003d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d74:	4013      	ands	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d8a:	4a04      	ldr	r2, [pc, #16]	; (8003d9c <__NVIC_SetPriorityGrouping+0x44>)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	60d3      	str	r3, [r2, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__NVIC_GetPriorityGrouping+0x18>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	f003 0307 	and.w	r3, r3, #7
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db0b      	blt.n	8003de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	4907      	ldr	r1, [pc, #28]	; (8003df4 <__NVIC_EnableIRQ+0x38>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2001      	movs	r0, #1
 8003dde:	fa00 f202 	lsl.w	r2, r0, r2
 8003de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	e000e100 	.word	0xe000e100

08003df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	db0a      	blt.n	8003e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	490c      	ldr	r1, [pc, #48]	; (8003e44 <__NVIC_SetPriority+0x4c>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e20:	e00a      	b.n	8003e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	4908      	ldr	r1, [pc, #32]	; (8003e48 <__NVIC_SetPriority+0x50>)
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	3b04      	subs	r3, #4
 8003e30:	0112      	lsls	r2, r2, #4
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	440b      	add	r3, r1
 8003e36:	761a      	strb	r2, [r3, #24]
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000e100 	.word	0xe000e100
 8003e48:	e000ed00 	.word	0xe000ed00

08003e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b089      	sub	sp, #36	; 0x24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f1c3 0307 	rsb	r3, r3, #7
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf28      	it	cs
 8003e6a:	2304      	movcs	r3, #4
 8003e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d902      	bls.n	8003e7c <NVIC_EncodePriority+0x30>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3b03      	subs	r3, #3
 8003e7a:	e000      	b.n	8003e7e <NVIC_EncodePriority+0x32>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e94:	f04f 31ff 	mov.w	r1, #4294967295
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9e:	43d9      	mvns	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	4313      	orrs	r3, r2
         );
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3724      	adds	r7, #36	; 0x24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec4:	d301      	bcc.n	8003eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e00f      	b.n	8003eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <SysTick_Config+0x40>)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed2:	210f      	movs	r1, #15
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	f7ff ff8e 	bl	8003df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <SysTick_Config+0x40>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x40>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ff29 	bl	8003d58 <__NVIC_SetPriorityGrouping>
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b086      	sub	sp, #24
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4603      	mov	r3, r0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f20:	f7ff ff3e 	bl	8003da0 <__NVIC_GetPriorityGrouping>
 8003f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6978      	ldr	r0, [r7, #20]
 8003f2c:	f7ff ff8e 	bl	8003e4c <NVIC_EncodePriority>
 8003f30:	4602      	mov	r2, r0
 8003f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff5d 	bl	8003df8 <__NVIC_SetPriority>
}
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff31 	bl	8003dbc <__NVIC_EnableIRQ>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff ffa2 	bl	8003eb4 <SysTick_Config>
 8003f70:	4603      	mov	r3, r0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d005      	beq.n	8003f9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2204      	movs	r2, #4
 8003f96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	73fb      	strb	r3, [r7, #15]
 8003f9c:	e029      	b.n	8003ff2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 020e 	bic.w	r2, r2, #14
 8003fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 021c 	and.w	r2, r3, #28
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
    }
  }
  return status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e17f      	b.n	800430c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8171 	beq.w	8004306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d00b      	beq.n	8004044 <HAL_GPIO_Init+0x48>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b02      	cmp	r3, #2
 8004032:	d007      	beq.n	8004044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004038:	2b11      	cmp	r3, #17
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b12      	cmp	r3, #18
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0201 	and.w	r2, r3, #1
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d118      	bne.n	80040e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80040b8:	2201      	movs	r2, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	f003 0201 	and.w	r2, r3, #1
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x128>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b12      	cmp	r3, #18
 8004122:	d123      	bne.n	800416c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	08da      	lsrs	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3208      	adds	r2, #8
 800412c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	220f      	movs	r2, #15
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	691a      	ldr	r2, [r3, #16]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	08da      	lsrs	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3208      	adds	r2, #8
 8004166:	6939      	ldr	r1, [r7, #16]
 8004168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	2203      	movs	r2, #3
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80ac 	beq.w	8004306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ae:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <HAL_GPIO_Init+0x32c>)
 80041b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b2:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <HAL_GPIO_Init+0x32c>)
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6613      	str	r3, [r2, #96]	; 0x60
 80041ba:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_GPIO_Init+0x32c>)
 80041bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041c6:	4a59      	ldr	r2, [pc, #356]	; (800432c <HAL_GPIO_Init+0x330>)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	3302      	adds	r3, #2
 80041ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	220f      	movs	r2, #15
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041f0:	d025      	beq.n	800423e <HAL_GPIO_Init+0x242>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a4e      	ldr	r2, [pc, #312]	; (8004330 <HAL_GPIO_Init+0x334>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01f      	beq.n	800423a <HAL_GPIO_Init+0x23e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4d      	ldr	r2, [pc, #308]	; (8004334 <HAL_GPIO_Init+0x338>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d019      	beq.n	8004236 <HAL_GPIO_Init+0x23a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a4c      	ldr	r2, [pc, #304]	; (8004338 <HAL_GPIO_Init+0x33c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_GPIO_Init+0x236>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a4b      	ldr	r2, [pc, #300]	; (800433c <HAL_GPIO_Init+0x340>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00d      	beq.n	800422e <HAL_GPIO_Init+0x232>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a4a      	ldr	r2, [pc, #296]	; (8004340 <HAL_GPIO_Init+0x344>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <HAL_GPIO_Init+0x22e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a49      	ldr	r2, [pc, #292]	; (8004344 <HAL_GPIO_Init+0x348>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_GPIO_Init+0x22a>
 8004222:	2306      	movs	r3, #6
 8004224:	e00c      	b.n	8004240 <HAL_GPIO_Init+0x244>
 8004226:	2307      	movs	r3, #7
 8004228:	e00a      	b.n	8004240 <HAL_GPIO_Init+0x244>
 800422a:	2305      	movs	r3, #5
 800422c:	e008      	b.n	8004240 <HAL_GPIO_Init+0x244>
 800422e:	2304      	movs	r3, #4
 8004230:	e006      	b.n	8004240 <HAL_GPIO_Init+0x244>
 8004232:	2303      	movs	r3, #3
 8004234:	e004      	b.n	8004240 <HAL_GPIO_Init+0x244>
 8004236:	2302      	movs	r3, #2
 8004238:	e002      	b.n	8004240 <HAL_GPIO_Init+0x244>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <HAL_GPIO_Init+0x244>
 800423e:	2300      	movs	r3, #0
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	f002 0203 	and.w	r2, r2, #3
 8004246:	0092      	lsls	r2, r2, #2
 8004248:	4093      	lsls	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004250:	4936      	ldr	r1, [pc, #216]	; (800432c <HAL_GPIO_Init+0x330>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	089b      	lsrs	r3, r3, #2
 8004256:	3302      	adds	r3, #2
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800425e:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_GPIO_Init+0x34c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_GPIO_Init+0x34c>)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004288:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <HAL_GPIO_Init+0x34c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4013      	ands	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042ac:	4a26      	ldr	r2, [pc, #152]	; (8004348 <HAL_GPIO_Init+0x34c>)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_GPIO_Init+0x34c>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_GPIO_Init+0x34c>)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042dc:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_GPIO_Init+0x34c>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004300:	4a11      	ldr	r2, [pc, #68]	; (8004348 <HAL_GPIO_Init+0x34c>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fa22 f303 	lsr.w	r3, r2, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f47f ae78 	bne.w	800400c <HAL_GPIO_Init+0x10>
  }
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40021000 	.word	0x40021000
 800432c:	40010000 	.word	0x40010000
 8004330:	48000400 	.word	0x48000400
 8004334:	48000800 	.word	0x48000800
 8004338:	48000c00 	.word	0x48000c00
 800433c:	48001000 	.word	0x48001000
 8004340:	48001400 	.word	0x48001400
 8004344:	48001800 	.word	0x48001800
 8004348:	40010400 	.word	0x40010400

0800434c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800435c:	787b      	ldrb	r3, [r7, #1]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004368:	e002      	b.n	8004370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	041a      	lsls	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43d9      	mvns	r1, r3
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	400b      	ands	r3, r1
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd f9aa 	bl	8001728 <HAL_GPIO_EXTI_Callback>
  }
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40010400 	.word	0x40010400

080043e0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b08f      	sub	sp, #60	; 0x3c
 80043e4:	af0a      	add	r7, sp, #40	; 0x28
 80043e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e054      	b.n	800449c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	d106      	bne.n	8004412 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f008 fc5d 	bl	800cccc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2203      	movs	r2, #3
 8004416:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f005 fef5 	bl	800a220 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	687e      	ldr	r6, [r7, #4]
 800443e:	466d      	mov	r5, sp
 8004440:	f106 0410 	add.w	r4, r6, #16
 8004444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800444a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800444c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004450:	e885 0003 	stmia.w	r5, {r0, r1}
 8004454:	1d33      	adds	r3, r6, #4
 8004456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004458:	6838      	ldr	r0, [r7, #0]
 800445a:	f005 fe7e 	bl	800a15a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2101      	movs	r1, #1
 8004464:	4618      	mov	r0, r3
 8004466:	f005 feec 	bl	800a242 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	687e      	ldr	r6, [r7, #4]
 8004472:	466d      	mov	r5, sp
 8004474:	f106 0410 	add.w	r4, r6, #16
 8004478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800447c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800447e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004480:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004484:	e885 0003 	stmia.w	r5, {r0, r1}
 8004488:	1d33      	adds	r3, r6, #4
 800448a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800448c:	6838      	ldr	r0, [r7, #0]
 800448e:	f005 fffb 	bl	800a488 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044a4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	70fb      	strb	r3, [r7, #3]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70bb      	strb	r3, [r7, #2]
 80044ba:	4613      	mov	r3, r2
 80044bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_HCD_HC_Init+0x28>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e07f      	b.n	80045cc <HAL_HCD_HC_Init+0x128>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	333d      	adds	r3, #61	; 0x3d
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	3338      	adds	r3, #56	; 0x38
 80044f8:	787a      	ldrb	r2, [r7, #1]
 80044fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	3340      	adds	r3, #64	; 0x40
 800450c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800450e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	3339      	adds	r3, #57	; 0x39
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	333f      	adds	r3, #63	; 0x3f
 8004534:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	78bb      	ldrb	r3, [r7, #2]
 800453e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004542:	b2d8      	uxtb	r0, r3
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	333a      	adds	r3, #58	; 0x3a
 8004552:	4602      	mov	r2, r0
 8004554:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004556:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da0a      	bge.n	8004574 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	333b      	adds	r3, #59	; 0x3b
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e009      	b.n	8004588 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	333b      	adds	r3, #59	; 0x3b
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	333c      	adds	r3, #60	; 0x3c
 8004598:	f897 2020 	ldrb.w	r2, [r7, #32]
 800459c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	787c      	ldrb	r4, [r7, #1]
 80045a4:	78ba      	ldrb	r2, [r7, #2]
 80045a6:	78f9      	ldrb	r1, [r7, #3]
 80045a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045aa:	9302      	str	r3, [sp, #8]
 80045ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	4623      	mov	r3, r4
 80045ba:	f006 f8a9 	bl	800a710 <USB_HC_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd90      	pop	{r4, r7, pc}

080045d4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_HCD_HC_Halt+0x1e>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e00f      	b.n	8004612 <HAL_HCD_HC_Halt+0x3e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f006 fa87 	bl	800ab16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4603      	mov	r3, r0
 800462c:	70fb      	strb	r3, [r7, #3]
 800462e:	460b      	mov	r3, r1
 8004630:	70bb      	strb	r3, [r7, #2]
 8004632:	4613      	mov	r3, r2
 8004634:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	440b      	add	r3, r1
 8004644:	333b      	adds	r3, #59	; 0x3b
 8004646:	78ba      	ldrb	r2, [r7, #2]
 8004648:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	440b      	add	r3, r1
 8004658:	333f      	adds	r3, #63	; 0x3f
 800465a:	787a      	ldrb	r2, [r7, #1]
 800465c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800465e:	7c3b      	ldrb	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d114      	bne.n	800468e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	3342      	adds	r3, #66	; 0x42
 8004674:	2203      	movs	r2, #3
 8004676:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	440b      	add	r3, r1
 8004686:	333d      	adds	r3, #61	; 0x3d
 8004688:	7f3a      	ldrb	r2, [r7, #28]
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e009      	b.n	80046a2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	440b      	add	r3, r1
 800469c:	3342      	adds	r3, #66	; 0x42
 800469e:	2202      	movs	r2, #2
 80046a0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80046a2:	787b      	ldrb	r3, [r7, #1]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	f200 80d6 	bhi.w	8004856 <HAL_HCD_HC_SubmitRequest+0x23a>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	08004841 	.word	0x08004841
 80046b8:	0800472d 	.word	0x0800472d
 80046bc:	080047b7 	.word	0x080047b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80046c0:	7c3b      	ldrb	r3, [r7, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 80c9 	bne.w	800485a <HAL_HCD_HC_SubmitRequest+0x23e>
 80046c8:	78bb      	ldrb	r3, [r7, #2]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 80c5 	bne.w	800485a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80046d0:	8b3b      	ldrh	r3, [r7, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	3351      	adds	r3, #81	; 0x51
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	440b      	add	r3, r1
 80046f8:	3351      	adds	r3, #81	; 0x51
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	440b      	add	r3, r1
 800470e:	3342      	adds	r3, #66	; 0x42
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004714:	e0a1      	b.n	800485a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	440b      	add	r3, r1
 8004724:	3342      	adds	r3, #66	; 0x42
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]
      break;
 800472a:	e096      	b.n	800485a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800472c:	78bb      	ldrb	r3, [r7, #2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d120      	bne.n	8004774 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	3351      	adds	r3, #81	; 0x51
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	440b      	add	r3, r1
 8004756:	3342      	adds	r3, #66	; 0x42
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800475c:	e07e      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	440b      	add	r3, r1
 800476c:	3342      	adds	r3, #66	; 0x42
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
      break;
 8004772:	e073      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	440b      	add	r3, r1
 8004782:	3350      	adds	r3, #80	; 0x50
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	440b      	add	r3, r1
 8004798:	3342      	adds	r3, #66	; 0x42
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
      break;
 800479e:	e05d      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	440b      	add	r3, r1
 80047ae:	3342      	adds	r3, #66	; 0x42
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
      break;
 80047b4:	e052      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80047b6:	78bb      	ldrb	r3, [r7, #2]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d120      	bne.n	80047fe <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	440b      	add	r3, r1
 80047ca:	3351      	adds	r3, #81	; 0x51
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	6879      	ldr	r1, [r7, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	440b      	add	r3, r1
 80047e0:	3342      	adds	r3, #66	; 0x42
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047e6:	e039      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e8:	78fa      	ldrb	r2, [r7, #3]
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	440b      	add	r3, r1
 80047f6:	3342      	adds	r3, #66	; 0x42
 80047f8:	2202      	movs	r2, #2
 80047fa:	701a      	strb	r2, [r3, #0]
      break;
 80047fc:	e02e      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047fe:	78fa      	ldrb	r2, [r7, #3]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	440b      	add	r3, r1
 800480c:	3350      	adds	r3, #80	; 0x50
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	440b      	add	r3, r1
 8004822:	3342      	adds	r3, #66	; 0x42
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
      break;
 8004828:	e018      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	3342      	adds	r3, #66	; 0x42
 800483a:	2202      	movs	r2, #2
 800483c:	701a      	strb	r2, [r3, #0]
      break;
 800483e:	e00d      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	440b      	add	r3, r1
 800484e:	3342      	adds	r3, #66	; 0x42
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
      break;
 8004854:	e002      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800485a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	440b      	add	r3, r1
 800486a:	3344      	adds	r3, #68	; 0x44
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	8b39      	ldrh	r1, [r7, #24]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4403      	add	r3, r0
 8004880:	3348      	adds	r3, #72	; 0x48
 8004882:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	335c      	adds	r3, #92	; 0x5c
 8004894:	2200      	movs	r2, #0
 8004896:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	440b      	add	r3, r1
 80048a6:	334c      	adds	r3, #76	; 0x4c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3339      	adds	r3, #57	; 0x39
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	440b      	add	r3, r1
 80048ce:	335d      	adds	r3, #93	; 0x5d
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	3338      	adds	r3, #56	; 0x38
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	f006 f803 	bl	800a8f4 <USB_HC_StartXfer>
 80048ee:	4603      	mov	r3, r0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f005 fd77 	bl	800a402 <USB_GetMode>
 8004914:	4603      	mov	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 80ef 	bne.w	8004afa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f005 fd5b 	bl	800a3dc <USB_ReadInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80e5 	beq.w	8004af8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f005 fd52 	bl	800a3dc <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004942:	d104      	bne.n	800494e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800494c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f005 fd42 	bl	800a3dc <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d104      	bne.n	800496e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800496c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f005 fd32 	bl	800a3dc <USB_ReadInterrupts>
 8004978:	4603      	mov	r3, r0
 800497a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800497e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004982:	d104      	bne.n	800498e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800498c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f005 fd22 	bl	800a3dc <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d103      	bne.n	80049aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2202      	movs	r2, #2
 80049a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f005 fd14 	bl	800a3dc <USB_ReadInterrupts>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049be:	d115      	bne.n	80049ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80049c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f008 f9f8 	bl	800cdd0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f005 fdcc 	bl	800a584 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 fcf3 	bl	800a3dc <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a00:	d102      	bne.n	8004a08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 f922 	bl	8005c4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f005 fce5 	bl	800a3dc <USB_ReadInterrupts>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d106      	bne.n	8004a2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f008 f9bb 	bl	800cd98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2208      	movs	r2, #8
 8004a28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f005 fcd4 	bl	800a3dc <USB_ReadInterrupts>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a3e:	d138      	bne.n	8004ab2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f006 f855 	bl	800aaf4 <USB_HC_ReadInterrupt>
 8004a4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e025      	b.n	8004a9e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d018      	beq.n	8004a98 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	d106      	bne.n	8004a8c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8cf 	bl	8004c28 <HCD_HC_IN_IRQHandler>
 8004a8a:	e005      	b.n	8004a98 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fcd9 	bl	800544a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3d4      	bcc.n	8004a52 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f005 fc90 	bl	800a3dc <USB_ReadInterrupts>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d101      	bne.n	8004aca <HAL_HCD_IRQHandler+0x1d2>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_HCD_IRQHandler+0x1d4>
 8004aca:	2300      	movs	r3, #0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d014      	beq.n	8004afa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0210 	bic.w	r2, r2, #16
 8004ade:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f001 f807 	bl	8005af4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699a      	ldr	r2, [r3, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0210 	orr.w	r2, r2, #16
 8004af4:	619a      	str	r2, [r3, #24]
 8004af6:	e000      	b.n	8004afa <HAL_HCD_IRQHandler+0x202>
      return;
 8004af8:	bf00      	nop
    }
  }
}
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_HCD_Start+0x16>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e013      	b.n	8004b3e <HAL_HCD_Start+0x3e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f005 fb6b 	bl	800a1fe <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f005 fd8c 	bl	800a64c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_HCD_Stop+0x16>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e00d      	b.n	8004b78 <HAL_HCD_Stop+0x32>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f006 f8d3 	bl	800ad14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f005 fd33 	bl	800a5f8 <USB_ResetPort>
 8004b92:	4603      	mov	r3, r0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	335c      	adds	r3, #92	; 0x5c
 8004bb8:	781b      	ldrb	r3, [r3, #0]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	440b      	add	r3, r1
 8004be0:	334c      	adds	r3, #76	; 0x4c
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f005 fd75 	bl	800a6ec <USB_GetCurrentFrame>
 8004c02:	4603      	mov	r3, r0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f005 fd50 	bl	800a6be <USB_GetHostSpeed>
 8004c1e:	4603      	mov	r3, r0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d119      	bne.n	8004c8c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c64:	461a      	mov	r2, r3
 8004c66:	2304      	movs	r3, #4
 8004c68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	0151      	lsls	r1, r2, #5
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	440a      	add	r2, r1
 8004c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	60d3      	str	r3, [r2, #12]
 8004c8a:	e0ce      	b.n	8004e2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d12c      	bne.n	8004cfe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	335d      	adds	r3, #93	; 0x5d
 8004cc8:	2207      	movs	r2, #7
 8004cca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f005 ff0d 	bl	800ab16 <USB_HC_Halt>
 8004cfc:	e095      	b.n	8004e2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d109      	bne.n	8004d28 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	2320      	movs	r3, #32
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	e080      	b.n	8004e2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d134      	bne.n	8004da8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d58:	f043 0302 	orr.w	r3, r3, #2
 8004d5c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	440b      	add	r3, r1
 8004d6c:	335d      	adds	r3, #93	; 0x5d
 8004d6e:	2205      	movs	r2, #5
 8004d70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2310      	movs	r3, #16
 8004d82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	2308      	movs	r3, #8
 8004d94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f005 feb8 	bl	800ab16 <USB_HC_Halt>
 8004da6:	e040      	b.n	8004e2a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d134      	bne.n	8004e2a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f005 fe93 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2310      	movs	r3, #16
 8004e00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	335d      	adds	r3, #93	; 0x5d
 8004e12:	2208      	movs	r2, #8
 8004e14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e28:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e40:	d122      	bne.n	8004e88 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f005 fe52 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e84:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e86:	e2dc      	b.n	8005442 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	f040 80dd 	bne.w	800505a <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	335d      	adds	r3, #93	; 0x5d
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3358      	adds	r3, #88	; 0x58
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	333f      	adds	r3, #63	; 0x3f
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	333f      	adds	r3, #63	; 0x3f
 8004f00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d121      	bne.n	8004f4a <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fdf0 	bl	800ab16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	2310      	movs	r3, #16
 8004f46:	6093      	str	r3, [r2, #8]
 8004f48:	e070      	b.n	800502c <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	333f      	adds	r3, #63	; 0x3f
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d12a      	bne.n	8004fb6 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	335c      	adds	r3, #92	; 0x5c
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	b2d8      	uxtb	r0, r3
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	335c      	adds	r3, #92	; 0x5c
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	4601      	mov	r1, r0
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f007 ff1c 	bl	800cdec <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fb4:	e03a      	b.n	800502c <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	333f      	adds	r3, #63	; 0x3f
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d12f      	bne.n	800502c <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	440b      	add	r3, r1
 8004fda:	335c      	adds	r3, #92	; 0x5c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	440b      	add	r3, r1
 8004fee:	3350      	adds	r3, #80	; 0x50
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	f083 0301 	eor.w	r3, r3, #1
 8004ff6:	b2d8      	uxtb	r0, r3
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	3350      	adds	r3, #80	; 0x50
 8005008:	4602      	mov	r2, r0
 800500a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	b2d8      	uxtb	r0, r3
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	335c      	adds	r3, #92	; 0x5c
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	4601      	mov	r1, r0
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f007 fee0 	bl	800cdec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	3350      	adds	r3, #80	; 0x50
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f083 0301 	eor.w	r3, r3, #1
 8005042:	b2d8      	uxtb	r0, r3
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	3350      	adds	r3, #80	; 0x50
 8005054:	4602      	mov	r2, r0
 8005056:	701a      	strb	r2, [r3, #0]
}
 8005058:	e1f3      	b.n	8005442 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	f040 811a 	bne.w	80052a6 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	440a      	add	r2, r1
 8005088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800508c:	f023 0302 	bic.w	r3, r3, #2
 8005090:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	440b      	add	r3, r1
 80050a0:	335d      	adds	r3, #93	; 0x5d
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d10a      	bne.n	80050be <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	440b      	add	r3, r1
 80050b6:	335c      	adds	r3, #92	; 0x5c
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e0d9      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	440b      	add	r3, r1
 80050cc:	335d      	adds	r3, #93	; 0x5d
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d10a      	bne.n	80050ea <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	2205      	movs	r2, #5
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e0c3      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	335d      	adds	r3, #93	; 0x5d
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d00a      	beq.n	8005116 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	335d      	adds	r3, #93	; 0x5d
 8005110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005112:	2b08      	cmp	r3, #8
 8005114:	d156      	bne.n	80051c4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	440b      	add	r3, r1
 8005124:	3358      	adds	r3, #88	; 0x58
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4403      	add	r3, r0
 8005138:	3358      	adds	r3, #88	; 0x58
 800513a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3358      	adds	r3, #88	; 0x58
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d914      	bls.n	800517c <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	440b      	add	r3, r1
 8005160:	3358      	adds	r3, #88	; 0x58
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	440b      	add	r3, r1
 8005174:	335c      	adds	r3, #92	; 0x5c
 8005176:	2204      	movs	r2, #4
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e009      	b.n	8005190 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	440b      	add	r3, r1
 800518a:	335c      	adds	r3, #92	; 0x5c
 800518c:	2202      	movs	r2, #2
 800518e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051bc:	461a      	mov	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e056      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	440b      	add	r3, r1
 80051d2:	335d      	adds	r3, #93	; 0x5d
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d123      	bne.n	8005222 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	440b      	add	r3, r1
 80051e8:	335c      	adds	r3, #92	; 0x5c
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005204:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	e027      	b.n	8005272 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	440b      	add	r3, r1
 8005230:	335d      	adds	r3, #93	; 0x5d
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b07      	cmp	r3, #7
 8005236:	d11c      	bne.n	8005272 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	440b      	add	r3, r1
 8005246:	3358      	adds	r3, #88	; 0x58
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4403      	add	r3, r0
 800525a:	3358      	adds	r3, #88	; 0x58
 800525c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	00db      	lsls	r3, r3, #3
 800526a:	440b      	add	r3, r1
 800526c:	335c      	adds	r3, #92	; 0x5c
 800526e:	2204      	movs	r2, #4
 8005270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	461a      	mov	r2, r3
 8005280:	2302      	movs	r3, #2
 8005282:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	b2d8      	uxtb	r0, r3
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	335c      	adds	r3, #92	; 0x5c
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4601      	mov	r1, r0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f007 fda4 	bl	800cdec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80052a4:	e0cd      	b.n	8005442 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b80      	cmp	r3, #128	; 0x80
 80052ba:	d13e      	bne.n	800533a <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	3358      	adds	r3, #88	; 0x58
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4403      	add	r3, r0
 80052fe:	3358      	adds	r3, #88	; 0x58
 8005300:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	335d      	adds	r3, #93	; 0x5d
 8005312:	2206      	movs	r2, #6
 8005314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4611      	mov	r1, r2
 8005320:	4618      	mov	r0, r3
 8005322:	f005 fbf8 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005332:	461a      	mov	r2, r3
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	6093      	str	r3, [r2, #8]
}
 8005338:	e083      	b.n	8005442 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d178      	bne.n	8005442 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	440b      	add	r3, r1
 800535e:	333f      	adds	r3, #63	; 0x3f
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d122      	bne.n	80053ac <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	440b      	add	r3, r1
 8005374:	3358      	adds	r3, #88	; 0x58
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	440a      	add	r2, r1
 8005390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	4611      	mov	r1, r2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f005 fbb6 	bl	800ab16 <USB_HC_Halt>
 80053aa:	e041      	b.n	8005430 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	333f      	adds	r3, #63	; 0x3f
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	440b      	add	r3, r1
 80053d0:	333f      	adds	r3, #63	; 0x3f
 80053d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d12b      	bne.n	8005430 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	440b      	add	r3, r1
 80053e6:	3358      	adds	r3, #88	; 0x58
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	335d      	adds	r3, #93	; 0x5d
 80053fc:	2203      	movs	r2, #3
 80053fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	440a      	add	r2, r1
 8005416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541a:	f043 0302 	orr.w	r3, r3, #2
 800541e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f005 fb73 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	461a      	mov	r2, r3
 800543e:	2310      	movs	r3, #16
 8005440:	6093      	str	r3, [r2, #8]
}
 8005442:	bf00      	nop
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b04      	cmp	r3, #4
 8005478:	d119      	bne.n	80054ae <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	2304      	movs	r3, #4
 800548a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4413      	add	r3, r2
 8005494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80054ac:	e31e      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d141      	bne.n	8005548 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d0:	461a      	mov	r2, r3
 80054d2:	2320      	movs	r3, #32
 80054d4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	333d      	adds	r3, #61	; 0x3d
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 82ff 	bne.w	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4613      	mov	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	440b      	add	r3, r1
 80054fc:	333d      	adds	r3, #61	; 0x3d
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	440b      	add	r3, r1
 8005510:	335c      	adds	r3, #92	; 0x5c
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	440a      	add	r2, r1
 800552c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	4611      	mov	r1, r2
 8005540:	4618      	mov	r0, r3
 8005542:	f005 fae8 	bl	800ab16 <USB_HC_Halt>
}
 8005546:	e2d1      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d13f      	bne.n	80055de <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	440b      	add	r3, r1
 800556c:	335d      	adds	r3, #93	; 0x5d
 800556e:	2204      	movs	r2, #4
 8005570:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	00db      	lsls	r3, r3, #3
 800557e:	440b      	add	r3, r1
 8005580:	333d      	adds	r3, #61	; 0x3d
 8005582:	2201      	movs	r2, #1
 8005584:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	440b      	add	r3, r1
 8005594:	3358      	adds	r3, #88	; 0x58
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b4:	f043 0302 	orr.w	r3, r3, #2
 80055b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f005 faa6 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d6:	461a      	mov	r2, r3
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	6093      	str	r3, [r2, #8]
}
 80055dc:	e286      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d122      	bne.n	800563c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	440a      	add	r2, r1
 800560c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	4611      	mov	r1, r2
 8005620:	4618      	mov	r0, r3
 8005622:	f005 fa78 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005638:	6093      	str	r3, [r2, #8]
}
 800563a:	e257      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d135      	bne.n	80056be <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	3358      	adds	r3, #88	; 0x58
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4413      	add	r3, r2
 800566e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	440a      	add	r2, r1
 800567c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005680:	f043 0302 	orr.w	r3, r3, #2
 8005684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f005 fa40 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4413      	add	r3, r2
 800569e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a2:	461a      	mov	r2, r3
 80056a4:	2301      	movs	r3, #1
 80056a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	440b      	add	r3, r1
 80056b6:	335d      	adds	r3, #93	; 0x5d
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
}
 80056bc:	e216      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d12b      	bne.n	800572c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	461a      	mov	r2, r3
 80056e2:	2308      	movs	r3, #8
 80056e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f005 fa00 	bl	800ab16 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	440b      	add	r3, r1
 8005724:	335d      	adds	r3, #93	; 0x5d
 8005726:	2205      	movs	r2, #5
 8005728:	701a      	strb	r2, [r3, #0]
}
 800572a:	e1df      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b10      	cmp	r3, #16
 8005740:	d135      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	3358      	adds	r3, #88	; 0x58
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	440b      	add	r3, r1
 8005764:	335d      	adds	r3, #93	; 0x5d
 8005766:	2203      	movs	r2, #3
 8005768:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005784:	f043 0302 	orr.w	r3, r3, #2
 8005788:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	4611      	mov	r1, r2
 8005794:	4618      	mov	r0, r3
 8005796:	f005 f9be 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	461a      	mov	r2, r3
 80057a8:	2310      	movs	r3, #16
 80057aa:	6093      	str	r3, [r2, #8]
}
 80057ac:	e19e      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d12b      	bne.n	800581c <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057de:	f043 0302 	orr.w	r3, r3, #2
 80057e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	4611      	mov	r1, r2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f005 f991 	bl	800ab16 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	335d      	adds	r3, #93	; 0x5d
 8005804:	2206      	movs	r2, #6
 8005806:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	461a      	mov	r2, r3
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	6093      	str	r3, [r2, #8]
}
 800581a:	e167      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d135      	bne.n	80058a0 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	440a      	add	r2, r1
 800584a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f005 f959 	bl	800ab16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	2310      	movs	r3, #16
 8005874:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	461a      	mov	r2, r3
 8005884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005888:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	335d      	adds	r3, #93	; 0x5d
 800589a:	2208      	movs	r2, #8
 800589c:	701a      	strb	r2, [r3, #0]
}
 800589e:	e125      	b.n	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	f040 811a 	bne.w	8005aec <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d2:	f023 0302 	bic.w	r3, r3, #2
 80058d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	440b      	add	r3, r1
 80058e6:	335d      	adds	r3, #93	; 0x5d
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d137      	bne.n	800595e <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	335c      	adds	r3, #92	; 0x5c
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	333f      	adds	r3, #63	; 0x3f
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d00b      	beq.n	8005930 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	333f      	adds	r3, #63	; 0x3f
 8005928:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	f040 80c5 	bne.w	8005aba <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	440b      	add	r3, r1
 800593e:	3351      	adds	r3, #81	; 0x51
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f083 0301 	eor.w	r3, r3, #1
 8005946:	b2d8      	uxtb	r0, r3
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	440b      	add	r3, r1
 8005956:	3351      	adds	r3, #81	; 0x51
 8005958:	4602      	mov	r2, r0
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e0ad      	b.n	8005aba <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	440b      	add	r3, r1
 800596c:	335d      	adds	r3, #93	; 0x5d
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d10a      	bne.n	800598a <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	440b      	add	r3, r1
 8005982:	335c      	adds	r3, #92	; 0x5c
 8005984:	2202      	movs	r2, #2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	e097      	b.n	8005aba <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	440b      	add	r3, r1
 8005998:	335d      	adds	r3, #93	; 0x5d
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b04      	cmp	r3, #4
 800599e:	d10a      	bne.n	80059b6 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	335c      	adds	r3, #92	; 0x5c
 80059b0:	2202      	movs	r2, #2
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	e081      	b.n	8005aba <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	440b      	add	r3, r1
 80059c4:	335d      	adds	r3, #93	; 0x5d
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d10a      	bne.n	80059e2 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	440b      	add	r3, r1
 80059da:	335c      	adds	r3, #92	; 0x5c
 80059dc:	2205      	movs	r2, #5
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	e06b      	b.n	8005aba <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	440b      	add	r3, r1
 80059f0:	335d      	adds	r3, #93	; 0x5d
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b06      	cmp	r3, #6
 80059f6:	d00a      	beq.n	8005a0e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	440b      	add	r3, r1
 8005a06:	335d      	adds	r3, #93	; 0x5d
 8005a08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d155      	bne.n	8005aba <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3358      	adds	r3, #88	; 0x58
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4403      	add	r3, r0
 8005a30:	3358      	adds	r3, #88	; 0x58
 8005a32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	440b      	add	r3, r1
 8005a42:	3358      	adds	r3, #88	; 0x58
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d914      	bls.n	8005a74 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	3358      	adds	r3, #88	; 0x58
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	335c      	adds	r3, #92	; 0x5c
 8005a6e:	2204      	movs	r2, #4
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e009      	b.n	8005a88 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	335c      	adds	r3, #92	; 0x5c
 8005a84:	2202      	movs	r2, #2
 8005a86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aa6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2302      	movs	r3, #2
 8005aca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	b2d8      	uxtb	r0, r3
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	440b      	add	r3, r1
 8005ade:	335c      	adds	r3, #92	; 0x5c
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	4601      	mov	r1, r0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f007 f980 	bl	800cdec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005aec:	bf00      	nop
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	0c5b      	lsrs	r3, r3, #17
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b28:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d003      	beq.n	8005b38 <HCD_RXQLVL_IRQHandler+0x44>
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	f000 8082 	beq.w	8005c3a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005b36:	e083      	b.n	8005c40 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d07f      	beq.n	8005c3e <HCD_RXQLVL_IRQHandler+0x14a>
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3344      	adds	r3, #68	; 0x44
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d074      	beq.n	8005c3e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	440b      	add	r3, r1
 8005b66:	3344      	adds	r3, #68	; 0x44
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	4619      	mov	r1, r3
 8005b70:	f004 fc0b 	bl	800a38a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	440b      	add	r3, r1
 8005b82:	3344      	adds	r3, #68	; 0x44
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	18d1      	adds	r1, r2, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4403      	add	r3, r0
 8005b98:	3344      	adds	r3, #68	; 0x44
 8005b9a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	440b      	add	r3, r1
 8005baa:	334c      	adds	r3, #76	; 0x4c
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	18d1      	adds	r1, r2, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4403      	add	r3, r0
 8005bc0:	334c      	adds	r3, #76	; 0x4c
 8005bc2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HCD_RXQLVL_IRQHandler+0x154>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d031      	beq.n	8005c3e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	440b      	add	r3, r1
 8005c1a:	3350      	adds	r3, #80	; 0x50
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f083 0301 	eor.w	r3, r3, #1
 8005c22:	b2d8      	uxtb	r0, r3
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	440b      	add	r3, r1
 8005c32:	3350      	adds	r3, #80	; 0x50
 8005c34:	4602      	mov	r2, r0
 8005c36:	701a      	strb	r2, [r3, #0]
      break;
 8005c38:	e001      	b.n	8005c3e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005c3e:	bf00      	nop
  }
}
 8005c40:	bf00      	nop
 8005c42:	3728      	adds	r7, #40	; 0x28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	1ff80000 	.word	0x1ff80000

08005c4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d10b      	bne.n	8005c9c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d102      	bne.n	8005c94 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f007 f890 	bl	800cdb4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d132      	bne.n	8005d0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f043 0308 	orr.w	r3, r3, #8
 8005cac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d126      	bne.n	8005d06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d113      	bne.n	8005ce8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005cc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cca:	d106      	bne.n	8005cda <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f004 fc56 	bl	800a584 <USB_InitFSLSPClkSel>
 8005cd8:	e011      	b.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f004 fc4f 	bl	800a584 <USB_InitFSLSPClkSel>
 8005ce6:	e00a      	b.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d106      	bne.n	8005cfe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005cfc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f007 f882 	bl	800ce08 <HAL_HCD_PortEnabled_Callback>
 8005d04:	e002      	b.n	8005d0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f007 f88c 	bl	800ce24 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d103      	bne.n	8005d1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 0320 	orr.w	r3, r3, #32
 8005d1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d24:	461a      	mov	r2, r3
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e081      	b.n	8005e48 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d106      	bne.n	8005d5e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7fb faf9 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	; 0x24
 8005d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	e006      	b.n	8005dba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005db8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d104      	bne.n	8005dcc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dde:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691a      	ldr	r2, [r3, #16]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	ea42 0103 	orr.w	r1, r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	021a      	lsls	r2, r3, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69d9      	ldr	r1, [r3, #28]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1a      	ldr	r2, [r3, #32]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0201 	orr.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d138      	bne.n	8005ed8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e032      	b.n	8005eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2224      	movs	r2, #36	; 0x24
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0201 	bic.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ea2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d139      	bne.n	8005f70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e033      	b.n	8005f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2224      	movs	r2, #36	; 0x24
 8005f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0af      	b.n	80060f2 <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fb fa4e 	bl	8001448 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e00a      	b.n	8005fe0 <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d9f1      	bls.n	8005fca <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0204 	orr.w	r2, r2, #4
 8005ff4:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	4b3f      	ldr	r3, [pc, #252]	; (80060fc <HAL_LCD_Init+0x17c>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	6851      	ldr	r1, [r2, #4]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6892      	ldr	r2, [r2, #8]
 8006008:	4311      	orrs	r1, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006014:	4311      	orrs	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	69d2      	ldr	r2, [r2, #28]
 800601a:	4311      	orrs	r1, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6a12      	ldr	r2, [r2, #32]
 8006020:	4311      	orrs	r1, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6992      	ldr	r2, [r2, #24]
 8006026:	4311      	orrs	r1, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	430b      	orrs	r3, r1
 8006034:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8f1 	bl	800621e <LCD_WaitForSynchro>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_LCD_Init+0xca>
  {
    return status;
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	e053      	b.n	80060f2 <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f023 01fe 	bic.w	r1, r3, #254	; 0xfe
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006082:	f7fc f9c9 	bl	8002418 <HAL_GetTick>
 8006086:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8006088:	e00c      	b.n	80060a4 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800608a:	f7fc f9c5 	bl	8002418 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006098:	d904      	bls.n	80060a4 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2208      	movs	r2, #8
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e026      	b.n	80060f2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d1eb      	bne.n	800608a <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80060b2:	f7fc f9b1 	bl	8002418 <HAL_GetTick>
 80060b6:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80060b8:	e00c      	b.n	80060d4 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80060ba:	f7fc f9ad 	bl	8002418 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060c8:	d904      	bls.n	80060d4 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2210      	movs	r2, #16
 80060ce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e00e      	b.n	80060f2 <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d1eb      	bne.n	80060ba <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return status;
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	fc00000e 	.word	0xfc00000e

08006100 <HAL_LCD_Clear>:
  * @brief Clear the LCD RAM registers.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	74fb      	strb	r3, [r7, #19]
  HAL_LCD_StateTypeDef state = hlcd->State;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006112:	74bb      	strb	r3, [r7, #18]
  
  if ((state == HAL_LCD_STATE_READY) || (state == HAL_LCD_STATE_BUSY))
 8006114:	7cbb      	ldrb	r3, [r7, #18]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d002      	beq.n	8006120 <HAL_LCD_Clear+0x20>
 800611a:	7cbb      	ldrb	r3, [r7, #18]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d140      	bne.n	80061a2 <HAL_LCD_Clear+0xa2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_LCD_Clear+0x2e>
 800612a:	2302      	movs	r3, #2
 800612c:	e03a      	b.n	80061a4 <HAL_LCD_Clear+0xa4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hlcd->State = HAL_LCD_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get timeout */
    tickstart = HAL_GetTick();
 800613e:	f7fc f96b 	bl	8002418 <HAL_GetTick>
 8006142:	60f8      	str	r0, [r7, #12]

    /*!< Wait Until the LCD is ready */
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006144:	e010      	b.n	8006168 <HAL_LCD_Clear+0x68>
    {
      if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8006146:	f7fc f967 	bl	8002418 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006154:	d908      	bls.n	8006168 <HAL_LCD_Clear+0x68>
      {
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e01d      	b.n	80061a4 <HAL_LCD_Clear+0xa4>
    while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b04      	cmp	r3, #4
 8006174:	d0e7      	beq.n	8006146 <HAL_LCD_Clear+0x46>
      }
    }
    /* Clear the LCD_RAM registers */
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	e00a      	b.n	8006192 <HAL_LCD_Clear+0x92>
    {
      hlcd->Instance->RAM[counter] = 0;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3304      	adds	r3, #4
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	2200      	movs	r2, #0
 800618a:	605a      	str	r2, [r3, #4]
    for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	3301      	adds	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d9f1      	bls.n	800617c <HAL_LCD_Clear+0x7c>
    }

    /* Update the LCD display */
    status = HAL_LCD_UpdateDisplayRequest(hlcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f807 	bl	80061ac <HAL_LCD_UpdateDisplayRequest>
 800619e:	4603      	mov	r3, r0
 80061a0:	74fb      	strb	r3, [r7, #19]
  }
  return status;
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2208      	movs	r2, #8
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0204 	orr.w	r2, r2, #4
 80061ca:	609a      	str	r2, [r3, #8]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80061cc:	f7fc f924 	bl	8002418 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD display is done */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80061d2:	e010      	b.n	80061f6 <HAL_LCD_UpdateDisplayRequest+0x4a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80061d4:	f7fc f920 	bl	8002418 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e2:	d908      	bls.n	80061f6 <HAL_LCD_UpdateDisplayRequest+0x4a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2204      	movs	r2, #4
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e00f      	b.n	8006216 <HAL_LCD_UpdateDisplayRequest+0x6a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b08      	cmp	r3, #8
 8006202:	d1e7      	bne.n	80061d4 <HAL_LCD_UpdateDisplayRequest+0x28>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8006226:	f7fc f8f7 	bl	8002418 <HAL_GetTick>
 800622a:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800622c:	e00c      	b.n	8006248 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800622e:	f7fc f8f3 	bl	8002418 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623c:	d904      	bls.n	8006248 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e007      	b.n	8006258 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b20      	cmp	r3, #32
 8006254:	d1eb      	bne.n	800622e <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <HAL_PWREx_GetVoltageRange+0x18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40007000 	.word	0x40007000

0800627c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628a:	d130      	bne.n	80062ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800628c:	4b23      	ldr	r3, [pc, #140]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006298:	d038      	beq.n	800630c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800629a:	4b20      	ldr	r3, [pc, #128]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2232      	movs	r2, #50	; 0x32
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	0c9b      	lsrs	r3, r3, #18
 80062bc:	3301      	adds	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062c0:	e002      	b.n	80062c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062c8:	4b14      	ldr	r3, [pc, #80]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d102      	bne.n	80062dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1f2      	bne.n	80062c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e8:	d110      	bne.n	800630c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e00f      	b.n	800630e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ee:	4b0b      	ldr	r3, [pc, #44]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fa:	d007      	beq.n	800630c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006304:	4a05      	ldr	r2, [pc, #20]	; (800631c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800630a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40007000 	.word	0x40007000
 8006320:	20000008 	.word	0x20000008
 8006324:	431bde83 	.word	0x431bde83

08006328 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800632c:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_PWREx_EnableVddUSB+0x1c>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	4a04      	ldr	r2, [pc, #16]	; (8006344 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006336:	6053      	str	r3, [r2, #4]
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40007000 	.word	0x40007000

08006348 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af02      	add	r7, sp, #8
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006350:	f7fc f862 	bl	8002418 <HAL_GetTick>
 8006354:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e063      	b.n	8006428 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006366:	b2db      	uxtb	r3, r3
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fb fa35 	bl	80017e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800637a:	f241 3188 	movw	r1, #5000	; 0x1388
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f858 	bl	8006434 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	3b01      	subs	r3, #1
 8006394:	021a      	lsls	r2, r3, #8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	2120      	movs	r1, #32
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f850 	bl	8006450 <QSPI_WaitFlagStateUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d131      	bne.n	800641e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6852      	ldr	r2, [r2, #4]
 80063cc:	0611      	lsls	r1, r2, #24
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68d2      	ldr	r2, [r2, #12]
 80063d2:	4311      	orrs	r1, r2
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	430b      	orrs	r3, r1
 80063da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4b13      	ldr	r3, [pc, #76]	; (8006430 <HAL_QSPI_Init+0xe8>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6912      	ldr	r2, [r2, #16]
 80063ea:	0411      	lsls	r1, r2, #16
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6952      	ldr	r2, [r2, #20]
 80063f0:	4311      	orrs	r1, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6992      	ldr	r2, [r2, #24]
 80063f6:	4311      	orrs	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006426:	7afb      	ldrb	r3, [r7, #11]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	ffe0f8fe 	.word	0xffe0f8fe

08006434 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006460:	e01a      	b.n	8006498 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d016      	beq.n	8006498 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fb ffd5 	bl	8002418 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10b      	bne.n	8006498 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2204      	movs	r2, #4
 8006484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	f043 0201 	orr.w	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e00e      	b.n	80064b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d1d6      	bne.n	8006462 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e3d4      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d2:	4ba1      	ldr	r3, [pc, #644]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 030c 	and.w	r3, r3, #12
 80064da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064dc:	4b9e      	ldr	r3, [pc, #632]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80e4 	beq.w	80066bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <HAL_RCC_OscConfig+0x4a>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	f040 808b 	bne.w	8006618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b01      	cmp	r3, #1
 8006506:	f040 8087 	bne.w	8006618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800650a:	4b93      	ldr	r3, [pc, #588]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <HAL_RCC_OscConfig+0x62>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e3ac      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	4b8c      	ldr	r3, [pc, #560]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <HAL_RCC_OscConfig+0x7c>
 8006532:	4b89      	ldr	r3, [pc, #548]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800653a:	e005      	b.n	8006548 <HAL_RCC_OscConfig+0x88>
 800653c:	4b86      	ldr	r3, [pc, #536]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800653e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006542:	091b      	lsrs	r3, r3, #4
 8006544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006548:	4293      	cmp	r3, r2
 800654a:	d223      	bcs.n	8006594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fd3f 	bl	8006fd4 <RCC_SetFlashLatencyFromMSIRange>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e38d      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006560:	4b7d      	ldr	r3, [pc, #500]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a7c      	ldr	r2, [pc, #496]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006566:	f043 0308 	orr.w	r3, r3, #8
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	4b7a      	ldr	r3, [pc, #488]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	4977      	ldr	r1, [pc, #476]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800657a:	4313      	orrs	r3, r2
 800657c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800657e:	4b76      	ldr	r3, [pc, #472]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	021b      	lsls	r3, r3, #8
 800658c:	4972      	ldr	r1, [pc, #456]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800658e:	4313      	orrs	r3, r2
 8006590:	604b      	str	r3, [r1, #4]
 8006592:	e025      	b.n	80065e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006594:	4b70      	ldr	r3, [pc, #448]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6f      	ldr	r2, [pc, #444]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800659a:	f043 0308 	orr.w	r3, r3, #8
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	4b6d      	ldr	r3, [pc, #436]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	496a      	ldr	r1, [pc, #424]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065b2:	4b69      	ldr	r3, [pc, #420]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	4965      	ldr	r1, [pc, #404]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d109      	bne.n	80065e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fcff 	bl	8006fd4 <RCC_SetFlashLatencyFromMSIRange>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e34d      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065e0:	f000 fc36 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 80065e4:	4601      	mov	r1, r0
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	4a5a      	ldr	r2, [pc, #360]	; (800675c <HAL_RCC_OscConfig+0x29c>)
 80065f2:	5cd3      	ldrb	r3, [r2, r3]
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	fa21 f303 	lsr.w	r3, r1, r3
 80065fc:	4a58      	ldr	r2, [pc, #352]	; (8006760 <HAL_RCC_OscConfig+0x2a0>)
 80065fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006600:	4b58      	ldr	r3, [pc, #352]	; (8006764 <HAL_RCC_OscConfig+0x2a4>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7fb feb7 	bl	8002378 <HAL_InitTick>
 800660a:	4603      	mov	r3, r0
 800660c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800660e:	7bfb      	ldrb	r3, [r7, #15]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d052      	beq.n	80066ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	e331      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d032      	beq.n	8006686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006620:	4b4d      	ldr	r3, [pc, #308]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4c      	ldr	r2, [pc, #304]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800662c:	f7fb fef4 	bl	8002418 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006634:	f7fb fef0 	bl	8002418 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e31a      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006646:	4b44      	ldr	r3, [pc, #272]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006652:	4b41      	ldr	r3, [pc, #260]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a40      	ldr	r2, [pc, #256]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006658:	f043 0308 	orr.w	r3, r3, #8
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4b3e      	ldr	r3, [pc, #248]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	493b      	ldr	r1, [pc, #236]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800666c:	4313      	orrs	r3, r2
 800666e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006670:	4b39      	ldr	r3, [pc, #228]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4936      	ldr	r1, [pc, #216]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006680:	4313      	orrs	r3, r2
 8006682:	604b      	str	r3, [r1, #4]
 8006684:	e01a      	b.n	80066bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006686:	4b34      	ldr	r3, [pc, #208]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a33      	ldr	r2, [pc, #204]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006692:	f7fb fec1 	bl	8002418 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800669a:	f7fb febd 	bl	8002418 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e2e7      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066ac:	4b2a      	ldr	r3, [pc, #168]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f0      	bne.n	800669a <HAL_RCC_OscConfig+0x1da>
 80066b8:	e000      	b.n	80066bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d074      	beq.n	80067b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b08      	cmp	r3, #8
 80066cc:	d005      	beq.n	80066da <HAL_RCC_OscConfig+0x21a>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b0c      	cmp	r3, #12
 80066d2:	d10e      	bne.n	80066f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d10b      	bne.n	80066f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066da:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d064      	beq.n	80067b0 <HAL_RCC_OscConfig+0x2f0>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d160      	bne.n	80067b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e2c4      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fa:	d106      	bne.n	800670a <HAL_RCC_OscConfig+0x24a>
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a15      	ldr	r2, [pc, #84]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e01d      	b.n	8006746 <HAL_RCC_OscConfig+0x286>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006712:	d10c      	bne.n	800672e <HAL_RCC_OscConfig+0x26e>
 8006714:	4b10      	ldr	r3, [pc, #64]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0f      	ldr	r2, [pc, #60]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800671a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	e00b      	b.n	8006746 <HAL_RCC_OscConfig+0x286>
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a09      	ldr	r2, [pc, #36]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a06      	ldr	r2, [pc, #24]	; (8006758 <HAL_RCC_OscConfig+0x298>)
 8006740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006744:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01c      	beq.n	8006788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674e:	f7fb fe63 	bl	8002418 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006754:	e011      	b.n	800677a <HAL_RCC_OscConfig+0x2ba>
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	0800e0b0 	.word	0x0800e0b0
 8006760:	20000008 	.word	0x20000008
 8006764:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006768:	f7fb fe56 	bl	8002418 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	; 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e280      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800677a:	4baf      	ldr	r3, [pc, #700]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0x2a8>
 8006786:	e014      	b.n	80067b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fb fe46 	bl	8002418 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006790:	f7fb fe42 	bl	8002418 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e26c      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067a2:	4ba5      	ldr	r3, [pc, #660]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x2d0>
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d060      	beq.n	8006880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_OscConfig+0x310>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b0c      	cmp	r3, #12
 80067c8:	d119      	bne.n	80067fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d116      	bne.n	80067fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067d0:	4b99      	ldr	r3, [pc, #612]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_OscConfig+0x328>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e249      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e8:	4b93      	ldr	r3, [pc, #588]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	061b      	lsls	r3, r3, #24
 80067f6:	4990      	ldr	r1, [pc, #576]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067fc:	e040      	b.n	8006880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d023      	beq.n	800684e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006806:	4b8c      	ldr	r3, [pc, #560]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a8b      	ldr	r2, [pc, #556]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800680c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fb fe01 	bl	8002418 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800681a:	f7fb fdfd 	bl	8002418 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e227      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800682c:	4b82      	ldr	r3, [pc, #520]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006838:	4b7f      	ldr	r3, [pc, #508]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	497c      	ldr	r1, [pc, #496]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
 800684c:	e018      	b.n	8006880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800684e:	4b7a      	ldr	r3, [pc, #488]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a79      	ldr	r2, [pc, #484]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685a:	f7fb fddd 	bl	8002418 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006862:	f7fb fdd9 	bl	8002418 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e203      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006874:	4b70      	ldr	r3, [pc, #448]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f0      	bne.n	8006862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d03c      	beq.n	8006906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01c      	beq.n	80068ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006894:	4b68      	ldr	r3, [pc, #416]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800689a:	4a67      	ldr	r2, [pc, #412]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a4:	f7fb fdb8 	bl	8002418 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068ac:	f7fb fdb4 	bl	8002418 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1de      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068be:	4b5e      	ldr	r3, [pc, #376]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80068c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0ef      	beq.n	80068ac <HAL_RCC_OscConfig+0x3ec>
 80068cc:	e01b      	b.n	8006906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ce:	4b5a      	ldr	r3, [pc, #360]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80068d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068d4:	4a58      	ldr	r2, [pc, #352]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068de:	f7fb fd9b 	bl	8002418 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e6:	f7fb fd97 	bl	8002418 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e1c1      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068f8:	4b4f      	ldr	r3, [pc, #316]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80068fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ef      	bne.n	80068e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 80a6 	beq.w	8006a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006914:	2300      	movs	r3, #0
 8006916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006918:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10d      	bne.n	8006940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006924:	4b44      	ldr	r3, [pc, #272]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006928:	4a43      	ldr	r2, [pc, #268]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	6593      	str	r3, [r2, #88]	; 0x58
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800693c:	2301      	movs	r3, #1
 800693e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006940:	4b3e      	ldr	r3, [pc, #248]	; (8006a3c <HAL_RCC_OscConfig+0x57c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d118      	bne.n	800697e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800694c:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCC_OscConfig+0x57c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a3a      	ldr	r2, [pc, #232]	; (8006a3c <HAL_RCC_OscConfig+0x57c>)
 8006952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006958:	f7fb fd5e 	bl	8002418 <HAL_GetTick>
 800695c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006960:	f7fb fd5a 	bl	8002418 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e184      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006972:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <HAL_RCC_OscConfig+0x57c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0f0      	beq.n	8006960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d108      	bne.n	8006998 <HAL_RCC_OscConfig+0x4d8>
 8006986:	4b2c      	ldr	r3, [pc, #176]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 800698e:	f043 0301 	orr.w	r3, r3, #1
 8006992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006996:	e024      	b.n	80069e2 <HAL_RCC_OscConfig+0x522>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b05      	cmp	r3, #5
 800699e:	d110      	bne.n	80069c2 <HAL_RCC_OscConfig+0x502>
 80069a0:	4b25      	ldr	r3, [pc, #148]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	4a24      	ldr	r2, [pc, #144]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069a8:	f043 0304 	orr.w	r3, r3, #4
 80069ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069b0:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b6:	4a20      	ldr	r2, [pc, #128]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069c0:	e00f      	b.n	80069e2 <HAL_RCC_OscConfig+0x522>
 80069c2:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069d2:	4b19      	ldr	r3, [pc, #100]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d8:	4a17      	ldr	r2, [pc, #92]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 80069da:	f023 0304 	bic.w	r3, r3, #4
 80069de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ea:	f7fb fd15 	bl	8002418 <HAL_GetTick>
 80069ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069f0:	e00a      	b.n	8006a08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f2:	f7fb fd11 	bl	8002418 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e139      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_OscConfig+0x578>)
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ed      	beq.n	80069f2 <HAL_RCC_OscConfig+0x532>
 8006a16:	e01a      	b.n	8006a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fb fcfe 	bl	8002418 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a1e:	e00f      	b.n	8006a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fb fcfa 	bl	8002418 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d906      	bls.n	8006a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e122      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
 8006a36:	bf00      	nop
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a40:	4b90      	ldr	r3, [pc, #576]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e8      	bne.n	8006a20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a4e:	7ffb      	ldrb	r3, [r7, #31]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a54:	4b8b      	ldr	r3, [pc, #556]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a58:	4a8a      	ldr	r2, [pc, #552]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8108 	beq.w	8006c7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	f040 80d0 	bne.w	8006c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a74:	4b83      	ldr	r3, [pc, #524]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f003 0203 	and.w	r2, r3, #3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d130      	bne.n	8006aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	3b01      	subs	r3, #1
 8006a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d127      	bne.n	8006aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d11f      	bne.n	8006aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ab4:	2a07      	cmp	r2, #7
 8006ab6:	bf14      	ite	ne
 8006ab8:	2201      	movne	r2, #1
 8006aba:	2200      	moveq	r2, #0
 8006abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d113      	bne.n	8006aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d109      	bne.n	8006aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d06e      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	d069      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006af0:	4b64      	ldr	r3, [pc, #400]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006afc:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0b7      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b0c:	4b5d      	ldr	r3, [pc, #372]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a5c      	ldr	r2, [pc, #368]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b18:	f7fb fc7e 	bl	8002418 <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fb fc7a 	bl	8002418 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e0a4      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b32:	4b54      	ldr	r3, [pc, #336]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b3e:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	4b51      	ldr	r3, [pc, #324]	; (8006c88 <HAL_RCC_OscConfig+0x7c8>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	0112      	lsls	r2, r2, #4
 8006b52:	4311      	orrs	r1, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b58:	0212      	lsls	r2, r2, #8
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b60:	0852      	lsrs	r2, r2, #1
 8006b62:	3a01      	subs	r2, #1
 8006b64:	0552      	lsls	r2, r2, #21
 8006b66:	4311      	orrs	r1, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b6c:	0852      	lsrs	r2, r2, #1
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	0652      	lsls	r2, r2, #25
 8006b72:	4311      	orrs	r1, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b78:	0912      	lsrs	r2, r2, #4
 8006b7a:	0452      	lsls	r2, r2, #17
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	4941      	ldr	r1, [pc, #260]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a3e      	ldr	r2, [pc, #248]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b90:	4b3c      	ldr	r3, [pc, #240]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b9c:	f7fb fc3c 	bl	8002418 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba4:	f7fb fc38 	bl	8002418 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e062      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bb6:	4b33      	ldr	r3, [pc, #204]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bc2:	e05a      	b.n	8006c7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e059      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc8:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d152      	bne.n	8006c7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bd4:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bec:	f7fb fc14 	bl	8002418 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fb fc10 	bl	8002418 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e03a      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c06:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x734>
 8006c12:	e032      	b.n	8006c7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d02d      	beq.n	8006c76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006c26:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d105      	bne.n	8006c3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4e:	f7fb fbe3 	bl	8002418 <HAL_GetTick>
 8006c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c54:	e008      	b.n	8006c68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c56:	f7fb fbdf 	bl	8002418 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e009      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCC_OscConfig+0x7c4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1f0      	bne.n	8006c56 <HAL_RCC_OscConfig+0x796>
 8006c74:	e001      	b.n	8006c7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e000      	b.n	8006c7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3720      	adds	r7, #32
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	40021000 	.word	0x40021000
 8006c88:	f99d808c 	.word	0xf99d808c

08006c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e0c8      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca0:	4b66      	ldr	r3, [pc, #408]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d910      	bls.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cae:	4b63      	ldr	r3, [pc, #396]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 0207 	bic.w	r2, r3, #7
 8006cb6:	4961      	ldr	r1, [pc, #388]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cbe:	4b5f      	ldr	r3, [pc, #380]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d001      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0b0      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d04c      	beq.n	8006d76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ce4:	4b56      	ldr	r3, [pc, #344]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d121      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e09e      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cfc:	4b50      	ldr	r3, [pc, #320]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d115      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e092      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d14:	4b4a      	ldr	r3, [pc, #296]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e086      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d24:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e07e      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d34:	4b42      	ldr	r3, [pc, #264]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f023 0203 	bic.w	r2, r3, #3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	493f      	ldr	r1, [pc, #252]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d46:	f7fb fb67 	bl	8002418 <HAL_GetTick>
 8006d4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4c:	e00a      	b.n	8006d64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4e:	f7fb fb63 	bl	8002418 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e066      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d64:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 020c 	and.w	r2, r3, #12
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d1eb      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d008      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d82:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	492c      	ldr	r1, [pc, #176]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d210      	bcs.n	8006dc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f023 0207 	bic.w	r2, r3, #7
 8006daa:	4924      	ldr	r1, [pc, #144]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db2:	4b22      	ldr	r3, [pc, #136]	; (8006e3c <HAL_RCC_ClockConfig+0x1b0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e036      	b.n	8006e32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4918      	ldr	r1, [pc, #96]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dee:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	4910      	ldr	r1, [pc, #64]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e02:	f000 f825 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8006e06:	4601      	mov	r1, r0
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <HAL_RCC_ClockConfig+0x1b4>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	4a0c      	ldr	r2, [pc, #48]	; (8006e44 <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	5cd3      	ldrb	r3, [r2, r3]
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fb faa6 	bl	8002378 <HAL_InitTick>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40022000 	.word	0x40022000
 8006e40:	40021000 	.word	0x40021000
 8006e44:	0800e0b0 	.word	0x0800e0b0
 8006e48:	20000008 	.word	0x20000008
 8006e4c:	2000000c 	.word	0x2000000c

08006e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b089      	sub	sp, #36	; 0x24
 8006e54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e5e:	4b3d      	ldr	r3, [pc, #244]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e68:	4b3a      	ldr	r3, [pc, #232]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_GetSysClockFreq+0x34>
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d121      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d11e      	bne.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e84:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e90:	4b30      	ldr	r3, [pc, #192]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	e005      	b.n	8006eac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ea0:	4b2c      	ldr	r3, [pc, #176]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006eac:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10d      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d102      	bne.n	8006ece <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ec8:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e004      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ed6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b0c      	cmp	r3, #12
 8006edc:	d133      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ede:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d002      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0xa4>
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d003      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0xaa>
 8006ef2:	e005      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ef6:	617b      	str	r3, [r7, #20]
      break;
 8006ef8:	e005      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006efa:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x110>)
 8006efc:	617b      	str	r3, [r7, #20]
      break;
 8006efe:	e002      	b.n	8006f06 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	617b      	str	r3, [r7, #20]
      break;
 8006f04:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	3301      	adds	r3, #1
 8006f12:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	fb02 f203 	mul.w	r2, r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	0e5b      	lsrs	r3, r3, #25
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	3301      	adds	r3, #1
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f44:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f46:	69bb      	ldr	r3, [r7, #24]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3724      	adds	r7, #36	; 0x24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40021000 	.word	0x40021000
 8006f58:	0800e0c8 	.word	0x0800e0c8
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	007a1200 	.word	0x007a1200

08006f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f64:	b480      	push	{r7}
 8006f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f68:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000008 	.word	0x20000008

08006f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f80:	f7ff fff0 	bl	8006f64 <HAL_RCC_GetHCLKFreq>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4b06      	ldr	r3, [pc, #24]	; (8006fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	0a1b      	lsrs	r3, r3, #8
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f92:	5cd3      	ldrb	r3, [r2, r3]
 8006f94:	f003 031f 	and.w	r3, r3, #31
 8006f98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	0800e0c0 	.word	0x0800e0c0

08006fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fac:	f7ff ffda 	bl	8006f64 <HAL_RCC_GetHCLKFreq>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	0adb      	lsrs	r3, r3, #11
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4a04      	ldr	r2, [pc, #16]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fbe:	5cd3      	ldrb	r3, [r2, r3]
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	0800e0c0 	.word	0x0800e0c0

08006fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fe0:	4b2a      	ldr	r3, [pc, #168]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fec:	f7ff f938 	bl	8006260 <HAL_PWREx_GetVoltageRange>
 8006ff0:	6178      	str	r0, [r7, #20]
 8006ff2:	e014      	b.n	800701e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff4:	4b25      	ldr	r3, [pc, #148]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	4a24      	ldr	r2, [pc, #144]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8007000:	4b22      	ldr	r3, [pc, #136]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800700c:	f7ff f928 	bl	8006260 <HAL_PWREx_GetVoltageRange>
 8007010:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007012:	4b1e      	ldr	r3, [pc, #120]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007016:	4a1d      	ldr	r2, [pc, #116]	; (800708c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800701c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007024:	d10b      	bne.n	800703e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d919      	bls.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2ba0      	cmp	r3, #160	; 0xa0
 8007030:	d902      	bls.n	8007038 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007032:	2302      	movs	r3, #2
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	e013      	b.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007038:	2301      	movs	r3, #1
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	e010      	b.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d902      	bls.n	800704a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007044:	2303      	movs	r3, #3
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e00a      	b.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b80      	cmp	r3, #128	; 0x80
 800704e:	d102      	bne.n	8007056 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007050:	2302      	movs	r3, #2
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	e004      	b.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b70      	cmp	r3, #112	; 0x70
 800705a:	d101      	bne.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800705c:	2301      	movs	r3, #1
 800705e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f023 0207 	bic.w	r2, r3, #7
 8007068:	4909      	ldr	r1, [pc, #36]	; (8007090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d001      	beq.n	8007082 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	40021000 	.word	0x40021000
 8007090:	40022000 	.word	0x40022000

08007094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800709c:	2300      	movs	r3, #0
 800709e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a0:	2300      	movs	r3, #0
 80070a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d03f      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070b8:	d01c      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80070ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070be:	d802      	bhi.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80070c4:	e01f      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80070c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ca:	d003      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80070cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070d0:	d01c      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80070d2:	e018      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070d4:	4b85      	ldr	r3, [pc, #532]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4a84      	ldr	r2, [pc, #528]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80070da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070e0:	e015      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 ff3f 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070f2:	e00c      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3320      	adds	r3, #32
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 f826 	bl	800814c <RCCEx_PLLSAI2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007104:	e003      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	74fb      	strb	r3, [r7, #19]
      break;
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710e:	7cfb      	ldrb	r3, [r7, #19]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007114:	4b75      	ldr	r3, [pc, #468]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007122:	4972      	ldr	r1, [pc, #456]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800712a:	e001      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	7cfb      	ldrb	r3, [r7, #19]
 800712e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d03f      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007144:	d01c      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8007146:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800714a:	d802      	bhi.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00e      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8007150:	e01f      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007156:	d003      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8007158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800715c:	d01c      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800715e:	e018      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007160:	4b62      	ldr	r3, [pc, #392]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a61      	ldr	r2, [pc, #388]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800716c:	e015      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fef9 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 800717a:	4603      	mov	r3, r0
 800717c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800717e:	e00c      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3320      	adds	r3, #32
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 ffe0 	bl	800814c <RCCEx_PLLSAI2_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007190:	e003      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	74fb      	strb	r3, [r7, #19]
      break;
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071a0:	4b52      	ldr	r3, [pc, #328]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ae:	494f      	ldr	r1, [pc, #316]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80071b6:	e001      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80a0 	beq.w	800730a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ca:	2300      	movs	r3, #0
 80071cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071ce:	4b47      	ldr	r3, [pc, #284]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80071da:	2301      	movs	r3, #1
 80071dc:	e000      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	4b41      	ldr	r3, [pc, #260]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e8:	4a40      	ldr	r2, [pc, #256]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ee:	6593      	str	r3, [r2, #88]	; 0x58
 80071f0:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071fc:	2301      	movs	r3, #1
 80071fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007200:	4b3b      	ldr	r3, [pc, #236]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a3a      	ldr	r2, [pc, #232]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8007206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800720c:	f7fb f904 	bl	8002418 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007212:	e009      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007214:	f7fb f900 	bl	8002418 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d902      	bls.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	74fb      	strb	r3, [r7, #19]
        break;
 8007226:	e005      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007228:	4b31      	ldr	r3, [pc, #196]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0ef      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d15c      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800723a:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007244:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01f      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	d019      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007258:	4b24      	ldr	r3, [pc, #144]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007264:	4b21      	ldr	r3, [pc, #132]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	4a20      	ldr	r2, [pc, #128]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800726c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	4a1c      	ldr	r2, [pc, #112]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800727c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007284:	4a19      	ldr	r2, [pc, #100]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007296:	f7fb f8bf 	bl	8002418 <HAL_GetTick>
 800729a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800729c:	e00b      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800729e:	f7fb f8bb 	bl	8002418 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d902      	bls.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	74fb      	strb	r3, [r7, #19]
            break;
 80072b4:	e006      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ec      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80072c4:	7cfb      	ldrb	r3, [r7, #19]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10c      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ca:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072da:	4904      	ldr	r1, [pc, #16]	; (80072ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80072e2:	e009      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	74bb      	strb	r3, [r7, #18]
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80072ea:	bf00      	nop
 80072ec:	40021000 	.word	0x40021000
 80072f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	7cfb      	ldrb	r3, [r7, #19]
 80072f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072f8:	7c7b      	ldrb	r3, [r7, #17]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d105      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072fe:	4b9e      	ldr	r3, [pc, #632]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007302:	4a9d      	ldr	r2, [pc, #628]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007308:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007316:	4b98      	ldr	r3, [pc, #608]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731c:	f023 0203 	bic.w	r2, r3, #3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	4994      	ldr	r1, [pc, #592]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007338:	4b8f      	ldr	r3, [pc, #572]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800733e:	f023 020c 	bic.w	r2, r3, #12
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	498c      	ldr	r1, [pc, #560]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800735a:	4b87      	ldr	r3, [pc, #540]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	4983      	ldr	r1, [pc, #524]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800737c:	4b7e      	ldr	r3, [pc, #504]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	497b      	ldr	r1, [pc, #492]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800739e:	4b76      	ldr	r3, [pc, #472]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ac:	4972      	ldr	r1, [pc, #456]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073c0:	4b6d      	ldr	r3, [pc, #436]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ce:	496a      	ldr	r1, [pc, #424]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073e2:	4b65      	ldr	r3, [pc, #404]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	4961      	ldr	r1, [pc, #388]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007404:	4b5c      	ldr	r3, [pc, #368]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007412:	4959      	ldr	r1, [pc, #356]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007426:	4b54      	ldr	r3, [pc, #336]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007434:	4950      	ldr	r1, [pc, #320]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007448:	4b4b      	ldr	r3, [pc, #300]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	4948      	ldr	r1, [pc, #288]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800746a:	4b43      	ldr	r3, [pc, #268]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007478:	493f      	ldr	r1, [pc, #252]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d028      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800748c:	4b3a      	ldr	r3, [pc, #232]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007492:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749a:	4937      	ldr	r1, [pc, #220]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074aa:	d106      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ac:	4b32      	ldr	r3, [pc, #200]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a31      	ldr	r2, [pc, #196]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80074b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b6:	60d3      	str	r3, [r2, #12]
 80074b8:	e011      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074c2:	d10c      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3304      	adds	r3, #4
 80074c8:	2101      	movs	r1, #1
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fd4e 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d028      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074ea:	4b23      	ldr	r3, [pc, #140]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f8:	491f      	ldr	r1, [pc, #124]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80074fa:	4313      	orrs	r3, r2
 80074fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007508:	d106      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800750a:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007514:	60d3      	str	r3, [r2, #12]
 8007516:	e011      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007520:	d10c      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	2101      	movs	r1, #1
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fd1f 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007532:	7cfb      	ldrb	r3, [r7, #19]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8007538:	7cfb      	ldrb	r3, [r7, #19]
 800753a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02b      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007548:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	4908      	ldr	r1, [pc, #32]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007566:	d109      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a02      	ldr	r2, [pc, #8]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800756e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007572:	60d3      	str	r3, [r2, #12]
 8007574:	e014      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007576:	bf00      	nop
 8007578:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007584:	d10c      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3304      	adds	r3, #4
 800758a:	2101      	movs	r1, #1
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fced 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 8007592:	4603      	mov	r3, r0
 8007594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007596:	7cfb      	ldrb	r3, [r7, #19]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800759c:	7cfb      	ldrb	r3, [r7, #19]
 800759e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02f      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075ac:	4b2b      	ldr	r3, [pc, #172]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ba:	4928      	ldr	r1, [pc, #160]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ca:	d10d      	bne.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	2102      	movs	r1, #2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fcca 	bl	8007f6c <RCCEx_PLLSAI1_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075dc:	7cfb      	ldrb	r3, [r7, #19]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d014      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80075e2:	7cfb      	ldrb	r3, [r7, #19]
 80075e4:	74bb      	strb	r3, [r7, #18]
 80075e6:	e011      	b.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f0:	d10c      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3320      	adds	r3, #32
 80075f6:	2102      	movs	r1, #2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fda7 	bl	800814c <RCCEx_PLLSAI2_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007602:	7cfb      	ldrb	r3, [r7, #19]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8007608:	7cfb      	ldrb	r3, [r7, #19]
 800760a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00a      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007618:	4b10      	ldr	r3, [pc, #64]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800761a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007626:	490d      	ldr	r1, [pc, #52]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764a:	4904      	ldr	r1, [pc, #16]	; (800765c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007652:	7cbb      	ldrb	r3, [r7, #18]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	40021000 	.word	0x40021000

08007660 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007672:	d137      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007674:	4bb8      	ldr	r3, [pc, #736]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007686:	d014      	beq.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768c:	d01e      	beq.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 800768e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007692:	d001      	beq.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8007694:	f000 bc60 	b.w	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007698:	4baf      	ldr	r3, [pc, #700]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	f040 8453 	bne.w	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
        frequency = LSE_VALUE;
 80076a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ac:	61fb      	str	r3, [r7, #28]
      break;
 80076ae:	f000 bc4e 	b.w	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80076b2:	4ba9      	ldr	r3, [pc, #676]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80076b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b02      	cmp	r3, #2
 80076be:	f040 8448 	bne.w	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = LSI_VALUE;
 80076c2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076c6:	61fb      	str	r3, [r7, #28]
      break;
 80076c8:	f000 bc43 	b.w	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80076cc:	4ba2      	ldr	r3, [pc, #648]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d8:	f040 843d 	bne.w	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
        frequency = HSE_VALUE / 32U;
 80076dc:	4b9f      	ldr	r3, [pc, #636]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80076de:	61fb      	str	r3, [r7, #28]
      break;
 80076e0:	f000 bc39 	b.w	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e4:	4b9c      	ldr	r3, [pc, #624]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d023      	beq.n	800773c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d02e      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d139      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80076fc:	4b96      	ldr	r3, [pc, #600]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d116      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007708:	4b93      	ldr	r3, [pc, #588]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 8007714:	4b90      	ldr	r3, [pc, #576]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	e005      	b.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007720:	4b8d      	ldr	r3, [pc, #564]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	f003 030f 	and.w	r3, r3, #15
 800772c:	4a8c      	ldr	r2, [pc, #560]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800772e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007732:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007734:	e01f      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]
      break;
 800773a:	e01c      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800773c:	4b86      	ldr	r3, [pc, #536]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007748:	d102      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        pllvco = HSI_VALUE;
 800774a:	4b86      	ldr	r3, [pc, #536]	; (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800774c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800774e:	e012      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
      break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007756:	4b80      	ldr	r3, [pc, #512]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007762:	d102      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSE_VALUE;
 8007764:	4b80      	ldr	r3, [pc, #512]	; (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8007766:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8007768:	e005      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
        pllvco = 0U;
 800776a:	2300      	movs	r3, #0
 800776c:	61bb      	str	r3, [r7, #24]
      break;
 800776e:	e002      	b.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
    default:
      /* No source */
      pllvco = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	61bb      	str	r3, [r7, #24]
      break;
 8007774:	bf00      	nop
    }

    switch(PeriphClk)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800777c:	f000 8345 	beq.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
 8007780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007784:	d825      	bhi.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8007786:	2b10      	cmp	r3, #16
 8007788:	f000 81df 	beq.w	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800778c:	2b10      	cmp	r3, #16
 800778e:	d80f      	bhi.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007790:	2b02      	cmp	r3, #2
 8007792:	f000 8128 	beq.w	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8007796:	2b02      	cmp	r3, #2
 8007798:	d803      	bhi.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 800779a:	2b01      	cmp	r3, #1
 800779c:	f000 80ec 	beq.w	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80077a0:	e3da      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	f000 8169 	beq.w	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	f000 819a 	beq.w	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
      break;
 80077ae:	e3d3      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	f000 82c1 	beq.w	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80077b6:	2b40      	cmp	r3, #64	; 0x40
 80077b8:	d803      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f000 81fd 	beq.w	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
      break;
 80077c0:	e3ca      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	f000 82db 	beq.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
 80077c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077cc:	f000 82fa 	beq.w	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
      break;
 80077d0:	e3c2      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80077d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077d6:	f000 822d 	beq.w	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80077da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077de:	d811      	bhi.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80077e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e4:	d021      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
 80077e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ea:	d804      	bhi.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f0:	f000 834c 	beq.w	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      break;
 80077f4:	e3b0      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 80077f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fa:	d01d      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80077fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007800:	d021      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007802:	e3a9      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 8007804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007808:	f000 8285 	beq.w	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d804      	bhi.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007816:	f000 837e 	beq.w	8007f16 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
      break;
 800781a:	e39d      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
    switch(PeriphClk)
 800781c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007820:	d011      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007826:	d00e      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
      break;
 8007828:	e396      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800782a:	69b9      	ldr	r1, [r7, #24]
 800782c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007830:	f000 fd66 	bl	8008300 <RCCEx_GetSAIxPeriphCLKFreq>
 8007834:	61f8      	str	r0, [r7, #28]
      break;
 8007836:	e38f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8007838:	69b9      	ldr	r1, [r7, #24]
 800783a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800783e:	f000 fd5f 	bl	8008300 <RCCEx_GetSAIxPeriphCLKFreq>
 8007842:	61f8      	str	r0, [r7, #28]
      break;
 8007844:	e388      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8007846:	4b44      	ldr	r3, [pc, #272]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007850:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007858:	d023      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x242>
 800785a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800785e:	d003      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007864:	d04a      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
          break;
 8007866:	e086      	b.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007868:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b02      	cmp	r3, #2
 8007872:	d17b      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007874:	4b38      	ldr	r3, [pc, #224]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	091b      	lsrs	r3, r3, #4
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	e005      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
 800788c:	4b32      	ldr	r3, [pc, #200]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800788e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	4a31      	ldr	r2, [pc, #196]	; (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789e:	61fb      	str	r3, [r7, #28]
          break;
 80078a0:	e064      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80078a2:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078ae:	d15f      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078bc:	d158      	bne.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078be:	4b26      	ldr	r3, [pc, #152]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	fb02 f203 	mul.w	r2, r2, r3
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	091b      	lsrs	r3, r3, #4
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	3301      	adds	r3, #1
 80078de:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80078e4:	4b1c      	ldr	r3, [pc, #112]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	0d5b      	lsrs	r3, r3, #21
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	3301      	adds	r3, #1
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f8:	61fb      	str	r3, [r7, #28]
          break;
 80078fa:	e039      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007908:	d134      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007916:	d12d      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007918:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007922:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	fb02 f203 	mul.w	r2, r2, r3
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	091b      	lsrs	r3, r3, #4
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	3301      	adds	r3, #1
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	0d5b      	lsrs	r3, r3, #21
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	3301      	adds	r3, #1
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	61fb      	str	r3, [r7, #28]
          break;
 8007954:	e00e      	b.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8007956:	bf00      	nop
 8007958:	40021000 	.word	0x40021000
 800795c:	0003d090 	.word	0x0003d090
 8007960:	0800e0c8 	.word	0x0800e0c8
 8007964:	00f42400 	.word	0x00f42400
 8007968:	007a1200 	.word	0x007a1200
          break;
 800796c:	bf00      	nop
 800796e:	e2f3      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007970:	bf00      	nop
 8007972:	e2f1      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007974:	bf00      	nop
        break;
 8007976:	e2ef      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007978:	4bac      	ldr	r3, [pc, #688]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b03      	cmp	r3, #3
 8007988:	d827      	bhi.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800798a:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079a1 	.word	0x080079a1
 8007994:	080079a9 	.word	0x080079a9
 8007998:	080079b1 	.word	0x080079b1
 800799c:	080079c5 	.word	0x080079c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7ff fb02 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 80079a4:	61f8      	str	r0, [r7, #28]
          break;
 80079a6:	e01d      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          frequency = HAL_RCC_GetSysClockFreq();
 80079a8:	f7ff fa52 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 80079ac:	61f8      	str	r0, [r7, #28]
          break;
 80079ae:	e019      	b.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079b0:	4b9e      	ldr	r3, [pc, #632]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079bc:	d10f      	bne.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
            frequency = HSI_VALUE;
 80079be:	4b9c      	ldr	r3, [pc, #624]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80079c0:	61fb      	str	r3, [r7, #28]
          break;
 80079c2:	e00c      	b.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80079c4:	4b99      	ldr	r3, [pc, #612]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d107      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
            frequency = LSE_VALUE;
 80079d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d6:	61fb      	str	r3, [r7, #28]
          break;
 80079d8:	e003      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x382>
          break;
 80079da:	bf00      	nop
 80079dc:	e2bc      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80079de:	bf00      	nop
 80079e0:	e2ba      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 80079e2:	bf00      	nop
        break;
 80079e4:	e2b8      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80079e6:	4b91      	ldr	r3, [pc, #580]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 80079e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ec:	f003 030c 	and.w	r3, r3, #12
 80079f0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b0c      	cmp	r3, #12
 80079f6:	d83a      	bhi.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a6f 	.word	0x08007a6f
 8007a08:	08007a6f 	.word	0x08007a6f
 8007a0c:	08007a6f 	.word	0x08007a6f
 8007a10:	08007a3d 	.word	0x08007a3d
 8007a14:	08007a6f 	.word	0x08007a6f
 8007a18:	08007a6f 	.word	0x08007a6f
 8007a1c:	08007a6f 	.word	0x08007a6f
 8007a20:	08007a45 	.word	0x08007a45
 8007a24:	08007a6f 	.word	0x08007a6f
 8007a28:	08007a6f 	.word	0x08007a6f
 8007a2c:	08007a6f 	.word	0x08007a6f
 8007a30:	08007a59 	.word	0x08007a59
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7ff faa2 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007a38:	61f8      	str	r0, [r7, #28]
          break;
 8007a3a:	e01d      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a3c:	f7ff fa08 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007a40:	61f8      	str	r0, [r7, #28]
          break;
 8007a42:	e019      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a44:	4b79      	ldr	r3, [pc, #484]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d10f      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
            frequency = HSI_VALUE;
 8007a52:	4b77      	ldr	r3, [pc, #476]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007a54:	61fb      	str	r3, [r7, #28]
          break;
 8007a56:	e00c      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a58:	4b74      	ldr	r3, [pc, #464]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d107      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = LSE_VALUE;
 8007a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a6a:	61fb      	str	r3, [r7, #28]
          break;
 8007a6c:	e003      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          break;
 8007a6e:	bf00      	nop
 8007a70:	e272      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007a72:	bf00      	nop
 8007a74:	e270      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007a76:	bf00      	nop
        break;
 8007a78:	e26e      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007a7a:	4b6c      	ldr	r3, [pc, #432]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a84:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	2b10      	cmp	r3, #16
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x448>
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d802      	bhi.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
          break;
 8007a94:	e024      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
        switch(srcclk)
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d00a      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 8007a9a:	2b30      	cmp	r3, #48	; 0x30
 8007a9c:	d012      	beq.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          break;
 8007a9e:	e01f      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007aa0:	f7ff fa6c 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007aa4:	61f8      	str	r0, [r7, #28]
          break;
 8007aa6:	e01b      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          frequency = HAL_RCC_GetSysClockFreq();
 8007aa8:	f7ff f9d2 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007aac:	61f8      	str	r0, [r7, #28]
          break;
 8007aae:	e017      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ab0:	4b5e      	ldr	r3, [pc, #376]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	d10d      	bne.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI_VALUE;
 8007abe:	4b5c      	ldr	r3, [pc, #368]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007ac0:	61fb      	str	r3, [r7, #28]
          break;
 8007ac2:	e00a      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ac4:	4b59      	ldr	r3, [pc, #356]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d105      	bne.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = LSE_VALUE;
 8007ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad6:	61fb      	str	r3, [r7, #28]
          break;
 8007ad8:	e001      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 8007ada:	bf00      	nop
 8007adc:	e23c      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007ade:	bf00      	nop
        break;
 8007ae0:	e23a      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ae2:	4b52      	ldr	r3, [pc, #328]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007aec:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2b40      	cmp	r3, #64	; 0x40
 8007af2:	d00d      	beq.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d802      	bhi.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
          break;
 8007afc:	e024      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
        switch(srcclk)
 8007afe:	2b80      	cmp	r3, #128	; 0x80
 8007b00:	d00a      	beq.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007b02:	2bc0      	cmp	r3, #192	; 0xc0
 8007b04:	d012      	beq.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          break;
 8007b06:	e01f      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7ff fa38 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
          break;
 8007b0e:	e01b      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b10:	f7ff f99e 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007b14:	61f8      	str	r0, [r7, #28]
          break;
 8007b16:	e017      	b.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b18:	4b44      	ldr	r3, [pc, #272]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	d10d      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
            frequency = HSI_VALUE;
 8007b26:	4b42      	ldr	r3, [pc, #264]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007b28:	61fb      	str	r3, [r7, #28]
          break;
 8007b2a:	e00a      	b.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b2c:	4b3f      	ldr	r3, [pc, #252]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d105      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
            frequency = LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	61fb      	str	r3, [r7, #28]
          break;
 8007b40:	e001      	b.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
          break;
 8007b42:	bf00      	nop
 8007b44:	e208      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007b46:	bf00      	nop
        break;
 8007b48:	e206      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007b4a:	4b38      	ldr	r3, [pc, #224]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b54:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5c:	d010      	beq.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b62:	d802      	bhi.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
          break;
 8007b68:	e026      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
        switch(srcclk)
 8007b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6e:	d00b      	beq.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8007b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b74:	d012      	beq.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
          break;
 8007b76:	e01f      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b78:	f7ff fa00 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007b7c:	61f8      	str	r0, [r7, #28]
          break;
 8007b7e:	e01b      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b80:	f7ff f966 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007b84:	61f8      	str	r0, [r7, #28]
          break;
 8007b86:	e017      	b.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b88:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b94:	d10d      	bne.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
            frequency = HSI_VALUE;
 8007b96:	4b26      	ldr	r3, [pc, #152]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007b98:	61fb      	str	r3, [r7, #28]
          break;
 8007b9a:	e00a      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b9c:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d105      	bne.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
            frequency = LSE_VALUE;
 8007baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bae:	61fb      	str	r3, [r7, #28]
          break;
 8007bb0:	e001      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
          break;
 8007bb2:	bf00      	nop
 8007bb4:	e1d0      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007bb6:	bf00      	nop
        break;
 8007bb8:	e1ce      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007bba:	4b1c      	ldr	r3, [pc, #112]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bc4:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bcc:	d010      	beq.n	8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd2:	d802      	bhi.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d007      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
          break;
 8007bd8:	e026      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
        switch(srcclk)
 8007bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bde:	d00b      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8007be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007be4:	d012      	beq.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>
          break;
 8007be6:	e01f      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007be8:	f7ff f9c8 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007bec:	61f8      	str	r0, [r7, #28]
          break;
 8007bee:	e01b      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bf0:	f7ff f92e 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007bf4:	61f8      	str	r0, [r7, #28]
          break;
 8007bf6:	e017      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c04:	d10d      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
            frequency = HSI_VALUE;
 8007c06:	4b0a      	ldr	r3, [pc, #40]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007c08:	61fb      	str	r3, [r7, #28]
          break;
 8007c0a:	e00a      	b.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c0c:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d105      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            frequency = LSE_VALUE;
 8007c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1e:	61fb      	str	r3, [r7, #28]
          break;
 8007c20:	e001      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
          break;
 8007c22:	bf00      	nop
 8007c24:	e198      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007c26:	bf00      	nop
        break;
 8007c28:	e196      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007c34:	4bad      	ldr	r3, [pc, #692]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c3e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c46:	d036      	beq.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
 8007c48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c4c:	d003      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c52:	d004      	beq.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          break;
 8007c54:	e05e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          frequency = HAL_RCC_GetSysClockFreq();
 8007c56:	f7ff f8fb 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007c5a:	61f8      	str	r0, [r7, #28]
          break;
 8007c5c:	e05a      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007c5e:	4ba3      	ldr	r3, [pc, #652]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c6a:	d150      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007c6c:	4b9f      	ldr	r3, [pc, #636]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d04a      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007c78:	4b9c      	ldr	r3, [pc, #624]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	0a1b      	lsrs	r3, r3, #8
 8007c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c82:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	fb02 f203 	mul.w	r2, r2, r3
 8007c8c:	4b97      	ldr	r3, [pc, #604]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	3301      	adds	r3, #1
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007c9e:	4b93      	ldr	r3, [pc, #588]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	0e5b      	lsrs	r3, r3, #25
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	3301      	adds	r3, #1
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb2:	61fb      	str	r3, [r7, #28]
          break;
 8007cb4:	e02b      	b.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8007cb6:	4b8d      	ldr	r3, [pc, #564]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc2:	d126      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8007cc4:	4b89      	ldr	r3, [pc, #548]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d020      	beq.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007cd0:	4b86      	ldr	r3, [pc, #536]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cda:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	fb02 f203 	mul.w	r2, r2, r3
 8007ce4:	4b81      	ldr	r3, [pc, #516]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	091b      	lsrs	r3, r3, #4
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	3301      	adds	r3, #1
 8007cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8007cf6:	4b7d      	ldr	r3, [pc, #500]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	0e5b      	lsrs	r3, r3, #25
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	3301      	adds	r3, #1
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0a:	61fb      	str	r3, [r7, #28]
          break;
 8007d0c:	e001      	b.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          break;
 8007d0e:	bf00      	nop
 8007d10:	e122      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007d12:	bf00      	nop
        break;
 8007d14:	e120      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007d16:	4b75      	ldr	r3, [pc, #468]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d20:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d28:	f7ff f93e 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 8007d2c:	61f8      	str	r0, [r7, #28]
        break;
 8007d2e:	e113      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d30:	f7ff f88e 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007d34:	61f8      	str	r0, [r7, #28]
        break;
 8007d36:	e10f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007d38:	4b6c      	ldr	r3, [pc, #432]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d42:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4a:	d009      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d50:	d00a      	beq.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d000      	beq.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          break;
 8007d56:	e011      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d58:	f7ff f910 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007d5c:	61f8      	str	r0, [r7, #28]
          break;
 8007d5e:	e00d      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d60:	f7ff f876 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007d64:	61f8      	str	r0, [r7, #28]
          break;
 8007d66:	e009      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d68:	4b60      	ldr	r3, [pc, #384]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d74:	d101      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
            frequency = HSI_VALUE;
 8007d76:	4b5e      	ldr	r3, [pc, #376]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8007d78:	61fb      	str	r3, [r7, #28]
          break;
 8007d7a:	bf00      	nop
        break;
 8007d7c:	e0ec      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d7e:	4b5b      	ldr	r3, [pc, #364]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d88:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d90:	d009      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d96:	d00a      	beq.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d000      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
          break;
 8007d9c:	e011      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d9e:	f7ff f8ed 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007da2:	61f8      	str	r0, [r7, #28]
          break;
 8007da4:	e00d      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = HAL_RCC_GetSysClockFreq();
 8007da6:	f7ff f853 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007daa:	61f8      	str	r0, [r7, #28]
          break;
 8007dac:	e009      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dae:	4b4f      	ldr	r3, [pc, #316]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dba:	d101      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
            frequency = HSI_VALUE;
 8007dbc:	4b4c      	ldr	r3, [pc, #304]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8007dbe:	61fb      	str	r3, [r7, #28]
          break;
 8007dc0:	bf00      	nop
        break;
 8007dc2:	e0c9      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dc4:	4b49      	ldr	r3, [pc, #292]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dce:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd6:	d009      	beq.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ddc:	d00a      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d000      	beq.n	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
          break;
 8007de2:	e011      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007de4:	f7ff f8ca 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007de8:	61f8      	str	r0, [r7, #28]
          break;
 8007dea:	e00d      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HAL_RCC_GetSysClockFreq();
 8007dec:	f7ff f830 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8007df0:	61f8      	str	r0, [r7, #28]
          break;
 8007df2:	e009      	b.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007df4:	4b3d      	ldr	r3, [pc, #244]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e00:	d101      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            frequency = HSI_VALUE;
 8007e02:	4b3b      	ldr	r3, [pc, #236]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8007e04:	61fb      	str	r3, [r7, #28]
          break;
 8007e06:	bf00      	nop
        break;
 8007e08:	e0a6      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007e0a:	4b38      	ldr	r3, [pc, #224]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007e14:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e1c:	d010      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
 8007e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e22:	d802      	bhi.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
          break;
 8007e28:	e02f      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        switch(srcclk)
 8007e2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e2e:	d012      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
 8007e30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e34:	d019      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          break;
 8007e36:	e028      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7ff f8a0 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007e3c:	61f8      	str	r0, [r7, #28]
          break;
 8007e3e:	e024      	b.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e40:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d118      	bne.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
              frequency = LSI_VALUE;
 8007e4e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e52:	61fb      	str	r3, [r7, #28]
          break;
 8007e54:	e014      	b.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e56:	4b25      	ldr	r3, [pc, #148]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e62:	d10f      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
            frequency = HSI_VALUE;
 8007e64:	4b22      	ldr	r3, [pc, #136]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8007e66:	61fb      	str	r3, [r7, #28]
          break;
 8007e68:	e00c      	b.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e6a:	4b20      	ldr	r3, [pc, #128]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d107      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
            frequency = LSE_VALUE;
 8007e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e7c:	61fb      	str	r3, [r7, #28]
          break;
 8007e7e:	e003      	b.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 8007e80:	bf00      	nop
 8007e82:	e069      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007e84:	bf00      	nop
 8007e86:	e067      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007e88:	bf00      	nop
        break;
 8007e8a:	e065      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e96:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
 8007ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ea4:	d802      	bhi.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          break;
 8007eaa:	e033      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        switch(srcclk)
 8007eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eb0:	d012      	beq.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x878>
 8007eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eb6:	d01d      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          break;
 8007eb8:	e02c      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007eba:	f7ff f85f 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007ebe:	61f8      	str	r0, [r7, #28]
          break;
 8007ec0:	e028      	b.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d11c      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
              frequency = LSI_VALUE;
 8007ed0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ed4:	61fb      	str	r3, [r7, #28]
          break;
 8007ed6:	e018      	b.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee4:	d113      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
            frequency = HSI_VALUE;
 8007ee6:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x890>)
 8007ee8:	61fb      	str	r3, [r7, #28]
          break;
 8007eea:	e010      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007eec:	40021000 	.word	0x40021000
 8007ef0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ef4:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d107      	bne.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
            frequency = LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f06:	61fb      	str	r3, [r7, #28]
          break;
 8007f08:	e003      	b.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          break;
 8007f0a:	bf00      	nop
 8007f0c:	e024      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007f0e:	bf00      	nop
 8007f10:	e022      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          break;
 8007f12:	bf00      	nop
        break;
 8007f14:	e020      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8007f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f20:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2c:	d004      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
          break;
 8007f2e:	e00d      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f30:	f7ff f824 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8007f34:	61f8      	str	r0, [r7, #28]
          break;
 8007f36:	e009      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f44:	d101      	bne.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8007f46:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
 8007f48:	61fb      	str	r3, [r7, #28]
          break;
 8007f4a:	bf00      	nop
        break;
 8007f4c:	e004      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8007f4e:	bf00      	nop
 8007f50:	e002      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8007f52:	bf00      	nop
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
      break;
 8007f56:	bf00      	nop
    }
  }

  return(frequency);
 8007f58:	69fb      	ldr	r3, [r7, #28]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40021000 	.word	0x40021000
 8007f68:	00f42400 	.word	0x00f42400

08007f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007f7a:	4b73      	ldr	r3, [pc, #460]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d018      	beq.n	8007fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007f86:	4b70      	ldr	r3, [pc, #448]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f003 0203 	and.w	r2, r3, #3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d10d      	bne.n	8007fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
       ||
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f9e:	4b6a      	ldr	r3, [pc, #424]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
       ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d044      	beq.n	800803c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	73fb      	strb	r3, [r7, #15]
 8007fb6:	e041      	b.n	800803c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d00c      	beq.n	8007fda <RCCEx_PLLSAI1_Config+0x6e>
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d013      	beq.n	8007fec <RCCEx_PLLSAI1_Config+0x80>
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d120      	bne.n	800800a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007fc8:	4b5f      	ldr	r3, [pc, #380]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d11d      	bne.n	8008010 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fd8:	e01a      	b.n	8008010 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007fda:	4b5b      	ldr	r3, [pc, #364]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d116      	bne.n	8008014 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007fea:	e013      	b.n	8008014 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007fec:	4b56      	ldr	r3, [pc, #344]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10f      	bne.n	8008018 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ff8:	4b53      	ldr	r3, [pc, #332]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008008:	e006      	b.n	8008018 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
      break;
 800800e:	e004      	b.n	800801a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008010:	bf00      	nop
 8008012:	e002      	b.n	800801a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008014:	bf00      	nop
 8008016:	e000      	b.n	800801a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008018:	bf00      	nop
    }

    if(status == HAL_OK)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008020:	4b49      	ldr	r3, [pc, #292]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6819      	ldr	r1, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	3b01      	subs	r3, #1
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	430b      	orrs	r3, r1
 8008036:	4944      	ldr	r1, [pc, #272]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008038:	4313      	orrs	r3, r2
 800803a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d17d      	bne.n	800813e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008042:	4b41      	ldr	r3, [pc, #260]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a40      	ldr	r2, [pc, #256]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800804c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804e:	f7fa f9e3 	bl	8002418 <HAL_GetTick>
 8008052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008054:	e009      	b.n	800806a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008056:	f7fa f9df 	bl	8002418 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d902      	bls.n	800806a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	73fb      	strb	r3, [r7, #15]
        break;
 8008068:	e005      	b.n	8008076 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800806a:	4b37      	ldr	r3, [pc, #220]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ef      	bne.n	8008056 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d160      	bne.n	800813e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d111      	bne.n	80080a6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008082:	4b31      	ldr	r3, [pc, #196]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800808a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6892      	ldr	r2, [r2, #8]
 8008092:	0211      	lsls	r1, r2, #8
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68d2      	ldr	r2, [r2, #12]
 8008098:	0912      	lsrs	r2, r2, #4
 800809a:	0452      	lsls	r2, r2, #17
 800809c:	430a      	orrs	r2, r1
 800809e:	492a      	ldr	r1, [pc, #168]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	610b      	str	r3, [r1, #16]
 80080a4:	e027      	b.n	80080f6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d112      	bne.n	80080d2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080ac:	4b26      	ldr	r3, [pc, #152]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80080b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6892      	ldr	r2, [r2, #8]
 80080bc:	0211      	lsls	r1, r2, #8
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	6912      	ldr	r2, [r2, #16]
 80080c2:	0852      	lsrs	r2, r2, #1
 80080c4:	3a01      	subs	r2, #1
 80080c6:	0552      	lsls	r2, r2, #21
 80080c8:	430a      	orrs	r2, r1
 80080ca:	491f      	ldr	r1, [pc, #124]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	610b      	str	r3, [r1, #16]
 80080d0:	e011      	b.n	80080f6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80080d2:	4b1d      	ldr	r3, [pc, #116]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80080da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6892      	ldr	r2, [r2, #8]
 80080e2:	0211      	lsls	r1, r2, #8
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	6952      	ldr	r2, [r2, #20]
 80080e8:	0852      	lsrs	r2, r2, #1
 80080ea:	3a01      	subs	r2, #1
 80080ec:	0652      	lsls	r2, r2, #25
 80080ee:	430a      	orrs	r2, r1
 80080f0:	4915      	ldr	r1, [pc, #84]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a13      	ldr	r2, [pc, #76]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 80080fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008100:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008102:	f7fa f989 	bl	8002418 <HAL_GetTick>
 8008106:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008108:	e009      	b.n	800811e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800810a:	f7fa f985 	bl	8002418 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d902      	bls.n	800811e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	73fb      	strb	r3, [r7, #15]
          break;
 800811c:	e005      	b.n	800812a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800811e:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0ef      	beq.n	800810a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008130:	4b05      	ldr	r3, [pc, #20]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	4903      	ldr	r1, [pc, #12]	; (8008148 <RCCEx_PLLSAI1_Config+0x1dc>)
 800813a:	4313      	orrs	r3, r2
 800813c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40021000 	.word	0x40021000

0800814c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800815a:	4b68      	ldr	r3, [pc, #416]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d018      	beq.n	8008198 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008166:	4b65      	ldr	r3, [pc, #404]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f003 0203 	and.w	r2, r3, #3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	429a      	cmp	r2, r3
 8008174:	d10d      	bne.n	8008192 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
       ||
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800817e:	4b5f      	ldr	r3, [pc, #380]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	091b      	lsrs	r3, r3, #4
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
       ||
 800818e:	429a      	cmp	r2, r3
 8008190:	d044      	beq.n	800821c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	73fb      	strb	r3, [r7, #15]
 8008196:	e041      	b.n	800821c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d00c      	beq.n	80081ba <RCCEx_PLLSAI2_Config+0x6e>
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d013      	beq.n	80081cc <RCCEx_PLLSAI2_Config+0x80>
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d120      	bne.n	80081ea <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081a8:	4b54      	ldr	r3, [pc, #336]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11d      	bne.n	80081f0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081b8:	e01a      	b.n	80081f0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80081ba:	4b50      	ldr	r3, [pc, #320]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d116      	bne.n	80081f4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80081ca:	e013      	b.n	80081f4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80081cc:	4b4b      	ldr	r3, [pc, #300]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10f      	bne.n	80081f8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80081d8:	4b48      	ldr	r3, [pc, #288]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d109      	bne.n	80081f8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081e8:	e006      	b.n	80081f8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
      break;
 80081ee:	e004      	b.n	80081fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80081f0:	bf00      	nop
 80081f2:	e002      	b.n	80081fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80081f4:	bf00      	nop
 80081f6:	e000      	b.n	80081fa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80081f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10d      	bne.n	800821c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008200:	4b3e      	ldr	r3, [pc, #248]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	3b01      	subs	r3, #1
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	430b      	orrs	r3, r1
 8008216:	4939      	ldr	r1, [pc, #228]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008218:	4313      	orrs	r3, r2
 800821a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d167      	bne.n	80082f2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008222:	4b36      	ldr	r3, [pc, #216]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a35      	ldr	r2, [pc, #212]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800822c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800822e:	f7fa f8f3 	bl	8002418 <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008234:	e009      	b.n	800824a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008236:	f7fa f8ef 	bl	8002418 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d902      	bls.n	800824a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	73fb      	strb	r3, [r7, #15]
        break;
 8008248:	e005      	b.n	8008256 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800824a:	4b2c      	ldr	r3, [pc, #176]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1ef      	bne.n	8008236 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d14a      	bne.n	80082f2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d111      	bne.n	8008286 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008262:	4b26      	ldr	r3, [pc, #152]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800826a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	6892      	ldr	r2, [r2, #8]
 8008272:	0211      	lsls	r1, r2, #8
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	68d2      	ldr	r2, [r2, #12]
 8008278:	0912      	lsrs	r2, r2, #4
 800827a:	0452      	lsls	r2, r2, #17
 800827c:	430a      	orrs	r2, r1
 800827e:	491f      	ldr	r1, [pc, #124]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008280:	4313      	orrs	r3, r2
 8008282:	614b      	str	r3, [r1, #20]
 8008284:	e011      	b.n	80082aa <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008286:	4b1d      	ldr	r3, [pc, #116]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800828e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6892      	ldr	r2, [r2, #8]
 8008296:	0211      	lsls	r1, r2, #8
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6912      	ldr	r2, [r2, #16]
 800829c:	0852      	lsrs	r2, r2, #1
 800829e:	3a01      	subs	r2, #1
 80082a0:	0652      	lsls	r2, r2, #25
 80082a2:	430a      	orrs	r2, r1
 80082a4:	4915      	ldr	r1, [pc, #84]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80082aa:	4b14      	ldr	r3, [pc, #80]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a13      	ldr	r2, [pc, #76]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b6:	f7fa f8af 	bl	8002418 <HAL_GetTick>
 80082ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082bc:	e009      	b.n	80082d2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082be:	f7fa f8ab 	bl	8002418 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d902      	bls.n	80082d2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	73fb      	strb	r3, [r7, #15]
          break;
 80082d0:	e005      	b.n	80082de <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0ef      	beq.n	80082be <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d106      	bne.n	80082f2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082e6:	695a      	ldr	r2, [r3, #20]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	695b      	ldr	r3, [r3, #20]
 80082ec:	4903      	ldr	r1, [pc, #12]	; (80082fc <RCCEx_PLLSAI2_Config+0x1b0>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40021000 	.word	0x40021000

08008300 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8008300:	b480      	push	{r7}
 8008302:	b089      	sub	sp, #36	; 0x24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831c:	d10c      	bne.n	8008338 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800831e:	4b6e      	ldr	r3, [pc, #440]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008328:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008330:	d112      	bne.n	8008358 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008332:	4b6a      	ldr	r3, [pc, #424]	; (80084dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008334:	61fb      	str	r3, [r7, #28]
 8008336:	e00f      	b.n	8008358 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833e:	d10b      	bne.n	8008358 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008340:	4b65      	ldr	r3, [pc, #404]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800834a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008352:	d101      	bne.n	8008358 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8008354:	4b61      	ldr	r3, [pc, #388]	; (80084dc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8008356:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 80b4 	bne.w	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800836a:	d003      	beq.n	8008374 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008372:	d135      	bne.n	80083e0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008374:	4b58      	ldr	r3, [pc, #352]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008380:	f040 80a1 	bne.w	80084c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8008384:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 809a 	beq.w	80084c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008392:	4b51      	ldr	r3, [pc, #324]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	091b      	lsrs	r3, r3, #4
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	3301      	adds	r3, #1
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80083a6:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80083b8:	4b47      	ldr	r3, [pc, #284]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80083c4:	2311      	movs	r3, #17
 80083c6:	617b      	str	r3, [r7, #20]
 80083c8:	e001      	b.n	80083ce <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80083ca:	2307      	movs	r3, #7
 80083cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	fb02 f203 	mul.w	r2, r2, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083dc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80083de:	e072      	b.n	80084c6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d133      	bne.n	800844e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80083e6:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083f2:	d169      	bne.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80083f4:	4b38      	ldr	r3, [pc, #224]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d063      	beq.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008400:	4b35      	ldr	r3, [pc, #212]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	091b      	lsrs	r3, r3, #4
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	3301      	adds	r3, #1
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008414:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	0a1b      	lsrs	r3, r3, #8
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008426:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8008432:	2311      	movs	r3, #17
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e001      	b.n	800843c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8008438:	2307      	movs	r3, #7
 800843a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	fb02 f203 	mul.w	r2, r2, r3
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	fbb2 f3f3 	udiv	r3, r2, r3
 800844a:	61fb      	str	r3, [r7, #28]
 800844c:	e03c      	b.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008454:	d003      	beq.n	800845e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800845c:	d134      	bne.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800845e:	4b1e      	ldr	r3, [pc, #120]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846a:	d12d      	bne.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800846c:	4b1a      	ldr	r3, [pc, #104]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d027      	beq.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	3301      	adds	r3, #1
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	fbb2 f3f3 	udiv	r3, r2, r3
 800848a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800848c:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008496:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800849e:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80084aa:	2311      	movs	r3, #17
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	e001      	b.n	80084b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80084b0:	2307      	movs	r3, #7
 80084b2:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	fb02 f203 	mul.w	r2, r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e000      	b.n	80084c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80084c6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80084c8:	69fb      	ldr	r3, [r7, #28]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3724      	adds	r7, #36	; 0x24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40021000 	.word	0x40021000
 80084dc:	001fff68 	.word	0x001fff68

080084e0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e153      	b.n	800879a <HAL_SAI_Init+0x2ba>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d106      	bne.n	800850c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7f9 fa58 	bl	80019bc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f957 	bl	80087c0 <SAI_Disable>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e13e      	b.n	800879a <HAL_SAI_Init+0x2ba>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d007      	beq.n	800853c <HAL_SAI_Init+0x5c>
 800852c:	2b01      	cmp	r3, #1
 800852e:	d302      	bcc.n	8008536 <HAL_SAI_Init+0x56>
 8008530:	2b02      	cmp	r3, #2
 8008532:	d006      	beq.n	8008542 <HAL_SAI_Init+0x62>
 8008534:	e008      	b.n	8008548 <HAL_SAI_Init+0x68>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]
      break;
 800853a:	e008      	b.n	800854e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800853c:	2310      	movs	r3, #16
 800853e:	61fb      	str	r3, [r7, #28]
      break;
 8008540:	e005      	b.n	800854e <HAL_SAI_Init+0x6e>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008542:	2320      	movs	r3, #32
 8008544:	61fb      	str	r3, [r7, #28]
      break;
 8008546:	e002      	b.n	800854e <HAL_SAI_Init+0x6e>
    default :
      tmpregisterGCR = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	61fb      	str	r3, [r7, #28]
      break;
 800854c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d81d      	bhi.n	8008592 <HAL_SAI_Init+0xb2>
 8008556:	a201      	add	r2, pc, #4	; (adr r2, 800855c <HAL_SAI_Init+0x7c>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	0800856d 	.word	0x0800856d
 8008560:	08008573 	.word	0x08008573
 8008564:	0800857b 	.word	0x0800857b
 8008568:	08008583 	.word	0x08008583
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800856c:	2300      	movs	r3, #0
 800856e:	617b      	str	r3, [r7, #20]
      break;
 8008570:	e012      	b.n	8008598 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008576:	617b      	str	r3, [r7, #20]
      break;
 8008578:	e00e      	b.n	8008598 <HAL_SAI_Init+0xb8>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800857a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800857e:	617b      	str	r3, [r7, #20]
      break;
 8008580:	e00a      	b.n	8008598 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008586:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	61fb      	str	r3, [r7, #28]
      break;
 8008590:	e002      	b.n	8008598 <HAL_SAI_Init+0xb8>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
      break;
 8008596:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a81      	ldr	r2, [pc, #516]	; (80087a4 <HAL_SAI_Init+0x2c4>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <HAL_SAI_Init+0xcc>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a80      	ldr	r2, [pc, #512]	; (80087a8 <HAL_SAI_Init+0x2c8>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d103      	bne.n	80085b4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80085ac:	4a7f      	ldr	r2, [pc, #508]	; (80087ac <HAL_SAI_Init+0x2cc>)
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	e002      	b.n	80085ba <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80085b4:	4a7e      	ldr	r2, [pc, #504]	; (80087b0 <HAL_SAI_Init+0x2d0>)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d041      	beq.n	8008646 <HAL_SAI_Init+0x166>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a77      	ldr	r2, [pc, #476]	; (80087a4 <HAL_SAI_Init+0x2c4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_SAI_Init+0xf6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a75      	ldr	r2, [pc, #468]	; (80087a8 <HAL_SAI_Init+0x2c8>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d105      	bne.n	80085e2 <HAL_SAI_Init+0x102>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80085d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80085da:	f7ff f841 	bl	8007660 <HAL_RCCEx_GetPeriphCLKFreq>
 80085de:	6138      	str	r0, [r7, #16]
 80085e0:	e004      	b.n	80085ec <HAL_SAI_Init+0x10c>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80085e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80085e6:	f7ff f83b 	bl	8007660 <HAL_RCCEx_GetPeriphCLKFreq>
 80085ea:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	025b      	lsls	r3, r3, #9
 80085fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008602:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a6b      	ldr	r2, [pc, #428]	; (80087b4 <HAL_SAI_Init+0x2d4>)
 8008608:	fba2 2303 	umull	r2, r3, r2, r3
 800860c:	08da      	lsrs	r2, r3, #3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008612:	68f9      	ldr	r1, [r7, #12]
 8008614:	4b67      	ldr	r3, [pc, #412]	; (80087b4 <HAL_SAI_Init+0x2d4>)
 8008616:	fba3 2301 	umull	r2, r3, r3, r1
 800861a:	08da      	lsrs	r2, r3, #3
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	1aca      	subs	r2, r1, r3
 8008626:	2a08      	cmp	r2, #8
 8008628:	d904      	bls.n	8008634 <HAL_SAI_Init+0x154>
    {
      hsai->Init.Mckdiv += 1U;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	1c5a      	adds	r2, r3, #1
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008638:	2b04      	cmp	r3, #4
 800863a:	d104      	bne.n	8008646 <HAL_SAI_Init+0x166>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	085a      	lsrs	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_SAI_Init+0x176>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	2b02      	cmp	r3, #2
 8008654:	d109      	bne.n	800866a <HAL_SAI_Init+0x18a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_SAI_Init+0x182>
 800865e:	2300      	movs	r3, #0
 8008660:	e001      	b.n	8008666 <HAL_SAI_Init+0x186>
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	e008      	b.n	800867c <HAL_SAI_Init+0x19c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	2b01      	cmp	r3, #1
 8008670:	d102      	bne.n	8008678 <HAL_SAI_Init+0x198>
 8008672:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008676:	e000      	b.n	800867a <HAL_SAI_Init+0x19a>
 8008678:	2300      	movs	r3, #0
 800867a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4b4c      	ldr	r3, [pc, #304]	; (80087b8 <HAL_SAI_Init+0x2d8>)
 8008688:	400b      	ands	r3, r1
 800868a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6819      	ldr	r1, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	431a      	orrs	r2, r3
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 80086b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	051b      	lsls	r3, r3, #20
 80086c8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6812      	ldr	r2, [r2, #0]
 80086dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80086e0:	f023 030f 	bic.w	r3, r3, #15
 80086e4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6859      	ldr	r1, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6899      	ldr	r1, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <HAL_SAI_Init+0x2dc>)
 8008710:	400b      	ands	r3, r1
 8008712:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6899      	ldr	r1, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008724:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800872a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008730:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008736:	3b01      	subs	r3, #1
 8008738:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800873a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	430a      	orrs	r2, r1
 8008742:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68d9      	ldr	r1, [r3, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008752:	400b      	ands	r3, r1
 8008754:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68d9      	ldr	r1, [r3, #12]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008764:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800876c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008772:	3b01      	subs	r3, #1
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	40015404 	.word	0x40015404
 80087a8:	40015424 	.word	0x40015424
 80087ac:	40015400 	.word	0x40015400
 80087b0:	40015800 	.word	0x40015800
 80087b4:	cccccccd 	.word	0xcccccccd
 80087b8:	ff05c010 	.word	0xff05c010
 80087bc:	fff88000 	.word	0xfff88000

080087c0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80087c8:	4b18      	ldr	r3, [pc, #96]	; (800882c <SAI_Disable+0x6c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a18      	ldr	r2, [pc, #96]	; (8008830 <SAI_Disable+0x70>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	0b1b      	lsrs	r3, r3, #12
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087ea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	72fb      	strb	r3, [r7, #11]
      break;
 8008806:	e009      	b.n	800881c <SAI_Disable+0x5c>
    }
    count--;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3b01      	subs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e7      	bne.n	80087ec <SAI_Disable+0x2c>

  return status;
 800881c:	7afb      	ldrb	r3, [r7, #11]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20000008 	.word	0x20000008
 8008830:	95cbec1b 	.word	0x95cbec1b

08008834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e095      	b.n	8008972 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	2b00      	cmp	r3, #0
 800884c:	d108      	bne.n	8008860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008856:	d009      	beq.n	800886c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	61da      	str	r2, [r3, #28]
 800885e:	e005      	b.n	800886c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7f9 f94e 	bl	8001b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088ac:	d902      	bls.n	80088b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088ae:	2300      	movs	r3, #0
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	e002      	b.n	80088ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80088c2:	d007      	beq.n	80088d4 <HAL_SPI_Init+0xa0>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088cc:	d002      	beq.n	80088d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008902:	431a      	orrs	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	ea42 0103 	orr.w	r1, r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	f003 0204 	and.w	r2, r3, #4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	f003 0308 	and.w	r3, r3, #8
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008950:	ea42 0103 	orr.w	r1, r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e049      	b.n	8008a20 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7f9 fbeb 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2202      	movs	r2, #2
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4619      	mov	r1, r3
 80089b8:	4610      	mov	r0, r2
 80089ba:	f000 faa5 	bl	8008f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d001      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e04f      	b.n	8008ae0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a23      	ldr	r2, [pc, #140]	; (8008aec <HAL_TIM_Base_Start_IT+0xc4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d01d      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6a:	d018      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d013      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d00e      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a1c      	ldr	r2, [pc, #112]	; (8008af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a1b      	ldr	r2, [pc, #108]	; (8008afc <HAL_TIM_Base_Start_IT+0xd4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d004      	beq.n	8008a9e <HAL_TIM_Base_Start_IT+0x76>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d115      	bne.n	8008aca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	4b17      	ldr	r3, [pc, #92]	; (8008b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b06      	cmp	r3, #6
 8008aae:	d015      	beq.n	8008adc <HAL_TIM_Base_Start_IT+0xb4>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab6:	d011      	beq.n	8008adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0201 	orr.w	r2, r2, #1
 8008ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac8:	e008      	b.n	8008adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0201 	orr.w	r2, r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
 8008ada:	e000      	b.n	8008ade <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40000400 	.word	0x40000400
 8008af4:	40000800 	.word	0x40000800
 8008af8:	40000c00 	.word	0x40000c00
 8008afc:	40013400 	.word	0x40013400
 8008b00:	40014000 	.word	0x40014000
 8008b04:	00010007 	.word	0x00010007

08008b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d122      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d11b      	bne.n	8008b64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f06f 0202 	mvn.w	r2, #2
 8008b34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d003      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f9be 	bl	8008ecc <HAL_TIM_IC_CaptureCallback>
 8008b50:	e005      	b.n	8008b5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f9b0 	bl	8008eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9c1 	bl	8008ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d122      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f003 0304 	and.w	r3, r3, #4
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d11b      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f06f 0204 	mvn.w	r2, #4
 8008b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f994 	bl	8008ecc <HAL_TIM_IC_CaptureCallback>
 8008ba4:	e005      	b.n	8008bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f986 	bl	8008eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f997 	bl	8008ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0308 	and.w	r3, r3, #8
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d122      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d11b      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0208 	mvn.w	r2, #8
 8008bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2204      	movs	r2, #4
 8008be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f96a 	bl	8008ecc <HAL_TIM_IC_CaptureCallback>
 8008bf8:	e005      	b.n	8008c06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f95c 	bl	8008eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f96d 	bl	8008ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d122      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0310 	and.w	r3, r3, #16
 8008c24:	2b10      	cmp	r3, #16
 8008c26:	d11b      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0210 	mvn.w	r2, #16
 8008c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2208      	movs	r2, #8
 8008c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f940 	bl	8008ecc <HAL_TIM_IC_CaptureCallback>
 8008c4c:	e005      	b.n	8008c5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f932 	bl	8008eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f943 	bl	8008ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d10e      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d107      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0201 	mvn.w	r2, #1
 8008c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f9 fa9e 	bl	80021c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c96:	2b80      	cmp	r3, #128	; 0x80
 8008c98:	d10e      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca4:	2b80      	cmp	r3, #128	; 0x80
 8008ca6:	d107      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 faee 	bl	8009294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc6:	d10e      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd2:	2b80      	cmp	r3, #128	; 0x80
 8008cd4:	d107      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fae1 	bl	80092a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf0:	2b40      	cmp	r3, #64	; 0x40
 8008cf2:	d10e      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfe:	2b40      	cmp	r3, #64	; 0x40
 8008d00:	d107      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f8f1 	bl	8008ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b20      	cmp	r3, #32
 8008d1e:	d10e      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f003 0320 	and.w	r3, r3, #32
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d107      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f06f 0220 	mvn.w	r2, #32
 8008d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 faa1 	bl	8009280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d3e:	bf00      	nop
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_TIM_ConfigClockSource+0x18>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e0a8      	b.n	8008eb0 <HAL_TIM_ConfigClockSource+0x16a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d88:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d067      	beq.n	8008e6a <HAL_TIM_ConfigClockSource+0x124>
 8008d9a:	2b40      	cmp	r3, #64	; 0x40
 8008d9c:	d80b      	bhi.n	8008db6 <HAL_TIM_ConfigClockSource+0x70>
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d073      	beq.n	8008e8a <HAL_TIM_ConfigClockSource+0x144>
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d802      	bhi.n	8008dac <HAL_TIM_ConfigClockSource+0x66>
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d06f      	beq.n	8008e8a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008daa:	e078      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008dac:	2b20      	cmp	r3, #32
 8008dae:	d06c      	beq.n	8008e8a <HAL_TIM_ConfigClockSource+0x144>
 8008db0:	2b30      	cmp	r3, #48	; 0x30
 8008db2:	d06a      	beq.n	8008e8a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008db4:	e073      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008db6:	2b70      	cmp	r3, #112	; 0x70
 8008db8:	d00d      	beq.n	8008dd6 <HAL_TIM_ConfigClockSource+0x90>
 8008dba:	2b70      	cmp	r3, #112	; 0x70
 8008dbc:	d804      	bhi.n	8008dc8 <HAL_TIM_ConfigClockSource+0x82>
 8008dbe:	2b50      	cmp	r3, #80	; 0x50
 8008dc0:	d033      	beq.n	8008e2a <HAL_TIM_ConfigClockSource+0xe4>
 8008dc2:	2b60      	cmp	r3, #96	; 0x60
 8008dc4:	d041      	beq.n	8008e4a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008dc6:	e06a      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dcc:	d066      	beq.n	8008e9c <HAL_TIM_ConfigClockSource+0x156>
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	d017      	beq.n	8008e04 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008dd4:	e063      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	6899      	ldr	r1, [r3, #8]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f000 f9a3 	bl	8009130 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008df8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	609a      	str	r2, [r3, #8]
      break;
 8008e02:	e04c      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6818      	ldr	r0, [r3, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	6899      	ldr	r1, [r3, #8]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f000 f98c 	bl	8009130 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e26:	609a      	str	r2, [r3, #8]
      break;
 8008e28:	e039      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	6859      	ldr	r1, [r3, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f000 f900 	bl	800903c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2150      	movs	r1, #80	; 0x50
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f959 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e48:	e029      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6859      	ldr	r1, [r3, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f000 f91f 	bl	800909a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2160      	movs	r1, #96	; 0x60
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f949 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e68:	e019      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	6859      	ldr	r1, [r3, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f000 f8e0 	bl	800903c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2140      	movs	r1, #64	; 0x40
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f939 	bl	80090fa <TIM_ITRx_SetConfig>
      break;
 8008e88:	e009      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f000 f930 	bl	80090fa <TIM_ITRx_SetConfig>
        break;
 8008e9a:	e000      	b.n	8008e9e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008e9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a40      	ldr	r2, [pc, #256]	; (800901c <TIM_Base_SetConfig+0x114>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <TIM_Base_SetConfig+0x40>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f26:	d00f      	beq.n	8008f48 <TIM_Base_SetConfig+0x40>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a3d      	ldr	r2, [pc, #244]	; (8009020 <TIM_Base_SetConfig+0x118>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00b      	beq.n	8008f48 <TIM_Base_SetConfig+0x40>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a3c      	ldr	r2, [pc, #240]	; (8009024 <TIM_Base_SetConfig+0x11c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d007      	beq.n	8008f48 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a3b      	ldr	r2, [pc, #236]	; (8009028 <TIM_Base_SetConfig+0x120>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3a      	ldr	r2, [pc, #232]	; (800902c <TIM_Base_SetConfig+0x124>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d108      	bne.n	8008f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a2f      	ldr	r2, [pc, #188]	; (800901c <TIM_Base_SetConfig+0x114>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01f      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f68:	d01b      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2c      	ldr	r2, [pc, #176]	; (8009020 <TIM_Base_SetConfig+0x118>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d017      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2b      	ldr	r2, [pc, #172]	; (8009024 <TIM_Base_SetConfig+0x11c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d013      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	; (8009028 <TIM_Base_SetConfig+0x120>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00f      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a29      	ldr	r2, [pc, #164]	; (800902c <TIM_Base_SetConfig+0x124>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00b      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a28      	ldr	r2, [pc, #160]	; (8009030 <TIM_Base_SetConfig+0x128>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d007      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a27      	ldr	r2, [pc, #156]	; (8009034 <TIM_Base_SetConfig+0x12c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d003      	beq.n	8008fa2 <TIM_Base_SetConfig+0x9a>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a26      	ldr	r2, [pc, #152]	; (8009038 <TIM_Base_SetConfig+0x130>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d108      	bne.n	8008fb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a10      	ldr	r2, [pc, #64]	; (800901c <TIM_Base_SetConfig+0x114>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d00f      	beq.n	8009000 <TIM_Base_SetConfig+0xf8>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a12      	ldr	r2, [pc, #72]	; (800902c <TIM_Base_SetConfig+0x124>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00b      	beq.n	8009000 <TIM_Base_SetConfig+0xf8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a11      	ldr	r2, [pc, #68]	; (8009030 <TIM_Base_SetConfig+0x128>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d007      	beq.n	8009000 <TIM_Base_SetConfig+0xf8>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <TIM_Base_SetConfig+0x12c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d003      	beq.n	8009000 <TIM_Base_SetConfig+0xf8>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a0f      	ldr	r2, [pc, #60]	; (8009038 <TIM_Base_SetConfig+0x130>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d103      	bne.n	8009008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	615a      	str	r2, [r3, #20]
}
 800900e:	bf00      	nop
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40012c00 	.word	0x40012c00
 8009020:	40000400 	.word	0x40000400
 8009024:	40000800 	.word	0x40000800
 8009028:	40000c00 	.word	0x40000c00
 800902c:	40013400 	.word	0x40013400
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f023 0201 	bic.w	r2, r3, #1
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	693a      	ldr	r2, [r7, #16]
 800906e:	4313      	orrs	r3, r2
 8009070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f023 030a 	bic.w	r3, r3, #10
 8009078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	621a      	str	r2, [r3, #32]
}
 800908e:	bf00      	nop
 8009090:	371c      	adds	r7, #28
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800909a:	b480      	push	{r7}
 800909c:	b087      	sub	sp, #28
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	f023 0210 	bic.w	r2, r3, #16
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	031b      	lsls	r3, r3, #12
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	621a      	str	r2, [r3, #32]
}
 80090ee:	bf00      	nop
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	f043 0307 	orr.w	r3, r3, #7
 800911c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	bf00      	nop
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800914a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	021a      	lsls	r2, r3, #8
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	431a      	orrs	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4313      	orrs	r3, r2
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	609a      	str	r2, [r3, #8]
}
 8009164:	bf00      	nop
 8009166:	371c      	adds	r7, #28
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009184:	2302      	movs	r3, #2
 8009186:	e068      	b.n	800925a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a2e      	ldr	r2, [pc, #184]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a2d      	ldr	r2, [pc, #180]	; (800926c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d108      	bne.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d01d      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fa:	d018      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d013      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1a      	ldr	r2, [pc, #104]	; (8009274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00e      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d009      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a13      	ldr	r2, [pc, #76]	; (800926c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d004      	beq.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a14      	ldr	r2, [pc, #80]	; (800927c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d10c      	bne.n	8009248 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	4313      	orrs	r3, r2
 800923e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40012c00 	.word	0x40012c00
 800926c:	40013400 	.word	0x40013400
 8009270:	40000400 	.word	0x40000400
 8009274:	40000800 	.word	0x40000800
 8009278:	40000c00 	.word	0x40000c00
 800927c:	40014000 	.word	0x40014000

08009280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e040      	b.n	8009350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7f8 ffb4 	bl	800224c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	; 0x24
 80092e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fae8 	bl	80098d0 <UART_SetConfig>
 8009300:	4603      	mov	r3, r0
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e022      	b.n	8009350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fd66 	bl	8009de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fded 	bl	8009f28 <UART_CheckIdleState>
 800934e:	4603      	mov	r3, r0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	4613      	mov	r3, r2
 8009366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936c:	2b20      	cmp	r3, #32
 800936e:	f040 8081 	bne.w	8009474 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_UART_Transmit+0x26>
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e079      	b.n	8009476 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <HAL_UART_Transmit+0x38>
 800938c:	2302      	movs	r3, #2
 800938e:	e072      	b.n	8009476 <HAL_UART_Transmit+0x11e>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2221      	movs	r2, #33	; 0x21
 80093a2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80093a4:	f7f9 f838 	bl	8002418 <HAL_GetTick>
 80093a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	88fa      	ldrh	r2, [r7, #6]
 80093ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	88fa      	ldrh	r2, [r7, #6]
 80093b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c2:	d108      	bne.n	80093d6 <HAL_UART_Transmit+0x7e>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80093cc:	2300      	movs	r3, #0
 80093ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e003      	b.n	80093de <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093da:	2300      	movs	r3, #0
 80093dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80093e6:	e02d      	b.n	8009444 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2200      	movs	r2, #0
 80093f0:	2180      	movs	r1, #128	; 0x80
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 fddd 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e039      	b.n	8009476 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10b      	bne.n	8009420 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	881a      	ldrh	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009414:	b292      	uxth	r2, r2
 8009416:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	3302      	adds	r3, #2
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	e008      	b.n	8009432 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	b292      	uxth	r2, r2
 800942a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	3301      	adds	r3, #1
 8009430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1cb      	bne.n	80093e8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2200      	movs	r2, #0
 8009458:	2140      	movs	r1, #64	; 0x40
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 fda9 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e005      	b.n	8009476 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2220      	movs	r2, #32
 800946e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	e000      	b.n	8009476 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b08a      	sub	sp, #40	; 0x28
 8009482:	af02      	add	r7, sp, #8
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	603b      	str	r3, [r7, #0]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009492:	2b20      	cmp	r3, #32
 8009494:	f040 80bb 	bne.w	800960e <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_UART_Receive+0x26>
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e0b3      	b.n	8009610 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_UART_Receive+0x38>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0ac      	b.n	8009610 <HAL_UART_Receive+0x192>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2222      	movs	r2, #34	; 0x22
 80094c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80094ca:	f7f8 ffa5 	bl	8002418 <HAL_GetTick>
 80094ce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	88fa      	ldrh	r2, [r7, #6]
 80094d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e8:	d10e      	bne.n	8009508 <HAL_UART_Receive+0x8a>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d105      	bne.n	80094fe <HAL_UART_Receive+0x80>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80094f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80094fc:	e02d      	b.n	800955a <HAL_UART_Receive+0xdc>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	22ff      	movs	r2, #255	; 0xff
 8009502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009506:	e028      	b.n	800955a <HAL_UART_Receive+0xdc>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10d      	bne.n	800952c <HAL_UART_Receive+0xae>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d104      	bne.n	8009522 <HAL_UART_Receive+0xa4>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	22ff      	movs	r2, #255	; 0xff
 800951c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009520:	e01b      	b.n	800955a <HAL_UART_Receive+0xdc>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	227f      	movs	r2, #127	; 0x7f
 8009526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800952a:	e016      	b.n	800955a <HAL_UART_Receive+0xdc>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009534:	d10d      	bne.n	8009552 <HAL_UART_Receive+0xd4>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <HAL_UART_Receive+0xca>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	227f      	movs	r2, #127	; 0x7f
 8009542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009546:	e008      	b.n	800955a <HAL_UART_Receive+0xdc>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	223f      	movs	r2, #63	; 0x3f
 800954c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009550:	e003      	b.n	800955a <HAL_UART_Receive+0xdc>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009560:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956a:	d108      	bne.n	800957e <HAL_UART_Receive+0x100>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d104      	bne.n	800957e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	61bb      	str	r3, [r7, #24]
 800957c:	e003      	b.n	8009586 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800958e:	e033      	b.n	80095f8 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2200      	movs	r2, #0
 8009598:	2120      	movs	r1, #32
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fd09 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e032      	b.n	8009610 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10c      	bne.n	80095ca <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	8a7b      	ldrh	r3, [r7, #18]
 80095ba:	4013      	ands	r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	3302      	adds	r3, #2
 80095c6:	61bb      	str	r3, [r7, #24]
 80095c8:	e00d      	b.n	80095e6 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	8a7b      	ldrh	r3, [r7, #18]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4013      	ands	r3, r2
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	3301      	adds	r3, #1
 80095e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1c5      	bne.n	8009590 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	e000      	b.n	8009610 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800960e:	2302      	movs	r3, #2
  }
}
 8009610:	4618      	mov	r0, r3
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	69db      	ldr	r3, [r3, #28]
 8009626:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009638:	69fa      	ldr	r2, [r7, #28]
 800963a:	f640 030f 	movw	r3, #2063	; 0x80f
 800963e:	4013      	ands	r3, r2
 8009640:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d113      	bne.n	8009670 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f003 0320 	and.w	r3, r3, #32
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00e      	beq.n	8009670 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8114 	beq.w	800988e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	4798      	blx	r3
      }
      return;
 800966e:	e10e      	b.n	800988e <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 80d6 	beq.w	8009824 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d105      	bne.n	800968e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	4b86      	ldr	r3, [pc, #536]	; (80098a0 <HAL_UART_IRQHandler+0x288>)
 8009686:	4013      	ands	r3, r2
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80cb 	beq.w	8009824 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00e      	beq.n	80096b6 <HAL_UART_IRQHandler+0x9e>
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d009      	beq.n	80096b6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2201      	movs	r2, #1
 80096a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ae:	f043 0201 	orr.w	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00e      	beq.n	80096de <HAL_UART_IRQHandler+0xc6>
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2202      	movs	r2, #2
 80096d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d6:	f043 0204 	orr.w	r2, r3, #4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00e      	beq.n	8009706 <HAL_UART_IRQHandler+0xee>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d009      	beq.n	8009706 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2204      	movs	r2, #4
 80096f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	f043 0202 	orr.w	r2, r3, #2
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	f003 0308 	and.w	r3, r3, #8
 800970c:	2b00      	cmp	r3, #0
 800970e:	d013      	beq.n	8009738 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d104      	bne.n	8009724 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009720:	2b00      	cmp	r3, #0
 8009722:	d009      	beq.n	8009738 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2208      	movs	r2, #8
 800972a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009730:	f043 0208 	orr.w	r2, r3, #8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00f      	beq.n	8009762 <HAL_UART_IRQHandler+0x14a>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975a:	f043 0220 	orr.w	r2, r3, #32
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8093 	beq.w	8009892 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00c      	beq.n	8009790 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009794:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b40      	cmp	r3, #64	; 0x40
 80097a2:	d004      	beq.n	80097ae <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d031      	beq.n	8009812 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fc7a 	bl	800a0a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097be:	2b40      	cmp	r3, #64	; 0x40
 80097c0:	d123      	bne.n	800980a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	689a      	ldr	r2, [r3, #8]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d013      	beq.n	8009802 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097de:	4a31      	ldr	r2, [pc, #196]	; (80098a4 <HAL_UART_IRQHandler+0x28c>)
 80097e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fa fbc7 	bl	8003f7a <HAL_DMA_Abort_IT>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d016      	beq.n	8009820 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80097fc:	4610      	mov	r0, r2
 80097fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009800:	e00e      	b.n	8009820 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f85a 	bl	80098bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009808:	e00a      	b.n	8009820 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f856 	bl	80098bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009810:	e006      	b.n	8009820 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f852 	bl	80098bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800981e:	e038      	b.n	8009892 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009820:	bf00      	nop
    return;
 8009822:	e036      	b.n	8009892 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00d      	beq.n	800984a <HAL_UART_IRQHandler+0x232>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009834:	2b00      	cmp	r3, #0
 8009836:	d008      	beq.n	800984a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fc7f 	bl	800a146 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009848:	e026      	b.n	8009898 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00d      	beq.n	8009870 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985a:	2b00      	cmp	r3, #0
 800985c:	d008      	beq.n	8009870 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009862:	2b00      	cmp	r3, #0
 8009864:	d017      	beq.n	8009896 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
    }
    return;
 800986e:	e012      	b.n	8009896 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <HAL_UART_IRQHandler+0x280>
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fc45 	bl	800a114 <UART_EndTransmit_IT>
    return;
 800988a:	bf00      	nop
 800988c:	e004      	b.n	8009898 <HAL_UART_IRQHandler+0x280>
      return;
 800988e:	bf00      	nop
 8009890:	e002      	b.n	8009898 <HAL_UART_IRQHandler+0x280>
    return;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <HAL_UART_IRQHandler+0x280>
    return;
 8009896:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	04000120 	.word	0x04000120
 80098a4:	0800a0e9 	.word	0x0800a0e9

080098a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80098b0:	bf00      	nop
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80098d4:	b088      	sub	sp, #32
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	4bac      	ldr	r3, [pc, #688]	; (8009bb0 <UART_SetConfig+0x2e0>)
 80098fe:	4013      	ands	r3, r2
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6812      	ldr	r2, [r2, #0]
 8009904:	69f9      	ldr	r1, [r7, #28]
 8009906:	430b      	orrs	r3, r1
 8009908:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	430a      	orrs	r2, r1
 800991e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4aa2      	ldr	r2, [pc, #648]	; (8009bb4 <UART_SetConfig+0x2e4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d004      	beq.n	800993a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	4313      	orrs	r3, r2
 8009938:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	430a      	orrs	r2, r1
 800994c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a99      	ldr	r2, [pc, #612]	; (8009bb8 <UART_SetConfig+0x2e8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d121      	bne.n	800999c <UART_SetConfig+0xcc>
 8009958:	4b98      	ldr	r3, [pc, #608]	; (8009bbc <UART_SetConfig+0x2ec>)
 800995a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	2b03      	cmp	r3, #3
 8009964:	d816      	bhi.n	8009994 <UART_SetConfig+0xc4>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <UART_SetConfig+0x9c>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	0800997d 	.word	0x0800997d
 8009970:	08009989 	.word	0x08009989
 8009974:	08009983 	.word	0x08009983
 8009978:	0800998f 	.word	0x0800998f
 800997c:	2301      	movs	r3, #1
 800997e:	76fb      	strb	r3, [r7, #27]
 8009980:	e0e8      	b.n	8009b54 <UART_SetConfig+0x284>
 8009982:	2302      	movs	r3, #2
 8009984:	76fb      	strb	r3, [r7, #27]
 8009986:	e0e5      	b.n	8009b54 <UART_SetConfig+0x284>
 8009988:	2304      	movs	r3, #4
 800998a:	76fb      	strb	r3, [r7, #27]
 800998c:	e0e2      	b.n	8009b54 <UART_SetConfig+0x284>
 800998e:	2308      	movs	r3, #8
 8009990:	76fb      	strb	r3, [r7, #27]
 8009992:	e0df      	b.n	8009b54 <UART_SetConfig+0x284>
 8009994:	2310      	movs	r3, #16
 8009996:	76fb      	strb	r3, [r7, #27]
 8009998:	bf00      	nop
 800999a:	e0db      	b.n	8009b54 <UART_SetConfig+0x284>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a87      	ldr	r2, [pc, #540]	; (8009bc0 <UART_SetConfig+0x2f0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d134      	bne.n	8009a10 <UART_SetConfig+0x140>
 80099a6:	4b85      	ldr	r3, [pc, #532]	; (8009bbc <UART_SetConfig+0x2ec>)
 80099a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ac:	f003 030c 	and.w	r3, r3, #12
 80099b0:	2b0c      	cmp	r3, #12
 80099b2:	d829      	bhi.n	8009a08 <UART_SetConfig+0x138>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <UART_SetConfig+0xec>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099f1 	.word	0x080099f1
 80099c0:	08009a09 	.word	0x08009a09
 80099c4:	08009a09 	.word	0x08009a09
 80099c8:	08009a09 	.word	0x08009a09
 80099cc:	080099fd 	.word	0x080099fd
 80099d0:	08009a09 	.word	0x08009a09
 80099d4:	08009a09 	.word	0x08009a09
 80099d8:	08009a09 	.word	0x08009a09
 80099dc:	080099f7 	.word	0x080099f7
 80099e0:	08009a09 	.word	0x08009a09
 80099e4:	08009a09 	.word	0x08009a09
 80099e8:	08009a09 	.word	0x08009a09
 80099ec:	08009a03 	.word	0x08009a03
 80099f0:	2300      	movs	r3, #0
 80099f2:	76fb      	strb	r3, [r7, #27]
 80099f4:	e0ae      	b.n	8009b54 <UART_SetConfig+0x284>
 80099f6:	2302      	movs	r3, #2
 80099f8:	76fb      	strb	r3, [r7, #27]
 80099fa:	e0ab      	b.n	8009b54 <UART_SetConfig+0x284>
 80099fc:	2304      	movs	r3, #4
 80099fe:	76fb      	strb	r3, [r7, #27]
 8009a00:	e0a8      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a02:	2308      	movs	r3, #8
 8009a04:	76fb      	strb	r3, [r7, #27]
 8009a06:	e0a5      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a08:	2310      	movs	r3, #16
 8009a0a:	76fb      	strb	r3, [r7, #27]
 8009a0c:	bf00      	nop
 8009a0e:	e0a1      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a6b      	ldr	r2, [pc, #428]	; (8009bc4 <UART_SetConfig+0x2f4>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d120      	bne.n	8009a5c <UART_SetConfig+0x18c>
 8009a1a:	4b68      	ldr	r3, [pc, #416]	; (8009bbc <UART_SetConfig+0x2ec>)
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a24:	2b10      	cmp	r3, #16
 8009a26:	d00f      	beq.n	8009a48 <UART_SetConfig+0x178>
 8009a28:	2b10      	cmp	r3, #16
 8009a2a:	d802      	bhi.n	8009a32 <UART_SetConfig+0x162>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <UART_SetConfig+0x16c>
 8009a30:	e010      	b.n	8009a54 <UART_SetConfig+0x184>
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	d005      	beq.n	8009a42 <UART_SetConfig+0x172>
 8009a36:	2b30      	cmp	r3, #48	; 0x30
 8009a38:	d009      	beq.n	8009a4e <UART_SetConfig+0x17e>
 8009a3a:	e00b      	b.n	8009a54 <UART_SetConfig+0x184>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	76fb      	strb	r3, [r7, #27]
 8009a40:	e088      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a42:	2302      	movs	r3, #2
 8009a44:	76fb      	strb	r3, [r7, #27]
 8009a46:	e085      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a48:	2304      	movs	r3, #4
 8009a4a:	76fb      	strb	r3, [r7, #27]
 8009a4c:	e082      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a4e:	2308      	movs	r3, #8
 8009a50:	76fb      	strb	r3, [r7, #27]
 8009a52:	e07f      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a54:	2310      	movs	r3, #16
 8009a56:	76fb      	strb	r3, [r7, #27]
 8009a58:	bf00      	nop
 8009a5a:	e07b      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a59      	ldr	r2, [pc, #356]	; (8009bc8 <UART_SetConfig+0x2f8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d120      	bne.n	8009aa8 <UART_SetConfig+0x1d8>
 8009a66:	4b55      	ldr	r3, [pc, #340]	; (8009bbc <UART_SetConfig+0x2ec>)
 8009a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d00f      	beq.n	8009a94 <UART_SetConfig+0x1c4>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d802      	bhi.n	8009a7e <UART_SetConfig+0x1ae>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <UART_SetConfig+0x1b8>
 8009a7c:	e010      	b.n	8009aa0 <UART_SetConfig+0x1d0>
 8009a7e:	2b80      	cmp	r3, #128	; 0x80
 8009a80:	d005      	beq.n	8009a8e <UART_SetConfig+0x1be>
 8009a82:	2bc0      	cmp	r3, #192	; 0xc0
 8009a84:	d009      	beq.n	8009a9a <UART_SetConfig+0x1ca>
 8009a86:	e00b      	b.n	8009aa0 <UART_SetConfig+0x1d0>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	76fb      	strb	r3, [r7, #27]
 8009a8c:	e062      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	76fb      	strb	r3, [r7, #27]
 8009a92:	e05f      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a94:	2304      	movs	r3, #4
 8009a96:	76fb      	strb	r3, [r7, #27]
 8009a98:	e05c      	b.n	8009b54 <UART_SetConfig+0x284>
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	76fb      	strb	r3, [r7, #27]
 8009a9e:	e059      	b.n	8009b54 <UART_SetConfig+0x284>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	76fb      	strb	r3, [r7, #27]
 8009aa4:	bf00      	nop
 8009aa6:	e055      	b.n	8009b54 <UART_SetConfig+0x284>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a47      	ldr	r2, [pc, #284]	; (8009bcc <UART_SetConfig+0x2fc>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d124      	bne.n	8009afc <UART_SetConfig+0x22c>
 8009ab2:	4b42      	ldr	r3, [pc, #264]	; (8009bbc <UART_SetConfig+0x2ec>)
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac0:	d012      	beq.n	8009ae8 <UART_SetConfig+0x218>
 8009ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac6:	d802      	bhi.n	8009ace <UART_SetConfig+0x1fe>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <UART_SetConfig+0x20c>
 8009acc:	e012      	b.n	8009af4 <UART_SetConfig+0x224>
 8009ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad2:	d006      	beq.n	8009ae2 <UART_SetConfig+0x212>
 8009ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ad8:	d009      	beq.n	8009aee <UART_SetConfig+0x21e>
 8009ada:	e00b      	b.n	8009af4 <UART_SetConfig+0x224>
 8009adc:	2300      	movs	r3, #0
 8009ade:	76fb      	strb	r3, [r7, #27]
 8009ae0:	e038      	b.n	8009b54 <UART_SetConfig+0x284>
 8009ae2:	2302      	movs	r3, #2
 8009ae4:	76fb      	strb	r3, [r7, #27]
 8009ae6:	e035      	b.n	8009b54 <UART_SetConfig+0x284>
 8009ae8:	2304      	movs	r3, #4
 8009aea:	76fb      	strb	r3, [r7, #27]
 8009aec:	e032      	b.n	8009b54 <UART_SetConfig+0x284>
 8009aee:	2308      	movs	r3, #8
 8009af0:	76fb      	strb	r3, [r7, #27]
 8009af2:	e02f      	b.n	8009b54 <UART_SetConfig+0x284>
 8009af4:	2310      	movs	r3, #16
 8009af6:	76fb      	strb	r3, [r7, #27]
 8009af8:	bf00      	nop
 8009afa:	e02b      	b.n	8009b54 <UART_SetConfig+0x284>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a2c      	ldr	r2, [pc, #176]	; (8009bb4 <UART_SetConfig+0x2e4>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d124      	bne.n	8009b50 <UART_SetConfig+0x280>
 8009b06:	4b2d      	ldr	r3, [pc, #180]	; (8009bbc <UART_SetConfig+0x2ec>)
 8009b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b14:	d012      	beq.n	8009b3c <UART_SetConfig+0x26c>
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b1a:	d802      	bhi.n	8009b22 <UART_SetConfig+0x252>
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <UART_SetConfig+0x260>
 8009b20:	e012      	b.n	8009b48 <UART_SetConfig+0x278>
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d006      	beq.n	8009b36 <UART_SetConfig+0x266>
 8009b28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b2c:	d009      	beq.n	8009b42 <UART_SetConfig+0x272>
 8009b2e:	e00b      	b.n	8009b48 <UART_SetConfig+0x278>
 8009b30:	2300      	movs	r3, #0
 8009b32:	76fb      	strb	r3, [r7, #27]
 8009b34:	e00e      	b.n	8009b54 <UART_SetConfig+0x284>
 8009b36:	2302      	movs	r3, #2
 8009b38:	76fb      	strb	r3, [r7, #27]
 8009b3a:	e00b      	b.n	8009b54 <UART_SetConfig+0x284>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	76fb      	strb	r3, [r7, #27]
 8009b40:	e008      	b.n	8009b54 <UART_SetConfig+0x284>
 8009b42:	2308      	movs	r3, #8
 8009b44:	76fb      	strb	r3, [r7, #27]
 8009b46:	e005      	b.n	8009b54 <UART_SetConfig+0x284>
 8009b48:	2310      	movs	r3, #16
 8009b4a:	76fb      	strb	r3, [r7, #27]
 8009b4c:	bf00      	nop
 8009b4e:	e001      	b.n	8009b54 <UART_SetConfig+0x284>
 8009b50:	2310      	movs	r3, #16
 8009b52:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a16      	ldr	r2, [pc, #88]	; (8009bb4 <UART_SetConfig+0x2e4>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	f040 8087 	bne.w	8009c6e <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b60:	7efb      	ldrb	r3, [r7, #27]
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d836      	bhi.n	8009bd4 <UART_SetConfig+0x304>
 8009b66:	a201      	add	r2, pc, #4	; (adr r2, 8009b6c <UART_SetConfig+0x29c>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009bd5 	.word	0x08009bd5
 8009b74:	08009b99 	.word	0x08009b99
 8009b78:	08009bd5 	.word	0x08009bd5
 8009b7c:	08009b9f 	.word	0x08009b9f
 8009b80:	08009bd5 	.word	0x08009bd5
 8009b84:	08009bd5 	.word	0x08009bd5
 8009b88:	08009bd5 	.word	0x08009bd5
 8009b8c:	08009ba7 	.word	0x08009ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b90:	f7fd f9f4 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009b94:	6178      	str	r0, [r7, #20]
        break;
 8009b96:	e022      	b.n	8009bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b98:	4b0d      	ldr	r3, [pc, #52]	; (8009bd0 <UART_SetConfig+0x300>)
 8009b9a:	617b      	str	r3, [r7, #20]
        break;
 8009b9c:	e01f      	b.n	8009bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b9e:	f7fd f957 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8009ba2:	6178      	str	r0, [r7, #20]
        break;
 8009ba4:	e01b      	b.n	8009bde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009baa:	617b      	str	r3, [r7, #20]
        break;
 8009bac:	e017      	b.n	8009bde <UART_SetConfig+0x30e>
 8009bae:	bf00      	nop
 8009bb0:	efff69f3 	.word	0xefff69f3
 8009bb4:	40008000 	.word	0x40008000
 8009bb8:	40013800 	.word	0x40013800
 8009bbc:	40021000 	.word	0x40021000
 8009bc0:	40004400 	.word	0x40004400
 8009bc4:	40004800 	.word	0x40004800
 8009bc8:	40004c00 	.word	0x40004c00
 8009bcc:	40005000 	.word	0x40005000
 8009bd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	76bb      	strb	r3, [r7, #26]
        break;
 8009bdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80f1 	beq.w	8009dc8 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d305      	bcc.n	8009c02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d902      	bls.n	8009c08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	76bb      	strb	r3, [r7, #26]
 8009c06:	e0df      	b.n	8009dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	f04f 0200 	mov.w	r2, #0
 8009c10:	f04f 0300 	mov.w	r3, #0
 8009c14:	f04f 0400 	mov.w	r4, #0
 8009c18:	0214      	lsls	r4, r2, #8
 8009c1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009c1e:	020b      	lsls	r3, r1, #8
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6852      	ldr	r2, [r2, #4]
 8009c24:	0852      	lsrs	r2, r2, #1
 8009c26:	4611      	mov	r1, r2
 8009c28:	f04f 0200 	mov.w	r2, #0
 8009c2c:	eb13 0b01 	adds.w	fp, r3, r1
 8009c30:	eb44 0c02 	adc.w	ip, r4, r2
 8009c34:	4658      	mov	r0, fp
 8009c36:	4661      	mov	r1, ip
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f04f 0400 	mov.w	r4, #0
 8009c40:	461a      	mov	r2, r3
 8009c42:	4623      	mov	r3, r4
 8009c44:	f7f6 ff0a 	bl	8000a5c <__aeabi_uldivmod>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	460c      	mov	r4, r1
 8009c4c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c54:	d308      	bcc.n	8009c68 <UART_SetConfig+0x398>
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c5c:	d204      	bcs.n	8009c68 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	60da      	str	r2, [r3, #12]
 8009c66:	e0af      	b.n	8009dc8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	76bb      	strb	r3, [r7, #26]
 8009c6c:	e0ac      	b.n	8009dc8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	69db      	ldr	r3, [r3, #28]
 8009c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c76:	d15b      	bne.n	8009d30 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8009c78:	7efb      	ldrb	r3, [r7, #27]
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	d827      	bhi.n	8009cce <UART_SetConfig+0x3fe>
 8009c7e:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x3b4>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009ca9 	.word	0x08009ca9
 8009c88:	08009cb1 	.word	0x08009cb1
 8009c8c:	08009cb9 	.word	0x08009cb9
 8009c90:	08009ccf 	.word	0x08009ccf
 8009c94:	08009cbf 	.word	0x08009cbf
 8009c98:	08009ccf 	.word	0x08009ccf
 8009c9c:	08009ccf 	.word	0x08009ccf
 8009ca0:	08009ccf 	.word	0x08009ccf
 8009ca4:	08009cc7 	.word	0x08009cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ca8:	f7fd f968 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009cac:	6178      	str	r0, [r7, #20]
        break;
 8009cae:	e013      	b.n	8009cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cb0:	f7fd f97a 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 8009cb4:	6178      	str	r0, [r7, #20]
        break;
 8009cb6:	e00f      	b.n	8009cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cb8:	4b49      	ldr	r3, [pc, #292]	; (8009de0 <UART_SetConfig+0x510>)
 8009cba:	617b      	str	r3, [r7, #20]
        break;
 8009cbc:	e00c      	b.n	8009cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009cbe:	f7fd f8c7 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8009cc2:	6178      	str	r0, [r7, #20]
        break;
 8009cc4:	e008      	b.n	8009cd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cca:	617b      	str	r3, [r7, #20]
        break;
 8009ccc:	e004      	b.n	8009cd8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	76bb      	strb	r3, [r7, #26]
        break;
 8009cd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d074      	beq.n	8009dc8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	005a      	lsls	r2, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	441a      	add	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2b0f      	cmp	r3, #15
 8009cfa:	d916      	bls.n	8009d2a <UART_SetConfig+0x45a>
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d02:	d212      	bcs.n	8009d2a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f023 030f 	bic.w	r3, r3, #15
 8009d0c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	085b      	lsrs	r3, r3, #1
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	89fa      	ldrh	r2, [r7, #14]
 8009d26:	60da      	str	r2, [r3, #12]
 8009d28:	e04e      	b.n	8009dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	76bb      	strb	r3, [r7, #26]
 8009d2e:	e04b      	b.n	8009dc8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d30:	7efb      	ldrb	r3, [r7, #27]
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d827      	bhi.n	8009d86 <UART_SetConfig+0x4b6>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <UART_SetConfig+0x46c>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d69 	.word	0x08009d69
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d87 	.word	0x08009d87
 8009d4c:	08009d77 	.word	0x08009d77
 8009d50:	08009d87 	.word	0x08009d87
 8009d54:	08009d87 	.word	0x08009d87
 8009d58:	08009d87 	.word	0x08009d87
 8009d5c:	08009d7f 	.word	0x08009d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d60:	f7fd f90c 	bl	8006f7c <HAL_RCC_GetPCLK1Freq>
 8009d64:	6178      	str	r0, [r7, #20]
        break;
 8009d66:	e013      	b.n	8009d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d68:	f7fd f91e 	bl	8006fa8 <HAL_RCC_GetPCLK2Freq>
 8009d6c:	6178      	str	r0, [r7, #20]
        break;
 8009d6e:	e00f      	b.n	8009d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d70:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <UART_SetConfig+0x510>)
 8009d72:	617b      	str	r3, [r7, #20]
        break;
 8009d74:	e00c      	b.n	8009d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d76:	f7fd f86b 	bl	8006e50 <HAL_RCC_GetSysClockFreq>
 8009d7a:	6178      	str	r0, [r7, #20]
        break;
 8009d7c:	e008      	b.n	8009d90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d82:	617b      	str	r3, [r7, #20]
        break;
 8009d84:	e004      	b.n	8009d90 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	76bb      	strb	r3, [r7, #26]
        break;
 8009d8e:	bf00      	nop
    }

    if (pclk != 0U)
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d018      	beq.n	8009dc8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	085a      	lsrs	r2, r3, #1
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	441a      	add	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2b0f      	cmp	r3, #15
 8009db0:	d908      	bls.n	8009dc4 <UART_SetConfig+0x4f4>
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db8:	d204      	bcs.n	8009dc4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e001      	b.n	8009dc8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009dd4:	7ebb      	ldrb	r3, [r7, #26]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3720      	adds	r7, #32
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009de0:	00f42400 	.word	0x00f42400

08009de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	f003 0304 	and.w	r3, r3, #4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00a      	beq.n	8009e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	f003 0308 	and.w	r3, r3, #8
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	f003 0310 	and.w	r3, r3, #16
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00a      	beq.n	8009e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	430a      	orrs	r2, r1
 8009e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00a      	beq.n	8009eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d01a      	beq.n	8009efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee2:	d10a      	bne.n	8009efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d00a      	beq.n	8009f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af02      	add	r7, sp, #8
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009f36:	f7f8 fa6f 	bl	8002418 <HAL_GetTick>
 8009f3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 0308 	and.w	r3, r3, #8
 8009f46:	2b08      	cmp	r3, #8
 8009f48:	d10e      	bne.n	8009f68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f82a 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e020      	b.n	8009faa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0304 	and.w	r3, r3, #4
 8009f72:	2b04      	cmp	r3, #4
 8009f74:	d10e      	bne.n	8009f94 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f814 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f90:	2303      	movs	r3, #3
 8009f92:	e00a      	b.n	8009faa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2220      	movs	r2, #32
 8009f98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc2:	e05d      	b.n	800a080 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	d059      	beq.n	800a080 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fcc:	f7f8 fa24 	bl	8002418 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d302      	bcc.n	8009fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d11b      	bne.n	800a01a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ff0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f022 0201 	bic.w	r2, r2, #1
 800a000:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2220      	movs	r2, #32
 800a006:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e042      	b.n	800a0a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d02b      	beq.n	800a080 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69db      	ldr	r3, [r3, #28]
 800a02e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a036:	d123      	bne.n	800a080 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a040:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a050:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689a      	ldr	r2, [r3, #8]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0201 	bic.w	r2, r2, #1
 800a060:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2220      	movs	r2, #32
 800a066:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2220      	movs	r2, #32
 800a072:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e00f      	b.n	800a0a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69da      	ldr	r2, [r3, #28]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	4013      	ands	r3, r2
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	bf0c      	ite	eq
 800a090:	2301      	moveq	r3, #1
 800a092:	2300      	movne	r3, #0
 800a094:	b2db      	uxtb	r3, r3
 800a096:	461a      	mov	r2, r3
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d092      	beq.n	8009fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a0be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0201 	bic.w	r2, r2, #1
 800a0ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	; 0x60
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fbd8 	bl	80098bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a12a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff fbb5 	bl	80098a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a15a:	b084      	sub	sp, #16
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	f107 001c 	add.w	r0, r7, #28
 800a168:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d122      	bne.n	800a1b8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a176:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a19a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d105      	bne.n	800a1ac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f937 	bl	800a420 <USB_CoreReset>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73fb      	strb	r3, [r7, #15]
 800a1b6:	e01a      	b.n	800a1ee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f92b 	bl	800a420 <USB_CoreReset>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d106      	bne.n	800a1e2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38
 800a1e0:	e005      	b.n	800a1ee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1fa:	b004      	add	sp, #16
 800a1fc:	4770      	bx	lr

0800a1fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fe:	b480      	push	{r7}
 800a200:	b083      	sub	sp, #12
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f043 0201 	orr.w	r2, r3, #1
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f023 0201 	bic.w	r2, r3, #1
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b082      	sub	sp, #8
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	460b      	mov	r3, r1
 800a24c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d106      	bne.n	800a26e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
 800a26c:	e00b      	b.n	800a286 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	60da      	str	r2, [r3, #12]
 800a280:	e001      	b.n	800a286 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e003      	b.n	800a28e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a286:	2032      	movs	r0, #50	; 0x32
 800a288:	f7f8 f8d2 	bl	8002430 <HAL_Delay>

  return HAL_OK;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a298:	b480      	push	{r7}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	019b      	lsls	r3, r3, #6
 800a2aa:	f043 0220 	orr.w	r2, r3, #32
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4a09      	ldr	r2, [pc, #36]	; (800a2e0 <USB_FlushTxFifo+0x48>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d901      	bls.n	800a2c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e006      	b.n	800a2d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	d0f0      	beq.n	800a2b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	00030d40 	.word	0x00030d40

0800a2e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2210      	movs	r2, #16
 800a2f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4a09      	ldr	r2, [pc, #36]	; (800a324 <USB_FlushRxFifo+0x40>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d901      	bls.n	800a308 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e006      	b.n	800a316 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b10      	cmp	r3, #16
 800a312:	d0f0      	beq.n	800a2f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	00030d40 	.word	0x00030d40

0800a328 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 800a328:	b480      	push	{r7}
 800a32a:	b089      	sub	sp, #36	; 0x24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	4611      	mov	r1, r2
 800a334:	461a      	mov	r2, r3
 800a336:	460b      	mov	r3, r1
 800a338:	71fb      	strb	r3, [r7, #7]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a346:	88bb      	ldrh	r3, [r7, #4]
 800a348:	3303      	adds	r3, #3
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a34e:	2300      	movs	r3, #0
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	e00f      	b.n	800a374 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	031a      	lsls	r2, r3, #12
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a360:	461a      	mov	r2, r3
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	3304      	adds	r3, #4
 800a36c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	3301      	adds	r3, #1
 800a372:	61bb      	str	r3, [r7, #24]
 800a374:	69ba      	ldr	r2, [r7, #24]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d3eb      	bcc.n	800a354 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3724      	adds	r7, #36	; 0x24
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b089      	sub	sp, #36	; 0x24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	4613      	mov	r3, r2
 800a396:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	3303      	adds	r3, #3
 800a3a4:	089b      	lsrs	r3, r3, #2
 800a3a6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	e00b      	b.n	800a3c6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	61bb      	str	r3, [r7, #24]
 800a3c6:	69ba      	ldr	r2, [r7, #24]
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3ef      	bcc.n	800a3ae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a3ce:	69fb      	ldr	r3, [r7, #28]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3724      	adds	r7, #36	; 0x24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	695b      	ldr	r3, [r3, #20]
 800a3e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	f003 0301 	and.w	r3, r3, #1
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	3301      	adds	r3, #1
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4a13      	ldr	r2, [pc, #76]	; (800a484 <USB_CoreReset+0x64>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d901      	bls.n	800a43e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e01b      	b.n	800a476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	daf2      	bge.n	800a42c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a446:	2300      	movs	r3, #0
 800a448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	f043 0201 	orr.w	r2, r3, #1
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	3301      	adds	r3, #1
 800a45a:	60fb      	str	r3, [r7, #12]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4a09      	ldr	r2, [pc, #36]	; (800a484 <USB_CoreReset+0x64>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d901      	bls.n	800a468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e006      	b.n	800a476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b01      	cmp	r3, #1
 800a472:	d0f0      	beq.n	800a456 <USB_CoreReset+0x36>

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	00030d40 	.word	0x00030d40

0800a488 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a488:	b084      	sub	sp, #16
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	f107 001c 	add.w	r0, r7, #28
 800a496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4d0:	f023 0304 	bic.w	r3, r3, #4
 800a4d4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a4d6:	2110      	movs	r1, #16
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fedd 	bl	800a298 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff ff00 	bl	800a2e4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	e015      	b.n	800a516 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	4413      	add	r3, r2
 800a506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a50a:	461a      	mov	r2, r3
 800a50c:	2300      	movs	r3, #0
 800a50e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	3301      	adds	r3, #1
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	68fa      	ldr	r2, [r7, #12]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d3e5      	bcc.n	800a4ea <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a51e:	2101      	movs	r1, #1
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f893 	bl	800a64c <USB_DriveVbus>

  HAL_Delay(200U);
 800a526:	20c8      	movs	r0, #200	; 0xc8
 800a528:	f7f7 ff82 	bl	8002430 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f04f 32ff 	mov.w	r2, #4294967295
 800a538:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2280      	movs	r2, #128	; 0x80
 800a53e:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a0d      	ldr	r2, [pc, #52]	; (800a578 <USB_HostInit+0xf0>)
 800a544:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a0c      	ldr	r2, [pc, #48]	; (800a57c <USB_HostInit+0xf4>)
 800a54a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	f043 0210 	orr.w	r2, r3, #16
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699a      	ldr	r2, [r3, #24]
 800a55e:	4b08      	ldr	r3, [pc, #32]	; (800a580 <USB_HostInit+0xf8>)
 800a560:	4313      	orrs	r3, r2
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a572:	b004      	add	sp, #16
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	00600080 	.word	0x00600080
 800a57c:	004000e0 	.word	0x004000e0
 800a580:	a3200008 	.word	0xa3200008

0800a584 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5a2:	f023 0303 	bic.w	r3, r3, #3
 800a5a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	f003 0303 	and.w	r3, r3, #3
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d107      	bne.n	800a5d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a5d2:	6053      	str	r3, [r2, #4]
 800a5d4:	e009      	b.n	800a5ea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a5d6:	78fb      	ldrb	r3, [r7, #3]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d106      	bne.n	800a5ea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f241 7370 	movw	r3, #6000	; 0x1770
 800a5e8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a618:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a626:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a628:	2064      	movs	r0, #100	; 0x64
 800a62a:	f7f7 ff01 	bl	8002430 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a63a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a63c:	200a      	movs	r0, #10
 800a63e:	f7f7 fef7 	bl	8002430 <HAL_Delay>

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a670:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d109      	bne.n	800a690 <USB_DriveVbus+0x44>
 800a67c:	78fb      	ldrb	r3, [r7, #3]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d106      	bne.n	800a690 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a68a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a68e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a69a:	d109      	bne.n	800a6b0 <USB_DriveVbus+0x64>
 800a69c:	78fb      	ldrb	r3, [r7, #3]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6ae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b085      	sub	sp, #20
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	0c5b      	lsrs	r3, r3, #17
 800a6dc:	f003 0303 	and.w	r3, r3, #3
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	b29b      	uxth	r3, r3
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
	...

0800a710 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	4608      	mov	r0, r1
 800a71a:	4611      	mov	r1, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	4603      	mov	r3, r0
 800a720:	70fb      	strb	r3, [r7, #3]
 800a722:	460b      	mov	r3, r1
 800a724:	70bb      	strb	r3, [r7, #2]
 800a726:	4613      	mov	r3, r2
 800a728:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a73e:	461a      	mov	r2, r3
 800a740:	f04f 33ff 	mov.w	r3, #4294967295
 800a744:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a746:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d867      	bhi.n	800a81e <USB_HC_Init+0x10e>
 800a74e:	a201      	add	r2, pc, #4	; (adr r2, 800a754 <USB_HC_Init+0x44>)
 800a750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a754:	0800a765 	.word	0x0800a765
 800a758:	0800a7e1 	.word	0x0800a7e1
 800a75c:	0800a765 	.word	0x0800a765
 800a760:	0800a7a3 	.word	0x0800a7a3
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	015a      	lsls	r2, r3, #5
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4413      	add	r3, r2
 800a76c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a770:	461a      	mov	r2, r3
 800a772:	f240 439d 	movw	r3, #1181	; 0x49d
 800a776:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a778:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	da51      	bge.n	800a824 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4413      	add	r3, r2
 800a788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	78fa      	ldrb	r2, [r7, #3]
 800a790:	0151      	lsls	r1, r2, #5
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	440a      	add	r2, r1
 800a796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a79e:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a7a0:	e040      	b.n	800a824 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7a2:	78fb      	ldrb	r3, [r7, #3]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f240 639d 	movw	r3, #1693	; 0x69d
 800a7b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da34      	bge.n	800a828 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	78fa      	ldrb	r2, [r7, #3]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7dc:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a7de:	e023      	b.n	800a828 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	f240 2325 	movw	r3, #549	; 0x225
 800a7f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a7f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da17      	bge.n	800a82c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	4413      	add	r3, r2
 800a804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	0151      	lsls	r1, r2, #5
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	440a      	add	r2, r1
 800a812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a816:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a81a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a81c:	e006      	b.n	800a82c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
      break;
 800a822:	e004      	b.n	800a82e <USB_HC_Init+0x11e>
      break;
 800a824:	bf00      	nop
 800a826:	e002      	b.n	800a82e <USB_HC_Init+0x11e>
      break;
 800a828:	bf00      	nop
 800a82a:	e000      	b.n	800a82e <USB_HC_Init+0x11e>
      break;
 800a82c:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a834:	699a      	ldr	r2, [r3, #24]
 800a836:	78fb      	ldrb	r3, [r7, #3]
 800a838:	f003 030f 	and.w	r3, r3, #15
 800a83c:	2101      	movs	r1, #1
 800a83e:	fa01 f303 	lsl.w	r3, r1, r3
 800a842:	68b9      	ldr	r1, [r7, #8]
 800a844:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a848:	4313      	orrs	r3, r2
 800a84a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a858:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	da03      	bge.n	800a868 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	e001      	b.n	800a86c <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 800a868:	2300      	movs	r3, #0
 800a86a:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a86c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a870:	2b02      	cmp	r3, #2
 800a872:	d103      	bne.n	800a87c <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a878:	60fb      	str	r3, [r7, #12]
 800a87a:	e001      	b.n	800a880 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a880:	787b      	ldrb	r3, [r7, #1]
 800a882:	059b      	lsls	r3, r3, #22
 800a884:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a888:	78bb      	ldrb	r3, [r7, #2]
 800a88a:	02db      	lsls	r3, r3, #11
 800a88c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a890:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a896:	049b      	lsls	r3, r3, #18
 800a898:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a89c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a89e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a8a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a8a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8aa:	78fb      	ldrb	r3, [r7, #3]
 800a8ac:	0159      	lsls	r1, r3, #5
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	440b      	add	r3, r1
 800a8b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8bc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a8be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d10f      	bne.n	800a8e6 <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	0151      	lsls	r1, r2, #5
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	440a      	add	r2, r1
 800a8dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	785b      	ldrb	r3, [r3, #1]
 800a906:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a90c:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d018      	beq.n	800a948 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	8912      	ldrh	r2, [r2, #8]
 800a91e:	4413      	add	r3, r2
 800a920:	3b01      	subs	r3, #1
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	8912      	ldrh	r2, [r2, #8]
 800a926:	fbb3 f3f2 	udiv	r3, r3, r2
 800a92a:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 800a92c:	8bfa      	ldrh	r2, [r7, #30]
 800a92e:	8a7b      	ldrh	r3, [r7, #18]
 800a930:	429a      	cmp	r2, r3
 800a932:	d90b      	bls.n	800a94c <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 800a934:	8a7b      	ldrh	r3, [r7, #18]
 800a936:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a938:	8bfb      	ldrh	r3, [r7, #30]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	8912      	ldrh	r2, [r2, #8]
 800a93e:	fb02 f203 	mul.w	r2, r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	611a      	str	r2, [r3, #16]
 800a946:	e001      	b.n	800a94c <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800a948:	2301      	movs	r3, #1
 800a94a:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	78db      	ldrb	r3, [r3, #3]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d006      	beq.n	800a962 <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a954:	8bfb      	ldrh	r3, [r7, #30]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	8912      	ldrh	r2, [r2, #8]
 800a95a:	fb02 f203 	mul.w	r2, r2, r3
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a96a:	8bfb      	ldrh	r3, [r7, #30]
 800a96c:	04d9      	lsls	r1, r3, #19
 800a96e:	4b5f      	ldr	r3, [pc, #380]	; (800aaec <USB_HC_StartXfer+0x1f8>)
 800a970:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a972:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	7a9b      	ldrb	r3, [r3, #10]
 800a978:	075b      	lsls	r3, r3, #29
 800a97a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a97e:	6979      	ldr	r1, [r7, #20]
 800a980:	0148      	lsls	r0, r1, #5
 800a982:	69b9      	ldr	r1, [r7, #24]
 800a984:	4401      	add	r1, r0
 800a986:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a98a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a98c:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	bf0c      	ite	eq
 800a99e:	2301      	moveq	r3, #1
 800a9a0:	2300      	movne	r3, #0
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	7c7b      	ldrb	r3, [r7, #17]
 800a9d6:	075b      	lsls	r3, r3, #29
 800a9d8:	6979      	ldr	r1, [r7, #20]
 800a9da:	0148      	lsls	r0, r1, #5
 800a9dc:	69b9      	ldr	r1, [r7, #24]
 800a9de:	4401      	add	r1, r0
 800a9e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a3e      	ldr	r2, [pc, #248]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800a9f8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a9fa:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa02:	4a3b      	ldr	r2, [pc, #236]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa04:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	78db      	ldrb	r3, [r3, #3]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d006      	beq.n	800aa1c <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aa0e:	4b38      	ldr	r3, [pc, #224]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa16:	4a36      	ldr	r2, [pc, #216]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e005      	b.n	800aa28 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aa1c:	4b34      	ldr	r3, [pc, #208]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa24:	4a32      	ldr	r2, [pc, #200]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa26:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aa28:	4b31      	ldr	r3, [pc, #196]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa30:	4a2f      	ldr	r2, [pc, #188]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa32:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa40:	461a      	mov	r2, r3
 800aa42:	4b2b      	ldr	r3, [pc, #172]	; (800aaf0 <USB_HC_StartXfer+0x1fc>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6013      	str	r3, [r2, #0]

    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	78db      	ldrb	r3, [r3, #3]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d148      	bne.n	800aae2 <USB_HC_StartXfer+0x1ee>
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d044      	beq.n	800aae2 <USB_HC_StartXfer+0x1ee>
    {
      switch (hc->ep_type)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	79db      	ldrb	r3, [r3, #7]
 800aa5c:	2b03      	cmp	r3, #3
 800aa5e:	d831      	bhi.n	800aac4 <USB_HC_StartXfer+0x1d0>
 800aa60:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <USB_HC_StartXfer+0x174>)
 800aa62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa66:	bf00      	nop
 800aa68:	0800aa79 	.word	0x0800aa79
 800aa6c:	0800aa9d 	.word	0x0800aa9d
 800aa70:	0800aa79 	.word	0x0800aa79
 800aa74:	0800aa9d 	.word	0x0800aa9d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	3303      	adds	r3, #3
 800aa7e:	089b      	lsrs	r3, r3, #2
 800aa80:	81fb      	strh	r3, [r7, #14]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800aa82:	89fa      	ldrh	r2, [r7, #14]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d91c      	bls.n	800aac8 <USB_HC_StartXfer+0x1d4>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	f043 0220 	orr.w	r2, r3, #32
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	619a      	str	r2, [r3, #24]
          }
          break;
 800aa9a:	e015      	b.n	800aac8 <USB_HC_StartXfer+0x1d4>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	3303      	adds	r3, #3
 800aaa2:	089b      	lsrs	r3, r3, #2
 800aaa4:	81fb      	strh	r3, [r7, #14]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800aaa6:	89fa      	ldrh	r2, [r7, #14]
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d90a      	bls.n	800aacc <USB_HC_StartXfer+0x1d8>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	619a      	str	r2, [r3, #24]
          }
          break;
 800aac2:	e003      	b.n	800aacc <USB_HC_StartXfer+0x1d8>

        default:
          break;
 800aac4:	bf00      	nop
 800aac6:	e002      	b.n	800aace <USB_HC_StartXfer+0x1da>
          break;
 800aac8:	bf00      	nop
 800aaca:	e000      	b.n	800aace <USB_HC_StartXfer+0x1da>
          break;
 800aacc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68d9      	ldr	r1, [r3, #12]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	785a      	ldrb	r2, [r3, #1]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fc23 	bl	800a328 <USB_WritePacket>
    }

  return HAL_OK;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	1ff80000 	.word	0x1ff80000
 800aaf0:	200004d0 	.word	0x200004d0

0800aaf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab06:	695b      	ldr	r3, [r3, #20]
 800ab08:	b29b      	uxth	r3, r3
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b087      	sub	sp, #28
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ab26:	78fb      	ldrb	r3, [r7, #3]
 800ab28:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	0c9b      	lsrs	r3, r3, #18
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <USB_HC_Halt+0x3a>
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d16c      	bne.n	800ac2a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	0151      	lsls	r1, r2, #5
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	440a      	add	r2, r1
 800ab66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab6e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d143      	bne.n	800ac04 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab9a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	0151      	lsls	r1, r2, #5
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	440a      	add	r2, r1
 800abd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800abda:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	3301      	adds	r3, #1
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abe8:	d81d      	bhi.n	800ac26 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac00:	d0ec      	beq.n	800abdc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac02:	e080      	b.n	800ad06 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac22:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac24:	e06f      	b.n	800ad06 <USB_HC_Halt+0x1f0>
          break;
 800ac26:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac28:	e06d      	b.n	800ad06 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	0151      	lsls	r1, r2, #5
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	440a      	add	r2, r1
 800ac40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac48:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d143      	bne.n	800ace2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	0151      	lsls	r1, r2, #5
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	440a      	add	r2, r1
 800ac70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac78:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	0151      	lsls	r1, r2, #5
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	440a      	add	r2, r1
 800ac90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	0151      	lsls	r1, r2, #5
 800acac:	693a      	ldr	r2, [r7, #16]
 800acae:	440a      	add	r2, r1
 800acb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acb8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	3301      	adds	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acc6:	d81d      	bhi.n	800ad04 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acde:	d0ec      	beq.n	800acba <USB_HC_Halt+0x1a4>
 800ace0:	e011      	b.n	800ad06 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	015a      	lsls	r2, r3, #5
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	4413      	add	r3, r2
 800acea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	0151      	lsls	r1, r2, #5
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	440a      	add	r2, r1
 800acf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	e000      	b.n	800ad06 <USB_HC_Halt+0x1f0>
          break;
 800ad04:	bf00      	nop
    }
  }

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ad20:	2300      	movs	r3, #0
 800ad22:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fa7b 	bl	800a220 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ad2a:	2110      	movs	r1, #16
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f7ff fab3 	bl	800a298 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff fad6 	bl	800a2e4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	613b      	str	r3, [r7, #16]
 800ad3c:	e01f      	b.n	800ad7e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	015a      	lsls	r2, r3, #5
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad72:	461a      	mov	r2, r3
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b0f      	cmp	r3, #15
 800ad82:	d9dc      	bls.n	800ad3e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ad84:	2300      	movs	r3, #0
 800ad86:	613b      	str	r3, [r7, #16]
 800ad88:	e034      	b.n	800adf4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ada0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adb0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adbe:	461a      	mov	r2, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	3301      	adds	r3, #1
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800add0:	d80c      	bhi.n	800adec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	015a      	lsls	r2, r3, #5
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	4413      	add	r3, r2
 800adda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade8:	d0ec      	beq.n	800adc4 <USB_StopHost+0xb0>
 800adea:	e000      	b.n	800adee <USB_StopHost+0xda>
        break;
 800adec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	3301      	adds	r3, #1
 800adf2:	613b      	str	r3, [r7, #16]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	2b0f      	cmp	r3, #15
 800adf8:	d9c7      	bls.n	800ad8a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae00:	461a      	mov	r2, r3
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295
 800ae06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7ff f9f4 	bl	800a1fe <USB_EnableGlobalInt>

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ae20:	b590      	push	{r4, r7, lr}
 800ae22:	b089      	sub	sp, #36	; 0x24
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ae28:	2301      	movs	r3, #1
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	2102      	movs	r1, #2
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fc68 	bl	800b704 <USBH_FindInterface>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2bff      	cmp	r3, #255	; 0xff
 800ae3c:	d002      	beq.n	800ae44 <USBH_CDC_InterfaceInit+0x24>
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d901      	bls.n	800ae48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ae44:	2302      	movs	r3, #2
 800ae46:	e13d      	b.n	800b0c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fc3d 	bl	800b6cc <USBH_SelectInterface>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d001      	beq.n	800ae60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e131      	b.n	800b0c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ae66:	2050      	movs	r0, #80	; 0x50
 800ae68:	f002 fa08 	bl	800d27c <malloc>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ae80:	2302      	movs	r3, #2
 800ae82:	e11f      	b.n	800b0c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ae84:	2250      	movs	r2, #80	; 0x50
 800ae86:	2100      	movs	r1, #0
 800ae88:	68b8      	ldr	r0, [r7, #8]
 800ae8a:	f002 fa07 	bl	800d29c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	211a      	movs	r1, #26
 800ae94:	fb01 f303 	mul.w	r3, r1, r3
 800ae98:	4413      	add	r3, r2
 800ae9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	b25b      	sxtb	r3, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da15      	bge.n	800aed2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	211a      	movs	r1, #26
 800aeac:	fb01 f303 	mul.w	r3, r1, r3
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	211a      	movs	r1, #26
 800aec2:	fb01 f303 	mul.w	r3, r1, r3
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aecc:	881a      	ldrh	r2, [r3, #0]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	785b      	ldrb	r3, [r3, #1]
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fe36 	bl	800cb4a <USBH_AllocPipe>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	7819      	ldrb	r1, [r3, #0]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	7858      	ldrb	r0, [r3, #1]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	8952      	ldrh	r2, [r2, #10]
 800aefe:	9202      	str	r2, [sp, #8]
 800af00:	2203      	movs	r2, #3
 800af02:	9201      	str	r2, [sp, #4]
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	4623      	mov	r3, r4
 800af08:	4602      	mov	r2, r0
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 fdee 	bl	800caec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2200      	movs	r2, #0
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f002 f8ff 	bl	800d11c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800af1e:	2300      	movs	r3, #0
 800af20:	2200      	movs	r2, #0
 800af22:	210a      	movs	r1, #10
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fbed 	bl	800b704 <USBH_FindInterface>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2bff      	cmp	r3, #255	; 0xff
 800af32:	d002      	beq.n	800af3a <USBH_CDC_InterfaceInit+0x11a>
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d901      	bls.n	800af3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800af3a:	2302      	movs	r3, #2
 800af3c:	e0c2      	b.n	800b0c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	211a      	movs	r1, #26
 800af44:	fb01 f303 	mul.w	r3, r1, r3
 800af48:	4413      	add	r3, r2
 800af4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b25b      	sxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	da16      	bge.n	800af84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	211a      	movs	r1, #26
 800af5c:	fb01 f303 	mul.w	r3, r1, r3
 800af60:	4413      	add	r3, r2
 800af62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	211a      	movs	r1, #26
 800af72:	fb01 f303 	mul.w	r3, r1, r3
 800af76:	4413      	add	r3, r2
 800af78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800af7c:	881a      	ldrh	r2, [r3, #0]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	835a      	strh	r2, [r3, #26]
 800af82:	e015      	b.n	800afb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	211a      	movs	r1, #26
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	4413      	add	r3, r2
 800af90:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	211a      	movs	r1, #26
 800afa0:	fb01 f303 	mul.w	r3, r1, r3
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800afaa:	881a      	ldrh	r2, [r3, #0]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	211a      	movs	r1, #26
 800afb6:	fb01 f303 	mul.w	r3, r1, r3
 800afba:	4413      	add	r3, r2
 800afbc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b25b      	sxtb	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	da16      	bge.n	800aff6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	211a      	movs	r1, #26
 800afce:	fb01 f303 	mul.w	r3, r1, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800afd8:	781a      	ldrb	r2, [r3, #0]
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800afde:	7bfb      	ldrb	r3, [r7, #15]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	211a      	movs	r1, #26
 800afe4:	fb01 f303 	mul.w	r3, r1, r3
 800afe8:	4413      	add	r3, r2
 800afea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800afee:	881a      	ldrh	r2, [r3, #0]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	835a      	strh	r2, [r3, #26]
 800aff4:	e015      	b.n	800b022 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	211a      	movs	r1, #26
 800affc:	fb01 f303 	mul.w	r3, r1, r3
 800b000:	4413      	add	r3, r2
 800b002:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b006:	781a      	ldrb	r2, [r3, #0]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	211a      	movs	r1, #26
 800b012:	fb01 f303 	mul.w	r3, r1, r3
 800b016:	4413      	add	r3, r2
 800b018:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b01c:	881a      	ldrh	r2, [r3, #0]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	7b9b      	ldrb	r3, [r3, #14]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 fd8e 	bl	800cb4a <USBH_AllocPipe>
 800b02e:	4603      	mov	r3, r0
 800b030:	461a      	mov	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	7bdb      	ldrb	r3, [r3, #15]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 fd84 	bl	800cb4a <USBH_AllocPipe>
 800b042:	4603      	mov	r3, r0
 800b044:	461a      	mov	r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	7b59      	ldrb	r1, [r3, #13]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	7b98      	ldrb	r0, [r3, #14]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	8b12      	ldrh	r2, [r2, #24]
 800b062:	9202      	str	r2, [sp, #8]
 800b064:	2202      	movs	r2, #2
 800b066:	9201      	str	r2, [sp, #4]
 800b068:	9300      	str	r3, [sp, #0]
 800b06a:	4623      	mov	r3, r4
 800b06c:	4602      	mov	r2, r0
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 fd3c 	bl	800caec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	7b19      	ldrb	r1, [r3, #12]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	7bd8      	ldrb	r0, [r3, #15]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b088:	68ba      	ldr	r2, [r7, #8]
 800b08a:	8b52      	ldrh	r2, [r2, #26]
 800b08c:	9202      	str	r2, [sp, #8]
 800b08e:	2202      	movs	r2, #2
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	4623      	mov	r3, r4
 800b096:	4602      	mov	r2, r0
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 fd27 	bl	800caec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	7b5b      	ldrb	r3, [r3, #13]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f002 f834 	bl	800d11c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	7b1b      	ldrb	r3, [r3, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f002 f82d 	bl	800d11c <USBH_LL_SetToggle>

  return USBH_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3714      	adds	r7, #20
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd90      	pop	{r4, r7, pc}

0800b0cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00e      	beq.n	800b104 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 fd1c 	bl	800cb2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 fd47 	bl	800cb8c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	7b1b      	ldrb	r3, [r3, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00e      	beq.n	800b12a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	7b1b      	ldrb	r3, [r3, #12]
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f001 fd09 	bl	800cb2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	7b1b      	ldrb	r3, [r3, #12]
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f001 fd34 	bl	800cb8c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	7b5b      	ldrb	r3, [r3, #13]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00e      	beq.n	800b150 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	7b5b      	ldrb	r3, [r3, #13]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fcf6 	bl	800cb2a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	7b5b      	ldrb	r3, [r3, #13]
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f001 fd21 	bl	800cb8c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b156:	69db      	ldr	r3, [r3, #28]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b162:	69db      	ldr	r3, [r3, #28]
 800b164:	4618      	mov	r0, r3
 800b166:	f002 f891 	bl	800d28c <free>
    phost->pActiveClass->pData = 0U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b170:	2200      	movs	r2, #0
 800b172:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b18c:	69db      	ldr	r3, [r3, #28]
 800b18e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3340      	adds	r3, #64	; 0x40
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 f8b1 	bl	800b2fe <GetLineCoding>
 800b19c:	4603      	mov	r3, r0
 800b19e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d105      	bne.n	800b1b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1ac:	2102      	movs	r1, #2
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d877      	bhi.n	800b2d0 <USBH_CDC_Process+0x114>
 800b1e0:	a201      	add	r2, pc, #4	; (adr r2, 800b1e8 <USBH_CDC_Process+0x2c>)
 800b1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e6:	bf00      	nop
 800b1e8:	0800b1fd 	.word	0x0800b1fd
 800b1ec:	0800b203 	.word	0x0800b203
 800b1f0:	0800b233 	.word	0x0800b233
 800b1f4:	0800b2a7 	.word	0x0800b2a7
 800b1f8:	0800b2b5 	.word	0x0800b2b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b200:	e06d      	b.n	800b2de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f897 	bl	800b33c <SetLineCoding>
 800b20e:	4603      	mov	r3, r0
 800b210:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b212:	7bbb      	ldrb	r3, [r7, #14]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d104      	bne.n	800b222 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b220:	e058      	b.n	800b2d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d055      	beq.n	800b2d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2204      	movs	r2, #4
 800b22c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b230:	e050      	b.n	800b2d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	3340      	adds	r3, #64	; 0x40
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 f860 	bl	800b2fe <GetLineCoding>
 800b23e:	4603      	mov	r3, r0
 800b240:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b242:	7bbb      	ldrb	r3, [r7, #14]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d126      	bne.n	800b296 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d13b      	bne.n	800b2d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b26a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d133      	bne.n	800b2d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d12b      	bne.n	800b2d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b288:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d124      	bne.n	800b2d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f95a 	bl	800b548 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b294:	e020      	b.n	800b2d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d01d      	beq.n	800b2d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2204      	movs	r2, #4
 800b2a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b2a4:	e018      	b.n	800b2d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f867 	bl	800b37a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8dc 	bl	800b46a <CDC_ProcessReception>
      break;
 800b2b2:	e014      	b.n	800b2de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 ffe5 	bl	800c286 <USBH_ClrFeature>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b2c0:	7bbb      	ldrb	r3, [r7, #14]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10a      	bne.n	800b2dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b2ce:	e005      	b.n	800b2dc <USBH_CDC_Process+0x120>

    default:
      break;
 800b2d0:	bf00      	nop
 800b2d2:	e004      	b.n	800b2de <USBH_CDC_Process+0x122>
      break;
 800b2d4:	bf00      	nop
 800b2d6:	e002      	b.n	800b2de <USBH_CDC_Process+0x122>
      break;
 800b2d8:	bf00      	nop
 800b2da:	e000      	b.n	800b2de <USBH_CDC_Process+0x122>
      break;
 800b2dc:	bf00      	nop

  }

  return status;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	22a1      	movs	r2, #161	; 0xa1
 800b30c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2221      	movs	r2, #33	; 0x21
 800b312:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2207      	movs	r2, #7
 800b324:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2207      	movs	r2, #7
 800b32a:	4619      	mov	r1, r3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 f98a 	bl	800c646 <USBH_CtlReq>
 800b332:	4603      	mov	r3, r0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2221      	movs	r2, #33	; 0x21
 800b34a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2207      	movs	r2, #7
 800b362:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2207      	movs	r2, #7
 800b368:	4619      	mov	r1, r3
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 f96b 	bl	800c646 <USBH_CtlReq>
 800b370:	4603      	mov	r3, r0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af02      	add	r7, sp, #8
 800b380:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b396:	2b01      	cmp	r3, #1
 800b398:	d002      	beq.n	800b3a0 <CDC_ProcessTransmission+0x26>
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d025      	beq.n	800b3ea <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800b39e:	e060      	b.n	800b462 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	8b12      	ldrh	r2, [r2, #24]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d90c      	bls.n	800b3c6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	69d9      	ldr	r1, [r3, #28]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8b1a      	ldrh	r2, [r3, #24]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	7b58      	ldrb	r0, [r3, #13]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4603      	mov	r3, r0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 fb51 	bl	800ca66 <USBH_BulkSendData>
 800b3c4:	e00c      	b.n	800b3e0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	7b58      	ldrb	r0, [r3, #13]
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	4603      	mov	r3, r0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fb43 	bl	800ca66 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b3e8:	e03b      	b.n	800b462 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	7b5b      	ldrb	r3, [r3, #13]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fe69 	bl	800d0c8 <USBH_LL_GetURBState>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d128      	bne.n	800b452 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	8b12      	ldrh	r2, [r2, #24]
 800b408:	4293      	cmp	r3, r2
 800b40a:	d90e      	bls.n	800b42a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	8b12      	ldrh	r2, [r2, #24]
 800b414:	1a9a      	subs	r2, r3, r2
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	69db      	ldr	r3, [r3, #28]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	8b12      	ldrh	r2, [r2, #24]
 800b422:	441a      	add	r2, r3
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	61da      	str	r2, [r3, #28]
 800b428:	e002      	b.n	800b430 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2200      	movs	r2, #0
 800b42e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	2b00      	cmp	r3, #0
 800b436:	d004      	beq.n	800b442 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b440:	e00e      	b.n	800b460 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f868 	bl	800b520 <USBH_CDC_TransmitCallback>
      break;
 800b450:	e006      	b.n	800b460 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d103      	bne.n	800b460 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b460:	bf00      	nop
  }
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b086      	sub	sp, #24
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b478:	69db      	ldr	r3, [r3, #28]
 800b47a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b486:	2b03      	cmp	r3, #3
 800b488:	d002      	beq.n	800b490 <CDC_ProcessReception+0x26>
 800b48a:	2b04      	cmp	r3, #4
 800b48c:	d00e      	beq.n	800b4ac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b48e:	e043      	b.n	800b518 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	6a19      	ldr	r1, [r3, #32]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	8b5a      	ldrh	r2, [r3, #26]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	7b1b      	ldrb	r3, [r3, #12]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 fb07 	bl	800cab0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b4aa:	e035      	b.n	800b518 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	7b1b      	ldrb	r3, [r3, #12]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fe08 	bl	800d0c8 <USBH_LL_GetURBState>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b4bc:	7cfb      	ldrb	r3, [r7, #19]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d129      	bne.n	800b516 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	7b1b      	ldrb	r3, [r3, #12]
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 fd6b 	bl	800cfa4 <USBH_LL_GetLastXferSize>
 800b4ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d016      	beq.n	800b508 <CDC_ProcessReception+0x9e>
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	8b5b      	ldrh	r3, [r3, #26]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d910      	bls.n	800b508 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	1ad2      	subs	r2, r2, r3
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	6a1a      	ldr	r2, [r3, #32]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	441a      	add	r2, r3
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	2203      	movs	r2, #3
 800b502:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b506:	e006      	b.n	800b516 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f80f 	bl	800b534 <USBH_CDC_ReceiveCallback>
      break;
 800b516:	bf00      	nop
  }
}
 800b518:	bf00      	nop
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b570:	2302      	movs	r3, #2
 800b572:	e029      	b.n	800b5c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	79fa      	ldrb	r2, [r7, #7]
 800b578:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 f81f 	bl	800b5d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d003      	beq.n	800b5c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f001 fc3d 	bl	800ce40 <USBH_LL_Init>

  return USBH_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e009      	b.n	800b5f6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	33e0      	adds	r3, #224	; 0xe0
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	4413      	add	r3, r2
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	60fb      	str	r3, [r7, #12]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b0e      	cmp	r3, #14
 800b5fa:	d9f2      	bls.n	800b5e2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
 800b600:	e009      	b.n	800b616 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	4413      	add	r3, r2
 800b608:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b60c:	2200      	movs	r2, #0
 800b60e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3301      	adds	r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61c:	d3f1      	bcc.n	800b602 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2240      	movs	r2, #64	; 0x40
 800b642:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d016      	beq.n	800b6ba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10e      	bne.n	800b6b4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b69c:	1c59      	adds	r1, r3, #1
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	33de      	adds	r3, #222	; 0xde
 800b6a8:	6839      	ldr	r1, [r7, #0]
 800b6aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
 800b6b2:	e004      	b.n	800b6be <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	73fb      	strb	r3, [r7, #15]
 800b6b8:	e001      	b.n	800b6be <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d204      	bcs.n	800b6f2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b6f0:	e001      	b.n	800b6f6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3714      	adds	r7, #20
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	461a      	mov	r2, r3
 800b712:	4603      	mov	r3, r0
 800b714:	70fb      	strb	r3, [r7, #3]
 800b716:	460b      	mov	r3, r1
 800b718:	70bb      	strb	r3, [r7, #2]
 800b71a:	4613      	mov	r3, r2
 800b71c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b71e:	2300      	movs	r3, #0
 800b720:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b722:	2300      	movs	r3, #0
 800b724:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b72c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b72e:	e025      	b.n	800b77c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	221a      	movs	r2, #26
 800b734:	fb02 f303 	mul.w	r3, r2, r3
 800b738:	3308      	adds	r3, #8
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	3302      	adds	r3, #2
 800b740:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	795b      	ldrb	r3, [r3, #5]
 800b746:	78fa      	ldrb	r2, [r7, #3]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d002      	beq.n	800b752 <USBH_FindInterface+0x4e>
 800b74c:	78fb      	ldrb	r3, [r7, #3]
 800b74e:	2bff      	cmp	r3, #255	; 0xff
 800b750:	d111      	bne.n	800b776 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b756:	78ba      	ldrb	r2, [r7, #2]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d002      	beq.n	800b762 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b75c:	78bb      	ldrb	r3, [r7, #2]
 800b75e:	2bff      	cmp	r3, #255	; 0xff
 800b760:	d109      	bne.n	800b776 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b766:	787a      	ldrb	r2, [r7, #1]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d002      	beq.n	800b772 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b76c:	787b      	ldrb	r3, [r7, #1]
 800b76e:	2bff      	cmp	r3, #255	; 0xff
 800b770:	d101      	bne.n	800b776 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b772:	7dfb      	ldrb	r3, [r7, #23]
 800b774:	e006      	b.n	800b784 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	3301      	adds	r3, #1
 800b77a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d9d6      	bls.n	800b730 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b782:	23ff      	movs	r3, #255	; 0xff
}
 800b784:	4618      	mov	r0, r3
 800b786:	371c      	adds	r7, #28
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 fb8d 	bl	800ceb8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b79e:	2101      	movs	r1, #1
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fca4 	bl	800d0ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af04      	add	r7, sp, #16
 800b7b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d102      	bne.n	800b7d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b0b      	cmp	r3, #11
 800b7da:	f200 81b3 	bhi.w	800bb44 <USBH_Process+0x394>
 800b7de:	a201      	add	r2, pc, #4	; (adr r2, 800b7e4 <USBH_Process+0x34>)
 800b7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e4:	0800b815 	.word	0x0800b815
 800b7e8:	0800b847 	.word	0x0800b847
 800b7ec:	0800b8af 	.word	0x0800b8af
 800b7f0:	0800badf 	.word	0x0800badf
 800b7f4:	0800bb45 	.word	0x0800bb45
 800b7f8:	0800b953 	.word	0x0800b953
 800b7fc:	0800ba85 	.word	0x0800ba85
 800b800:	0800b989 	.word	0x0800b989
 800b804:	0800b9a9 	.word	0x0800b9a9
 800b808:	0800b9c9 	.word	0x0800b9c9
 800b80c:	0800b9f7 	.word	0x0800b9f7
 800b810:	0800bac7 	.word	0x0800bac7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 8193 	beq.w	800bb48 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2201      	movs	r2, #1
 800b826:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b828:	20c8      	movs	r0, #200	; 0xc8
 800b82a:	f001 fcaa 	bl	800d182 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 fb9d 	bl	800cf6e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b844:	e180      	b.n	800bb48 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d107      	bne.n	800b860 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2202      	movs	r2, #2
 800b85c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b85e:	e182      	b.n	800bb66 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b86a:	d914      	bls.n	800b896 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b872:	3301      	adds	r3, #1
 800b874:	b2da      	uxtb	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b882:	2b03      	cmp	r3, #3
 800b884:	d903      	bls.n	800b88e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	220d      	movs	r2, #13
 800b88a:	701a      	strb	r2, [r3, #0]
      break;
 800b88c:	e16b      	b.n	800bb66 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	701a      	strb	r2, [r3, #0]
      break;
 800b894:	e167      	b.n	800bb66 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b89c:	f103 020a 	add.w	r2, r3, #10
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b8a6:	200a      	movs	r0, #10
 800b8a8:	f001 fc6b 	bl	800d182 <USBH_Delay>
      break;
 800b8ac:	e15b      	b.n	800bb66 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8be:	2104      	movs	r1, #4
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b8c4:	2064      	movs	r0, #100	; 0x64
 800b8c6:	f001 fc5c 	bl	800d182 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f001 fb2a 	bl	800cf24 <USBH_LL_GetSpeed>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2205      	movs	r2, #5
 800b8de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f001 f931 	bl	800cb4a <USBH_AllocPipe>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b8f0:	2180      	movs	r1, #128	; 0x80
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f001 f929 	bl	800cb4a <USBH_AllocPipe>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	7919      	ldrb	r1, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b914:	b292      	uxth	r2, r2
 800b916:	9202      	str	r2, [sp, #8]
 800b918:	2200      	movs	r2, #0
 800b91a:	9201      	str	r2, [sp, #4]
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4603      	mov	r3, r0
 800b920:	2280      	movs	r2, #128	; 0x80
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 f8e2 	bl	800caec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	7959      	ldrb	r1, [r3, #5]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b93c:	b292      	uxth	r2, r2
 800b93e:	9202      	str	r2, [sp, #8]
 800b940:	2200      	movs	r2, #0
 800b942:	9201      	str	r2, [sp, #4]
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	4603      	mov	r3, r0
 800b948:	2200      	movs	r2, #0
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f001 f8ce 	bl	800caec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b950:	e109      	b.n	800bb66 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f90c 	bl	800bb70 <USBH_HandleEnum>
 800b958:	4603      	mov	r3, r0
 800b95a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	f040 80f3 	bne.w	800bb4c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b974:	2b01      	cmp	r3, #1
 800b976:	d103      	bne.n	800b980 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2208      	movs	r2, #8
 800b97c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b97e:	e0e5      	b.n	800bb4c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2207      	movs	r2, #7
 800b984:	701a      	strb	r2, [r3, #0]
      break;
 800b986:	e0e1      	b.n	800bb4c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f000 80de 	beq.w	800bb50 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b99a:	2101      	movs	r1, #1
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2208      	movs	r2, #8
 800b9a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b9a6:	e0d3      	b.n	800bb50 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fc20 	bl	800c1f8 <USBH_SetCfg>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f040 80ca 	bne.w	800bb54 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2209      	movs	r2, #9
 800b9c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b9c6:	e0c5      	b.n	800bb54 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00b      	beq.n	800b9ee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b9d6:	2101      	movs	r1, #1
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fc30 	bl	800c23e <USBH_SetFeature>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 80b9 	bne.w	800bb58 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b9ec:	e0b4      	b.n	800bb58 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	220a      	movs	r2, #10
 800b9f2:	701a      	strb	r2, [r3, #0]
      break;
 800b9f4:	e0b0      	b.n	800bb58 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80ad 	beq.w	800bb5c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	73fb      	strb	r3, [r7, #15]
 800ba0e:	e016      	b.n	800ba3e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ba10:	7bfa      	ldrb	r2, [r7, #15]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	32de      	adds	r2, #222	; 0xde
 800ba16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba1a:	791a      	ldrb	r2, [r3, #4]
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d108      	bne.n	800ba38 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ba26:	7bfa      	ldrb	r2, [r7, #15]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	32de      	adds	r2, #222	; 0xde
 800ba2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ba36:	e005      	b.n	800ba44 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	73fb      	strb	r3, [r7, #15]
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d0e5      	beq.n	800ba10 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d016      	beq.n	800ba7c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d109      	bne.n	800ba74 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2206      	movs	r2, #6
 800ba64:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba6c:	2103      	movs	r1, #3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ba72:	e073      	b.n	800bb5c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	220d      	movs	r2, #13
 800ba78:	701a      	strb	r2, [r3, #0]
      break;
 800ba7a:	e06f      	b.n	800bb5c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	220d      	movs	r2, #13
 800ba80:	701a      	strb	r2, [r3, #0]
      break;
 800ba82:	e06b      	b.n	800bb5c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d017      	beq.n	800babe <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	4798      	blx	r3
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba9e:	7bbb      	ldrb	r3, [r7, #14]
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	220b      	movs	r2, #11
 800baaa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800baac:	e058      	b.n	800bb60 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800baae:	7bbb      	ldrb	r3, [r7, #14]
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d154      	bne.n	800bb60 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	220d      	movs	r2, #13
 800baba:	701a      	strb	r2, [r3, #0]
      break;
 800babc:	e050      	b.n	800bb60 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	220d      	movs	r2, #13
 800bac2:	701a      	strb	r2, [r3, #0]
      break;
 800bac4:	e04c      	b.n	800bb60 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d049      	beq.n	800bb64 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	4798      	blx	r3
      }
      break;
 800badc:	e042      	b.n	800bb64 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff fd72 	bl	800b5d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d009      	beq.n	800bb0a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d005      	beq.n	800bb20 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb1a:	2105      	movs	r1, #5
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d107      	bne.n	800bb3c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fe2b 	bl	800b790 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bb3a:	e014      	b.n	800bb66 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 f9bb 	bl	800ceb8 <USBH_LL_Start>
      break;
 800bb42:	e010      	b.n	800bb66 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800bb44:	bf00      	nop
 800bb46:	e00e      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb48:	bf00      	nop
 800bb4a:	e00c      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb4c:	bf00      	nop
 800bb4e:	e00a      	b.n	800bb66 <USBH_Process+0x3b6>
    break;
 800bb50:	bf00      	nop
 800bb52:	e008      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb54:	bf00      	nop
 800bb56:	e006      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e004      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb5c:	bf00      	nop
 800bb5e:	e002      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb60:	bf00      	nop
 800bb62:	e000      	b.n	800bb66 <USBH_Process+0x3b6>
      break;
 800bb64:	bf00      	nop
  }
  return USBH_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af04      	add	r7, sp, #16
 800bb76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	785b      	ldrb	r3, [r3, #1]
 800bb84:	2b07      	cmp	r3, #7
 800bb86:	f200 81c1 	bhi.w	800bf0c <USBH_HandleEnum+0x39c>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <USBH_HandleEnum+0x20>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbb1 	.word	0x0800bbb1
 800bb94:	0800bc6f 	.word	0x0800bc6f
 800bb98:	0800bcd9 	.word	0x0800bcd9
 800bb9c:	0800bd67 	.word	0x0800bd67
 800bba0:	0800bdd1 	.word	0x0800bdd1
 800bba4:	0800be41 	.word	0x0800be41
 800bba8:	0800be87 	.word	0x0800be87
 800bbac:	0800becd 	.word	0x0800becd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bbb0:	2108      	movs	r1, #8
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa50 	bl	800c058 <USBH_Get_DevDesc>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bbbc:	7bbb      	ldrb	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d130      	bne.n	800bc24 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	7919      	ldrb	r1, [r3, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bbe6:	b292      	uxth	r2, r2
 800bbe8:	9202      	str	r2, [sp, #8]
 800bbea:	2200      	movs	r2, #0
 800bbec:	9201      	str	r2, [sp, #4]
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2280      	movs	r2, #128	; 0x80
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 ff79 	bl	800caec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7959      	ldrb	r1, [r3, #5]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bc0e:	b292      	uxth	r2, r2
 800bc10:	9202      	str	r2, [sp, #8]
 800bc12:	2200      	movs	r2, #0
 800bc14:	9201      	str	r2, [sp, #4]
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 ff65 	bl	800caec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bc22:	e175      	b.n	800bf10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	f040 8172 	bne.w	800bf10 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc32:	3301      	adds	r3, #1
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d903      	bls.n	800bc4e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	220d      	movs	r2, #13
 800bc4a:	701a      	strb	r2, [r3, #0]
      break;
 800bc4c:	e160      	b.n	800bf10 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	795b      	ldrb	r3, [r3, #5]
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 ff99 	bl	800cb8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	4619      	mov	r1, r3
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 ff93 	bl	800cb8c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
      break;
 800bc6c:	e150      	b.n	800bf10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc6e:	2112      	movs	r1, #18
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f9f1 	bl	800c058 <USBH_Get_DevDesc>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc7a:	7bbb      	ldrb	r3, [r7, #14]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d103      	bne.n	800bc88 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2202      	movs	r2, #2
 800bc84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc86:	e145      	b.n	800bf14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	f040 8142 	bne.w	800bf14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc96:	3301      	adds	r3, #1
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d903      	bls.n	800bcb2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	220d      	movs	r2, #13
 800bcae:	701a      	strb	r2, [r3, #0]
      break;
 800bcb0:	e130      	b.n	800bf14 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	795b      	ldrb	r3, [r3, #5]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 ff67 	bl	800cb8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	791b      	ldrb	r3, [r3, #4]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f000 ff61 	bl	800cb8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	701a      	strb	r2, [r3, #0]
      break;
 800bcd6:	e11d      	b.n	800bf14 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bcd8:	2101      	movs	r1, #1
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa68 	bl	800c1b0 <USBH_SetAddress>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d132      	bne.n	800bd50 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bcea:	2002      	movs	r0, #2
 800bcec:	f001 fa49 	bl	800d182 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	7919      	ldrb	r1, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bd12:	b292      	uxth	r2, r2
 800bd14:	9202      	str	r2, [sp, #8]
 800bd16:	2200      	movs	r2, #0
 800bd18:	9201      	str	r2, [sp, #4]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2280      	movs	r2, #128	; 0x80
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fee3 	bl	800caec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	7959      	ldrb	r1, [r3, #5]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	9202      	str	r2, [sp, #8]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	9201      	str	r2, [sp, #4]
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	4603      	mov	r3, r0
 800bd46:	2200      	movs	r2, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fecf 	bl	800caec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd4e:	e0e3      	b.n	800bf18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	f040 80e0 	bne.w	800bf18 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	220d      	movs	r2, #13
 800bd5c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	705a      	strb	r2, [r3, #1]
      break;
 800bd64:	e0d8      	b.n	800bf18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd66:	2109      	movs	r1, #9
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f99d 	bl	800c0a8 <USBH_Get_CfgDesc>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2204      	movs	r2, #4
 800bd7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd7e:	e0cd      	b.n	800bf1c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	f040 80ca 	bne.w	800bf1c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd8e:	3301      	adds	r3, #1
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d903      	bls.n	800bdaa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	220d      	movs	r2, #13
 800bda6:	701a      	strb	r2, [r3, #0]
      break;
 800bda8:	e0b8      	b.n	800bf1c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	795b      	ldrb	r3, [r3, #5]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 feeb 	bl	800cb8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	791b      	ldrb	r3, [r3, #4]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fee5 	bl	800cb8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	701a      	strb	r2, [r3, #0]
      break;
 800bdce:	e0a5      	b.n	800bf1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f965 	bl	800c0a8 <USBH_Get_CfgDesc>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2205      	movs	r2, #5
 800bdec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bdee:	e097      	b.n	800bf20 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	f040 8094 	bne.w	800bf20 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdfe:	3301      	adds	r3, #1
 800be00:	b2da      	uxtb	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be0e:	2b03      	cmp	r3, #3
 800be10:	d903      	bls.n	800be1a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	220d      	movs	r2, #13
 800be16:	701a      	strb	r2, [r3, #0]
      break;
 800be18:	e082      	b.n	800bf20 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	795b      	ldrb	r3, [r3, #5]
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 feb3 	bl	800cb8c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	791b      	ldrb	r3, [r3, #4]
 800be2a:	4619      	mov	r1, r3
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fead 	bl	800cb8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
      break;
 800be3e:	e06f      	b.n	800bf20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800be46:	2b00      	cmp	r3, #0
 800be48:	d019      	beq.n	800be7e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be56:	23ff      	movs	r3, #255	; 0xff
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 f949 	bl	800c0f0 <USBH_Get_StringDesc>
 800be5e:	4603      	mov	r3, r0
 800be60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be62:	7bbb      	ldrb	r3, [r7, #14]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d103      	bne.n	800be70 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2206      	movs	r2, #6
 800be6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800be6e:	e059      	b.n	800bf24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be70:	7bbb      	ldrb	r3, [r7, #14]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d156      	bne.n	800bf24 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2206      	movs	r2, #6
 800be7a:	705a      	strb	r2, [r3, #1]
      break;
 800be7c:	e052      	b.n	800bf24 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2206      	movs	r2, #6
 800be82:	705a      	strb	r2, [r3, #1]
      break;
 800be84:	e04e      	b.n	800bf24 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d019      	beq.n	800bec4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be9c:	23ff      	movs	r3, #255	; 0xff
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f926 	bl	800c0f0 <USBH_Get_StringDesc>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bea8:	7bbb      	ldrb	r3, [r7, #14]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d103      	bne.n	800beb6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2207      	movs	r2, #7
 800beb2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800beb4:	e038      	b.n	800bf28 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800beb6:	7bbb      	ldrb	r3, [r7, #14]
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d135      	bne.n	800bf28 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2207      	movs	r2, #7
 800bec0:	705a      	strb	r2, [r3, #1]
      break;
 800bec2:	e031      	b.n	800bf28 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2207      	movs	r2, #7
 800bec8:	705a      	strb	r2, [r3, #1]
      break;
 800beca:	e02d      	b.n	800bf28 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d017      	beq.n	800bf06 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bee2:	23ff      	movs	r3, #255	; 0xff
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f903 	bl	800c0f0 <USBH_Get_StringDesc>
 800beea:	4603      	mov	r3, r0
 800beec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800beee:	7bbb      	ldrb	r3, [r7, #14]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d102      	bne.n	800befa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bef8:	e018      	b.n	800bf2c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	2b03      	cmp	r3, #3
 800befe:	d115      	bne.n	800bf2c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]
      break;
 800bf04:	e012      	b.n	800bf2c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	73fb      	strb	r3, [r7, #15]
      break;
 800bf0a:	e00f      	b.n	800bf2c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bf0c:	bf00      	nop
 800bf0e:	e00e      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf10:	bf00      	nop
 800bf12:	e00c      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf14:	bf00      	nop
 800bf16:	e00a      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf18:	bf00      	nop
 800bf1a:	e008      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf1c:	bf00      	nop
 800bf1e:	e006      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf20:	bf00      	nop
 800bf22:	e004      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf24:	bf00      	nop
 800bf26:	e002      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf28:	bf00      	nop
 800bf2a:	e000      	b.n	800bf2e <USBH_HandleEnum+0x3be>
      break;
 800bf2c:	bf00      	nop
  }
  return Status;
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3710      	adds	r7, #16
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b082      	sub	sp, #8
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f804 	bl	800bf7a <USBH_HandleSof>
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b0b      	cmp	r3, #11
 800bf8a:	d10a      	bne.n	800bfa2 <USBH_HandleSof+0x28>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d005      	beq.n	800bfa2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b083      	sub	sp, #12
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800bfba:	bf00      	nop
}
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bfc6:	b480      	push	{r7}
 800bfc8:	b083      	sub	sp, #12
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bfd6:	bf00      	nop
}
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 ff5c 	bl	800ceee <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	791b      	ldrb	r3, [r3, #4]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fda5 	bl	800cb8c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	795b      	ldrb	r3, [r3, #5]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fd9f 	bl	800cb8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af02      	add	r7, sp, #8
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	4613      	mov	r3, r2
 800c072:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c076:	2100      	movs	r1, #0
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f864 	bl	800c146 <USBH_GetDescriptor>
 800c07e:	4603      	mov	r3, r0
 800c080:	73fb      	strb	r3, [r7, #15]
 800c082:	7bfb      	ldrb	r3, [r7, #15]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10a      	bne.n	800c09e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c094:	78fa      	ldrb	r2, [r7, #3]
 800c096:	b292      	uxth	r2, r2
 800c098:	4619      	mov	r1, r3
 800c09a:	f000 f918 	bl	800c2ce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	331c      	adds	r3, #28
 800c0b8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c0ba:	887b      	ldrh	r3, [r7, #2]
 800c0bc:	9300      	str	r3, [sp, #0]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f83d 	bl	800c146 <USBH_GetDescriptor>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	72fb      	strb	r3, [r7, #11]
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d107      	bne.n	800c0e6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c0dc:	887a      	ldrh	r2, [r7, #2]
 800c0de:	68f9      	ldr	r1, [r7, #12]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 f964 	bl	800c3ae <USBH_ParseCfgDesc>
  }

  return status;
 800c0e6:	7afb      	ldrb	r3, [r7, #11]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af02      	add	r7, sp, #8
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	607a      	str	r2, [r7, #4]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	72fb      	strb	r3, [r7, #11]
 800c100:	4613      	mov	r3, r2
 800c102:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800c104:	7afb      	ldrb	r3, [r7, #11]
 800c106:	b29b      	uxth	r3, r3
 800c108:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c10c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800c114:	893b      	ldrh	r3, [r7, #8]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	460b      	mov	r3, r1
 800c11a:	2100      	movs	r1, #0
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f000 f812 	bl	800c146 <USBH_GetDescriptor>
 800c122:	4603      	mov	r3, r0
 800c124:	75fb      	strb	r3, [r7, #23]
 800c126:	7dfb      	ldrb	r3, [r7, #23]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d107      	bne.n	800c13c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c132:	893a      	ldrh	r2, [r7, #8]
 800c134:	6879      	ldr	r1, [r7, #4]
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fa37 	bl	800c5aa <USBH_ParseStringDesc>
  }

  return status;
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	607b      	str	r3, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	72fb      	strb	r3, [r7, #11]
 800c154:	4613      	mov	r3, r2
 800c156:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	789b      	ldrb	r3, [r3, #2]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d11c      	bne.n	800c19a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c166:	b2da      	uxtb	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2206      	movs	r2, #6
 800c170:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	893a      	ldrh	r2, [r7, #8]
 800c176:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c178:	893b      	ldrh	r3, [r7, #8]
 800c17a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c17e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c182:	d104      	bne.n	800c18e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f240 4209 	movw	r2, #1033	; 0x409
 800c18a:	829a      	strh	r2, [r3, #20]
 800c18c:	e002      	b.n	800c194 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2200      	movs	r2, #0
 800c192:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	8b3a      	ldrh	r2, [r7, #24]
 800c198:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c19a:	8b3b      	ldrh	r3, [r7, #24]
 800c19c:	461a      	mov	r2, r3
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	f000 fa50 	bl	800c646 <USBH_CtlReq>
 800c1a6:	4603      	mov	r3, r0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	789b      	ldrb	r3, [r3, #2]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d10f      	bne.n	800c1e4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2205      	movs	r2, #5
 800c1ce:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c1d0:	78fb      	ldrb	r3, [r7, #3]
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fa2c 	bl	800c646 <USBH_CtlReq>
 800c1ee:	4603      	mov	r3, r0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	460b      	mov	r3, r1
 800c202:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	789b      	ldrb	r3, [r3, #2]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d10e      	bne.n	800c22a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2209      	movs	r2, #9
 800c216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	887a      	ldrh	r2, [r7, #2]
 800c21c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c22a:	2200      	movs	r2, #0
 800c22c:	2100      	movs	r1, #0
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fa09 	bl	800c646 <USBH_CtlReq>
 800c234:	4603      	mov	r3, r0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b082      	sub	sp, #8
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	789b      	ldrb	r3, [r3, #2]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d10f      	bne.n	800c272 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2203      	movs	r2, #3
 800c25c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	b29a      	uxth	r2, r3
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c272:	2200      	movs	r2, #0
 800c274:	2100      	movs	r1, #0
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f9e5 	bl	800c646 <USBH_CtlReq>
 800c27c:	4603      	mov	r3, r0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	789b      	ldrb	r3, [r3, #2]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d10f      	bne.n	800c2ba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2202      	movs	r2, #2
 800c29e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f9c1 	bl	800c646 <USBH_CtlReq>
 800c2c4:	4603      	mov	r3, r0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	781a      	ldrb	r2, [r3, #0]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	785a      	ldrb	r2, [r3, #1]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	3303      	adds	r3, #3
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	021b      	lsls	r3, r3, #8
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	4313      	orrs	r3, r2
 800c302:	b29a      	uxth	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	791a      	ldrb	r2, [r3, #4]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	795a      	ldrb	r2, [r3, #5]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	799a      	ldrb	r2, [r3, #6]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	79da      	ldrb	r2, [r3, #7]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c328:	88fb      	ldrh	r3, [r7, #6]
 800c32a:	2b08      	cmp	r3, #8
 800c32c:	d939      	bls.n	800c3a2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	3308      	adds	r3, #8
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	b29a      	uxth	r2, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	3309      	adds	r3, #9
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	b29b      	uxth	r3, r3
 800c342:	4313      	orrs	r3, r2
 800c344:	b29a      	uxth	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	330a      	adds	r3, #10
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	b29a      	uxth	r2, r3
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	330b      	adds	r3, #11
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	021b      	lsls	r3, r3, #8
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	4313      	orrs	r3, r2
 800c360:	b29a      	uxth	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	330c      	adds	r3, #12
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	330d      	adds	r3, #13
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	b29b      	uxth	r3, r3
 800c376:	021b      	lsls	r3, r3, #8
 800c378:	b29b      	uxth	r3, r3
 800c37a:	4313      	orrs	r3, r2
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	7b9a      	ldrb	r2, [r3, #14]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	7bda      	ldrb	r2, [r3, #15]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	7c1a      	ldrb	r2, [r3, #16]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	7c5a      	ldrb	r2, [r3, #17]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	745a      	strb	r2, [r3, #17]
  }
}
 800c3a2:	bf00      	nop
 800c3a4:	3714      	adds	r7, #20
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b08a      	sub	sp, #40	; 0x28
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	781a      	ldrb	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	785a      	ldrb	r2, [r3, #1]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	3302      	adds	r3, #2
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	3303      	adds	r3, #3
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	021b      	lsls	r3, r3, #8
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	791a      	ldrb	r2, [r3, #4]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	795a      	ldrb	r2, [r3, #5]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	799a      	ldrb	r2, [r3, #6]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	79da      	ldrb	r2, [r3, #7]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	7a1a      	ldrb	r2, [r3, #8]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	2b09      	cmp	r3, #9
 800c428:	d95f      	bls.n	800c4ea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c42a:	2309      	movs	r3, #9
 800c42c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c42e:	2300      	movs	r3, #0
 800c430:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c432:	e051      	b.n	800c4d8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c434:	f107 0316 	add.w	r3, r7, #22
 800c438:	4619      	mov	r1, r3
 800c43a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c43c:	f000 f8e8 	bl	800c610 <USBH_GetNextDesc>
 800c440:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	2b04      	cmp	r3, #4
 800c448:	d146      	bne.n	800c4d8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c44a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c44e:	221a      	movs	r2, #26
 800c450:	fb02 f303 	mul.w	r3, r2, r3
 800c454:	3308      	adds	r3, #8
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	4413      	add	r3, r2
 800c45a:	3302      	adds	r3, #2
 800c45c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c45e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c460:	69f8      	ldr	r0, [r7, #28]
 800c462:	f000 f846 	bl	800c4f2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c466:	2300      	movs	r3, #0
 800c468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c470:	e022      	b.n	800c4b8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c472:	f107 0316 	add.w	r3, r7, #22
 800c476:	4619      	mov	r1, r3
 800c478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c47a:	f000 f8c9 	bl	800c610 <USBH_GetNextDesc>
 800c47e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	785b      	ldrb	r3, [r3, #1]
 800c484:	2b05      	cmp	r3, #5
 800c486:	d117      	bne.n	800c4b8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c48c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c490:	3201      	adds	r2, #1
 800c492:	00d2      	lsls	r2, r2, #3
 800c494:	211a      	movs	r1, #26
 800c496:	fb01 f303 	mul.w	r3, r1, r3
 800c49a:	4413      	add	r3, r2
 800c49c:	3308      	adds	r3, #8
 800c49e:	68fa      	ldr	r2, [r7, #12]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800c4a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4a8:	69b8      	ldr	r0, [r7, #24]
 800c4aa:	f000 f851 	bl	800c550 <USBH_ParseEPDesc>
            ep_ix++;
 800c4ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	791b      	ldrb	r3, [r3, #4]
 800c4bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d204      	bcs.n	800c4ce <USBH_ParseCfgDesc+0x120>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	885a      	ldrh	r2, [r3, #2]
 800c4c8:	8afb      	ldrh	r3, [r7, #22]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d8d1      	bhi.n	800c472 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c4d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d804      	bhi.n	800c4ea <USBH_ParseCfgDesc+0x13c>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	885a      	ldrh	r2, [r3, #2]
 800c4e4:	8afb      	ldrh	r3, [r7, #22]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d8a4      	bhi.n	800c434 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c4ea:	bf00      	nop
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b083      	sub	sp, #12
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	781a      	ldrb	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	785a      	ldrb	r2, [r3, #1]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	789a      	ldrb	r2, [r3, #2]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	78da      	ldrb	r2, [r3, #3]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	791a      	ldrb	r2, [r3, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	795a      	ldrb	r2, [r3, #5]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	799a      	ldrb	r2, [r3, #6]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	79da      	ldrb	r2, [r3, #7]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	7a1a      	ldrb	r2, [r3, #8]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	721a      	strb	r2, [r3, #8]
}
 800c544:	bf00      	nop
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	785a      	ldrb	r2, [r3, #1]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	789a      	ldrb	r2, [r3, #2]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	78da      	ldrb	r2, [r3, #3]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	3304      	adds	r3, #4
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	b29a      	uxth	r2, r3
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	3305      	adds	r3, #5
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4313      	orrs	r3, r2
 800c590:	b29a      	uxth	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	799a      	ldrb	r2, [r3, #6]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	719a      	strb	r2, [r3, #6]
}
 800c59e:	bf00      	nop
 800c5a0:	370c      	adds	r7, #12
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	b087      	sub	sp, #28
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d120      	bne.n	800c604 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	1e9a      	subs	r2, r3, #2
 800c5c8:	88fb      	ldrh	r3, [r7, #6]
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	bf28      	it	cs
 800c5ce:	4613      	movcs	r3, r2
 800c5d0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3302      	adds	r3, #2
 800c5d6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c5d8:	2300      	movs	r3, #0
 800c5da:	82fb      	strh	r3, [r7, #22]
 800c5dc:	e00b      	b.n	800c5f6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c5de:	8afb      	ldrh	r3, [r7, #22]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	781a      	ldrb	r2, [r3, #0]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c5f0:	8afb      	ldrh	r3, [r7, #22]
 800c5f2:	3302      	adds	r3, #2
 800c5f4:	82fb      	strh	r3, [r7, #22]
 800c5f6:	8afa      	ldrh	r2, [r7, #22]
 800c5f8:	8abb      	ldrh	r3, [r7, #20]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d3ef      	bcc.n	800c5de <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2200      	movs	r2, #0
 800c602:	701a      	strb	r2, [r3, #0]
  }
}
 800c604:	bf00      	nop
 800c606:	371c      	adds	r7, #28
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	881a      	ldrh	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	b29b      	uxth	r3, r3
 800c624:	4413      	add	r3, r2
 800c626:	b29a      	uxth	r2, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4413      	add	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c638:	68fb      	ldr	r3, [r7, #12]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b086      	sub	sp, #24
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	60b9      	str	r1, [r7, #8]
 800c650:	4613      	mov	r3, r2
 800c652:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c654:	2301      	movs	r3, #1
 800c656:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	789b      	ldrb	r3, [r3, #2]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d002      	beq.n	800c666 <USBH_CtlReq+0x20>
 800c660:	2b02      	cmp	r3, #2
 800c662:	d00f      	beq.n	800c684 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c664:	e027      	b.n	800c6b6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	88fa      	ldrh	r2, [r7, #6]
 800c670:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2201      	movs	r2, #1
 800c676:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2202      	movs	r2, #2
 800c67c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c67e:	2301      	movs	r3, #1
 800c680:	75fb      	strb	r3, [r7, #23]
      break;
 800c682:	e018      	b.n	800c6b6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f000 f81b 	bl	800c6c0 <USBH_HandleControl>
 800c68a:	4603      	mov	r3, r0
 800c68c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c68e:	7dfb      	ldrb	r3, [r7, #23]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <USBH_CtlReq+0x54>
 800c694:	7dfb      	ldrb	r3, [r7, #23]
 800c696:	2b03      	cmp	r3, #3
 800c698:	d106      	bne.n	800c6a8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2201      	movs	r2, #1
 800c69e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	761a      	strb	r2, [r3, #24]
      break;
 800c6a6:	e005      	b.n	800c6b4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d102      	bne.n	800c6b4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	709a      	strb	r2, [r3, #2]
      break;
 800c6b4:	bf00      	nop
  }
  return status;
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3718      	adds	r7, #24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b086      	sub	sp, #24
 800c6c4:	af02      	add	r7, sp, #8
 800c6c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	7e1b      	ldrb	r3, [r3, #24]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	2b0a      	cmp	r3, #10
 800c6d8:	f200 8158 	bhi.w	800c98c <USBH_HandleControl+0x2cc>
 800c6dc:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <USBH_HandleControl+0x24>)
 800c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e2:	bf00      	nop
 800c6e4:	0800c711 	.word	0x0800c711
 800c6e8:	0800c72b 	.word	0x0800c72b
 800c6ec:	0800c795 	.word	0x0800c795
 800c6f0:	0800c7bb 	.word	0x0800c7bb
 800c6f4:	0800c7f3 	.word	0x0800c7f3
 800c6f8:	0800c81f 	.word	0x0800c81f
 800c6fc:	0800c871 	.word	0x0800c871
 800c700:	0800c893 	.word	0x0800c893
 800c704:	0800c8cf 	.word	0x0800c8cf
 800c708:	0800c8f7 	.word	0x0800c8f7
 800c70c:	0800c935 	.word	0x0800c935
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f103 0110 	add.w	r1, r3, #16
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	795b      	ldrb	r3, [r3, #5]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f945 	bl	800c9ac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2202      	movs	r2, #2
 800c726:	761a      	strb	r2, [r3, #24]
      break;
 800c728:	e13b      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	795b      	ldrb	r3, [r3, #5]
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fcc9 	bl	800d0c8 <USBH_LL_GetURBState>
 800c736:	4603      	mov	r3, r0
 800c738:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c73a:	7bbb      	ldrb	r3, [r7, #14]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d11e      	bne.n	800c77e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7c1b      	ldrb	r3, [r3, #16]
 800c744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c748:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	8adb      	ldrh	r3, [r3, #22]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00a      	beq.n	800c768 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c752:	7b7b      	ldrb	r3, [r7, #13]
 800c754:	2b80      	cmp	r3, #128	; 0x80
 800c756:	d103      	bne.n	800c760 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2203      	movs	r2, #3
 800c75c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c75e:	e117      	b.n	800c990 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2205      	movs	r2, #5
 800c764:	761a      	strb	r2, [r3, #24]
      break;
 800c766:	e113      	b.n	800c990 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800c768:	7b7b      	ldrb	r3, [r7, #13]
 800c76a:	2b80      	cmp	r3, #128	; 0x80
 800c76c:	d103      	bne.n	800c776 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2209      	movs	r2, #9
 800c772:	761a      	strb	r2, [r3, #24]
      break;
 800c774:	e10c      	b.n	800c990 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2207      	movs	r2, #7
 800c77a:	761a      	strb	r2, [r3, #24]
      break;
 800c77c:	e108      	b.n	800c990 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	2b04      	cmp	r3, #4
 800c782:	d003      	beq.n	800c78c <USBH_HandleControl+0xcc>
 800c784:	7bbb      	ldrb	r3, [r7, #14]
 800c786:	2b02      	cmp	r3, #2
 800c788:	f040 8102 	bne.w	800c990 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	220b      	movs	r2, #11
 800c790:	761a      	strb	r2, [r3, #24]
      break;
 800c792:	e0fd      	b.n	800c990 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6899      	ldr	r1, [r3, #8]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	899a      	ldrh	r2, [r3, #12]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	791b      	ldrb	r3, [r3, #4]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f93c 	bl	800ca2a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2204      	movs	r2, #4
 800c7b6:	761a      	strb	r2, [r3, #24]
      break;
 800c7b8:	e0f3      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	791b      	ldrb	r3, [r3, #4]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fc81 	bl	800d0c8 <USBH_LL_GetURBState>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c7ca:	7bbb      	ldrb	r3, [r7, #14]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d102      	bne.n	800c7d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2209      	movs	r2, #9
 800c7d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c7d6:	7bbb      	ldrb	r3, [r7, #14]
 800c7d8:	2b05      	cmp	r3, #5
 800c7da:	d102      	bne.n	800c7e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c7e0:	e0d8      	b.n	800c994 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	2b04      	cmp	r3, #4
 800c7e6:	f040 80d5 	bne.w	800c994 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	220b      	movs	r2, #11
 800c7ee:	761a      	strb	r2, [r3, #24]
      break;
 800c7f0:	e0d0      	b.n	800c994 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6899      	ldr	r1, [r3, #8]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	899a      	ldrh	r2, [r3, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7958      	ldrb	r0, [r3, #5]
 800c7fe:	2301      	movs	r3, #1
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	4603      	mov	r3, r0
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f8eb 	bl	800c9e0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c810:	b29a      	uxth	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2206      	movs	r2, #6
 800c81a:	761a      	strb	r2, [r3, #24]
      break;
 800c81c:	e0c1      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	795b      	ldrb	r3, [r3, #5]
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fc4f 	bl	800d0c8 <USBH_LL_GetURBState>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d103      	bne.n	800c83c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2207      	movs	r2, #7
 800c838:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c83a:	e0ad      	b.n	800c998 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800c83c:	7bbb      	ldrb	r3, [r7, #14]
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d105      	bne.n	800c84e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	220c      	movs	r2, #12
 800c846:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c848:	2303      	movs	r3, #3
 800c84a:	73fb      	strb	r3, [r7, #15]
      break;
 800c84c:	e0a4      	b.n	800c998 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c84e:	7bbb      	ldrb	r3, [r7, #14]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d103      	bne.n	800c85c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2205      	movs	r2, #5
 800c858:	761a      	strb	r2, [r3, #24]
      break;
 800c85a:	e09d      	b.n	800c998 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
 800c85e:	2b04      	cmp	r3, #4
 800c860:	f040 809a 	bne.w	800c998 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	220b      	movs	r2, #11
 800c868:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c86a:	2302      	movs	r3, #2
 800c86c:	73fb      	strb	r3, [r7, #15]
      break;
 800c86e:	e093      	b.n	800c998 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	791b      	ldrb	r3, [r3, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	2100      	movs	r1, #0
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f8d6 	bl	800ca2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c884:	b29a      	uxth	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2208      	movs	r2, #8
 800c88e:	761a      	strb	r2, [r3, #24]

      break;
 800c890:	e087      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	791b      	ldrb	r3, [r3, #4]
 800c896:	4619      	mov	r1, r3
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fc15 	bl	800d0c8 <USBH_LL_GetURBState>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c8a2:	7bbb      	ldrb	r3, [r7, #14]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d105      	bne.n	800c8b4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	220d      	movs	r2, #13
 800c8ac:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c8b2:	e073      	b.n	800c99c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c8b4:	7bbb      	ldrb	r3, [r7, #14]
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d103      	bne.n	800c8c2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	220b      	movs	r2, #11
 800c8be:	761a      	strb	r2, [r3, #24]
      break;
 800c8c0:	e06c      	b.n	800c99c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c8c2:	7bbb      	ldrb	r3, [r7, #14]
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d169      	bne.n	800c99c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c8cc:	e066      	b.n	800c99c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	795a      	ldrb	r2, [r3, #5]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	2200      	movs	r2, #0
 800c8da:	2100      	movs	r1, #0
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f87f 	bl	800c9e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	220a      	movs	r2, #10
 800c8f2:	761a      	strb	r2, [r3, #24]
      break;
 800c8f4:	e055      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	795b      	ldrb	r3, [r3, #5]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fbe3 	bl	800d0c8 <USBH_LL_GetURBState>
 800c902:	4603      	mov	r3, r0
 800c904:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c906:	7bbb      	ldrb	r3, [r7, #14]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d105      	bne.n	800c918 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	220d      	movs	r2, #13
 800c914:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c916:	e043      	b.n	800c9a0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d103      	bne.n	800c926 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2209      	movs	r2, #9
 800c922:	761a      	strb	r2, [r3, #24]
      break;
 800c924:	e03c      	b.n	800c9a0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d139      	bne.n	800c9a0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	220b      	movs	r2, #11
 800c930:	761a      	strb	r2, [r3, #24]
      break;
 800c932:	e035      	b.n	800c9a0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7e5b      	ldrb	r3, [r3, #25]
 800c938:	3301      	adds	r3, #1
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	765a      	strb	r2, [r3, #25]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7e5b      	ldrb	r3, [r3, #25]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d806      	bhi.n	800c956 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2201      	movs	r2, #1
 800c952:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c954:	e025      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c95c:	2106      	movs	r1, #6
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	795b      	ldrb	r3, [r3, #5]
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f90c 	bl	800cb8c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	791b      	ldrb	r3, [r3, #4]
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f906 	bl	800cb8c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c986:	2302      	movs	r3, #2
 800c988:	73fb      	strb	r3, [r7, #15]
      break;
 800c98a:	e00a      	b.n	800c9a2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800c98c:	bf00      	nop
 800c98e:	e008      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
      break;
 800c990:	bf00      	nop
 800c992:	e006      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
      break;
 800c994:	bf00      	nop
 800c996:	e004      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
      break;
 800c998:	bf00      	nop
 800c99a:	e002      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
      break;
 800c99c:	bf00      	nop
 800c99e:	e000      	b.n	800c9a2 <USBH_HandleControl+0x2e2>
      break;
 800c9a0:	bf00      	nop
  }

  return status;
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af04      	add	r7, sp, #16
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c9ba:	79f9      	ldrb	r1, [r7, #7]
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9303      	str	r3, [sp, #12]
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	9302      	str	r3, [sp, #8]
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f000 fb48 	bl	800d066 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af04      	add	r7, sp, #16
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	80fb      	strh	r3, [r7, #6]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ca04:	7979      	ldrb	r1, [r7, #5]
 800ca06:	7e3b      	ldrb	r3, [r7, #24]
 800ca08:	9303      	str	r3, [sp, #12]
 800ca0a:	88fb      	ldrh	r3, [r7, #6]
 800ca0c:	9302      	str	r3, [sp, #8]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	2301      	movs	r3, #1
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2300      	movs	r3, #0
 800ca18:	2200      	movs	r2, #0
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 fb23 	bl	800d066 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ca2a:	b580      	push	{r7, lr}
 800ca2c:	b088      	sub	sp, #32
 800ca2e:	af04      	add	r7, sp, #16
 800ca30:	60f8      	str	r0, [r7, #12]
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	4611      	mov	r1, r2
 800ca36:	461a      	mov	r2, r3
 800ca38:	460b      	mov	r3, r1
 800ca3a:	80fb      	strh	r3, [r7, #6]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ca40:	7979      	ldrb	r1, [r7, #5]
 800ca42:	2300      	movs	r3, #0
 800ca44:	9303      	str	r3, [sp, #12]
 800ca46:	88fb      	ldrh	r3, [r7, #6]
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	2301      	movs	r3, #1
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	2300      	movs	r3, #0
 800ca54:	2201      	movs	r2, #1
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f000 fb05 	bl	800d066 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ca5c:	2300      	movs	r3, #0

}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b088      	sub	sp, #32
 800ca6a:	af04      	add	r7, sp, #16
 800ca6c:	60f8      	str	r0, [r7, #12]
 800ca6e:	60b9      	str	r1, [r7, #8]
 800ca70:	4611      	mov	r1, r2
 800ca72:	461a      	mov	r2, r3
 800ca74:	460b      	mov	r3, r1
 800ca76:	80fb      	strh	r3, [r7, #6]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ca86:	2300      	movs	r3, #0
 800ca88:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ca8a:	7979      	ldrb	r1, [r7, #5]
 800ca8c:	7e3b      	ldrb	r3, [r7, #24]
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	88fb      	ldrh	r3, [r7, #6]
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	9301      	str	r3, [sp, #4]
 800ca98:	2301      	movs	r3, #1
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 fae0 	bl	800d066 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af04      	add	r7, sp, #16
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	4611      	mov	r1, r2
 800cabc:	461a      	mov	r2, r3
 800cabe:	460b      	mov	r3, r1
 800cac0:	80fb      	strh	r3, [r7, #6]
 800cac2:	4613      	mov	r3, r2
 800cac4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800cac6:	7979      	ldrb	r1, [r7, #5]
 800cac8:	2300      	movs	r3, #0
 800caca:	9303      	str	r3, [sp, #12]
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	9302      	str	r3, [sp, #8]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	2301      	movs	r3, #1
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	2302      	movs	r3, #2
 800cada:	2201      	movs	r2, #1
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 fac2 	bl	800d066 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af04      	add	r7, sp, #16
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	4608      	mov	r0, r1
 800caf6:	4611      	mov	r1, r2
 800caf8:	461a      	mov	r2, r3
 800cafa:	4603      	mov	r3, r0
 800cafc:	70fb      	strb	r3, [r7, #3]
 800cafe:	460b      	mov	r3, r1
 800cb00:	70bb      	strb	r3, [r7, #2]
 800cb02:	4613      	mov	r3, r2
 800cb04:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800cb06:	7878      	ldrb	r0, [r7, #1]
 800cb08:	78ba      	ldrb	r2, [r7, #2]
 800cb0a:	78f9      	ldrb	r1, [r7, #3]
 800cb0c:	8b3b      	ldrh	r3, [r7, #24]
 800cb0e:	9302      	str	r3, [sp, #8]
 800cb10:	7d3b      	ldrb	r3, [r7, #20]
 800cb12:	9301      	str	r3, [sp, #4]
 800cb14:	7c3b      	ldrb	r3, [r7, #16]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	4603      	mov	r3, r0
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fa55 	bl	800cfca <USBH_LL_OpenPipe>

  return USBH_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3708      	adds	r7, #8
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}

0800cb2a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800cb36:	78fb      	ldrb	r3, [r7, #3]
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fa74 	bl	800d028 <USBH_LL_ClosePipe>

  return USBH_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	460b      	mov	r3, r1
 800cb54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f836 	bl	800cbc8 <USBH_GetFreePipe>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cb60:	89fb      	ldrh	r3, [r7, #14]
 800cb62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d00a      	beq.n	800cb80 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800cb6a:	78fa      	ldrb	r2, [r7, #3]
 800cb6c:	89fb      	ldrh	r3, [r7, #14]
 800cb6e:	f003 030f 	and.w	r3, r3, #15
 800cb72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb76:	6879      	ldr	r1, [r7, #4]
 800cb78:	33e0      	adds	r3, #224	; 0xe0
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cb80:	89fb      	ldrh	r3, [r7, #14]
 800cb82:	b2db      	uxtb	r3, r3
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	2b0a      	cmp	r3, #10
 800cb9c:	d80d      	bhi.n	800cbba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cb9e:	78fb      	ldrb	r3, [r7, #3]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	33e0      	adds	r3, #224	; 0xe0
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	33e0      	adds	r3, #224	; 0xe0
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	440b      	add	r3, r1
 800cbb8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
 800cbd8:	e00f      	b.n	800cbfa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	33e0      	adds	r3, #224	; 0xe0
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d102      	bne.n	800cbf4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cbee:	7bfb      	ldrb	r3, [r7, #15]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	e007      	b.n	800cc04 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	73fb      	strb	r3, [r7, #15]
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	2b0a      	cmp	r3, #10
 800cbfe:	d9ec      	bls.n	800cbda <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cc00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800cc14:	2201      	movs	r2, #1
 800cc16:	490e      	ldr	r1, [pc, #56]	; (800cc50 <MX_USB_HOST_Init+0x40>)
 800cc18:	480e      	ldr	r0, [pc, #56]	; (800cc54 <MX_USB_HOST_Init+0x44>)
 800cc1a:	f7fe fc9f 	bl	800b55c <USBH_Init>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cc24:	f7f4 fdb0 	bl	8001788 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800cc28:	490b      	ldr	r1, [pc, #44]	; (800cc58 <MX_USB_HOST_Init+0x48>)
 800cc2a:	480a      	ldr	r0, [pc, #40]	; (800cc54 <MX_USB_HOST_Init+0x44>)
 800cc2c:	f7fe fd24 	bl	800b678 <USBH_RegisterClass>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cc36:	f7f4 fda7 	bl	8001788 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800cc3a:	4806      	ldr	r0, [pc, #24]	; (800cc54 <MX_USB_HOST_Init+0x44>)
 800cc3c:	f7fe fda8 	bl	800b790 <USBH_Start>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cc46:	f7f4 fd9f 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cc4a:	bf00      	nop
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	0800cc71 	.word	0x0800cc71
 800cc54:	2000289c 	.word	0x2000289c
 800cc58:	20000014 	.word	0x20000014

0800cc5c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800cc60:	4802      	ldr	r0, [pc, #8]	; (800cc6c <MX_USB_HOST_Process+0x10>)
 800cc62:	f7fe fda5 	bl	800b7b0 <USBH_Process>
}
 800cc66:	bf00      	nop
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000289c 	.word	0x2000289c

0800cc70 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	2b04      	cmp	r3, #4
 800cc82:	d819      	bhi.n	800ccb8 <USBH_UserProcess+0x48>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <USBH_UserProcess+0x1c>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	0800cca9 	.word	0x0800cca9
 800cc94:	0800ccb9 	.word	0x0800ccb9
 800cc98:	0800ccb1 	.word	0x0800ccb1
 800cc9c:	0800cca1 	.word	0x0800cca1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <USBH_UserProcess+0x58>)
 800cca2:	2203      	movs	r2, #3
 800cca4:	701a      	strb	r2, [r3, #0]
  break;
 800cca6:	e008      	b.n	800ccba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <USBH_UserProcess+0x58>)
 800ccaa:	2202      	movs	r2, #2
 800ccac:	701a      	strb	r2, [r3, #0]
  break;
 800ccae:	e004      	b.n	800ccba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ccb0:	4b05      	ldr	r3, [pc, #20]	; (800ccc8 <USBH_UserProcess+0x58>)
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	701a      	strb	r2, [r3, #0]
  break;
 800ccb6:	e000      	b.n	800ccba <USBH_UserProcess+0x4a>

  default:
  break;
 800ccb8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	200004d4 	.word	0x200004d4

0800cccc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b08a      	sub	sp, #40	; 0x28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccd4:	f107 0314 	add.w	r3, r7, #20
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
 800ccdc:	605a      	str	r2, [r3, #4]
 800ccde:	609a      	str	r2, [r3, #8]
 800cce0:	60da      	str	r2, [r3, #12]
 800cce2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccec:	d14e      	bne.n	800cd8c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccee:	4b29      	ldr	r3, [pc, #164]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800ccf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccf2:	4a28      	ldr	r2, [pc, #160]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800ccf4:	f043 0301 	orr.w	r3, r3, #1
 800ccf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ccfa:	4b26      	ldr	r3, [pc, #152]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800ccfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	613b      	str	r3, [r7, #16]
 800cd04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cd06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cd0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd14:	2303      	movs	r3, #3
 800cd16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd18:	230a      	movs	r3, #10
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd1c:	f107 0314 	add.w	r3, r7, #20
 800cd20:	4619      	mov	r1, r3
 800cd22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800cd26:	f7f7 f969 	bl	8003ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd2a:	4b1a      	ldr	r3, [pc, #104]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd2e:	4a19      	ldr	r2, [pc, #100]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd34:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cd36:	4b17      	ldr	r3, [pc, #92]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d114      	bne.n	800cd78 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd4e:	4b11      	ldr	r3, [pc, #68]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd52:	4a10      	ldr	r2, [pc, #64]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd58:	6593      	str	r3, [r2, #88]	; 0x58
 800cd5a:	4b0e      	ldr	r3, [pc, #56]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd62:	60bb      	str	r3, [r7, #8]
 800cd64:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800cd66:	f7f9 fadf 	bl	8006328 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800cd6a:	4b0a      	ldr	r3, [pc, #40]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6e:	4a09      	ldr	r2, [pc, #36]	; (800cd94 <HAL_HCD_MspInit+0xc8>)
 800cd70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd74:	6593      	str	r3, [r2, #88]	; 0x58
 800cd76:	e001      	b.n	800cd7c <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800cd78:	f7f9 fad6 	bl	8006328 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	2100      	movs	r1, #0
 800cd80:	2043      	movs	r0, #67	; 0x43
 800cd82:	f7f7 f8c4 	bl	8003f0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd86:	2043      	movs	r0, #67	; 0x43
 800cd88:	f7f7 f8dd 	bl	8003f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd8c:	bf00      	nop
 800cd8e:	3728      	adds	r7, #40	; 0x28
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	40021000 	.word	0x40021000

0800cd98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7ff f8d5 	bl	800bf56 <USBH_LL_IncTimer>
}
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff f90d 	bl	800bfe2 <USBH_LL_Connect>
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff f916 	bl	800c010 <USBH_LL_Disconnect>
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff f8c7 	bl	800bfaa <USBH_LL_PortEnabled>
}
 800ce1c:	bf00      	nop
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff f8c7 	bl	800bfc6 <USBH_LL_PortDisabled>
}
 800ce38:	bf00      	nop
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}

0800ce40 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d12a      	bne.n	800cea8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ce52:	4a18      	ldr	r2, [pc, #96]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4a15      	ldr	r2, [pc, #84]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ce62:	4b14      	ldr	r3, [pc, #80]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ce68:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ce6a:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce6c:	2208      	movs	r2, #8
 800ce6e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ce70:	4b10      	ldr	r3, [pc, #64]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce72:	2201      	movs	r2, #1
 800ce74:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ce76:	4b0f      	ldr	r3, [pc, #60]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce78:	2200      	movs	r2, #0
 800ce7a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ce7c:	4b0d      	ldr	r3, [pc, #52]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce7e:	2202      	movs	r2, #2
 800ce80:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce82:	4b0c      	ldr	r3, [pc, #48]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ce88:	480a      	ldr	r0, [pc, #40]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce8a:	f7f7 faa9 	bl	80043e0 <HAL_HCD_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ce94:	f7f4 fc78 	bl	8001788 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ce98:	4806      	ldr	r0, [pc, #24]	; (800ceb4 <USBH_LL_Init+0x74>)
 800ce9a:	f7f7 fea9 	bl	8004bf0 <HAL_HCD_GetCurrentFrame>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	4619      	mov	r1, r3
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f7ff f848 	bl	800bf38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20002c74 	.word	0x20002c74

0800ceb8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cece:	4618      	mov	r0, r3
 800ced0:	f7f7 fe16 	bl	8004b00 <HAL_HCD_Start>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ced8:	7bfb      	ldrb	r3, [r7, #15]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 f95c 	bl	800d198 <USBH_Get_USB_Status>
 800cee0:	4603      	mov	r3, r0
 800cee2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7f7 fe1e 	bl	8004b46 <HAL_HCD_Stop>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 f941 	bl	800d198 <USBH_Get_USB_Status>
 800cf16:	4603      	mov	r3, r0
 800cf18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7f7 fe68 	bl	8004c0c <HAL_HCD_GetCurrentSpeed>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d007      	beq.n	800cf52 <USBH_LL_GetSpeed+0x2e>
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d302      	bcc.n	800cf4c <USBH_LL_GetSpeed+0x28>
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d006      	beq.n	800cf58 <USBH_LL_GetSpeed+0x34>
 800cf4a:	e008      	b.n	800cf5e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf50:	e008      	b.n	800cf64 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cf52:	2301      	movs	r3, #1
 800cf54:	73fb      	strb	r3, [r7, #15]
    break;
 800cf56:	e005      	b.n	800cf64 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cf58:	2302      	movs	r3, #2
 800cf5a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf5c:	e002      	b.n	800cf64 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	73fb      	strb	r3, [r7, #15]
    break;
 800cf62:	bf00      	nop
  }
  return  speed;
 800cf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3710      	adds	r7, #16
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b084      	sub	sp, #16
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf76:	2300      	movs	r3, #0
 800cf78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7f7 fdfb 	bl	8004b80 <HAL_HCD_ResetPort>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 f901 	bl	800d198 <USBH_Get_USB_Status>
 800cf96:	4603      	mov	r3, r0
 800cf98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfb6:	78fa      	ldrb	r2, [r7, #3]
 800cfb8:	4611      	mov	r1, r2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f7 fe03 	bl	8004bc6 <HAL_HCD_HC_GetXferCount>
 800cfc0:	4603      	mov	r3, r0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cfca:	b590      	push	{r4, r7, lr}
 800cfcc:	b089      	sub	sp, #36	; 0x24
 800cfce:	af04      	add	r7, sp, #16
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4603      	mov	r3, r0
 800cfda:	70fb      	strb	r3, [r7, #3]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70bb      	strb	r3, [r7, #2]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cff2:	787c      	ldrb	r4, [r7, #1]
 800cff4:	78ba      	ldrb	r2, [r7, #2]
 800cff6:	78f9      	ldrb	r1, [r7, #3]
 800cff8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cffa:	9302      	str	r3, [sp, #8]
 800cffc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d006:	9300      	str	r3, [sp, #0]
 800d008:	4623      	mov	r3, r4
 800d00a:	f7f7 fa4b 	bl	80044a4 <HAL_HCD_HC_Init>
 800d00e:	4603      	mov	r3, r0
 800d010:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	4618      	mov	r0, r3
 800d016:	f000 f8bf 	bl	800d198 <USBH_Get_USB_Status>
 800d01a:	4603      	mov	r3, r0
 800d01c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	bd90      	pop	{r4, r7, pc}

0800d028 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	460b      	mov	r3, r1
 800d032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d042:	78fa      	ldrb	r2, [r7, #3]
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7f7 fac4 	bl	80045d4 <HAL_HCD_HC_Halt>
 800d04c:	4603      	mov	r3, r0
 800d04e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d050:	7bfb      	ldrb	r3, [r7, #15]
 800d052:	4618      	mov	r0, r3
 800d054:	f000 f8a0 	bl	800d198 <USBH_Get_USB_Status>
 800d058:	4603      	mov	r3, r0
 800d05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}

0800d066 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d066:	b590      	push	{r4, r7, lr}
 800d068:	b089      	sub	sp, #36	; 0x24
 800d06a:	af04      	add	r7, sp, #16
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	4608      	mov	r0, r1
 800d070:	4611      	mov	r1, r2
 800d072:	461a      	mov	r2, r3
 800d074:	4603      	mov	r3, r0
 800d076:	70fb      	strb	r3, [r7, #3]
 800d078:	460b      	mov	r3, r1
 800d07a:	70bb      	strb	r3, [r7, #2]
 800d07c:	4613      	mov	r3, r2
 800d07e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d084:	2300      	movs	r3, #0
 800d086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d08e:	787c      	ldrb	r4, [r7, #1]
 800d090:	78ba      	ldrb	r2, [r7, #2]
 800d092:	78f9      	ldrb	r1, [r7, #3]
 800d094:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d098:	9303      	str	r3, [sp, #12]
 800d09a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d09c:	9302      	str	r3, [sp, #8]
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	4623      	mov	r3, r4
 800d0aa:	f7f7 fab7 	bl	800461c <HAL_HCD_HC_SubmitRequest>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f000 f86f 	bl	800d198 <USBH_Get_USB_Status>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3714      	adds	r7, #20
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd90      	pop	{r4, r7, pc}

0800d0c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d0da:	78fa      	ldrb	r2, [r7, #3]
 800d0dc:	4611      	mov	r1, r2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7f7 fd5c 	bl	8004b9c <HAL_HCD_HC_GetURBState>
 800d0e4:	4603      	mov	r3, r0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d100:	2b01      	cmp	r3, #1
 800d102:	d103      	bne.n	800d10c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 f872 	bl	800d1f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d10c:	20c8      	movs	r0, #200	; 0xc8
 800d10e:	f7f5 f98f 	bl	8002430 <HAL_Delay>
  return USBH_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
 800d128:	4613      	mov	r3, r2
 800d12a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d132:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	68f9      	ldr	r1, [r7, #12]
 800d138:	4613      	mov	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	00db      	lsls	r3, r3, #3
 800d140:	440b      	add	r3, r1
 800d142:	333b      	adds	r3, #59	; 0x3b
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d14a:	78fa      	ldrb	r2, [r7, #3]
 800d14c:	68f9      	ldr	r1, [r7, #12]
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	440b      	add	r3, r1
 800d158:	3350      	adds	r3, #80	; 0x50
 800d15a:	78ba      	ldrb	r2, [r7, #2]
 800d15c:	701a      	strb	r2, [r3, #0]
 800d15e:	e009      	b.n	800d174 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	68f9      	ldr	r1, [r7, #12]
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	440b      	add	r3, r1
 800d16e:	3351      	adds	r3, #81	; 0x51
 800d170:	78ba      	ldrb	r2, [r7, #2]
 800d172:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3714      	adds	r7, #20
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f7f5 f950 	bl	8002430 <HAL_Delay>
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d198:	b480      	push	{r7}
 800d19a:	b085      	sub	sp, #20
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d817      	bhi.n	800d1dc <USBH_Get_USB_Status+0x44>
 800d1ac:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <USBH_Get_USB_Status+0x1c>)
 800d1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b2:	bf00      	nop
 800d1b4:	0800d1c5 	.word	0x0800d1c5
 800d1b8:	0800d1cb 	.word	0x0800d1cb
 800d1bc:	0800d1d1 	.word	0x0800d1d1
 800d1c0:	0800d1d7 	.word	0x0800d1d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c8:	e00b      	b.n	800d1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ce:	e008      	b.n	800d1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1d4:	e005      	b.n	800d1e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d1d6:	2302      	movs	r3, #2
 800d1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1da:	e002      	b.n	800d1e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d1dc:	2302      	movs	r3, #2
 800d1de:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e0:	bf00      	nop
  }
  return usb_status;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d1fe:	79fb      	ldrb	r3, [r7, #7]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d102      	bne.n	800d20a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d204:	2301      	movs	r3, #1
 800d206:	73fb      	strb	r3, [r7, #15]
 800d208:	e001      	b.n	800d20e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d20a:	2300      	movs	r3, #0
 800d20c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
 800d210:	461a      	mov	r2, r3
 800d212:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d216:	4803      	ldr	r0, [pc, #12]	; (800d224 <MX_DriverVbusFS+0x34>)
 800d218:	f7f7 f898 	bl	800434c <HAL_GPIO_WritePin>
}
 800d21c:	bf00      	nop
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	48000800 	.word	0x48000800

0800d228 <__errno>:
 800d228:	4b01      	ldr	r3, [pc, #4]	; (800d230 <__errno+0x8>)
 800d22a:	6818      	ldr	r0, [r3, #0]
 800d22c:	4770      	bx	lr
 800d22e:	bf00      	nop
 800d230:	20000034 	.word	0x20000034

0800d234 <__libc_init_array>:
 800d234:	b570      	push	{r4, r5, r6, lr}
 800d236:	4e0d      	ldr	r6, [pc, #52]	; (800d26c <__libc_init_array+0x38>)
 800d238:	4c0d      	ldr	r4, [pc, #52]	; (800d270 <__libc_init_array+0x3c>)
 800d23a:	1ba4      	subs	r4, r4, r6
 800d23c:	10a4      	asrs	r4, r4, #2
 800d23e:	2500      	movs	r5, #0
 800d240:	42a5      	cmp	r5, r4
 800d242:	d109      	bne.n	800d258 <__libc_init_array+0x24>
 800d244:	4e0b      	ldr	r6, [pc, #44]	; (800d274 <__libc_init_array+0x40>)
 800d246:	4c0c      	ldr	r4, [pc, #48]	; (800d278 <__libc_init_array+0x44>)
 800d248:	f000 ff14 	bl	800e074 <_init>
 800d24c:	1ba4      	subs	r4, r4, r6
 800d24e:	10a4      	asrs	r4, r4, #2
 800d250:	2500      	movs	r5, #0
 800d252:	42a5      	cmp	r5, r4
 800d254:	d105      	bne.n	800d262 <__libc_init_array+0x2e>
 800d256:	bd70      	pop	{r4, r5, r6, pc}
 800d258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d25c:	4798      	blx	r3
 800d25e:	3501      	adds	r5, #1
 800d260:	e7ee      	b.n	800d240 <__libc_init_array+0xc>
 800d262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d266:	4798      	blx	r3
 800d268:	3501      	adds	r5, #1
 800d26a:	e7f2      	b.n	800d252 <__libc_init_array+0x1e>
 800d26c:	0800e198 	.word	0x0800e198
 800d270:	0800e198 	.word	0x0800e198
 800d274:	0800e198 	.word	0x0800e198
 800d278:	0800e19c 	.word	0x0800e19c

0800d27c <malloc>:
 800d27c:	4b02      	ldr	r3, [pc, #8]	; (800d288 <malloc+0xc>)
 800d27e:	4601      	mov	r1, r0
 800d280:	6818      	ldr	r0, [r3, #0]
 800d282:	f000 b861 	b.w	800d348 <_malloc_r>
 800d286:	bf00      	nop
 800d288:	20000034 	.word	0x20000034

0800d28c <free>:
 800d28c:	4b02      	ldr	r3, [pc, #8]	; (800d298 <free+0xc>)
 800d28e:	4601      	mov	r1, r0
 800d290:	6818      	ldr	r0, [r3, #0]
 800d292:	f000 b80b 	b.w	800d2ac <_free_r>
 800d296:	bf00      	nop
 800d298:	20000034 	.word	0x20000034

0800d29c <memset>:
 800d29c:	4402      	add	r2, r0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d100      	bne.n	800d2a6 <memset+0xa>
 800d2a4:	4770      	bx	lr
 800d2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d2aa:	e7f9      	b.n	800d2a0 <memset+0x4>

0800d2ac <_free_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	2900      	cmp	r1, #0
 800d2b2:	d045      	beq.n	800d340 <_free_r+0x94>
 800d2b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b8:	1f0c      	subs	r4, r1, #4
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	bfb8      	it	lt
 800d2be:	18e4      	addlt	r4, r4, r3
 800d2c0:	f000 fb62 	bl	800d988 <__malloc_lock>
 800d2c4:	4a1f      	ldr	r2, [pc, #124]	; (800d344 <_free_r+0x98>)
 800d2c6:	6813      	ldr	r3, [r2, #0]
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	b933      	cbnz	r3, 800d2da <_free_r+0x2e>
 800d2cc:	6063      	str	r3, [r4, #4]
 800d2ce:	6014      	str	r4, [r2, #0]
 800d2d0:	4628      	mov	r0, r5
 800d2d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2d6:	f000 bb58 	b.w	800d98a <__malloc_unlock>
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	d90c      	bls.n	800d2f8 <_free_r+0x4c>
 800d2de:	6821      	ldr	r1, [r4, #0]
 800d2e0:	1862      	adds	r2, r4, r1
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	bf04      	itt	eq
 800d2e6:	681a      	ldreq	r2, [r3, #0]
 800d2e8:	685b      	ldreq	r3, [r3, #4]
 800d2ea:	6063      	str	r3, [r4, #4]
 800d2ec:	bf04      	itt	eq
 800d2ee:	1852      	addeq	r2, r2, r1
 800d2f0:	6022      	streq	r2, [r4, #0]
 800d2f2:	6004      	str	r4, [r0, #0]
 800d2f4:	e7ec      	b.n	800d2d0 <_free_r+0x24>
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	b10a      	cbz	r2, 800d300 <_free_r+0x54>
 800d2fc:	42a2      	cmp	r2, r4
 800d2fe:	d9fa      	bls.n	800d2f6 <_free_r+0x4a>
 800d300:	6819      	ldr	r1, [r3, #0]
 800d302:	1858      	adds	r0, r3, r1
 800d304:	42a0      	cmp	r0, r4
 800d306:	d10b      	bne.n	800d320 <_free_r+0x74>
 800d308:	6820      	ldr	r0, [r4, #0]
 800d30a:	4401      	add	r1, r0
 800d30c:	1858      	adds	r0, r3, r1
 800d30e:	4282      	cmp	r2, r0
 800d310:	6019      	str	r1, [r3, #0]
 800d312:	d1dd      	bne.n	800d2d0 <_free_r+0x24>
 800d314:	6810      	ldr	r0, [r2, #0]
 800d316:	6852      	ldr	r2, [r2, #4]
 800d318:	605a      	str	r2, [r3, #4]
 800d31a:	4401      	add	r1, r0
 800d31c:	6019      	str	r1, [r3, #0]
 800d31e:	e7d7      	b.n	800d2d0 <_free_r+0x24>
 800d320:	d902      	bls.n	800d328 <_free_r+0x7c>
 800d322:	230c      	movs	r3, #12
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	e7d3      	b.n	800d2d0 <_free_r+0x24>
 800d328:	6820      	ldr	r0, [r4, #0]
 800d32a:	1821      	adds	r1, r4, r0
 800d32c:	428a      	cmp	r2, r1
 800d32e:	bf04      	itt	eq
 800d330:	6811      	ldreq	r1, [r2, #0]
 800d332:	6852      	ldreq	r2, [r2, #4]
 800d334:	6062      	str	r2, [r4, #4]
 800d336:	bf04      	itt	eq
 800d338:	1809      	addeq	r1, r1, r0
 800d33a:	6021      	streq	r1, [r4, #0]
 800d33c:	605c      	str	r4, [r3, #4]
 800d33e:	e7c7      	b.n	800d2d0 <_free_r+0x24>
 800d340:	bd38      	pop	{r3, r4, r5, pc}
 800d342:	bf00      	nop
 800d344:	200004d8 	.word	0x200004d8

0800d348 <_malloc_r>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	1ccd      	adds	r5, r1, #3
 800d34c:	f025 0503 	bic.w	r5, r5, #3
 800d350:	3508      	adds	r5, #8
 800d352:	2d0c      	cmp	r5, #12
 800d354:	bf38      	it	cc
 800d356:	250c      	movcc	r5, #12
 800d358:	2d00      	cmp	r5, #0
 800d35a:	4606      	mov	r6, r0
 800d35c:	db01      	blt.n	800d362 <_malloc_r+0x1a>
 800d35e:	42a9      	cmp	r1, r5
 800d360:	d903      	bls.n	800d36a <_malloc_r+0x22>
 800d362:	230c      	movs	r3, #12
 800d364:	6033      	str	r3, [r6, #0]
 800d366:	2000      	movs	r0, #0
 800d368:	bd70      	pop	{r4, r5, r6, pc}
 800d36a:	f000 fb0d 	bl	800d988 <__malloc_lock>
 800d36e:	4a21      	ldr	r2, [pc, #132]	; (800d3f4 <_malloc_r+0xac>)
 800d370:	6814      	ldr	r4, [r2, #0]
 800d372:	4621      	mov	r1, r4
 800d374:	b991      	cbnz	r1, 800d39c <_malloc_r+0x54>
 800d376:	4c20      	ldr	r4, [pc, #128]	; (800d3f8 <_malloc_r+0xb0>)
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	b91b      	cbnz	r3, 800d384 <_malloc_r+0x3c>
 800d37c:	4630      	mov	r0, r6
 800d37e:	f000 f855 	bl	800d42c <_sbrk_r>
 800d382:	6020      	str	r0, [r4, #0]
 800d384:	4629      	mov	r1, r5
 800d386:	4630      	mov	r0, r6
 800d388:	f000 f850 	bl	800d42c <_sbrk_r>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d124      	bne.n	800d3da <_malloc_r+0x92>
 800d390:	230c      	movs	r3, #12
 800d392:	6033      	str	r3, [r6, #0]
 800d394:	4630      	mov	r0, r6
 800d396:	f000 faf8 	bl	800d98a <__malloc_unlock>
 800d39a:	e7e4      	b.n	800d366 <_malloc_r+0x1e>
 800d39c:	680b      	ldr	r3, [r1, #0]
 800d39e:	1b5b      	subs	r3, r3, r5
 800d3a0:	d418      	bmi.n	800d3d4 <_malloc_r+0x8c>
 800d3a2:	2b0b      	cmp	r3, #11
 800d3a4:	d90f      	bls.n	800d3c6 <_malloc_r+0x7e>
 800d3a6:	600b      	str	r3, [r1, #0]
 800d3a8:	50cd      	str	r5, [r1, r3]
 800d3aa:	18cc      	adds	r4, r1, r3
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f000 faec 	bl	800d98a <__malloc_unlock>
 800d3b2:	f104 000b 	add.w	r0, r4, #11
 800d3b6:	1d23      	adds	r3, r4, #4
 800d3b8:	f020 0007 	bic.w	r0, r0, #7
 800d3bc:	1ac3      	subs	r3, r0, r3
 800d3be:	d0d3      	beq.n	800d368 <_malloc_r+0x20>
 800d3c0:	425a      	negs	r2, r3
 800d3c2:	50e2      	str	r2, [r4, r3]
 800d3c4:	e7d0      	b.n	800d368 <_malloc_r+0x20>
 800d3c6:	428c      	cmp	r4, r1
 800d3c8:	684b      	ldr	r3, [r1, #4]
 800d3ca:	bf16      	itet	ne
 800d3cc:	6063      	strne	r3, [r4, #4]
 800d3ce:	6013      	streq	r3, [r2, #0]
 800d3d0:	460c      	movne	r4, r1
 800d3d2:	e7eb      	b.n	800d3ac <_malloc_r+0x64>
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	6849      	ldr	r1, [r1, #4]
 800d3d8:	e7cc      	b.n	800d374 <_malloc_r+0x2c>
 800d3da:	1cc4      	adds	r4, r0, #3
 800d3dc:	f024 0403 	bic.w	r4, r4, #3
 800d3e0:	42a0      	cmp	r0, r4
 800d3e2:	d005      	beq.n	800d3f0 <_malloc_r+0xa8>
 800d3e4:	1a21      	subs	r1, r4, r0
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f000 f820 	bl	800d42c <_sbrk_r>
 800d3ec:	3001      	adds	r0, #1
 800d3ee:	d0cf      	beq.n	800d390 <_malloc_r+0x48>
 800d3f0:	6025      	str	r5, [r4, #0]
 800d3f2:	e7db      	b.n	800d3ac <_malloc_r+0x64>
 800d3f4:	200004d8 	.word	0x200004d8
 800d3f8:	200004dc 	.word	0x200004dc

0800d3fc <iprintf>:
 800d3fc:	b40f      	push	{r0, r1, r2, r3}
 800d3fe:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <iprintf+0x2c>)
 800d400:	b513      	push	{r0, r1, r4, lr}
 800d402:	681c      	ldr	r4, [r3, #0]
 800d404:	b124      	cbz	r4, 800d410 <iprintf+0x14>
 800d406:	69a3      	ldr	r3, [r4, #24]
 800d408:	b913      	cbnz	r3, 800d410 <iprintf+0x14>
 800d40a:	4620      	mov	r0, r4
 800d40c:	f000 f9ce 	bl	800d7ac <__sinit>
 800d410:	ab05      	add	r3, sp, #20
 800d412:	9a04      	ldr	r2, [sp, #16]
 800d414:	68a1      	ldr	r1, [r4, #8]
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	4620      	mov	r0, r4
 800d41a:	f000 fae1 	bl	800d9e0 <_vfiprintf_r>
 800d41e:	b002      	add	sp, #8
 800d420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d424:	b004      	add	sp, #16
 800d426:	4770      	bx	lr
 800d428:	20000034 	.word	0x20000034

0800d42c <_sbrk_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4c06      	ldr	r4, [pc, #24]	; (800d448 <_sbrk_r+0x1c>)
 800d430:	2300      	movs	r3, #0
 800d432:	4605      	mov	r5, r0
 800d434:	4608      	mov	r0, r1
 800d436:	6023      	str	r3, [r4, #0]
 800d438:	f7f4 fde6 	bl	8002008 <_sbrk>
 800d43c:	1c43      	adds	r3, r0, #1
 800d43e:	d102      	bne.n	800d446 <_sbrk_r+0x1a>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	b103      	cbz	r3, 800d446 <_sbrk_r+0x1a>
 800d444:	602b      	str	r3, [r5, #0]
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	20002f38 	.word	0x20002f38

0800d44c <__swbuf_r>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	4605      	mov	r5, r0
 800d454:	b118      	cbz	r0, 800d45e <__swbuf_r+0x12>
 800d456:	6983      	ldr	r3, [r0, #24]
 800d458:	b90b      	cbnz	r3, 800d45e <__swbuf_r+0x12>
 800d45a:	f000 f9a7 	bl	800d7ac <__sinit>
 800d45e:	4b21      	ldr	r3, [pc, #132]	; (800d4e4 <__swbuf_r+0x98>)
 800d460:	429c      	cmp	r4, r3
 800d462:	d12a      	bne.n	800d4ba <__swbuf_r+0x6e>
 800d464:	686c      	ldr	r4, [r5, #4]
 800d466:	69a3      	ldr	r3, [r4, #24]
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	071a      	lsls	r2, r3, #28
 800d46e:	d52e      	bpl.n	800d4ce <__swbuf_r+0x82>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b363      	cbz	r3, 800d4ce <__swbuf_r+0x82>
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	1ac0      	subs	r0, r0, r3
 800d47a:	6963      	ldr	r3, [r4, #20]
 800d47c:	b2f6      	uxtb	r6, r6
 800d47e:	4283      	cmp	r3, r0
 800d480:	4637      	mov	r7, r6
 800d482:	dc04      	bgt.n	800d48e <__swbuf_r+0x42>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 f926 	bl	800d6d8 <_fflush_r>
 800d48c:	bb28      	cbnz	r0, 800d4da <__swbuf_r+0x8e>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	3b01      	subs	r3, #1
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	701e      	strb	r6, [r3, #0]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	3001      	adds	r0, #1
 800d4a0:	4283      	cmp	r3, r0
 800d4a2:	d004      	beq.n	800d4ae <__swbuf_r+0x62>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	07db      	lsls	r3, r3, #31
 800d4a8:	d519      	bpl.n	800d4de <__swbuf_r+0x92>
 800d4aa:	2e0a      	cmp	r6, #10
 800d4ac:	d117      	bne.n	800d4de <__swbuf_r+0x92>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f000 f911 	bl	800d6d8 <_fflush_r>
 800d4b6:	b190      	cbz	r0, 800d4de <__swbuf_r+0x92>
 800d4b8:	e00f      	b.n	800d4da <__swbuf_r+0x8e>
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <__swbuf_r+0x9c>)
 800d4bc:	429c      	cmp	r4, r3
 800d4be:	d101      	bne.n	800d4c4 <__swbuf_r+0x78>
 800d4c0:	68ac      	ldr	r4, [r5, #8]
 800d4c2:	e7d0      	b.n	800d466 <__swbuf_r+0x1a>
 800d4c4:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <__swbuf_r+0xa0>)
 800d4c6:	429c      	cmp	r4, r3
 800d4c8:	bf08      	it	eq
 800d4ca:	68ec      	ldreq	r4, [r5, #12]
 800d4cc:	e7cb      	b.n	800d466 <__swbuf_r+0x1a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f80d 	bl	800d4f0 <__swsetup_r>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d0cc      	beq.n	800d474 <__swbuf_r+0x28>
 800d4da:	f04f 37ff 	mov.w	r7, #4294967295
 800d4de:	4638      	mov	r0, r7
 800d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0800e11c 	.word	0x0800e11c
 800d4e8:	0800e13c 	.word	0x0800e13c
 800d4ec:	0800e0fc 	.word	0x0800e0fc

0800d4f0 <__swsetup_r>:
 800d4f0:	4b32      	ldr	r3, [pc, #200]	; (800d5bc <__swsetup_r+0xcc>)
 800d4f2:	b570      	push	{r4, r5, r6, lr}
 800d4f4:	681d      	ldr	r5, [r3, #0]
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	b125      	cbz	r5, 800d506 <__swsetup_r+0x16>
 800d4fc:	69ab      	ldr	r3, [r5, #24]
 800d4fe:	b913      	cbnz	r3, 800d506 <__swsetup_r+0x16>
 800d500:	4628      	mov	r0, r5
 800d502:	f000 f953 	bl	800d7ac <__sinit>
 800d506:	4b2e      	ldr	r3, [pc, #184]	; (800d5c0 <__swsetup_r+0xd0>)
 800d508:	429c      	cmp	r4, r3
 800d50a:	d10f      	bne.n	800d52c <__swsetup_r+0x3c>
 800d50c:	686c      	ldr	r4, [r5, #4]
 800d50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d512:	b29a      	uxth	r2, r3
 800d514:	0715      	lsls	r5, r2, #28
 800d516:	d42c      	bmi.n	800d572 <__swsetup_r+0x82>
 800d518:	06d0      	lsls	r0, r2, #27
 800d51a:	d411      	bmi.n	800d540 <__swsetup_r+0x50>
 800d51c:	2209      	movs	r2, #9
 800d51e:	6032      	str	r2, [r6, #0]
 800d520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d524:	81a3      	strh	r3, [r4, #12]
 800d526:	f04f 30ff 	mov.w	r0, #4294967295
 800d52a:	e03e      	b.n	800d5aa <__swsetup_r+0xba>
 800d52c:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <__swsetup_r+0xd4>)
 800d52e:	429c      	cmp	r4, r3
 800d530:	d101      	bne.n	800d536 <__swsetup_r+0x46>
 800d532:	68ac      	ldr	r4, [r5, #8]
 800d534:	e7eb      	b.n	800d50e <__swsetup_r+0x1e>
 800d536:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <__swsetup_r+0xd8>)
 800d538:	429c      	cmp	r4, r3
 800d53a:	bf08      	it	eq
 800d53c:	68ec      	ldreq	r4, [r5, #12]
 800d53e:	e7e6      	b.n	800d50e <__swsetup_r+0x1e>
 800d540:	0751      	lsls	r1, r2, #29
 800d542:	d512      	bpl.n	800d56a <__swsetup_r+0x7a>
 800d544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d546:	b141      	cbz	r1, 800d55a <__swsetup_r+0x6a>
 800d548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d002      	beq.n	800d556 <__swsetup_r+0x66>
 800d550:	4630      	mov	r0, r6
 800d552:	f7ff feab 	bl	800d2ac <_free_r>
 800d556:	2300      	movs	r3, #0
 800d558:	6363      	str	r3, [r4, #52]	; 0x34
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	2300      	movs	r3, #0
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f043 0308 	orr.w	r3, r3, #8
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	b94b      	cbnz	r3, 800d58a <__swsetup_r+0x9a>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d580:	d003      	beq.n	800d58a <__swsetup_r+0x9a>
 800d582:	4621      	mov	r1, r4
 800d584:	4630      	mov	r0, r6
 800d586:	f000 f9bf 	bl	800d908 <__smakebuf_r>
 800d58a:	89a2      	ldrh	r2, [r4, #12]
 800d58c:	f012 0301 	ands.w	r3, r2, #1
 800d590:	d00c      	beq.n	800d5ac <__swsetup_r+0xbc>
 800d592:	2300      	movs	r3, #0
 800d594:	60a3      	str	r3, [r4, #8]
 800d596:	6963      	ldr	r3, [r4, #20]
 800d598:	425b      	negs	r3, r3
 800d59a:	61a3      	str	r3, [r4, #24]
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	b953      	cbnz	r3, 800d5b6 <__swsetup_r+0xc6>
 800d5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d5a8:	d1ba      	bne.n	800d520 <__swsetup_r+0x30>
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	0792      	lsls	r2, r2, #30
 800d5ae:	bf58      	it	pl
 800d5b0:	6963      	ldrpl	r3, [r4, #20]
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	e7f2      	b.n	800d59c <__swsetup_r+0xac>
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7f7      	b.n	800d5aa <__swsetup_r+0xba>
 800d5ba:	bf00      	nop
 800d5bc:	20000034 	.word	0x20000034
 800d5c0:	0800e11c 	.word	0x0800e11c
 800d5c4:	0800e13c 	.word	0x0800e13c
 800d5c8:	0800e0fc 	.word	0x0800e0fc

0800d5cc <__sflush_r>:
 800d5cc:	898a      	ldrh	r2, [r1, #12]
 800d5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	0710      	lsls	r0, r2, #28
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	d458      	bmi.n	800d68c <__sflush_r+0xc0>
 800d5da:	684b      	ldr	r3, [r1, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	dc05      	bgt.n	800d5ec <__sflush_r+0x20>
 800d5e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dc02      	bgt.n	800d5ec <__sflush_r+0x20>
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5ee:	2e00      	cmp	r6, #0
 800d5f0:	d0f9      	beq.n	800d5e6 <__sflush_r+0x1a>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5f8:	682f      	ldr	r7, [r5, #0]
 800d5fa:	6a21      	ldr	r1, [r4, #32]
 800d5fc:	602b      	str	r3, [r5, #0]
 800d5fe:	d032      	beq.n	800d666 <__sflush_r+0x9a>
 800d600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d602:	89a3      	ldrh	r3, [r4, #12]
 800d604:	075a      	lsls	r2, r3, #29
 800d606:	d505      	bpl.n	800d614 <__sflush_r+0x48>
 800d608:	6863      	ldr	r3, [r4, #4]
 800d60a:	1ac0      	subs	r0, r0, r3
 800d60c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d60e:	b10b      	cbz	r3, 800d614 <__sflush_r+0x48>
 800d610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d612:	1ac0      	subs	r0, r0, r3
 800d614:	2300      	movs	r3, #0
 800d616:	4602      	mov	r2, r0
 800d618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d61a:	6a21      	ldr	r1, [r4, #32]
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b0      	blx	r6
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	d106      	bne.n	800d634 <__sflush_r+0x68>
 800d626:	6829      	ldr	r1, [r5, #0]
 800d628:	291d      	cmp	r1, #29
 800d62a:	d848      	bhi.n	800d6be <__sflush_r+0xf2>
 800d62c:	4a29      	ldr	r2, [pc, #164]	; (800d6d4 <__sflush_r+0x108>)
 800d62e:	40ca      	lsrs	r2, r1
 800d630:	07d6      	lsls	r6, r2, #31
 800d632:	d544      	bpl.n	800d6be <__sflush_r+0xf2>
 800d634:	2200      	movs	r2, #0
 800d636:	6062      	str	r2, [r4, #4]
 800d638:	04d9      	lsls	r1, r3, #19
 800d63a:	6922      	ldr	r2, [r4, #16]
 800d63c:	6022      	str	r2, [r4, #0]
 800d63e:	d504      	bpl.n	800d64a <__sflush_r+0x7e>
 800d640:	1c42      	adds	r2, r0, #1
 800d642:	d101      	bne.n	800d648 <__sflush_r+0x7c>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b903      	cbnz	r3, 800d64a <__sflush_r+0x7e>
 800d648:	6560      	str	r0, [r4, #84]	; 0x54
 800d64a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d64c:	602f      	str	r7, [r5, #0]
 800d64e:	2900      	cmp	r1, #0
 800d650:	d0c9      	beq.n	800d5e6 <__sflush_r+0x1a>
 800d652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d656:	4299      	cmp	r1, r3
 800d658:	d002      	beq.n	800d660 <__sflush_r+0x94>
 800d65a:	4628      	mov	r0, r5
 800d65c:	f7ff fe26 	bl	800d2ac <_free_r>
 800d660:	2000      	movs	r0, #0
 800d662:	6360      	str	r0, [r4, #52]	; 0x34
 800d664:	e7c0      	b.n	800d5e8 <__sflush_r+0x1c>
 800d666:	2301      	movs	r3, #1
 800d668:	4628      	mov	r0, r5
 800d66a:	47b0      	blx	r6
 800d66c:	1c41      	adds	r1, r0, #1
 800d66e:	d1c8      	bne.n	800d602 <__sflush_r+0x36>
 800d670:	682b      	ldr	r3, [r5, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d0c5      	beq.n	800d602 <__sflush_r+0x36>
 800d676:	2b1d      	cmp	r3, #29
 800d678:	d001      	beq.n	800d67e <__sflush_r+0xb2>
 800d67a:	2b16      	cmp	r3, #22
 800d67c:	d101      	bne.n	800d682 <__sflush_r+0xb6>
 800d67e:	602f      	str	r7, [r5, #0]
 800d680:	e7b1      	b.n	800d5e6 <__sflush_r+0x1a>
 800d682:	89a3      	ldrh	r3, [r4, #12]
 800d684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d688:	81a3      	strh	r3, [r4, #12]
 800d68a:	e7ad      	b.n	800d5e8 <__sflush_r+0x1c>
 800d68c:	690f      	ldr	r7, [r1, #16]
 800d68e:	2f00      	cmp	r7, #0
 800d690:	d0a9      	beq.n	800d5e6 <__sflush_r+0x1a>
 800d692:	0793      	lsls	r3, r2, #30
 800d694:	680e      	ldr	r6, [r1, #0]
 800d696:	bf08      	it	eq
 800d698:	694b      	ldreq	r3, [r1, #20]
 800d69a:	600f      	str	r7, [r1, #0]
 800d69c:	bf18      	it	ne
 800d69e:	2300      	movne	r3, #0
 800d6a0:	eba6 0807 	sub.w	r8, r6, r7
 800d6a4:	608b      	str	r3, [r1, #8]
 800d6a6:	f1b8 0f00 	cmp.w	r8, #0
 800d6aa:	dd9c      	ble.n	800d5e6 <__sflush_r+0x1a>
 800d6ac:	4643      	mov	r3, r8
 800d6ae:	463a      	mov	r2, r7
 800d6b0:	6a21      	ldr	r1, [r4, #32]
 800d6b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6b4:	4628      	mov	r0, r5
 800d6b6:	47b0      	blx	r6
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	dc06      	bgt.n	800d6ca <__sflush_r+0xfe>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c2:	81a3      	strh	r3, [r4, #12]
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e78e      	b.n	800d5e8 <__sflush_r+0x1c>
 800d6ca:	4407      	add	r7, r0
 800d6cc:	eba8 0800 	sub.w	r8, r8, r0
 800d6d0:	e7e9      	b.n	800d6a6 <__sflush_r+0xda>
 800d6d2:	bf00      	nop
 800d6d4:	20400001 	.word	0x20400001

0800d6d8 <_fflush_r>:
 800d6d8:	b538      	push	{r3, r4, r5, lr}
 800d6da:	690b      	ldr	r3, [r1, #16]
 800d6dc:	4605      	mov	r5, r0
 800d6de:	460c      	mov	r4, r1
 800d6e0:	b1db      	cbz	r3, 800d71a <_fflush_r+0x42>
 800d6e2:	b118      	cbz	r0, 800d6ec <_fflush_r+0x14>
 800d6e4:	6983      	ldr	r3, [r0, #24]
 800d6e6:	b90b      	cbnz	r3, 800d6ec <_fflush_r+0x14>
 800d6e8:	f000 f860 	bl	800d7ac <__sinit>
 800d6ec:	4b0c      	ldr	r3, [pc, #48]	; (800d720 <_fflush_r+0x48>)
 800d6ee:	429c      	cmp	r4, r3
 800d6f0:	d109      	bne.n	800d706 <_fflush_r+0x2e>
 800d6f2:	686c      	ldr	r4, [r5, #4]
 800d6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f8:	b17b      	cbz	r3, 800d71a <_fflush_r+0x42>
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d702:	f7ff bf63 	b.w	800d5cc <__sflush_r>
 800d706:	4b07      	ldr	r3, [pc, #28]	; (800d724 <_fflush_r+0x4c>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d101      	bne.n	800d710 <_fflush_r+0x38>
 800d70c:	68ac      	ldr	r4, [r5, #8]
 800d70e:	e7f1      	b.n	800d6f4 <_fflush_r+0x1c>
 800d710:	4b05      	ldr	r3, [pc, #20]	; (800d728 <_fflush_r+0x50>)
 800d712:	429c      	cmp	r4, r3
 800d714:	bf08      	it	eq
 800d716:	68ec      	ldreq	r4, [r5, #12]
 800d718:	e7ec      	b.n	800d6f4 <_fflush_r+0x1c>
 800d71a:	2000      	movs	r0, #0
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	0800e11c 	.word	0x0800e11c
 800d724:	0800e13c 	.word	0x0800e13c
 800d728:	0800e0fc 	.word	0x0800e0fc

0800d72c <std>:
 800d72c:	2300      	movs	r3, #0
 800d72e:	b510      	push	{r4, lr}
 800d730:	4604      	mov	r4, r0
 800d732:	e9c0 3300 	strd	r3, r3, [r0]
 800d736:	6083      	str	r3, [r0, #8]
 800d738:	8181      	strh	r1, [r0, #12]
 800d73a:	6643      	str	r3, [r0, #100]	; 0x64
 800d73c:	81c2      	strh	r2, [r0, #14]
 800d73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d742:	6183      	str	r3, [r0, #24]
 800d744:	4619      	mov	r1, r3
 800d746:	2208      	movs	r2, #8
 800d748:	305c      	adds	r0, #92	; 0x5c
 800d74a:	f7ff fda7 	bl	800d29c <memset>
 800d74e:	4b05      	ldr	r3, [pc, #20]	; (800d764 <std+0x38>)
 800d750:	6263      	str	r3, [r4, #36]	; 0x24
 800d752:	4b05      	ldr	r3, [pc, #20]	; (800d768 <std+0x3c>)
 800d754:	62a3      	str	r3, [r4, #40]	; 0x28
 800d756:	4b05      	ldr	r3, [pc, #20]	; (800d76c <std+0x40>)
 800d758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d75a:	4b05      	ldr	r3, [pc, #20]	; (800d770 <std+0x44>)
 800d75c:	6224      	str	r4, [r4, #32]
 800d75e:	6323      	str	r3, [r4, #48]	; 0x30
 800d760:	bd10      	pop	{r4, pc}
 800d762:	bf00      	nop
 800d764:	0800df1d 	.word	0x0800df1d
 800d768:	0800df3f 	.word	0x0800df3f
 800d76c:	0800df77 	.word	0x0800df77
 800d770:	0800df9b 	.word	0x0800df9b

0800d774 <_cleanup_r>:
 800d774:	4901      	ldr	r1, [pc, #4]	; (800d77c <_cleanup_r+0x8>)
 800d776:	f000 b885 	b.w	800d884 <_fwalk_reent>
 800d77a:	bf00      	nop
 800d77c:	0800d6d9 	.word	0x0800d6d9

0800d780 <__sfmoreglue>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	1e4a      	subs	r2, r1, #1
 800d784:	2568      	movs	r5, #104	; 0x68
 800d786:	4355      	muls	r5, r2
 800d788:	460e      	mov	r6, r1
 800d78a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d78e:	f7ff fddb 	bl	800d348 <_malloc_r>
 800d792:	4604      	mov	r4, r0
 800d794:	b140      	cbz	r0, 800d7a8 <__sfmoreglue+0x28>
 800d796:	2100      	movs	r1, #0
 800d798:	e9c0 1600 	strd	r1, r6, [r0]
 800d79c:	300c      	adds	r0, #12
 800d79e:	60a0      	str	r0, [r4, #8]
 800d7a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7a4:	f7ff fd7a 	bl	800d29c <memset>
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}

0800d7ac <__sinit>:
 800d7ac:	6983      	ldr	r3, [r0, #24]
 800d7ae:	b510      	push	{r4, lr}
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	bb33      	cbnz	r3, 800d802 <__sinit+0x56>
 800d7b4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d7b8:	6503      	str	r3, [r0, #80]	; 0x50
 800d7ba:	4b12      	ldr	r3, [pc, #72]	; (800d804 <__sinit+0x58>)
 800d7bc:	4a12      	ldr	r2, [pc, #72]	; (800d808 <__sinit+0x5c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6282      	str	r2, [r0, #40]	; 0x28
 800d7c2:	4298      	cmp	r0, r3
 800d7c4:	bf04      	itt	eq
 800d7c6:	2301      	moveq	r3, #1
 800d7c8:	6183      	streq	r3, [r0, #24]
 800d7ca:	f000 f81f 	bl	800d80c <__sfp>
 800d7ce:	6060      	str	r0, [r4, #4]
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f000 f81b 	bl	800d80c <__sfp>
 800d7d6:	60a0      	str	r0, [r4, #8]
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f000 f817 	bl	800d80c <__sfp>
 800d7de:	2200      	movs	r2, #0
 800d7e0:	60e0      	str	r0, [r4, #12]
 800d7e2:	2104      	movs	r1, #4
 800d7e4:	6860      	ldr	r0, [r4, #4]
 800d7e6:	f7ff ffa1 	bl	800d72c <std>
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	2109      	movs	r1, #9
 800d7ee:	68a0      	ldr	r0, [r4, #8]
 800d7f0:	f7ff ff9c 	bl	800d72c <std>
 800d7f4:	2202      	movs	r2, #2
 800d7f6:	2112      	movs	r1, #18
 800d7f8:	68e0      	ldr	r0, [r4, #12]
 800d7fa:	f7ff ff97 	bl	800d72c <std>
 800d7fe:	2301      	movs	r3, #1
 800d800:	61a3      	str	r3, [r4, #24]
 800d802:	bd10      	pop	{r4, pc}
 800d804:	0800e0f8 	.word	0x0800e0f8
 800d808:	0800d775 	.word	0x0800d775

0800d80c <__sfp>:
 800d80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80e:	4b1b      	ldr	r3, [pc, #108]	; (800d87c <__sfp+0x70>)
 800d810:	681e      	ldr	r6, [r3, #0]
 800d812:	69b3      	ldr	r3, [r6, #24]
 800d814:	4607      	mov	r7, r0
 800d816:	b913      	cbnz	r3, 800d81e <__sfp+0x12>
 800d818:	4630      	mov	r0, r6
 800d81a:	f7ff ffc7 	bl	800d7ac <__sinit>
 800d81e:	3648      	adds	r6, #72	; 0x48
 800d820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d824:	3b01      	subs	r3, #1
 800d826:	d503      	bpl.n	800d830 <__sfp+0x24>
 800d828:	6833      	ldr	r3, [r6, #0]
 800d82a:	b133      	cbz	r3, 800d83a <__sfp+0x2e>
 800d82c:	6836      	ldr	r6, [r6, #0]
 800d82e:	e7f7      	b.n	800d820 <__sfp+0x14>
 800d830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d834:	b16d      	cbz	r5, 800d852 <__sfp+0x46>
 800d836:	3468      	adds	r4, #104	; 0x68
 800d838:	e7f4      	b.n	800d824 <__sfp+0x18>
 800d83a:	2104      	movs	r1, #4
 800d83c:	4638      	mov	r0, r7
 800d83e:	f7ff ff9f 	bl	800d780 <__sfmoreglue>
 800d842:	6030      	str	r0, [r6, #0]
 800d844:	2800      	cmp	r0, #0
 800d846:	d1f1      	bne.n	800d82c <__sfp+0x20>
 800d848:	230c      	movs	r3, #12
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4604      	mov	r4, r0
 800d84e:	4620      	mov	r0, r4
 800d850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d852:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <__sfp+0x74>)
 800d854:	6665      	str	r5, [r4, #100]	; 0x64
 800d856:	e9c4 5500 	strd	r5, r5, [r4]
 800d85a:	60a5      	str	r5, [r4, #8]
 800d85c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d860:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d864:	2208      	movs	r2, #8
 800d866:	4629      	mov	r1, r5
 800d868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d86c:	f7ff fd16 	bl	800d29c <memset>
 800d870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d878:	e7e9      	b.n	800d84e <__sfp+0x42>
 800d87a:	bf00      	nop
 800d87c:	0800e0f8 	.word	0x0800e0f8
 800d880:	ffff0001 	.word	0xffff0001

0800d884 <_fwalk_reent>:
 800d884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d888:	4680      	mov	r8, r0
 800d88a:	4689      	mov	r9, r1
 800d88c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d890:	2600      	movs	r6, #0
 800d892:	b914      	cbnz	r4, 800d89a <_fwalk_reent+0x16>
 800d894:	4630      	mov	r0, r6
 800d896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d89a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d89e:	3f01      	subs	r7, #1
 800d8a0:	d501      	bpl.n	800d8a6 <_fwalk_reent+0x22>
 800d8a2:	6824      	ldr	r4, [r4, #0]
 800d8a4:	e7f5      	b.n	800d892 <_fwalk_reent+0xe>
 800d8a6:	89ab      	ldrh	r3, [r5, #12]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d907      	bls.n	800d8bc <_fwalk_reent+0x38>
 800d8ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	d003      	beq.n	800d8bc <_fwalk_reent+0x38>
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	4640      	mov	r0, r8
 800d8b8:	47c8      	blx	r9
 800d8ba:	4306      	orrs	r6, r0
 800d8bc:	3568      	adds	r5, #104	; 0x68
 800d8be:	e7ee      	b.n	800d89e <_fwalk_reent+0x1a>

0800d8c0 <__swhatbuf_r>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	460e      	mov	r6, r1
 800d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c8:	2900      	cmp	r1, #0
 800d8ca:	b096      	sub	sp, #88	; 0x58
 800d8cc:	4614      	mov	r4, r2
 800d8ce:	461d      	mov	r5, r3
 800d8d0:	da07      	bge.n	800d8e2 <__swhatbuf_r+0x22>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	89b3      	ldrh	r3, [r6, #12]
 800d8d8:	061a      	lsls	r2, r3, #24
 800d8da:	d410      	bmi.n	800d8fe <__swhatbuf_r+0x3e>
 800d8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e0:	e00e      	b.n	800d900 <__swhatbuf_r+0x40>
 800d8e2:	466a      	mov	r2, sp
 800d8e4:	f000 fb80 	bl	800dfe8 <_fstat_r>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	dbf2      	blt.n	800d8d2 <__swhatbuf_r+0x12>
 800d8ec:	9a01      	ldr	r2, [sp, #4]
 800d8ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8f6:	425a      	negs	r2, r3
 800d8f8:	415a      	adcs	r2, r3
 800d8fa:	602a      	str	r2, [r5, #0]
 800d8fc:	e7ee      	b.n	800d8dc <__swhatbuf_r+0x1c>
 800d8fe:	2340      	movs	r3, #64	; 0x40
 800d900:	2000      	movs	r0, #0
 800d902:	6023      	str	r3, [r4, #0]
 800d904:	b016      	add	sp, #88	; 0x58
 800d906:	bd70      	pop	{r4, r5, r6, pc}

0800d908 <__smakebuf_r>:
 800d908:	898b      	ldrh	r3, [r1, #12]
 800d90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d90c:	079d      	lsls	r5, r3, #30
 800d90e:	4606      	mov	r6, r0
 800d910:	460c      	mov	r4, r1
 800d912:	d507      	bpl.n	800d924 <__smakebuf_r+0x1c>
 800d914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d918:	6023      	str	r3, [r4, #0]
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	2301      	movs	r3, #1
 800d91e:	6163      	str	r3, [r4, #20]
 800d920:	b002      	add	sp, #8
 800d922:	bd70      	pop	{r4, r5, r6, pc}
 800d924:	ab01      	add	r3, sp, #4
 800d926:	466a      	mov	r2, sp
 800d928:	f7ff ffca 	bl	800d8c0 <__swhatbuf_r>
 800d92c:	9900      	ldr	r1, [sp, #0]
 800d92e:	4605      	mov	r5, r0
 800d930:	4630      	mov	r0, r6
 800d932:	f7ff fd09 	bl	800d348 <_malloc_r>
 800d936:	b948      	cbnz	r0, 800d94c <__smakebuf_r+0x44>
 800d938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d93c:	059a      	lsls	r2, r3, #22
 800d93e:	d4ef      	bmi.n	800d920 <__smakebuf_r+0x18>
 800d940:	f023 0303 	bic.w	r3, r3, #3
 800d944:	f043 0302 	orr.w	r3, r3, #2
 800d948:	81a3      	strh	r3, [r4, #12]
 800d94a:	e7e3      	b.n	800d914 <__smakebuf_r+0xc>
 800d94c:	4b0d      	ldr	r3, [pc, #52]	; (800d984 <__smakebuf_r+0x7c>)
 800d94e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	6020      	str	r0, [r4, #0]
 800d954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d958:	81a3      	strh	r3, [r4, #12]
 800d95a:	9b00      	ldr	r3, [sp, #0]
 800d95c:	6163      	str	r3, [r4, #20]
 800d95e:	9b01      	ldr	r3, [sp, #4]
 800d960:	6120      	str	r0, [r4, #16]
 800d962:	b15b      	cbz	r3, 800d97c <__smakebuf_r+0x74>
 800d964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d968:	4630      	mov	r0, r6
 800d96a:	f000 fb4f 	bl	800e00c <_isatty_r>
 800d96e:	b128      	cbz	r0, 800d97c <__smakebuf_r+0x74>
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	f043 0301 	orr.w	r3, r3, #1
 800d97a:	81a3      	strh	r3, [r4, #12]
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	431d      	orrs	r5, r3
 800d980:	81a5      	strh	r5, [r4, #12]
 800d982:	e7cd      	b.n	800d920 <__smakebuf_r+0x18>
 800d984:	0800d775 	.word	0x0800d775

0800d988 <__malloc_lock>:
 800d988:	4770      	bx	lr

0800d98a <__malloc_unlock>:
 800d98a:	4770      	bx	lr

0800d98c <__sfputc_r>:
 800d98c:	6893      	ldr	r3, [r2, #8]
 800d98e:	3b01      	subs	r3, #1
 800d990:	2b00      	cmp	r3, #0
 800d992:	b410      	push	{r4}
 800d994:	6093      	str	r3, [r2, #8]
 800d996:	da08      	bge.n	800d9aa <__sfputc_r+0x1e>
 800d998:	6994      	ldr	r4, [r2, #24]
 800d99a:	42a3      	cmp	r3, r4
 800d99c:	db01      	blt.n	800d9a2 <__sfputc_r+0x16>
 800d99e:	290a      	cmp	r1, #10
 800d9a0:	d103      	bne.n	800d9aa <__sfputc_r+0x1e>
 800d9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a6:	f7ff bd51 	b.w	800d44c <__swbuf_r>
 800d9aa:	6813      	ldr	r3, [r2, #0]
 800d9ac:	1c58      	adds	r0, r3, #1
 800d9ae:	6010      	str	r0, [r2, #0]
 800d9b0:	7019      	strb	r1, [r3, #0]
 800d9b2:	4608      	mov	r0, r1
 800d9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9b8:	4770      	bx	lr

0800d9ba <__sfputs_r>:
 800d9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9bc:	4606      	mov	r6, r0
 800d9be:	460f      	mov	r7, r1
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	18d5      	adds	r5, r2, r3
 800d9c4:	42ac      	cmp	r4, r5
 800d9c6:	d101      	bne.n	800d9cc <__sfputs_r+0x12>
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	e007      	b.n	800d9dc <__sfputs_r+0x22>
 800d9cc:	463a      	mov	r2, r7
 800d9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	f7ff ffda 	bl	800d98c <__sfputc_r>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d1f3      	bne.n	800d9c4 <__sfputs_r+0xa>
 800d9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9e0 <_vfiprintf_r>:
 800d9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	b09d      	sub	sp, #116	; 0x74
 800d9e8:	4617      	mov	r7, r2
 800d9ea:	461d      	mov	r5, r3
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	b118      	cbz	r0, 800d9f8 <_vfiprintf_r+0x18>
 800d9f0:	6983      	ldr	r3, [r0, #24]
 800d9f2:	b90b      	cbnz	r3, 800d9f8 <_vfiprintf_r+0x18>
 800d9f4:	f7ff feda 	bl	800d7ac <__sinit>
 800d9f8:	4b7c      	ldr	r3, [pc, #496]	; (800dbec <_vfiprintf_r+0x20c>)
 800d9fa:	429c      	cmp	r4, r3
 800d9fc:	d158      	bne.n	800dab0 <_vfiprintf_r+0xd0>
 800d9fe:	6874      	ldr	r4, [r6, #4]
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	0718      	lsls	r0, r3, #28
 800da04:	d55e      	bpl.n	800dac4 <_vfiprintf_r+0xe4>
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d05b      	beq.n	800dac4 <_vfiprintf_r+0xe4>
 800da0c:	2300      	movs	r3, #0
 800da0e:	9309      	str	r3, [sp, #36]	; 0x24
 800da10:	2320      	movs	r3, #32
 800da12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da16:	2330      	movs	r3, #48	; 0x30
 800da18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da1c:	9503      	str	r5, [sp, #12]
 800da1e:	f04f 0b01 	mov.w	fp, #1
 800da22:	46b8      	mov	r8, r7
 800da24:	4645      	mov	r5, r8
 800da26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da2a:	b10b      	cbz	r3, 800da30 <_vfiprintf_r+0x50>
 800da2c:	2b25      	cmp	r3, #37	; 0x25
 800da2e:	d154      	bne.n	800dada <_vfiprintf_r+0xfa>
 800da30:	ebb8 0a07 	subs.w	sl, r8, r7
 800da34:	d00b      	beq.n	800da4e <_vfiprintf_r+0x6e>
 800da36:	4653      	mov	r3, sl
 800da38:	463a      	mov	r2, r7
 800da3a:	4621      	mov	r1, r4
 800da3c:	4630      	mov	r0, r6
 800da3e:	f7ff ffbc 	bl	800d9ba <__sfputs_r>
 800da42:	3001      	adds	r0, #1
 800da44:	f000 80c2 	beq.w	800dbcc <_vfiprintf_r+0x1ec>
 800da48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4a:	4453      	add	r3, sl
 800da4c:	9309      	str	r3, [sp, #36]	; 0x24
 800da4e:	f898 3000 	ldrb.w	r3, [r8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 80ba 	beq.w	800dbcc <_vfiprintf_r+0x1ec>
 800da58:	2300      	movs	r3, #0
 800da5a:	f04f 32ff 	mov.w	r2, #4294967295
 800da5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da62:	9304      	str	r3, [sp, #16]
 800da64:	9307      	str	r3, [sp, #28]
 800da66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da6a:	931a      	str	r3, [sp, #104]	; 0x68
 800da6c:	46a8      	mov	r8, r5
 800da6e:	2205      	movs	r2, #5
 800da70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800da74:	485e      	ldr	r0, [pc, #376]	; (800dbf0 <_vfiprintf_r+0x210>)
 800da76:	f7f2 fbab 	bl	80001d0 <memchr>
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	bb78      	cbnz	r0, 800dade <_vfiprintf_r+0xfe>
 800da7e:	06d9      	lsls	r1, r3, #27
 800da80:	bf44      	itt	mi
 800da82:	2220      	movmi	r2, #32
 800da84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da88:	071a      	lsls	r2, r3, #28
 800da8a:	bf44      	itt	mi
 800da8c:	222b      	movmi	r2, #43	; 0x2b
 800da8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800da92:	782a      	ldrb	r2, [r5, #0]
 800da94:	2a2a      	cmp	r2, #42	; 0x2a
 800da96:	d02a      	beq.n	800daee <_vfiprintf_r+0x10e>
 800da98:	9a07      	ldr	r2, [sp, #28]
 800da9a:	46a8      	mov	r8, r5
 800da9c:	2000      	movs	r0, #0
 800da9e:	250a      	movs	r5, #10
 800daa0:	4641      	mov	r1, r8
 800daa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daa6:	3b30      	subs	r3, #48	; 0x30
 800daa8:	2b09      	cmp	r3, #9
 800daaa:	d969      	bls.n	800db80 <_vfiprintf_r+0x1a0>
 800daac:	b360      	cbz	r0, 800db08 <_vfiprintf_r+0x128>
 800daae:	e024      	b.n	800dafa <_vfiprintf_r+0x11a>
 800dab0:	4b50      	ldr	r3, [pc, #320]	; (800dbf4 <_vfiprintf_r+0x214>)
 800dab2:	429c      	cmp	r4, r3
 800dab4:	d101      	bne.n	800daba <_vfiprintf_r+0xda>
 800dab6:	68b4      	ldr	r4, [r6, #8]
 800dab8:	e7a2      	b.n	800da00 <_vfiprintf_r+0x20>
 800daba:	4b4f      	ldr	r3, [pc, #316]	; (800dbf8 <_vfiprintf_r+0x218>)
 800dabc:	429c      	cmp	r4, r3
 800dabe:	bf08      	it	eq
 800dac0:	68f4      	ldreq	r4, [r6, #12]
 800dac2:	e79d      	b.n	800da00 <_vfiprintf_r+0x20>
 800dac4:	4621      	mov	r1, r4
 800dac6:	4630      	mov	r0, r6
 800dac8:	f7ff fd12 	bl	800d4f0 <__swsetup_r>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d09d      	beq.n	800da0c <_vfiprintf_r+0x2c>
 800dad0:	f04f 30ff 	mov.w	r0, #4294967295
 800dad4:	b01d      	add	sp, #116	; 0x74
 800dad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dada:	46a8      	mov	r8, r5
 800dadc:	e7a2      	b.n	800da24 <_vfiprintf_r+0x44>
 800dade:	4a44      	ldr	r2, [pc, #272]	; (800dbf0 <_vfiprintf_r+0x210>)
 800dae0:	1a80      	subs	r0, r0, r2
 800dae2:	fa0b f000 	lsl.w	r0, fp, r0
 800dae6:	4318      	orrs	r0, r3
 800dae8:	9004      	str	r0, [sp, #16]
 800daea:	4645      	mov	r5, r8
 800daec:	e7be      	b.n	800da6c <_vfiprintf_r+0x8c>
 800daee:	9a03      	ldr	r2, [sp, #12]
 800daf0:	1d11      	adds	r1, r2, #4
 800daf2:	6812      	ldr	r2, [r2, #0]
 800daf4:	9103      	str	r1, [sp, #12]
 800daf6:	2a00      	cmp	r2, #0
 800daf8:	db01      	blt.n	800dafe <_vfiprintf_r+0x11e>
 800dafa:	9207      	str	r2, [sp, #28]
 800dafc:	e004      	b.n	800db08 <_vfiprintf_r+0x128>
 800dafe:	4252      	negs	r2, r2
 800db00:	f043 0302 	orr.w	r3, r3, #2
 800db04:	9207      	str	r2, [sp, #28]
 800db06:	9304      	str	r3, [sp, #16]
 800db08:	f898 3000 	ldrb.w	r3, [r8]
 800db0c:	2b2e      	cmp	r3, #46	; 0x2e
 800db0e:	d10e      	bne.n	800db2e <_vfiprintf_r+0x14e>
 800db10:	f898 3001 	ldrb.w	r3, [r8, #1]
 800db14:	2b2a      	cmp	r3, #42	; 0x2a
 800db16:	d138      	bne.n	800db8a <_vfiprintf_r+0x1aa>
 800db18:	9b03      	ldr	r3, [sp, #12]
 800db1a:	1d1a      	adds	r2, r3, #4
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	9203      	str	r2, [sp, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	bfb8      	it	lt
 800db24:	f04f 33ff 	movlt.w	r3, #4294967295
 800db28:	f108 0802 	add.w	r8, r8, #2
 800db2c:	9305      	str	r3, [sp, #20]
 800db2e:	4d33      	ldr	r5, [pc, #204]	; (800dbfc <_vfiprintf_r+0x21c>)
 800db30:	f898 1000 	ldrb.w	r1, [r8]
 800db34:	2203      	movs	r2, #3
 800db36:	4628      	mov	r0, r5
 800db38:	f7f2 fb4a 	bl	80001d0 <memchr>
 800db3c:	b140      	cbz	r0, 800db50 <_vfiprintf_r+0x170>
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	1b40      	subs	r0, r0, r5
 800db42:	fa03 f000 	lsl.w	r0, r3, r0
 800db46:	9b04      	ldr	r3, [sp, #16]
 800db48:	4303      	orrs	r3, r0
 800db4a:	f108 0801 	add.w	r8, r8, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	f898 1000 	ldrb.w	r1, [r8]
 800db54:	482a      	ldr	r0, [pc, #168]	; (800dc00 <_vfiprintf_r+0x220>)
 800db56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db5a:	2206      	movs	r2, #6
 800db5c:	f108 0701 	add.w	r7, r8, #1
 800db60:	f7f2 fb36 	bl	80001d0 <memchr>
 800db64:	2800      	cmp	r0, #0
 800db66:	d037      	beq.n	800dbd8 <_vfiprintf_r+0x1f8>
 800db68:	4b26      	ldr	r3, [pc, #152]	; (800dc04 <_vfiprintf_r+0x224>)
 800db6a:	bb1b      	cbnz	r3, 800dbb4 <_vfiprintf_r+0x1d4>
 800db6c:	9b03      	ldr	r3, [sp, #12]
 800db6e:	3307      	adds	r3, #7
 800db70:	f023 0307 	bic.w	r3, r3, #7
 800db74:	3308      	adds	r3, #8
 800db76:	9303      	str	r3, [sp, #12]
 800db78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7a:	444b      	add	r3, r9
 800db7c:	9309      	str	r3, [sp, #36]	; 0x24
 800db7e:	e750      	b.n	800da22 <_vfiprintf_r+0x42>
 800db80:	fb05 3202 	mla	r2, r5, r2, r3
 800db84:	2001      	movs	r0, #1
 800db86:	4688      	mov	r8, r1
 800db88:	e78a      	b.n	800daa0 <_vfiprintf_r+0xc0>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f108 0801 	add.w	r8, r8, #1
 800db90:	9305      	str	r3, [sp, #20]
 800db92:	4619      	mov	r1, r3
 800db94:	250a      	movs	r5, #10
 800db96:	4640      	mov	r0, r8
 800db98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db9c:	3a30      	subs	r2, #48	; 0x30
 800db9e:	2a09      	cmp	r2, #9
 800dba0:	d903      	bls.n	800dbaa <_vfiprintf_r+0x1ca>
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0c3      	beq.n	800db2e <_vfiprintf_r+0x14e>
 800dba6:	9105      	str	r1, [sp, #20]
 800dba8:	e7c1      	b.n	800db2e <_vfiprintf_r+0x14e>
 800dbaa:	fb05 2101 	mla	r1, r5, r1, r2
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	e7f0      	b.n	800db96 <_vfiprintf_r+0x1b6>
 800dbb4:	ab03      	add	r3, sp, #12
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4622      	mov	r2, r4
 800dbba:	4b13      	ldr	r3, [pc, #76]	; (800dc08 <_vfiprintf_r+0x228>)
 800dbbc:	a904      	add	r1, sp, #16
 800dbbe:	4630      	mov	r0, r6
 800dbc0:	f3af 8000 	nop.w
 800dbc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dbc8:	4681      	mov	r9, r0
 800dbca:	d1d5      	bne.n	800db78 <_vfiprintf_r+0x198>
 800dbcc:	89a3      	ldrh	r3, [r4, #12]
 800dbce:	065b      	lsls	r3, r3, #25
 800dbd0:	f53f af7e 	bmi.w	800dad0 <_vfiprintf_r+0xf0>
 800dbd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd6:	e77d      	b.n	800dad4 <_vfiprintf_r+0xf4>
 800dbd8:	ab03      	add	r3, sp, #12
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4b0a      	ldr	r3, [pc, #40]	; (800dc08 <_vfiprintf_r+0x228>)
 800dbe0:	a904      	add	r1, sp, #16
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f000 f888 	bl	800dcf8 <_printf_i>
 800dbe8:	e7ec      	b.n	800dbc4 <_vfiprintf_r+0x1e4>
 800dbea:	bf00      	nop
 800dbec:	0800e11c 	.word	0x0800e11c
 800dbf0:	0800e15c 	.word	0x0800e15c
 800dbf4:	0800e13c 	.word	0x0800e13c
 800dbf8:	0800e0fc 	.word	0x0800e0fc
 800dbfc:	0800e162 	.word	0x0800e162
 800dc00:	0800e166 	.word	0x0800e166
 800dc04:	00000000 	.word	0x00000000
 800dc08:	0800d9bb 	.word	0x0800d9bb

0800dc0c <_printf_common>:
 800dc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc10:	4691      	mov	r9, r2
 800dc12:	461f      	mov	r7, r3
 800dc14:	688a      	ldr	r2, [r1, #8]
 800dc16:	690b      	ldr	r3, [r1, #16]
 800dc18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	bfb8      	it	lt
 800dc20:	4613      	movlt	r3, r2
 800dc22:	f8c9 3000 	str.w	r3, [r9]
 800dc26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	460c      	mov	r4, r1
 800dc2e:	b112      	cbz	r2, 800dc36 <_printf_common+0x2a>
 800dc30:	3301      	adds	r3, #1
 800dc32:	f8c9 3000 	str.w	r3, [r9]
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	0699      	lsls	r1, r3, #26
 800dc3a:	bf42      	ittt	mi
 800dc3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dc40:	3302      	addmi	r3, #2
 800dc42:	f8c9 3000 	strmi.w	r3, [r9]
 800dc46:	6825      	ldr	r5, [r4, #0]
 800dc48:	f015 0506 	ands.w	r5, r5, #6
 800dc4c:	d107      	bne.n	800dc5e <_printf_common+0x52>
 800dc4e:	f104 0a19 	add.w	sl, r4, #25
 800dc52:	68e3      	ldr	r3, [r4, #12]
 800dc54:	f8d9 2000 	ldr.w	r2, [r9]
 800dc58:	1a9b      	subs	r3, r3, r2
 800dc5a:	42ab      	cmp	r3, r5
 800dc5c:	dc28      	bgt.n	800dcb0 <_printf_common+0xa4>
 800dc5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dc62:	6822      	ldr	r2, [r4, #0]
 800dc64:	3300      	adds	r3, #0
 800dc66:	bf18      	it	ne
 800dc68:	2301      	movne	r3, #1
 800dc6a:	0692      	lsls	r2, r2, #26
 800dc6c:	d42d      	bmi.n	800dcca <_printf_common+0xbe>
 800dc6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc72:	4639      	mov	r1, r7
 800dc74:	4630      	mov	r0, r6
 800dc76:	47c0      	blx	r8
 800dc78:	3001      	adds	r0, #1
 800dc7a:	d020      	beq.n	800dcbe <_printf_common+0xb2>
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	68e5      	ldr	r5, [r4, #12]
 800dc80:	f8d9 2000 	ldr.w	r2, [r9]
 800dc84:	f003 0306 	and.w	r3, r3, #6
 800dc88:	2b04      	cmp	r3, #4
 800dc8a:	bf08      	it	eq
 800dc8c:	1aad      	subeq	r5, r5, r2
 800dc8e:	68a3      	ldr	r3, [r4, #8]
 800dc90:	6922      	ldr	r2, [r4, #16]
 800dc92:	bf0c      	ite	eq
 800dc94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc98:	2500      	movne	r5, #0
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	bfc4      	itt	gt
 800dc9e:	1a9b      	subgt	r3, r3, r2
 800dca0:	18ed      	addgt	r5, r5, r3
 800dca2:	f04f 0900 	mov.w	r9, #0
 800dca6:	341a      	adds	r4, #26
 800dca8:	454d      	cmp	r5, r9
 800dcaa:	d11a      	bne.n	800dce2 <_printf_common+0xd6>
 800dcac:	2000      	movs	r0, #0
 800dcae:	e008      	b.n	800dcc2 <_printf_common+0xb6>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	4652      	mov	r2, sl
 800dcb4:	4639      	mov	r1, r7
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	47c0      	blx	r8
 800dcba:	3001      	adds	r0, #1
 800dcbc:	d103      	bne.n	800dcc6 <_printf_common+0xba>
 800dcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc6:	3501      	adds	r5, #1
 800dcc8:	e7c3      	b.n	800dc52 <_printf_common+0x46>
 800dcca:	18e1      	adds	r1, r4, r3
 800dccc:	1c5a      	adds	r2, r3, #1
 800dcce:	2030      	movs	r0, #48	; 0x30
 800dcd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcd4:	4422      	add	r2, r4
 800dcd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcde:	3302      	adds	r3, #2
 800dce0:	e7c5      	b.n	800dc6e <_printf_common+0x62>
 800dce2:	2301      	movs	r3, #1
 800dce4:	4622      	mov	r2, r4
 800dce6:	4639      	mov	r1, r7
 800dce8:	4630      	mov	r0, r6
 800dcea:	47c0      	blx	r8
 800dcec:	3001      	adds	r0, #1
 800dcee:	d0e6      	beq.n	800dcbe <_printf_common+0xb2>
 800dcf0:	f109 0901 	add.w	r9, r9, #1
 800dcf4:	e7d8      	b.n	800dca8 <_printf_common+0x9c>
	...

0800dcf8 <_printf_i>:
 800dcf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dd00:	460c      	mov	r4, r1
 800dd02:	7e09      	ldrb	r1, [r1, #24]
 800dd04:	b085      	sub	sp, #20
 800dd06:	296e      	cmp	r1, #110	; 0x6e
 800dd08:	4617      	mov	r7, r2
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	4698      	mov	r8, r3
 800dd0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd10:	f000 80b3 	beq.w	800de7a <_printf_i+0x182>
 800dd14:	d822      	bhi.n	800dd5c <_printf_i+0x64>
 800dd16:	2963      	cmp	r1, #99	; 0x63
 800dd18:	d036      	beq.n	800dd88 <_printf_i+0x90>
 800dd1a:	d80a      	bhi.n	800dd32 <_printf_i+0x3a>
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	f000 80b9 	beq.w	800de94 <_printf_i+0x19c>
 800dd22:	2958      	cmp	r1, #88	; 0x58
 800dd24:	f000 8083 	beq.w	800de2e <_printf_i+0x136>
 800dd28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dd30:	e032      	b.n	800dd98 <_printf_i+0xa0>
 800dd32:	2964      	cmp	r1, #100	; 0x64
 800dd34:	d001      	beq.n	800dd3a <_printf_i+0x42>
 800dd36:	2969      	cmp	r1, #105	; 0x69
 800dd38:	d1f6      	bne.n	800dd28 <_printf_i+0x30>
 800dd3a:	6820      	ldr	r0, [r4, #0]
 800dd3c:	6813      	ldr	r3, [r2, #0]
 800dd3e:	0605      	lsls	r5, r0, #24
 800dd40:	f103 0104 	add.w	r1, r3, #4
 800dd44:	d52a      	bpl.n	800dd9c <_printf_i+0xa4>
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6011      	str	r1, [r2, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	da03      	bge.n	800dd56 <_printf_i+0x5e>
 800dd4e:	222d      	movs	r2, #45	; 0x2d
 800dd50:	425b      	negs	r3, r3
 800dd52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dd56:	486f      	ldr	r0, [pc, #444]	; (800df14 <_printf_i+0x21c>)
 800dd58:	220a      	movs	r2, #10
 800dd5a:	e039      	b.n	800ddd0 <_printf_i+0xd8>
 800dd5c:	2973      	cmp	r1, #115	; 0x73
 800dd5e:	f000 809d 	beq.w	800de9c <_printf_i+0x1a4>
 800dd62:	d808      	bhi.n	800dd76 <_printf_i+0x7e>
 800dd64:	296f      	cmp	r1, #111	; 0x6f
 800dd66:	d020      	beq.n	800ddaa <_printf_i+0xb2>
 800dd68:	2970      	cmp	r1, #112	; 0x70
 800dd6a:	d1dd      	bne.n	800dd28 <_printf_i+0x30>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	f043 0320 	orr.w	r3, r3, #32
 800dd72:	6023      	str	r3, [r4, #0]
 800dd74:	e003      	b.n	800dd7e <_printf_i+0x86>
 800dd76:	2975      	cmp	r1, #117	; 0x75
 800dd78:	d017      	beq.n	800ddaa <_printf_i+0xb2>
 800dd7a:	2978      	cmp	r1, #120	; 0x78
 800dd7c:	d1d4      	bne.n	800dd28 <_printf_i+0x30>
 800dd7e:	2378      	movs	r3, #120	; 0x78
 800dd80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd84:	4864      	ldr	r0, [pc, #400]	; (800df18 <_printf_i+0x220>)
 800dd86:	e055      	b.n	800de34 <_printf_i+0x13c>
 800dd88:	6813      	ldr	r3, [r2, #0]
 800dd8a:	1d19      	adds	r1, r3, #4
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6011      	str	r1, [r2, #0]
 800dd90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e08c      	b.n	800deb6 <_printf_i+0x1be>
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6011      	str	r1, [r2, #0]
 800dda0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dda4:	bf18      	it	ne
 800dda6:	b21b      	sxthne	r3, r3
 800dda8:	e7cf      	b.n	800dd4a <_printf_i+0x52>
 800ddaa:	6813      	ldr	r3, [r2, #0]
 800ddac:	6825      	ldr	r5, [r4, #0]
 800ddae:	1d18      	adds	r0, r3, #4
 800ddb0:	6010      	str	r0, [r2, #0]
 800ddb2:	0628      	lsls	r0, r5, #24
 800ddb4:	d501      	bpl.n	800ddba <_printf_i+0xc2>
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	e002      	b.n	800ddc0 <_printf_i+0xc8>
 800ddba:	0668      	lsls	r0, r5, #25
 800ddbc:	d5fb      	bpl.n	800ddb6 <_printf_i+0xbe>
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	4854      	ldr	r0, [pc, #336]	; (800df14 <_printf_i+0x21c>)
 800ddc2:	296f      	cmp	r1, #111	; 0x6f
 800ddc4:	bf14      	ite	ne
 800ddc6:	220a      	movne	r2, #10
 800ddc8:	2208      	moveq	r2, #8
 800ddca:	2100      	movs	r1, #0
 800ddcc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddd0:	6865      	ldr	r5, [r4, #4]
 800ddd2:	60a5      	str	r5, [r4, #8]
 800ddd4:	2d00      	cmp	r5, #0
 800ddd6:	f2c0 8095 	blt.w	800df04 <_printf_i+0x20c>
 800ddda:	6821      	ldr	r1, [r4, #0]
 800dddc:	f021 0104 	bic.w	r1, r1, #4
 800dde0:	6021      	str	r1, [r4, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d13d      	bne.n	800de62 <_printf_i+0x16a>
 800dde6:	2d00      	cmp	r5, #0
 800dde8:	f040 808e 	bne.w	800df08 <_printf_i+0x210>
 800ddec:	4665      	mov	r5, ip
 800ddee:	2a08      	cmp	r2, #8
 800ddf0:	d10b      	bne.n	800de0a <_printf_i+0x112>
 800ddf2:	6823      	ldr	r3, [r4, #0]
 800ddf4:	07db      	lsls	r3, r3, #31
 800ddf6:	d508      	bpl.n	800de0a <_printf_i+0x112>
 800ddf8:	6923      	ldr	r3, [r4, #16]
 800ddfa:	6862      	ldr	r2, [r4, #4]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	bfde      	ittt	le
 800de00:	2330      	movle	r3, #48	; 0x30
 800de02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de0a:	ebac 0305 	sub.w	r3, ip, r5
 800de0e:	6123      	str	r3, [r4, #16]
 800de10:	f8cd 8000 	str.w	r8, [sp]
 800de14:	463b      	mov	r3, r7
 800de16:	aa03      	add	r2, sp, #12
 800de18:	4621      	mov	r1, r4
 800de1a:	4630      	mov	r0, r6
 800de1c:	f7ff fef6 	bl	800dc0c <_printf_common>
 800de20:	3001      	adds	r0, #1
 800de22:	d14d      	bne.n	800dec0 <_printf_i+0x1c8>
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	b005      	add	sp, #20
 800de2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2e:	4839      	ldr	r0, [pc, #228]	; (800df14 <_printf_i+0x21c>)
 800de30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800de34:	6813      	ldr	r3, [r2, #0]
 800de36:	6821      	ldr	r1, [r4, #0]
 800de38:	1d1d      	adds	r5, r3, #4
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6015      	str	r5, [r2, #0]
 800de3e:	060a      	lsls	r2, r1, #24
 800de40:	d50b      	bpl.n	800de5a <_printf_i+0x162>
 800de42:	07ca      	lsls	r2, r1, #31
 800de44:	bf44      	itt	mi
 800de46:	f041 0120 	orrmi.w	r1, r1, #32
 800de4a:	6021      	strmi	r1, [r4, #0]
 800de4c:	b91b      	cbnz	r3, 800de56 <_printf_i+0x15e>
 800de4e:	6822      	ldr	r2, [r4, #0]
 800de50:	f022 0220 	bic.w	r2, r2, #32
 800de54:	6022      	str	r2, [r4, #0]
 800de56:	2210      	movs	r2, #16
 800de58:	e7b7      	b.n	800ddca <_printf_i+0xd2>
 800de5a:	064d      	lsls	r5, r1, #25
 800de5c:	bf48      	it	mi
 800de5e:	b29b      	uxthmi	r3, r3
 800de60:	e7ef      	b.n	800de42 <_printf_i+0x14a>
 800de62:	4665      	mov	r5, ip
 800de64:	fbb3 f1f2 	udiv	r1, r3, r2
 800de68:	fb02 3311 	mls	r3, r2, r1, r3
 800de6c:	5cc3      	ldrb	r3, [r0, r3]
 800de6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800de72:	460b      	mov	r3, r1
 800de74:	2900      	cmp	r1, #0
 800de76:	d1f5      	bne.n	800de64 <_printf_i+0x16c>
 800de78:	e7b9      	b.n	800ddee <_printf_i+0xf6>
 800de7a:	6813      	ldr	r3, [r2, #0]
 800de7c:	6825      	ldr	r5, [r4, #0]
 800de7e:	6961      	ldr	r1, [r4, #20]
 800de80:	1d18      	adds	r0, r3, #4
 800de82:	6010      	str	r0, [r2, #0]
 800de84:	0628      	lsls	r0, r5, #24
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	d501      	bpl.n	800de8e <_printf_i+0x196>
 800de8a:	6019      	str	r1, [r3, #0]
 800de8c:	e002      	b.n	800de94 <_printf_i+0x19c>
 800de8e:	066a      	lsls	r2, r5, #25
 800de90:	d5fb      	bpl.n	800de8a <_printf_i+0x192>
 800de92:	8019      	strh	r1, [r3, #0]
 800de94:	2300      	movs	r3, #0
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	4665      	mov	r5, ip
 800de9a:	e7b9      	b.n	800de10 <_printf_i+0x118>
 800de9c:	6813      	ldr	r3, [r2, #0]
 800de9e:	1d19      	adds	r1, r3, #4
 800dea0:	6011      	str	r1, [r2, #0]
 800dea2:	681d      	ldr	r5, [r3, #0]
 800dea4:	6862      	ldr	r2, [r4, #4]
 800dea6:	2100      	movs	r1, #0
 800dea8:	4628      	mov	r0, r5
 800deaa:	f7f2 f991 	bl	80001d0 <memchr>
 800deae:	b108      	cbz	r0, 800deb4 <_printf_i+0x1bc>
 800deb0:	1b40      	subs	r0, r0, r5
 800deb2:	6060      	str	r0, [r4, #4]
 800deb4:	6863      	ldr	r3, [r4, #4]
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	2300      	movs	r3, #0
 800deba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800debe:	e7a7      	b.n	800de10 <_printf_i+0x118>
 800dec0:	6923      	ldr	r3, [r4, #16]
 800dec2:	462a      	mov	r2, r5
 800dec4:	4639      	mov	r1, r7
 800dec6:	4630      	mov	r0, r6
 800dec8:	47c0      	blx	r8
 800deca:	3001      	adds	r0, #1
 800decc:	d0aa      	beq.n	800de24 <_printf_i+0x12c>
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	079b      	lsls	r3, r3, #30
 800ded2:	d413      	bmi.n	800defc <_printf_i+0x204>
 800ded4:	68e0      	ldr	r0, [r4, #12]
 800ded6:	9b03      	ldr	r3, [sp, #12]
 800ded8:	4298      	cmp	r0, r3
 800deda:	bfb8      	it	lt
 800dedc:	4618      	movlt	r0, r3
 800dede:	e7a3      	b.n	800de28 <_printf_i+0x130>
 800dee0:	2301      	movs	r3, #1
 800dee2:	464a      	mov	r2, r9
 800dee4:	4639      	mov	r1, r7
 800dee6:	4630      	mov	r0, r6
 800dee8:	47c0      	blx	r8
 800deea:	3001      	adds	r0, #1
 800deec:	d09a      	beq.n	800de24 <_printf_i+0x12c>
 800deee:	3501      	adds	r5, #1
 800def0:	68e3      	ldr	r3, [r4, #12]
 800def2:	9a03      	ldr	r2, [sp, #12]
 800def4:	1a9b      	subs	r3, r3, r2
 800def6:	42ab      	cmp	r3, r5
 800def8:	dcf2      	bgt.n	800dee0 <_printf_i+0x1e8>
 800defa:	e7eb      	b.n	800ded4 <_printf_i+0x1dc>
 800defc:	2500      	movs	r5, #0
 800defe:	f104 0919 	add.w	r9, r4, #25
 800df02:	e7f5      	b.n	800def0 <_printf_i+0x1f8>
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1ac      	bne.n	800de62 <_printf_i+0x16a>
 800df08:	7803      	ldrb	r3, [r0, #0]
 800df0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800df0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df12:	e76c      	b.n	800ddee <_printf_i+0xf6>
 800df14:	0800e16d 	.word	0x0800e16d
 800df18:	0800e17e 	.word	0x0800e17e

0800df1c <__sread>:
 800df1c:	b510      	push	{r4, lr}
 800df1e:	460c      	mov	r4, r1
 800df20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df24:	f000 f894 	bl	800e050 <_read_r>
 800df28:	2800      	cmp	r0, #0
 800df2a:	bfab      	itete	ge
 800df2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df2e:	89a3      	ldrhlt	r3, [r4, #12]
 800df30:	181b      	addge	r3, r3, r0
 800df32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df36:	bfac      	ite	ge
 800df38:	6563      	strge	r3, [r4, #84]	; 0x54
 800df3a:	81a3      	strhlt	r3, [r4, #12]
 800df3c:	bd10      	pop	{r4, pc}

0800df3e <__swrite>:
 800df3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df42:	461f      	mov	r7, r3
 800df44:	898b      	ldrh	r3, [r1, #12]
 800df46:	05db      	lsls	r3, r3, #23
 800df48:	4605      	mov	r5, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	4616      	mov	r6, r2
 800df4e:	d505      	bpl.n	800df5c <__swrite+0x1e>
 800df50:	2302      	movs	r3, #2
 800df52:	2200      	movs	r2, #0
 800df54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df58:	f000 f868 	bl	800e02c <_lseek_r>
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df66:	81a3      	strh	r3, [r4, #12]
 800df68:	4632      	mov	r2, r6
 800df6a:	463b      	mov	r3, r7
 800df6c:	4628      	mov	r0, r5
 800df6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df72:	f000 b817 	b.w	800dfa4 <_write_r>

0800df76 <__sseek>:
 800df76:	b510      	push	{r4, lr}
 800df78:	460c      	mov	r4, r1
 800df7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7e:	f000 f855 	bl	800e02c <_lseek_r>
 800df82:	1c43      	adds	r3, r0, #1
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	bf15      	itete	ne
 800df88:	6560      	strne	r0, [r4, #84]	; 0x54
 800df8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df92:	81a3      	strheq	r3, [r4, #12]
 800df94:	bf18      	it	ne
 800df96:	81a3      	strhne	r3, [r4, #12]
 800df98:	bd10      	pop	{r4, pc}

0800df9a <__sclose>:
 800df9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9e:	f000 b813 	b.w	800dfc8 <_close_r>
	...

0800dfa4 <_write_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4c07      	ldr	r4, [pc, #28]	; (800dfc4 <_write_r+0x20>)
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	4608      	mov	r0, r1
 800dfac:	4611      	mov	r1, r2
 800dfae:	2200      	movs	r2, #0
 800dfb0:	6022      	str	r2, [r4, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	f7f3 ffd7 	bl	8001f66 <_write>
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	d102      	bne.n	800dfc2 <_write_r+0x1e>
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	b103      	cbz	r3, 800dfc2 <_write_r+0x1e>
 800dfc0:	602b      	str	r3, [r5, #0]
 800dfc2:	bd38      	pop	{r3, r4, r5, pc}
 800dfc4:	20002f38 	.word	0x20002f38

0800dfc8 <_close_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4c06      	ldr	r4, [pc, #24]	; (800dfe4 <_close_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4605      	mov	r5, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	f7f3 ffe3 	bl	8001f9e <_close>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_close_r+0x1a>
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_close_r+0x1a>
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20002f38 	.word	0x20002f38

0800dfe8 <_fstat_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4c07      	ldr	r4, [pc, #28]	; (800e008 <_fstat_r+0x20>)
 800dfec:	2300      	movs	r3, #0
 800dfee:	4605      	mov	r5, r0
 800dff0:	4608      	mov	r0, r1
 800dff2:	4611      	mov	r1, r2
 800dff4:	6023      	str	r3, [r4, #0]
 800dff6:	f7f3 ffde 	bl	8001fb6 <_fstat>
 800dffa:	1c43      	adds	r3, r0, #1
 800dffc:	d102      	bne.n	800e004 <_fstat_r+0x1c>
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	b103      	cbz	r3, 800e004 <_fstat_r+0x1c>
 800e002:	602b      	str	r3, [r5, #0]
 800e004:	bd38      	pop	{r3, r4, r5, pc}
 800e006:	bf00      	nop
 800e008:	20002f38 	.word	0x20002f38

0800e00c <_isatty_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	4c06      	ldr	r4, [pc, #24]	; (800e028 <_isatty_r+0x1c>)
 800e010:	2300      	movs	r3, #0
 800e012:	4605      	mov	r5, r0
 800e014:	4608      	mov	r0, r1
 800e016:	6023      	str	r3, [r4, #0]
 800e018:	f7f3 ffdd 	bl	8001fd6 <_isatty>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	d102      	bne.n	800e026 <_isatty_r+0x1a>
 800e020:	6823      	ldr	r3, [r4, #0]
 800e022:	b103      	cbz	r3, 800e026 <_isatty_r+0x1a>
 800e024:	602b      	str	r3, [r5, #0]
 800e026:	bd38      	pop	{r3, r4, r5, pc}
 800e028:	20002f38 	.word	0x20002f38

0800e02c <_lseek_r>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4c07      	ldr	r4, [pc, #28]	; (800e04c <_lseek_r+0x20>)
 800e030:	4605      	mov	r5, r0
 800e032:	4608      	mov	r0, r1
 800e034:	4611      	mov	r1, r2
 800e036:	2200      	movs	r2, #0
 800e038:	6022      	str	r2, [r4, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	f7f3 ffd6 	bl	8001fec <_lseek>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_lseek_r+0x1e>
 800e044:	6823      	ldr	r3, [r4, #0]
 800e046:	b103      	cbz	r3, 800e04a <_lseek_r+0x1e>
 800e048:	602b      	str	r3, [r5, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	20002f38 	.word	0x20002f38

0800e050 <_read_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4c07      	ldr	r4, [pc, #28]	; (800e070 <_read_r+0x20>)
 800e054:	4605      	mov	r5, r0
 800e056:	4608      	mov	r0, r1
 800e058:	4611      	mov	r1, r2
 800e05a:	2200      	movs	r2, #0
 800e05c:	6022      	str	r2, [r4, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	f7f3 ff64 	bl	8001f2c <_read>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_read_r+0x1e>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_read_r+0x1e>
 800e06c:	602b      	str	r3, [r5, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20002f38 	.word	0x20002f38

0800e074 <_init>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	bf00      	nop
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr

0800e080 <_fini>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	bf00      	nop
 800e084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e086:	bc08      	pop	{r3}
 800e088:	469e      	mov	lr, r3
 800e08a:	4770      	bx	lr
